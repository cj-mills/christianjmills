<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Christian Mills</title>
<link>christianjmills.com/index.html</link>
<atom:link href="christianjmills.com/index.xml" rel="self" type="application/rss+xml"/>
<description>My personal blog</description>
<image>
<url>christianjmills.com/images/logo.png</url>
<title>Christian Mills</title>
<link>christianjmills.com/index.html</link>
<height>142</height>
<width>144</width>
</image>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Fri, 02 Dec 2022 08:00:00 GMT</lastBuildDate>
<item>
  <title>Train a Mask R-CNN Model on a Custom Dataset With IceVision</title>
  <link>christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Setup Conda Environment</li>
<li>Import Dependencies</li>
<li>Download the Dataset</li>
<li>Inspect the Dataset</li>
<li>Create Dataset Parser</li>
<li>Define DataLoader Objects</li>
<li>Finetune the Model</li>
<li>Inspect Raw Model Output</li>
<li>Export Model to ONNX</li>
<li>Verify ONNX Inference</li>
<li>Define Post-processing Steps</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a <a href="https://arxiv.org/abs/1703.06870">Mask R-CNN</a> model on a custom dataset using the <a href="https://airctic.com/0.11.0/">IceVision</a> library and export it to <a href="https://onnx.ai/">ONNX</a>.</li>
<li><a href="https://github.com/cj-mills/icevision-mask-rcnn-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>In this tutorial, we train a Mask R-CNN model on a custom dataset using the IceVision library, export it to ONNX, and perform inference with <a href="https://onnxruntime.ai/">ONNX Runtime</a>.</p>
<p>I plan to cover building a custom dataset in a future post. For now, we’ll use a dataset from an existing repository. The dataset contains annotated sample images of student ID cards.</p>
<ul>
<li><strong>Dataset Source:</strong> <a href="https://github.com/MbassiJaphet/pytorch-for-information-extraction">pytorch-for-information-extraction</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/student-id-sample-annotation.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Links for viewing the training code and running it on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a> are available below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kaggle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/icevision-mask-rcnn-tutorial/blob/main/notebooks/Icevision_Mask_RCNN_Student_ID.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/icevision-mask-rcnn-tutorial/blob/main/notebooks/Icevision_Mask_RCNN_Student_ID_Colab.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/icevision-mask-rcnn-tutorial/blob/main/notebooks/Icevision_Mask_RCNN_Student_ID_Kaggle.ipynb">Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setup-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="setup-conda-environment">Setup Conda Environment</h2>
<p>The IceVision library builds upon specific versions of libraries like <a href="https://docs.fast.ai/">fastai</a> and <a href="https://mmdetection.readthedocs.io/en/latest/">mmdetection</a>, and the cumulative dependency requirements mean it is best to use a dedicated <a href="https://docs.python.org/3/tutorial/venv.html">virtual environment</a>. Below are the steps to create a virtual environment using <a href="https://docs.conda.io/en/latest/">Conda</a>. Be sure to execute each command in the provided order.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> IceVision currently only supports Linux/macOS. Try using <a href="https://docs.microsoft.com/en-us/windows/wsl/install">WSL</a> (Windows Subsystem for Linux) if training locally on Windows.</p>
</blockquote>
<p><strong>Install CUDA Toolkit</strong></p>
<p>You might need to install the CUDA Toolkit on your system if you plan to run the training code locally. CUDA requires an Nvidia GPU. Version 11.1.0 of the toolkit is available at the link below. Both Google Colab and Kaggle Notebooks already have CUDA installed.</p>
<ul>
<li><a href="https://developer.nvidia.com/cuda-11.1.0-download-archive">CUDA Toolkit 11.1.0</a></li>
<li><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a></li>
</ul>
<p><strong>Conda environment setup steps</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">--name</span> icevision python==3.8</span>
<span id="cb1-2"><span class="ex" style="color: null;">conda</span> activate icevision</span>
<span id="cb1-3"><span class="ex" style="color: null;">pip</span> install torch==1.10.0+cu111 torchvision==0.11.1+cu111 <span class="at" style="color: #657422;">-f</span> https://download.pytorch.org/whl/torch_stable.html</span>
<span id="cb1-4"><span class="ex" style="color: null;">pip</span> install mmcv-full==1.3.17 <span class="at" style="color: #657422;">-f</span> https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html</span>
<span id="cb1-5"><span class="ex" style="color: null;">pip</span> install mmdet==2.17.0</span>
<span id="cb1-6"><span class="ex" style="color: null;">pip</span> install icevision==0.11.0</span>
<span id="cb1-7"><span class="ex" style="color: null;">pip</span> install icedata==0.5.1</span>
<span id="cb1-8"><span class="ex" style="color: null;">pip</span> install setuptools==59.5.0</span>
<span id="cb1-9"><span class="ex" style="color: null;">pip</span> install jupyter</span>
<span id="cb1-10"><span class="ex" style="color: null;">pip</span> install onnxruntime</span></code></pre></div>
<p>The <a href="https://pypi.org/project/icevision/"><code>icevision</code></a> package provides the functionality for data curation, data transforms, and training loops we’ll use to train the model. The <a href="https://airctic.github.io/icedata/"><code>icedata</code></a> package provides the functionality we’ll use to create a custom parser to read the dataset.</p>
<p><strong>Colab and Kaggle Setup Requirements</strong></p>
<p>When running the training code on Google Colab and Kaggle Notebooks, we need to uninstall several packages before installing IceVision and its dependencies to avoid conflicts. The platform-specific setup steps are at the top of the notebooks linked above.</p>
</section>
<section id="import-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="import-dependencies">Import Dependencies</h2>
<p>IceVision will download some additional resources the first time we import the library.</p>
<p><strong>Import IceVision library</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> icevision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p><strong>Import and configure Pandas</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb3-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="download-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-the-dataset">Download the Dataset</h2>
<p>The sample dataset is available on GitHub, so we only need to clone the repository.</p>
<p><strong>Clone dataset repository</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>git clone https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>MbassiJaphet<span class="op" style="color: #5E5E5E;">/</span>pytorch<span class="op" style="color: #5E5E5E;">-</span><span class="cf" style="color: #003B4F;">for</span><span class="op" style="color: #5E5E5E;">-</span>information<span class="op" style="color: #5E5E5E;">-</span>extraction.git</span></code></pre></div>
</section>
<section id="inspect-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-the-dataset">Inspect the Dataset</h2>
<p>We can inspect the dataset once it finishes downloading. The image and annotation files are in the <code>code/datasets/detection/student-id/</code> subfolder.</p>
<p><strong>Define path to dataset</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">data_dir <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'./pytorch-for-information-extraction/code/datasets/detection/student-id'</span>)</span>
<span id="cb5-2">dataset_name <span class="op" style="color: #5E5E5E;">=</span> data_dir.name</span></code></pre></div>
<p>Each image file has a corresponding JSON file that contains its annotation data.</p>
<p><strong>Inspect dataset contents</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pd.DataFrame(<span class="bu" style="color: null;">list</span>(data_dir.ls())).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.jpg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10002.jpg
</td>
</tr>
<tr>
<th>
3
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10002.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10003.jpg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get image file paths</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(data_dir)</span>
<span id="cb7-2"><span class="bu" style="color: null;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>150</code></pre>
<p><strong>Inspect one of the training images</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> PIL</span>
<span id="cb9-2">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(files[<span class="dv" style="color: #AD0000;">0</span>]).convert(<span class="st" style="color: #20794D;">'RGB'</span>)</span>
<span id="cb9-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;">{</span>img<span class="sc" style="color: #5E5E5E;">.</span>size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb9-4">img</span></code></pre></div>
<pre class="text"><code>    Image Dims: (480, 640)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_16_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create a dictionary that maps image names to file paths</strong></p>
<p>Let’s create a dictionary to quickly obtain full image file paths, given a file name. We’ll need this later</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">img_dict <span class="op" style="color: #5E5E5E;">=</span> {<span class="bu" style="color: null;">file</span>.name.split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>] : <span class="bu" style="color: null;">file</span> <span class="cf" style="color: #003B4F;">for</span> <span class="bu" style="color: null;">file</span> <span class="kw" style="color: #003B4F;">in</span> files}</span>
<span id="cb11-2">pd.DataFrame(<span class="bu" style="color: null;">list</span>(img_dict.items())[<span class="dv" style="color: #AD0000;">0</span>]).transpose()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
10001
</td>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.jpg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get list of annotation file paths</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb12-2"><span class="im" style="color: #00769E;">from</span> glob <span class="im" style="color: #00769E;">import</span> glob</span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">annotation_paths <span class="op" style="color: #5E5E5E;">=</span> glob(os.path.join(data_dir, <span class="st" style="color: #20794D;">"*.json"</span>))</span>
<span id="cb13-2">pd.DataFrame(annotation_paths).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10002.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10003.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10004.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10005.json
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Create annotation dataframe</strong></p>
<p>Next, we’ll read all the image annotations into a single Pandas DataFrame.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">cls_dataframes <span class="op" style="color: #5E5E5E;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;">for</span> f <span class="kw" style="color: #003B4F;">in</span> annotation_paths)</span>
<span id="cb14-2">annotation_df <span class="op" style="color: #5E5E5E;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb14-3">annotation_df[<span class="st" style="color: #20794D;">'index'</span>] <span class="op" style="color: #5E5E5E;">=</span> annotation_df.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> row: row[<span class="st" style="color: #20794D;">'imagePath'</span>].split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb14-4">annotation_df <span class="op" style="color: #5E5E5E;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;">'index'</span>)</span>
<span id="cb14-5">annotation_df <span class="op" style="color: #5E5E5E;">=</span> annotation_df.loc[<span class="bu" style="color: null;">list</span>(img_dict.keys())]</span>
<span id="cb14-6">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
lineColor
</th>
<th>
fillColor
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
10001
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[19.190476190476204, 244.76190476190476], [23.0, 233.33333333333331], [385.8571428571428, 132.38095238095238], [400.1428571428571, 135.23809523809524], [468.71428571428567, 353.3333333333333], [466.80952380952374, 362.85714285714283], [97.28571428571428, 478.0952380952381], [81.09523809523807, 474.2857142857143]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10001.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10002
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[21.095238095238102, 183.33333333333334], [231.41269841269843, 88.09523809523809], [450.46031746031747, 347.6190476190476], [475.06349206349205, 376.1904761904762], [478.2380952380952, 388.8888888888889], [301.25396825396825, 532.5396825396825], [271.0952380952381, 556.3492063492064], [255.22222222222223, 541.2698412698413], [242.52380952380952, 534.9206349206349], [25.85714285714286, 199.20634920634922]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10002.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10003
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[138.23809523809524, 71.42857142857143], [407.7619047619047, 31.428571428571427], [418.2380952380952, 39.047619047619044], [422.04761904761904, 539.047619047619], [407.7619047619047, 552.3809523809524], [112.52380952380952, 519.047619047619], [98.23809523809524, 505.71428571428567]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10003.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10004
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[119.20529801324503, 218.54304635761588], [440.3973509933775, 184.7682119205298], [445.0331125827814, 190.72847682119206], [391.3907284768212, 366.2251655629139], [384.7682119205298, 372.18543046357615], [250.33112582781456, 401.3245033112583], [82.11920529801324, 446.3576158940397], [76.82119205298014, 441.72185430463577], [49.66887417218544, 239.73509933774835], [107.28476821192052, 228.47682119205297]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10004.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10005
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[41.18840579710144, 218.8405797101449], [41.18840579710144, 209.42028985507244], [52.78260869565216, 201.44927536231882], [224.52173913043475, 142.75362318840578], [359.30434782608694, 89.85507246376811], [367.99999999999994, 92.02898550724638], [462.2028985507246, 275.3623188405797], [369.4492753623188, 348.5507246376811], [199.88405797101444, 472.463768115942], [191.91304347826082, 471.01449275362313]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10005.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Inspect annotation data for sample image</strong></p>
<p>We can retrieve the annotation data for a specific image file using its name.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">file_id <span class="op" style="color: #5E5E5E;">=</span> files[<span class="dv" style="color: #AD0000;">56</span>].name.split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb15-2">file_id</span></code></pre></div>
<pre class="text"><code>'10057'</code></pre>
<p>The image file names are the index values for the annotation DataFrame.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
10057
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
3.21.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[4.703296703296701, 186.8131868131868], [172.28571428571428, 91.20879120879121], [177.23076923076923, 89.56043956043956], [183.82417582417582, 92.85714285714285], [260.19780219780216, 161.53846153846152], [248.65934065934067, 173.07692307692307], [99.75824175824175, 273.6263736263736], [88.2197802197802, 280.7692307692308], [83.27472527472527, 280.7692307692308], [35.472527472527474, 225.82417582417582]], ‘shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[245.36263736263737, 134.06593406593407], [346.46153846153845, 100.0], [352.5054945054945, 101.64835164835165], [465.1428571428571, 248.9010989010989], [461.8461538461538, 252.1978021978022], [356.35164835164835, 300.5494505494505], [350.3076923076923, 297.8021978021978]], ‘shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[33.27472527472527, 489.010989010989], [159.64835164835165, 281.3186813186813], [166.7912087912088, 271.97802197802196], [172.28571428571428, 270.3296703296703], [297.010989010989, 330.2197802197802], [300.3076923076923, 335.16483516483515], [299.2087912087912, 340.65934065934067], [223.38461538461536, 506.5934065934066], [192.6153846153846, 571.4285714285714], [184.9230769230769, 574.1758241758241], [172.28571428571428, 569.2307692307692], [47.56043956043956, 501.0989010989011], [36.021978021978015, 496.15384615384613]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
lineColor
</th>
<td>
[0, 255, 0, 128]
</td>
</tr>
<tr>
<th>
fillColor
</th>
<td>
[255, 0, 0, 128]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
10057.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
640
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
480
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>The <code>shapes</code> entry contains the point coordinates to draw the image masks. We will also use this information to construct the associated bounding boxes. This particular entry has point coordinates for two image masks.</p>
<p><strong>Download font file</strong></p>
<p>We need a font file to annotate the images with class labels. We can download one from <a href="https://fonts.google.com/">Google Fonts</a>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">font_file <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> os.path.exists(font_file): </span>
<span id="cb18-3">    <span class="op" style="color: #5E5E5E;">!</span>wget https:<span class="op" style="color: #5E5E5E;">//</span>fonts.gstatic.com<span class="op" style="color: #5E5E5E;">/</span>s<span class="op" style="color: #5E5E5E;">/</span>roboto<span class="op" style="color: #5E5E5E;">/</span>v30<span class="op" style="color: #5E5E5E;">/</span>$font_file</span></code></pre></div>
<p><strong>Annotate sample image</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> ImageDraw</span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;">'RGB'</span>)</span>
<span id="cb20-2">width, height <span class="op" style="color: #5E5E5E;">=</span> img.size</span>
<span id="cb20-3">annotated_img <span class="op" style="color: #5E5E5E;">=</span> img.copy()</span>
<span id="cb20-4">mask_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.new(<span class="st" style="color: #20794D;">'L'</span>, img.size, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb20-5">draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb20-6">fnt_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb20-7">annotation <span class="op" style="color: #5E5E5E;">=</span> annotation_df.loc[file_id]</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;"># Iterate through annotations for sample image</span></span>
<span id="cb20-10"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(annotation[<span class="st" style="color: #20794D;">'shapes'</span>])):</span>
<span id="cb20-11">    </span>
<span id="cb20-12">    <span class="co" style="color: #5E5E5E;"># Extract mask polygon coords</span></span>
<span id="cb20-13">    points <span class="op" style="color: #5E5E5E;">=</span> np.array(annotation[<span class="st" style="color: #20794D;">'shapes'</span>][i][<span class="st" style="color: #20794D;">'points'</span>])</span>
<span id="cb20-14">    </span>
<span id="cb20-15">    <span class="co" style="color: #5E5E5E;"># Extract bounding box coords</span></span>
<span id="cb20-16">    x_min, y_min <span class="op" style="color: #5E5E5E;">=</span> points.<span class="bu" style="color: null;">min</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb20-17">    x_max, y_max <span class="op" style="color: #5E5E5E;">=</span> points.<span class="bu" style="color: null;">max</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb20-18">    </span>
<span id="cb20-19">    <span class="co" style="color: #5E5E5E;"># Draw bounding box on sample image</span></span>
<span id="cb20-20">    shape <span class="op" style="color: #5E5E5E;">=</span> (x_min, y_min, x_max, y_max)</span>
<span id="cb20-21">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb20-22"></span>
<span id="cb20-23">    <span class="co" style="color: #5E5E5E;"># Draw segmentation mask on sample image</span></span>
<span id="cb20-24">    xy <span class="op" style="color: #5E5E5E;">=</span> [(p[<span class="dv" style="color: #AD0000;">0</span>],p[<span class="dv" style="color: #AD0000;">1</span>]) <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> points]</span>
<span id="cb20-25">    ImageDraw.Draw(annotated_img, <span class="st" style="color: #20794D;">'RGBA'</span>).polygon(xy, fill<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">255</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">125</span>), outline <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"red"</span>)</span>
<span id="cb20-26">    </span>
<span id="cb20-27">    <span class="co" style="color: #5E5E5E;"># Draw segmentation mask on blank image</span></span>
<span id="cb20-28">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;">'L'</span>).polygon(xy, fill<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">255</span>))</span>
<span id="cb20-29">    </span>
<span id="cb20-30">    <span class="co" style="color: #5E5E5E;"># Draw object label on sample image</span></span>
<span id="cb20-31">    fnt <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageFont.truetype(font_file, fnt_size)</span>
<span id="cb20-32">    label <span class="op" style="color: #5E5E5E;">=</span> annotation[<span class="st" style="color: #20794D;">'shapes'</span>][i][<span class="st" style="color: #20794D;">'label'</span>]</span>
<span id="cb20-33">    draw.multiline_text((x_min, y_min<span class="op" style="color: #5E5E5E;">-</span>fnt_size<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>), <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>label<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, font<span class="op" style="color: #5E5E5E;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb20-34">    </span>
<span id="cb20-35"><span class="bu" style="color: null;">print</span>(annotated_img.size) </span>
<span id="cb20-36">annotated_img</span></code></pre></div>
<pre class="text"><code>    (480, 640)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_30_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Display segmentation mask</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">mask_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_32_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create a class map</strong></p>
<p>We need to provide IceVision with a class map that maps index values to unique class names.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">shapes_df <span class="op" style="color: #5E5E5E;">=</span> annotation_df[<span class="st" style="color: #20794D;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;">apply</span>(pd.Series)</span>
<span id="cb23-2">shapes_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
label
</th>
<th>
line_color
</th>
<th>
fill_color
</th>
<th>
points
</th>
<th>
shape_type
</th>
<th>
flags
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
10001
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[19.190476190476204, 244.76190476190476], [23.0, 233.33333333333331], [385.8571428571428, 132.38095238095238], [400.1428571428571, 135.23809523809524], [468.71428571428567, 353.3333333333333], [466.80952380952374, 362.85714285714283], [97.28571428571428, 478.0952380952381], [81.09523809523807, 474.2857142857143]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10002
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[21.095238095238102, 183.33333333333334], [231.41269841269843, 88.09523809523809], [450.46031746031747, 347.6190476190476], [475.06349206349205, 376.1904761904762], [478.2380952380952, 388.8888888888889], [301.25396825396825, 532.5396825396825], [271.0952380952381, 556.3492063492064], [255.22222222222223, 541.2698412698413], [242.52380952380952, 534.9206349206349], [25.85714285714286, 199.20634920634922]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10003
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[138.23809523809524, 71.42857142857143], [407.7619047619047, 31.428571428571427], [418.2380952380952, 39.047619047619044], [422.04761904761904, 539.047619047619], [407.7619047619047, 552.3809523809524], [112.52380952380952, 519.047619047619], [98.23809523809524, 505.71428571428567]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10004
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[119.20529801324503, 218.54304635761588], [440.3973509933775, 184.7682119205298], [445.0331125827814, 190.72847682119206], [391.3907284768212, 366.2251655629139], [384.7682119205298, 372.18543046357615], [250.33112582781456, 401.3245033112583], [82.11920529801324, 446.3576158940397], [76.82119205298014, 441.72185430463577], [49.66887417218544, 239.73509933774835], [107.28476821192052, 228.47682119205297]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10005
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[41.18840579710144, 218.8405797101449], [41.18840579710144, 209.42028985507244], [52.78260869565216, 201.44927536231882], [224.52173913043475, 142.75362318840578], [359.30434782608694, 89.85507246376811], [367.99999999999994, 92.02898550724638], [462.2028985507246, 275.3623188405797], [369.4492753623188, 348.5507246376811], [199.88405797101444, 472.463768115942], [191.91304347826082, 471.01449275362313]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">labels <span class="op" style="color: #5E5E5E;">=</span> shapes_df[<span class="st" style="color: #20794D;">'label'</span>].unique().tolist()</span>
<span id="cb24-2">labels</span></code></pre></div>
<pre class="text"><code>['student_id']</code></pre>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">class_map <span class="op" style="color: #5E5E5E;">=</span> ClassMap(labels)</span>
<span id="cb26-2">class_map</span></code></pre></div>
<pre class="text"><code>&lt;ClassMap: {'background': 0, 'student_id': 1}&gt;</code></pre>
</section>
<section id="create-dataset-parser" class="level2">
<h2 class="anchored" data-anchor-id="create-dataset-parser">Create Dataset Parser</h2>
<p>Now we can create a custom <code>Parser</code> class that tells IceVision how to read the dataset.</p>
<p><strong>View template for an instance segmentation record</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">template_record <span class="op" style="color: #5E5E5E;">=</span> InstanceSegmentationRecord()</span>
<span id="cb28-2">template_record</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Image size None
    - Filepath: None
    - Img: None
    - Record ID: None
detection: 
    - Class Map: None
    - Labels: []
    - BBoxes: []
    - masks: []
    - mask_array: None</code></pre>
<p><strong>View template for an instance segmentation parser</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">Parser.generate_template(template_record)</span></code></pre></div>
<pre class="text"><code>class MyParser(Parser):
    def __init__(self, template_record):
        super().__init__(template_record=template_record)
    def __iter__(self) -&gt; Any:
    def __len__(self) -&gt; int:
    def record_id(self, o: Any) -&gt; Hashable:
    def parse_fields(self, o: Any, record: BaseRecord, is_new: bool):
        record.set_img_size(&lt;ImgSize&gt;)
        record.set_filepath(&lt;Union[str, Path]&gt;)
        record.detection.set_class_map(&lt;ClassMap&gt;)
        record.detection.add_labels(&lt;Sequence[Hashable]&gt;)
        record.detection.add_bboxes(&lt;Sequence[BBox]&gt;)
        record.detection.add_masks(&lt;Sequence[Mask]&gt;)</code></pre>
<p><strong>Define custom parser class</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">class</span> StudentIDParser(Parser):</span>
<span id="cb32-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, template_record, annotations_df, img_dict, class_map):</span>
<span id="cb32-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(template_record<span class="op" style="color: #5E5E5E;">=</span>template_record)</span>
<span id="cb32-4">        <span class="va" style="color: #111111;">self</span>.img_dict <span class="op" style="color: #5E5E5E;">=</span> img_dict</span>
<span id="cb32-5">        <span class="va" style="color: #111111;">self</span>.df <span class="op" style="color: #5E5E5E;">=</span> annotations_df</span>
<span id="cb32-6">        <span class="va" style="color: #111111;">self</span>.class_map <span class="op" style="color: #5E5E5E;">=</span> class_map</span>
<span id="cb32-7"></span>
<span id="cb32-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__iter__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb32-9">        <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.df.itertuples(): <span class="cf" style="color: #003B4F;">yield</span> o</span>
<span id="cb32-10"></span>
<span id="cb32-11">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__len__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb32-12">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.df)</span>
<span id="cb32-13"></span>
<span id="cb32-14">    <span class="kw" style="color: #003B4F;">def</span> record_id(<span class="va" style="color: #111111;">self</span>, o: Any) <span class="op" style="color: #5E5E5E;">-&gt;</span> Hashable:</span>
<span id="cb32-15">        <span class="cf" style="color: #003B4F;">return</span> o.Index</span>
<span id="cb32-16"></span>
<span id="cb32-17">    <span class="kw" style="color: #003B4F;">def</span> image_width_height(<span class="va" style="color: #111111;">self</span>, o) <span class="op" style="color: #5E5E5E;">-&gt;</span> Tuple[<span class="bu" style="color: null;">int</span>, <span class="bu" style="color: null;">int</span>]:</span>
<span id="cb32-18">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._size[:<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb32-19"></span>
<span id="cb32-20">    <span class="kw" style="color: #003B4F;">def</span> parse_fields(<span class="va" style="color: #111111;">self</span>, o, record, is_new):</span>
<span id="cb32-21">        </span>
<span id="cb32-22">        filepath <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img_dict[o.Index]</span>
<span id="cb32-23">        </span>
<span id="cb32-24">        width, height <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(filepath).convert(<span class="st" style="color: #20794D;">'RGB'</span>).size</span>
<span id="cb32-25">        </span>
<span id="cb32-26">        record.set_img_size([width, height])</span>
<span id="cb32-27">        record.set_filepath(Path(filepath))</span>
<span id="cb32-28">        record.detection.set_class_map(<span class="va" style="color: #111111;">self</span>.class_map)</span>
<span id="cb32-29">                </span>
<span id="cb32-30">        labels <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb32-31">        bbox_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb32-32">        mask_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb32-33">        </span>
<span id="cb32-34">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(o.shapes)):</span>
<span id="cb32-35">            points <span class="op" style="color: #5E5E5E;">=</span> np.array(o.shapes[i][<span class="st" style="color: #20794D;">'points'</span>])</span>
<span id="cb32-36"></span>
<span id="cb32-37">            x_min, y_min <span class="op" style="color: #5E5E5E;">=</span> points.<span class="bu" style="color: null;">min</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb32-38">            x_max, y_max <span class="op" style="color: #5E5E5E;">=</span> points.<span class="bu" style="color: null;">max</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb32-39">            </span>
<span id="cb32-40">            labels.append(o.shapes[i][<span class="st" style="color: #20794D;">'label'</span>])</span>
<span id="cb32-41">            bbox_list.append(BBox.from_xyxy(x_min, y_min, x_max, y_max))</span>
<span id="cb32-42">            </span>
<span id="cb32-43">            mask_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.new(<span class="st" style="color: #20794D;">'L'</span>, (width, height), <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb32-44">            xy <span class="op" style="color: #5E5E5E;">=</span> [(p[<span class="dv" style="color: #AD0000;">0</span>],p[<span class="dv" style="color: #AD0000;">1</span>]) <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> points]</span>
<span id="cb32-45">            ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;">'L'</span>).polygon(xy, fill<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb32-46">            mask_array <span class="op" style="color: #5E5E5E;">=</span> np.array(mask_img).clip(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb32-47">            mask_list.append(MaskArray(mask_array))</span>
<span id="cb32-48">        </span>
<span id="cb32-49">        record.detection.add_labels(labels)</span>
<span id="cb32-50">        record.detection.add_bboxes(bbox_list)</span>
<span id="cb32-51">        record.detection.add_masks(mask_list)</span></code></pre></div>
<p><strong>Create a custom parser object</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">parser <span class="op" style="color: #5E5E5E;">=</span> StudentIDParser(template_record, annotation_df, img_dict, class_map)</span>
<span id="cb33-2"><span class="bu" style="color: null;">len</span>(parser)</span></code></pre></div>
<pre class="text"><code>150</code></pre>
<p><strong>Parse annotations to create records</strong></p>
<p>We’ll randomly split the samples into training and validation sets.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Randomly split our data into train/valid</span></span>
<span id="cb35-2">data_splitter <span class="op" style="color: #5E5E5E;">=</span> RandomSplitter([<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.2</span>])</span>
<span id="cb35-3"></span>
<span id="cb35-4">train_records, valid_records <span class="op" style="color: #5E5E5E;">=</span> parser.parse(data_splitter)</span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;"># train_records, valid_records = parser.parse(data_splitter, cache_filepath=f'{dataset_name}-cache.pkl')</span></span></code></pre></div>
<p><strong>Export class labels</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb36-2"></span>
<span id="cb36-3">class_labels <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"classes"</span>: parser.class_map.get_classes()}</span>
<span id="cb36-4">class_labels_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>data_dir<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-classes.json"</span></span>
<span id="cb36-5"></span>
<span id="cb36-6"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb36-7">    json.dump(class_labels, write_file)</span>
<span id="cb36-8">    </span>
<span id="cb36-9">class_labels, class_labels_file_name</span></code></pre></div>
<pre class="text"><code>({'classes': ['background', 'student_id']}, 'student-id-classes.json')</code></pre>
<p><strong>Inspect training records</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">train_records[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Image size [640, 480]
    - Filepath: pytorch-for-information-extraction/code/datasets/detection/student-id/10115.jpg
    - Img: None
    - Record ID: 10115
detection: 
    - Class Map: &lt;ClassMap: {'background': 0, 'student_id': 1}&gt;
    - Labels: [1, 1]
    - BBoxes: [&lt;BBox (xmin:281.57142857142856, ymin:1.428571428571428, xmax:504.42857142857133, ymax:326.4285714285714)&gt;, &lt;BBox (xmin:185.1428571428571, ymin:124.28571428571428, xmax:382.99999999999994, ymax:448.57142857142856)&gt;]
    - masks: [&lt;icevision.core.mask.MaskArray object at 0x7f521f95df10&gt;, &lt;icevision.core.mask.MaskArray object at 0x7f521f95da90&gt;]
    - mask_array: None</code></pre>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">show_record(train_records[<span class="dv" style="color: #AD0000;">0</span>], figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>), display_label<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> )</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_51_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">show_records(train_records[<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">4</span>], ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>,display_label<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_52_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="define-dataloader-objects" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloader-objects">Define DataLoader Objects</h2>
<p><strong>Define input resolution</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">image_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb42-2">presize <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1024</span></span></code></pre></div>
<p><strong>Define Transforms</strong></p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">train_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.aug_tfms(size<span class="op" style="color: #5E5E5E;">=</span>image_size, presize<span class="op" style="color: #5E5E5E;">=</span>presize), tfms.A.Normalize()])</span>
<span id="cb43-2">valid_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.resize_and_pad(image_size), tfms.A.Normalize()])</span></code></pre></div>
<p><strong>Get normalization stats</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">mean <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Normalize().mean</span>
<span id="cb44-2">std <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Normalize().std</span>
<span id="cb44-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p><strong>Define Datasets</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">train_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset(train_records, train_tfms)</span>
<span id="cb46-2">valid_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset(valid_records, valid_tfms)</span>
<span id="cb46-3">train_ds, valid_ds</span></code></pre></div>
<pre class="text"><code>(&lt;Dataset with 120 items&gt;, &lt;Dataset with 30 items&gt;)</code></pre>
<p><strong>Apply augmentations to a training sample</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">samples <span class="op" style="color: #5E5E5E;">=</span> [train_ds[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">3</span>)]</span>
<span id="cb48-2">show_samples(samples, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_62_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define model type</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">model_type <span class="op" style="color: #5E5E5E;">=</span> models.torchvision.mask_rcnn</span></code></pre></div>
<p><strong>Define backbone</strong></p>
<p>We will finetune a pretrained model rather than train a new one from scratch.</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">backbone <span class="op" style="color: #5E5E5E;">=</span> model_type.backbones.resnet50_fpn()</span></code></pre></div>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Adjust the batch size based on the available GPU memory.</p>
</blockquote>
<p><strong>Define DataLoaders</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">train_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.train_dl(train_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb52-2">valid_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.valid_dl(valid_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Be careful when increasing the number of workers. There is a bug that significantly increases system memory usage with more workers.</p>
</blockquote>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">infer_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.infer_dl(valid_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">valid_batch <span class="op" style="color: #5E5E5E;">=</span> first(valid_dl)</span>
<span id="cb54-2">infer_batch <span class="op" style="color: #5E5E5E;">=</span> first(infer_dl)</span></code></pre></div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">(valid_images, valid_labels), valid_records <span class="op" style="color: #5E5E5E;">=</span> valid_batch</span></code></pre></div>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">model_type.show_batch(first(valid_dl), ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_74_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="finetune-the-model" class="level2">
<h2 class="anchored" data-anchor-id="finetune-the-model">Finetune the Model</h2>
<p>Now, we can move on to training the model.</p>
<p><strong>Instantiate the model</strong></p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">model <span class="op" style="color: #5E5E5E;">=</span> model_type.model(backbone<span class="op" style="color: #5E5E5E;">=</span>backbone, num_classes<span class="op" style="color: #5E5E5E;">=</span>parser.class_map.num_classes) </span></code></pre></div>
<p><strong>Define metrics</strong></p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">metrics <span class="op" style="color: #5E5E5E;">=</span> [COCOMetric(metric_type<span class="op" style="color: #5E5E5E;">=</span>COCOMetricType.mask)]</span></code></pre></div>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">learn <span class="op" style="color: #5E5E5E;">=</span> model_type.fastai.learner(dls<span class="op" style="color: #5E5E5E;">=</span>[train_dl, valid_dl], model<span class="op" style="color: #5E5E5E;">=</span>model, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics)</span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">suggested_lrs <span class="op" style="color: #5E5E5E;">=</span> learn.lr_find()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_82_3.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">lr <span class="op" style="color: #5E5E5E;">=</span> suggested_lrs.valley<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb61-2">lr</span></code></pre></div>
<pre class="text"><code>    0.00039547700725961477</code></pre>
<p><strong>Define number of epochs</strong></p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span></code></pre></div>
<p><strong>Finetune model</strong></p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">learn.fine_tune(epochs, lr, freeze_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
1.526101
</td>
<td>
1.136230
</td>
<td>
0.000000
</td>
<td>
00:05
</td>
</tr>
</tbody>

</table>
</div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
1.113099
</td>
<td>
0.948657
</td>
<td>
0.000000
</td>
<td>
00:10
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.879729
</td>
<td>
0.561887
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.661906
</td>
<td>
0.404916
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
3
</td>
<td>
0.528782
</td>
<td>
0.345191
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
4
</td>
<td>
0.464688
</td>
<td>
0.352018
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
5
</td>
<td>
0.418978
</td>
<td>
0.320372
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
6
</td>
<td>
0.376626
</td>
<td>
0.295002
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
7
</td>
<td>
0.340059
</td>
<td>
0.309611
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
8
</td>
<td>
0.316866
</td>
<td>
0.267806
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
9
</td>
<td>
0.295634
</td>
<td>
0.275406
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
10
</td>
<td>
0.282974
</td>
<td>
0.263774
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
11
</td>
<td>
0.275979
</td>
<td>
0.254877
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
12
</td>
<td>
0.266656
</td>
<td>
0.237095
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
13
</td>
<td>
0.260437
</td>
<td>
0.239515
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
14
</td>
<td>
0.245464
</td>
<td>
0.222481
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
15
</td>
<td>
0.237604
</td>
<td>
0.221115
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
16
</td>
<td>
0.233022
</td>
<td>
0.245855
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
17
</td>
<td>
0.224769
</td>
<td>
0.277205
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
18
</td>
<td>
0.214686
</td>
<td>
0.242116
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
19
</td>
<td>
0.207307
</td>
<td>
0.229408
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
20
</td>
<td>
0.202318
</td>
<td>
0.217142
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
21
</td>
<td>
0.190885
</td>
<td>
0.209915
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
22
</td>
<td>
0.190565
</td>
<td>
0.202563
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
23
</td>
<td>
0.189903
</td>
<td>
0.199876
</td>
<td>
0.000000
</td>
<td>
00:09
</td>
</tr>
<tr>
<td>
24
</td>
<td>
0.186624
</td>
<td>
0.213171
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
25
</td>
<td>
0.178527
</td>
<td>
0.207296
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
26
</td>
<td>
0.179156
</td>
<td>
0.246541
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
27
</td>
<td>
0.174455
</td>
<td>
0.186960
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
28
</td>
<td>
0.162381
</td>
<td>
0.183744
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
29
</td>
<td>
0.157665
</td>
<td>
0.181943
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
30
</td>
<td>
0.152987
</td>
<td>
0.181777
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
31
</td>
<td>
0.149362
</td>
<td>
0.163883
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
32
</td>
<td>
0.143986
</td>
<td>
0.185762
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
33
</td>
<td>
0.147537
</td>
<td>
0.170019
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
34
</td>
<td>
0.139731
</td>
<td>
0.165259
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
35
</td>
<td>
0.136252
</td>
<td>
0.166419
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
36
</td>
<td>
0.134750
</td>
<td>
0.165301
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
37
</td>
<td>
0.131968
</td>
<td>
0.157560
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
38
</td>
<td>
0.129044
</td>
<td>
0.162093
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
39
</td>
<td>
0.121755
</td>
<td>
0.159642
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
40
</td>
<td>
0.118404
</td>
<td>
0.154801
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
41
</td>
<td>
0.118744
</td>
<td>
0.157296
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
42
</td>
<td>
0.113328
</td>
<td>
0.156315
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
43
</td>
<td>
0.114840
</td>
<td>
0.153378
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
44
</td>
<td>
0.113884
</td>
<td>
0.146661
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
45
</td>
<td>
0.112758
</td>
<td>
0.162629
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
46
</td>
<td>
0.110688
</td>
<td>
0.157740
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
47
</td>
<td>
0.107804
</td>
<td>
0.156558
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
48
</td>
<td>
0.104166
</td>
<td>
0.155466
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
49
</td>
<td>
0.102735
</td>
<td>
0.159387
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
50
</td>
<td>
0.100563
</td>
<td>
0.157396
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
51
</td>
<td>
0.101158
</td>
<td>
0.151178
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
52
</td>
<td>
0.100735
</td>
<td>
0.148203
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
53
</td>
<td>
0.098154
</td>
<td>
0.165008
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
54
</td>
<td>
0.098391
</td>
<td>
0.163613
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
55
</td>
<td>
0.100913
</td>
<td>
0.161389
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
56
</td>
<td>
0.098609
</td>
<td>
0.155590
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
57
</td>
<td>
0.098285
</td>
<td>
0.154783
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
58
</td>
<td>
0.097906
</td>
<td>
0.156959
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
59
</td>
<td>
0.097475
</td>
<td>
0.160197
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Show results on validation set</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">model_type.show_results(model, valid_ds, detection_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.5</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_90_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="save-model-checkpoint" class="level2">
<h2 class="anchored" data-anchor-id="save-model-checkpoint">Save Model Checkpoint</h2>
<p>We can save the trained PyTorch model and further finetune it in the future or perform inference with IceVision.</p>
<p><strong>Define model checkpoint file path</strong></p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">checkpoint_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>data_dir<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(model)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.pth"</span></span>
<span id="cb66-2">checkpoint_path</span></code></pre></div>
<pre class="text"><code>    'student-id-MaskRCNN.pth'</code></pre>
<p><strong>Save model checkpoint</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">torch.save(model.state_dict(), checkpoint_path)</span></code></pre></div>
</section>
<section id="perform-inference-with-checkpoint" class="level2">
<h2 class="anchored" data-anchor-id="perform-inference-with-checkpoint">Perform Inference with Checkpoint</h2>
<p>Below are the steps to load the saved PyTorch model and perform inference with IceVision.</p>
<p><strong>Load class labels</strong></p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> read_file:</span>
<span id="cb69-2">    classes <span class="op" style="color: #5E5E5E;">=</span> json.loads(read_file.read())</span>
<span id="cb69-3">classes[<span class="st" style="color: #20794D;">'classes'</span>]</span></code></pre></div>
<pre class="text"><code>    ['background', 'student_id']</code></pre>
<p><strong>Load model checkpoint</strong></p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">checkpoint_and_model <span class="op" style="color: #5E5E5E;">=</span> models.model_from_checkpoint(checkpoint_path, </span>
<span id="cb71-2">                                                    model_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'torchvision.mask_rcnn'</span>, </span>
<span id="cb71-3">                                                    backbone_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'resnet50_fpn'</span>,</span>
<span id="cb71-4">                                                    img_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>, </span>
<span id="cb71-5">                                                    classes<span class="op" style="color: #5E5E5E;">=</span>classes[<span class="st" style="color: #20794D;">'classes'</span>],</span>
<span id="cb71-6">                                                   )</span></code></pre></div>
<pre class="text"><code>    Use load_from_local loader</code></pre>
<p><strong>Verify class map</strong></p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">checkpoint_and_model[<span class="st" style="color: #20794D;">"class_map"</span>]</span></code></pre></div>
<pre class="text"><code>    &lt;ClassMap: {'background': 0, 'student_id': 1}&gt;</code></pre>
<p><strong>Get model and device</strong></p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">model <span class="op" style="color: #5E5E5E;">=</span> checkpoint_and_model[<span class="st" style="color: #20794D;">"model"</span>]</span>
<span id="cb75-2"></span>
<span id="cb75-3">device<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">next</span>(model.parameters()).device</span>
<span id="cb75-4">device</span></code></pre></div>
<pre class="text"><code>    device(type='cpu')</code></pre>
<p><strong>Define inference preprocessing steps</strong></p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">img_size <span class="op" style="color: #5E5E5E;">=</span> checkpoint_and_model[<span class="st" style="color: #20794D;">"img_size"</span>]</span>
<span id="cb77-2">valid_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.resize_and_pad(img_size), tfms.A.Normalize()])</span></code></pre></div>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">test_img <span class="op" style="color: #5E5E5E;">=</span> open_img(files[<span class="dv" style="color: #AD0000;">9</span>])</span>
<span id="cb78-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_106_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define inference dataloader</strong></p>
<div class="sourceCode" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">infer_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([tfms.A.Normalize()])</span>
<span id="cb79-2">infer_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_images([test_img], infer_tfms)</span>
<span id="cb79-3">infer_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.infer_dl(infer_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<p><strong>Perform inference</strong></p>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">preds <span class="op" style="color: #5E5E5E;">=</span> model_type.predict_from_dl(model, infer_dl, keep_images<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<pre class="text"><code>      0%|          | 0/1 [00:00&lt;?, ?it/s]</code></pre>
<p><strong>Inspect source image</strong></p>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">preds[<span class="dv" style="color: #AD0000;">0</span>].ground_truth</span></code></pre></div>
<pre class="text"><code>    BaseRecord
    
    common: 
        - Record ID: 0
        - Img: 480x640x3 &lt;np.ndarray&gt; Image
        - Image size ImgSize(width=480, height=640)
    detection: 
        - Class Map: None</code></pre>
<p><strong>Inspect model prediction</strong></p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">preds[<span class="dv" style="color: #AD0000;">0</span>].pred</span></code></pre></div>
<pre class="text"><code>    BaseRecord
    
    common: 
        - Record ID: 0
        - Img: 480x640x3 &lt;np.ndarray&gt; Image
        - Image size ImgSize(width=480, height=640)
    detection: 
        - Scores: [0.9997528 0.9996158]
        - BBoxes: [&lt;BBox (xmin:34.445037841796875, ymin:300.6217041015625, xmax:468.1103210449219, ymax:625.0744018554688)&gt;, &lt;BBox (xmin:13.5184326171875, ymin:21.899276733398438, xmax:405.33990478515625, ymax:296.6339111328125)&gt;]
        - masks: []
        - mask_array: &lt;icevision.core.mask.MaskArray object at 0x7f5115cc7280&gt;
        - Class Map: None
        - Labels: [1, 1]</code></pre>
<p><strong>Annotate image with model prediction</strong></p>
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">show_preds(preds<span class="op" style="color: #5E5E5E;">=</span>preds)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_116_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-raw-model-output" class="level2">
<h2 class="anchored" data-anchor-id="inspect-raw-model-output">Inspect Raw Model Output</h2>
<p>Next, we’ll inspect the raw model output to determine the required post-processing steps when using ONNX Runtime.</p>
<p><strong>Define method to convert a PIL Image to a Pytorch Tensor</strong></p>
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="kw" style="color: #003B4F;">def</span> img_to_tensor(img:PIL.Image, mean<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.485</span>, <span class="fl" style="color: #AD0000;">0.456</span>, <span class="fl" style="color: #AD0000;">0.406</span>], std<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.229</span>, <span class="fl" style="color: #AD0000;">0.224</span>, <span class="fl" style="color: #AD0000;">0.225</span>]):</span>
<span id="cb87-2">    <span class="co" style="color: #5E5E5E;"># Convert image to tensor</span></span>
<span id="cb87-3">    img_tensor <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor(np.array(img)).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb87-4">    <span class="co" style="color: #5E5E5E;"># Scale pixels values from [0,255] to [0,1]</span></span>
<span id="cb87-5">    scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb87-6">    <span class="co" style="color: #5E5E5E;"># Prepare normalization tensors</span></span>
<span id="cb87-7">    mean_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(mean).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb87-8">    std_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(std).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb87-9">    <span class="co" style="color: #5E5E5E;"># Normalize tensor    </span></span>
<span id="cb87-10">    normalized_tensor <span class="op" style="color: #5E5E5E;">=</span> (scaled_tensor <span class="op" style="color: #5E5E5E;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;">/</span> std_tensor</span>
<span id="cb87-11">    <span class="co" style="color: #5E5E5E;"># Batch tensor</span></span>
<span id="cb87-12">    <span class="cf" style="color: #003B4F;">return</span> normalized_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<p><strong>Convert image to a normalized tensor</strong></p>
<div class="sourceCode" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">input_tensor <span class="op" style="color: #5E5E5E;">=</span> img_to_tensor(test_img)</span>
<span id="cb88-2">input_tensor.shape</span></code></pre></div>
<pre class="text"><code>    torch.Size([1, 3, 640, 480])</code></pre>
<p><strong>Inspect raw model output</strong></p>
<div class="sourceCode" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb90-2">    preds <span class="op" style="color: #5E5E5E;">=</span> model(input_tensor)</span>
<span id="cb90-3">preds</span></code></pre></div>
<pre class="text"><code>    [{'boxes': tensor([[ 34.4450, 300.6217, 468.1104, 625.0743],
              [ 13.5184,  21.8993, 405.3399, 296.6339]]),
      'labels': tensor([1, 1]),
      'scores': tensor([0.9998, 0.9996]),
      'masks': tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.],
                ...,
                [0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.]]],


​      
​              [[[0., 0., 0.,  ..., 0., 0., 0.],
​                [0., 0., 0.,  ..., 0., 0., 0.],
​                [0., 0., 0.,  ..., 0., 0., 0.],
​                ...,
​                [0., 0., 0.,  ..., 0., 0., 0.],
​                [0., 0., 0.,  ..., 0., 0., 0.],
​                [0., 0., 0.,  ..., 0., 0., 0.]]]])}]</code></pre>
<p>The model output stores predictions for bounding boxes, labels, confidence scores, and image masks in separate tensors.</p>
<p><strong>Benckmark PyTorch CPU inference</strong></p>
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb92-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): model(input_tensor)</span></code></pre></div>
<pre class="text"><code>    432 ms ± 845 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</section>
<section id="export-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="export-model-to-onnx">Export Model to ONNX</h2>
<p>Now we can export the PyTorch model to ONNX format using PyTorch’s built-in conversion method.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(model)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb94-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>    'student-id-MaskRCNN.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<div class="sourceCode" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">torch.onnx.export(model,</span>
<span id="cb96-2">                  input_tensor,</span>
<span id="cb96-3">                  onnx_file_name,</span>
<span id="cb96-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb96-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>,</span>
<span id="cb96-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb96-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb96-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'boxes'</span>, <span class="st" style="color: #20794D;">'labels'</span>, <span class="st" style="color: #20794D;">'scores'</span>, <span class="st" style="color: #20794D;">'masks'</span>],</span>
<span id="cb96-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb96-10">                 )</span></code></pre></div>
</section>
<section id="verify-onnx-inference" class="level2">
<h2 class="anchored" data-anchor-id="verify-onnx-inference">Verify ONNX Inference</h2>
<p>We can verify the ONNX model performs the same as the PyTorch version using the ONNX Runtime.</p>
<p><strong>Import ONNX Runtime</strong></p>
<div class="sourceCode" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="im" style="color: #00769E;">import</span> onnxruntime <span class="im" style="color: #00769E;">as</span> ort</span></code></pre></div>
<p><strong>Get available ONNX Runtime execution providers</strong></p>
<p>We did not install any additional <a href="https://onnxruntime.ai/docs/execution-providers/">execution providers</a>, so only the default CPU provider is available.</p>
<div class="sourceCode" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">available_providers <span class="op" style="color: #5E5E5E;">=</span> ort.get_available_providers()</span>
<span id="cb98-2">available_providers</span></code></pre></div>
<pre class="text"><code>    ['CPUExecutionProvider']</code></pre>
<p><strong>Select execution provider</strong></p>
<div class="sourceCode" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">providers <span class="op" style="color: #5E5E5E;">=</span> [available_providers[<span class="dv" style="color: #AD0000;">0</span>]]</span>
<span id="cb100-2">providers</span></code></pre></div>
<pre class="text"><code>    ['CPUExecutionProvider']</code></pre>
<p><strong>Initialize inference session with selected execution provider</strong></p>
<div class="sourceCode" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">ort_sess <span class="op" style="color: #5E5E5E;">=</span> ort.InferenceSession(onnx_file_name, providers<span class="op" style="color: #5E5E5E;">=</span>providers)</span></code></pre></div>
<p><strong>Perform inference using ONNX model</strong></p>
<div class="sourceCode" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">outputs <span class="op" style="color: #5E5E5E;">=</span> ort_sess.run(output_names<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, input_feed<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"input"</span>:input_tensor.numpy()})</span>
<span id="cb103-2">outputs</span></code></pre></div>
<pre class="text"><code>    [array([[ 34.445053, 300.62167 , 468.11035 , 625.07434 ],
            [ 13.518433,  21.899261, 405.33997 , 296.6339  ]], dtype=float32),
     array([1, 1], dtype=int64),
     array([0.9997528, 0.9996158], dtype=float32),
     array([[[[0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              ...,
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.]]],


​     
​            [[[0., 0., 0., ..., 0., 0., 0.],
​              [0., 0., 0., ..., 0., 0., 0.],
​              [0., 0., 0., ..., 0., 0., 0.],
​              ...,
​              [0., 0., 0., ..., 0., 0., 0.],
​              [0., 0., 0., ..., 0., 0., 0.],
​              [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32)]</code></pre>
<p><strong>Benchmark ONNX Runtime CPU inference speed</strong></p>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb105-2">ort_sess.run(<span class="va" style="color: #111111;">None</span>, {<span class="st" style="color: #20794D;">'input'</span>: input_tensor.numpy()})</span></code></pre></div>
<pre class="text"><code>    320 ms ± 1.25 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</section>
<section id="define-post-processing-steps" class="level2">
<h2 class="anchored" data-anchor-id="define-post-processing-steps">Define Post-processing Steps</h2>
<p>The Mask R-CNN model performs the object detection post-processing steps internally However, there are still a few steps to annotate the input image with the model predictions.</p>
<p>The predicted image masks contain values in the range [0,1] (i.e., pure black to pure white). We need to binarize them to either 0 or 1 using a threshold value.</p>
<p>We can then convert the 2D image masks to RGBA images and paste them on top of the input image.</p>
<p><strong>Define annotation values</strong></p>
<div class="sourceCode" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">mask_threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb107-2">mask_rgba <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">255</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>]</span></code></pre></div>
<p><strong>Annotate sample image</strong></p>
<div class="sourceCode" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">width, height <span class="op" style="color: #5E5E5E;">=</span> test_img.size</span>
<span id="cb108-2">annotated_img <span class="op" style="color: #5E5E5E;">=</span> test_img.copy()</span>
<span id="cb108-3">annotated_img.convert(<span class="st" style="color: #20794D;">'RGBA'</span>)</span>
<span id="cb108-4">draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb108-5">fnt_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb108-6"></span>
<span id="cb108-7"><span class="co" style="color: #5E5E5E;"># Iterate through annotations for sample image</span></span>
<span id="cb108-8"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(outputs[<span class="dv" style="color: #AD0000;">0</span>])):</span>
<span id="cb108-9">    </span>
<span id="cb108-10">    <span class="co" style="color: #5E5E5E;"># Extract mask array</span></span>
<span id="cb108-11">    mask_array <span class="op" style="color: #5E5E5E;">=</span> outputs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>][i][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb108-12">    <span class="co" style="color: #5E5E5E;"># Binarize mask values</span></span>
<span id="cb108-13">    mask_array[mask_array <span class="op" style="color: #5E5E5E;">&gt;</span> mask_threshold] <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span></span>
<span id="cb108-14">    mask_array[mask_array <span class="op" style="color: #5E5E5E;">&lt;=</span> mask_threshold] <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb108-15">    <span class="co" style="color: #5E5E5E;"># Scale mask values</span></span>
<span id="cb108-16">    mask_array <span class="op" style="color: #5E5E5E;">*=</span> <span class="dv" style="color: #AD0000;">255</span></span>
<span id="cb108-17">    <span class="co" style="color: #5E5E5E;"># Convert mask from 1-channel to 4-channel</span></span>
<span id="cb108-18">    mask_array <span class="op" style="color: #5E5E5E;">=</span> np.tile(mask_array[:, :, <span class="va" style="color: #111111;">None</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb108-19">    <span class="co" style="color: #5E5E5E;"># Update mask color</span></span>
<span id="cb108-20">    mask_array[:,:,<span class="dv" style="color: #AD0000;">0</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb108-21">    mask_array[:,:,<span class="dv" style="color: #AD0000;">1</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb108-22">    mask_array[:,:,<span class="dv" style="color: #AD0000;">2</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">2</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb108-23">    <span class="co" style="color: #5E5E5E;"># Update mask transparency</span></span>
<span id="cb108-24">    mask_array[:,:,<span class="dv" style="color: #AD0000;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb108-25">    mask_array[:,:,<span class="dv" style="color: #AD0000;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb108-26">    mask_array[:,:,<span class="dv" style="color: #AD0000;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">2</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb108-27">    mask_array[:,:,<span class="dv" style="color: #AD0000;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">255</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb108-28">    <span class="co" style="color: #5E5E5E;"># Convert mask array to PIL image</span></span>
<span id="cb108-29">    mask_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.fromarray(mask_array.astype(np.uint8)).convert(<span class="st" style="color: #20794D;">'RGBA'</span>)</span>
<span id="cb108-30">    </span>
<span id="cb108-31">    <span class="co" style="color: #5E5E5E;"># Draw segmentation mask on sample image</span></span>
<span id="cb108-32">    annotated_img.paste(mask_img, (<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>), mask<span class="op" style="color: #5E5E5E;">=</span>mask_img)</span>
<span id="cb108-33">    </span>
<span id="cb108-34">    <span class="co" style="color: #5E5E5E;"># Draw bounding box on sample image</span></span>
<span id="cb108-35">    shape <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(outputs[<span class="dv" style="color: #AD0000;">0</span>][i])</span>
<span id="cb108-36">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb108-37">    </span>
<span id="cb108-38">    <span class="co" style="color: #5E5E5E;"># Draw object label on sample image</span></span>
<span id="cb108-39">    fnt <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageFont.truetype(font_file, fnt_size)</span>
<span id="cb108-40">    label <span class="op" style="color: #5E5E5E;">=</span> class_map.get_classes()[outputs[<span class="dv" style="color: #AD0000;">1</span>][i]]</span>
<span id="cb108-41">    draw.multiline_text((shape[<span class="dv" style="color: #AD0000;">0</span>], shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">-</span>fnt_size<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>), <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>label<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, font<span class="op" style="color: #5E5E5E;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb108-42">    </span>
<span id="cb108-43"><span class="bu" style="color: null;">print</span>(annotated_img.size) </span>
<span id="cb108-44">annotated_img</span></code></pre></div>
<pre class="text"><code>    (480, 640)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_144_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>We now have a template to finetune a Mask R-CNN model on new datasets using the IceVision library and use the ONNX Runtime for inference. A future post will cover how to collect and annotate samples for a custom dataset.</p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-mask-rcnn-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>mask-rcnn</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/index.html</guid>
  <pubDate>Fri, 02 Dec 2022 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Testing Intel’s Arc A770 GPU for Deep Learning Pt. 1</title>
  <link>christianjmills.com/posts/arc-a770-testing/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>OpenVINO Inference</li>
<li>ONNX-DirectML Inference</li>
<li>PyTorch-DirectML Training</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Last week, I received an Arc A770 GPU from Intel as part of their Graphics Innovator program. I am primarily interested in the card for its deep-learning performance, so I tested it with some of my tutorial projects and attempted to train some models using the <a href="https://pypi.org/project/pytorch-directml/">pytorch-directml</a> package.</p>
<p><strong>Desktop Specs:</strong></p>
<table class="table">
<thead>
<tr class="header">
<th>OS</th>
<th>CPU</th>
<th>Memory</th>
<th>GPU Driver</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Windows 10 Pro 21H2</td>
<td>i7-11700K</td>
<td>32 GB DDR4 3000MHz</td>
<td><a href="https://www.intel.com/content/www/us/en/download/726609/intel-arc-graphics-windows-dch-driver.html">31.0.101.3490</a></td>
</tr>
</tbody>
</table>
<p><strong>Library Versions:</strong></p>
<table class="table">
<thead>
<tr class="header">
<th>OpenVINO</th>
<th>ONNX-DirectML</th>
<th>pytorch-directml</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">2022.1 and 2022.2</a></td>
<td><a href="https://www.nuget.org/packages/Microsoft.ML.OnnxRuntime.DirectML/1.12.1">1.12.1</a></td>
<td><a href="https://pypi.org/project/pytorch-directml/">1.8.0a0.dev220506</a></td>
</tr>
</tbody>
</table>
</section>
<section id="openvino-inference" class="level2">
<h2 class="anchored" data-anchor-id="openvino-inference">OpenVINO Inference</h2>
<p>I first tested the card’s performance in the Unity project from my <a href="../../icevision-openvino-unity-tutorial/part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO</a> tutorial. The project uses OpenVINO 2022.1, and I noticed an odd sensitivity to input resolution when using FP16 precision.</p>
<p>I use a default resolution of 398x224 (for a 16:9 aspect ratio), which translates to a 384x224 (divisible by 32) input resolution for the YOLOX tiny model. At this resolution, the model detects the same hand gestures with the Arc card as the CPU. However, the confidence scores are much lower, and the bounding box dimensions are slightly different (but still usable).</p>
<section id="cpu-fp16" class="level5">
<h5 class="anchored" data-anchor-id="cpu-fp16"><strong>CPU (FP16)</strong></h5>
<ul>
<li><strong>Objects Detected:</strong> Call 78.54%, No Gesture 83.2%</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/cpu_unity-openvino-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="a770-fp16" class="level5">
<h5 class="anchored" data-anchor-id="a770-fp16"><strong>A770 (FP16)</strong></h5>
<ul>
<li><strong>Objects Detected:</strong> Call 23.25%, No Gesture 40.86%</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-openvino-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Moving to a higher resolution brought inconsistent improvements in accuracy and occasional crashes. The below sample is with an input resolution of <code>896x512</code> at FP16 precision.</p>
<p><strong>Objects Detected:</strong> Call 78.06%</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-openvino-yolox_896x512.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I later updated OpenVINO to the recent 2022.2 release, which resolved this issue.</p>
<p><strong>Objects Detected:</strong> Call 78.55%, No Gesture 83.23%</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-openvino-2022-2-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="onnx-directml-inference" class="level2">
<h2 class="anchored" data-anchor-id="onnx-directml-inference">ONNX-DirectML Inference</h2>
<p>I used the project from my <a href="../../onnx-directml-unity-tutorial/part-1/">Object Detection for Unity With ONNX Runtime and DirectML</a> tutorial to compare the inference speeds between the A770 and my Titan RTX. This project uses the same YOLOX tiny model and input resolution as the OpenVINO one but in FP32 precision.</p>
<p>The Titan RTX, essentially a 2080 Ti, hit around 145fps, while the A770 hovered around 120fps.</p>
<section id="a770" class="level5">
<h5 class="anchored" data-anchor-id="a770"><strong>A770</strong></h5>
<p><strong>Objects Detected:</strong> Call 78.64%, No Gesture 83.35%</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-onnx-directml-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="pytorch-directml-training" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-directml-training">PyTorch-DirectML Training</h2>
<p>As far as I know, the only way to train models at the time of writing on an Arc card is with the <a href="https://pypi.org/project/pytorch-directml/">pytorch-directml</a> package (or <a href="https://pypi.org/project/tensorflow-directml/">tensorflow-directml</a> package).</p>
<p>To test this, I set up a conda environment in <a href="https://learn.microsoft.com/en-us/windows/wsl/about">WSL</a> with the pytorch-directml package and downloaded the <a href="https://github.com/microsoft/DirectML/tree/master/PyTorch">sample repo</a> provided by Microsoft. The pytorch-directml package requires python 3.8, and the sample repo uses torchvision 0.9.0.</p>
<p>I successfully trained a ResNet50 model on <a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10</a> with the sample training script. GPU memory usage was volatile when using a batch size higher than 4. The ResNet50 training script used less than 3.6 GB of GPU memory at a batch size of 4.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_pytorch-dml-resnet50-resource-usage-bs-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>However, it spikes to using all 16 GB at a batch size of 8 and crashes the script. I was able to train at a batch size of 6, but barely.</p>
<p>I then attempted to train the style transfer model included with the <a href="https://github.com/pytorch/examples">pytorch examples repo</a> and hit the wall of unimplemented operators. Here is the <a href="https://github.com/microsoft/DirectML/wiki/PyTorch-DirectML-Operator-Roadmap">PyTorch DirectML Operator Roadmap</a>. Some of the missing operators are on the current roadmap, but not all of them.</p>
<p>The tensorflow-directml package recently received its first update since May, so hopefully, the PyTorch version will receive an update soon. I have no idea when the main PyTorch and TensorFlow libraries will gain support for Intel GPUs, but hopefully, that is not too far off either.</p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>directml</category>
  <category>openvino</category>
  <category>pytorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-1/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>In-Browser Object Detection for Unity with TensorFlow.js</title>
  <link>christianjmills.com/posts/tfjs-yolox-unity-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Convert Model to TFJS</li>
<li>Import Assets</li>
<li>Update JavaScript Utility File</li>
<li>Update jslib Plugin</li>
<li>Import Plugin Functions</li>
<li>Create Object Detector Script</li>
<li>Update Unity Scene</li>
<li>Test in Browser</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This follow-up post covers modifying the Unity project from the <a href="../tensorflow-js-unity-tutorial/part-1/">In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js</a> tutorial to perform object detection with a <a href="https://arxiv.org/abs/2107.08430">YOLOX</a> model.</p>
<p><strong>In-Browser Demo:</strong> <a href="https://cj-mills.github.io/hand-gesture-detector-webgl-demo/">Hand Gesture Detector</a></p>
<p><strong>Project Resources</strong></p>
<ul>
<li><a href="https://github.com/cj-mills/tfjs-yolox-unity-tutorial">GitHub Repository</a>: The final Unity project for this tutorial.</li>
<li><a href="https://drive.google.com/drive/folders/1sTU5fiG6mmq19fWzpmptBNJNN4qhN_yi?usp=sharing">Colormaps</a>: A JSON colormap file that maps each object class to a distinct color.</li>
<li><a href="https://drive.google.com/drive/folders/1kuSyQcW032Is1o1a3n8w9LGzdL_d44aC?usp=sharing">TFJSModels</a>: A YOLOX model in TensorFlow.js format.</li>
</ul>
</section>
<section id="convert-model-to-tfjs" class="level2">
<h2 class="anchored" data-anchor-id="convert-model-to-tfjs">Convert Model to TFJS</h2>
<p>We first need a YOLOX model in TensorFlow.js format. We can use the <a href="../tensorflow-js-unity-tutorial/part-1/#export-the-model">same steps</a> from the original tutorial to convert the YOLOX model from a <a href="../icevision-openvino-unity-tutorial/part-1/">previous tutorial</a>. The YOLOX model detects the same hand gestures as the image classifier from the original tutorial.</p>
<p>A link to the model conversion notebook is below, along with links for running the notebook on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a>.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/tfjs-yolox-unity-tutorial/blob/main/notebooks/ONNX-to-TF-to-TFJS.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/tfjs-yolox-unity-tutorial/blob/main/notebooks/ONNX-to-TF-to-TFJS-Colab.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/tfjs-yolox-unity-tutorial/blob/main/notebooks/ONNX-to-TF-to-TFJS-Kaggle.ipynb">Open in Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Open the Unity project from the original tutorial in the Unity Editor. Alternatively, you can create a copy of the project and rename it to something more appropriate. We will first import the colormap and TensorFlow.js model into the <code>Assets</code> folder.</p>
<p><strong>Import color map</strong></p>
<p>We’ll store the colormap JSON file in a new folder called <code>Colormaps</code>. Drag and drop the JSON colormap file from the operating system’s file explorer into the <code>Colormaps</code> folder.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1sTU5fiG6mmq19fWzpmptBNJNN4qhN_yi?usp=sharing">Colormaps</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-import-colormaps.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Import TFJS model</strong></p>
<p>We need to replace the existing TensorFlow.js models in the <code>StreamingAssets</code> folder with the YOLOX model.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1kuSyQcW032Is1o1a3n8w9LGzdL_d44aC?usp=sharing">TFJSModels</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-update-tfjs-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="update-javascript-utility-file" class="level2">
<h2 class="anchored" data-anchor-id="update-javascript-utility-file">Update JavaScript Utility File</h2>
<p>We’ll update the function in the utils.js file in the <code>StreamingAssets</code> folder to return the raw model output.</p>
<p><strong>Update function to perform inference asynchronously with YOLOX model</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Perform inference with the provided model and input data</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">async</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">PerformInferenceAsync</span>(model<span class="op" style="color: #5E5E5E;">,</span> float32Data<span class="op" style="color: #5E5E5E;">,</span> shape) {</span>
<span id="cb1-3"></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;">const</span> outputData <span class="op" style="color: #5E5E5E;">=</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">tidy</span>(() <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb1-5">        <span class="kw" style="color: #003B4F;">const</span> input_tensor <span class="op" style="color: #5E5E5E;">=</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">tensor</span>(float32Data<span class="op" style="color: #5E5E5E;">,</span> shape<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">'float32'</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;">// Make a prediction.</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;">return</span> model<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">predict</span>(input_tensor)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-8">    })<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;">return</span> <span class="cf" style="color: #003B4F;">await</span> outputData<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">data</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-10">}</span></code></pre></div>
</section>
<section id="update-jslib-plugin" class="level2">
<h2 class="anchored" data-anchor-id="update-jslib-plugin">Update jslib Plugin</h2>
<p>We also need to make a few updates to the <code>WebGLPlugin.jslib</code> file.</p>
<p><strong>Update function to Initialize TFJS model</strong></p>
<p>We’ll update the <code>InitTFJSModel</code> function to take the path to the YOLOX <code>model.json</code> file and the normalization stats to the plugin.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Load a TFJS YOLOX model</span></span>
<span id="cb2-2">InitTFJSModel<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">async</span> <span class="kw" style="color: #003B4F;">function</span> (model_path<span class="op" style="color: #5E5E5E;">,</span> mean<span class="op" style="color: #5E5E5E;">,</span> std_dev) {</span>
<span id="cb2-3"></span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;">// Convert bytes to the text</span></span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;">let</span> model_path_str <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UTF8ToString</span>(model_path)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;">// Load the TensorFlow.js model at the provided file path</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="cf" style="color: #003B4F;">await</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">loadGraphModel</span>(model_path_str<span class="op" style="color: #5E5E5E;">,</span> { <span class="dt" style="color: #AD0000;">fromTFHub</span><span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span> })<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;">// Check the model input shape</span></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;">const</span> input_shape <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">inputs</span>[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">shape</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-11">    <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="vs" style="color: #20794D;">`Input Shape: </span><span class="sc" style="color: #5E5E5E;">${</span>input_shape<span class="sc" style="color: #5E5E5E;">}</span><span class="vs" style="color: #20794D;">`</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;">// Store normalization stats</span></span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">mean</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Float32Array</span>(buffer<span class="op" style="color: #5E5E5E;">,</span> mean<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">std_dev</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Float32Array</span>(buffer<span class="op" style="color: #5E5E5E;">,</span> std_dev<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-16">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p><strong>Define function to update output array</strong></p>
<p>The size of the raw model output depends on the input resolution. That means we need to update the output array each time we update the input resolution.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// Update the array which stores the raw model output</span></span>
<span id="cb3-2">UpdateOutputArray<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">function</span> (array_data<span class="op" style="color: #5E5E5E;">,</span> size) {</span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;">delete</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">output_array</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">output_array</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Float32Array</span>(buffer<span class="op" style="color: #5E5E5E;">,</span> array_data<span class="op" style="color: #5E5E5E;">,</span> size)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5">    <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="vs" style="color: #20794D;">`New output size JS: </span><span class="sc" style="color: #5E5E5E;">${</span><span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">output_array</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">length</span><span class="sc" style="color: #5E5E5E;">}</span><span class="vs" style="color: #20794D;">`</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p><strong>Update inference function for YOLOX model</strong></p>
<p>Lastly, we need to update the <code>PerformInference</code> function to normalize the input data and fill the shared output array with the raw model output.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// Perform inference with the provided image data</span></span>
<span id="cb4-2">PerformInference<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">function</span> (image_data<span class="op" style="color: #5E5E5E;">,</span> size<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> height) {</span>
<span id="cb4-3"></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;">// Only perform inference after loading a model</span></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;">if</span> (<span class="kw" style="color: #003B4F;">typeof</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'undefined'</span>) {</span>
<span id="cb4-6">        <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="st" style="color: #20794D;">"Model not defined yet"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-8">    }</span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;">// Initialize an array with the raw image data</span></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;">const</span> uintArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Uint8ClampedArray</span>(buffer<span class="op" style="color: #5E5E5E;">,</span> image_data<span class="op" style="color: #5E5E5E;">,</span> size<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> height)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;">// Channels-last order</span></span>
<span id="cb4-14">    <span class="kw" style="color: #003B4F;">const</span> [input_array] <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Array</span>(<span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Array</span>())<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;">// Flip input image from Unity</span></span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">let</span> row <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> row <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> row<span class="op" style="color: #5E5E5E;">--</span>) {</span>
<span id="cb4-18">        <span class="kw" style="color: #003B4F;">let</span> slice <span class="op" style="color: #5E5E5E;">=</span> uintArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">slice</span>(row <span class="op" style="color: #5E5E5E;">*</span> width <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> (row <span class="op" style="color: #5E5E5E;">*</span> width <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="op" style="color: #5E5E5E;">+</span> (width <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>))<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">let</span> col <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> col <span class="op" style="color: #5E5E5E;">&lt;</span> slice<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">length</span><span class="op" style="color: #5E5E5E;">;</span> col <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span>) {</span>
<span id="cb4-20">            input_array<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(((slice[col <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">mean</span>[<span class="dv" style="color: #AD0000;">0</span>]) <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">std_dev</span>[<span class="dv" style="color: #AD0000;">0</span>])<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-21">            input_array<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(((slice[col <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">mean</span>[<span class="dv" style="color: #AD0000;">1</span>]) <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">std_dev</span>[<span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-22">            input_array<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(((slice[col <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>] <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">mean</span>[<span class="dv" style="color: #AD0000;">2</span>]) <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">std_dev</span>[<span class="dv" style="color: #AD0000;">2</span>])<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-23">        }</span>
<span id="cb4-24">    }</span>
<span id="cb4-25"></span>
<span id="cb4-26">    <span class="co" style="color: #5E5E5E;">// Initialize the input array with the preprocessed input data</span></span>
<span id="cb4-27">    <span class="kw" style="color: #003B4F;">const</span> float32Data <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">Float32Array</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">from</span>(input_array)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-28">    <span class="kw" style="color: #003B4F;">const</span> shape <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span>]<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-29"></span>
<span id="cb4-30">    <span class="co" style="color: #5E5E5E;">// Pass preprocessed input to the model</span></span>
<span id="cb4-31">    <span class="fu" style="color: #4758AB;">PerformInferenceAsync</span>(<span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span><span class="op" style="color: #5E5E5E;">,</span> float32Data<span class="op" style="color: #5E5E5E;">,</span> shape)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">then</span>(output <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb4-32">        <span class="cf" style="color: #003B4F;">if</span> (output_array<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">length</span> <span class="op" style="color: #5E5E5E;">==</span> output<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">length</span>) {</span>
<span id="cb4-33">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">output_array</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">set</span>(output)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-34">        }</span>
<span id="cb4-35">        <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-36">            <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="vs" style="color: #20794D;">`Model output size JS: </span><span class="sc" style="color: #5E5E5E;">${</span>output<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">length</span><span class="sc" style="color: #5E5E5E;">}</span><span class="vs" style="color: #20794D;">`</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-37">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">output_array</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fill</span>(<span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-38">        }</span>
<span id="cb4-39">    })</span>
<span id="cb4-40">    <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-41">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p>That’s it for the changes to the plugin code. Next, we need to update the script where we import the functions in Unity.</p>
</section>
<section id="import-plugin-functions" class="level2">
<h2 class="anchored" data-anchor-id="import-plugin-functions">Import Plugin Functions</h2>
<p>We need to update the import line for <code>InitTFJSModel</code> and import the new <code>UpdateOutputArray</code> function in the <code>WebGLPlugin.cs</code> script.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">/// Class with JavaScript plugin functions for WebGL.</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">class</span> WebGLPlugin</span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;">// Import "GetExternalJS" plugin function</span></span>
<span id="cb5-9">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetExternalJS</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;">// Import "SetTFJSBackend" plugin function</span></span>
<span id="cb5-12">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">SetTFJSBackend</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> backend<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;">// Import "InitTFJSModel" plugin function</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-16">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitTFJSModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model_path<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;">// Import "UpdateOutputArray" plugin function</span></span>
<span id="cb5-18">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateOutputArray</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> output_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;">// Import "PerformInference" plugin function</span></span>
<span id="cb5-21">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-22">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">bool</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">[]</span> image_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> size<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>Changing the import line for <code>InitTFJSModel</code> will cause an error in the <code>ImageClassifier</code> script, but we will resolve this in the next section.</p>
</section>
<section id="create-object-detector-script" class="level2">
<h2 class="anchored" data-anchor-id="create-object-detector-script">Create Object Detector Script</h2>
<p>We’ll replace the <code>ImageClassifier</code> script from the original tutorial with a new script called <code>ObjectDetector</code>. It will handle getting input images, sending them to the model, processing the model output, and drawing bounding boxes around detected objects. Delete the existing <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/create-object-detector-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
<li><a href="https://learn.microsoft.com/en-us/dotnet/api/system.io?view=net-7.0">System.IO</a>: Contains types that allow reading and writing to files and data streams, and types that provide basic file and directory support.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.multiplayer-hlapi@1.0/api/UnityEngine.Networking.html">UnityEngine.Networking</a>: Provides access to the <a href="https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.html">UnityWebRequest</a> module to communicate with http services.</li>
<li><a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq?view=net-7.0">System.Linq</a>: Provides classes and interfaces that support queries that use Language-Integrated Query (LINQ).</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Networking</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Linq</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Add code to create a list of available TFJS models</strong></p>
<p>We can use the <a href="../tensorflow-js-unity-tutorial/part-2/#create-image-classifier-script">same code</a> to create a list of available TFJS models used in the <code>ImageClassifier</code> script. This code will go right below the namespaces.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;">// A helper class that stores the name and file path for a TensorFlow.js model</span></span>
<span id="cb7-8">    <span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;">class</span> ModelData</span>
<span id="cb7-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-11">        <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-12">        <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> path<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">        <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">ModelData</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> name<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> path<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-16">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span> <span class="op" style="color: #5E5E5E;">=</span> name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-17">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">path</span> <span class="op" style="color: #5E5E5E;">=</span> path<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-18">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-19">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-20"></span>
<span id="cb7-21">    <span class="co" style="color: #5E5E5E;">// A helper class that stores a list of TensorFlow.js model names and file paths</span></span>
<span id="cb7-22">    <span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb7-23">    <span class="kw" style="color: #003B4F;">class</span> ModelList</span>
<span id="cb7-24">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-25">        <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-26"></span>
<span id="cb7-27">        <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">ModelList</span><span class="op" style="color: #5E5E5E;">(</span>List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-28">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-29">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">models</span> <span class="op" style="color: #5E5E5E;">=</span> models<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-30">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-32"></span>
<span id="cb7-33">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb7-34">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-35">        <span class="dt" style="color: #AD0000;">string</span> tfjsModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"TFJSModels"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-36">        List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb7-37"></span>
<span id="cb7-38">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Available models"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-39">        <span class="co" style="color: #5E5E5E;">// Get the paths for each model folder</span></span>
<span id="cb7-40">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> dir <span class="kw" style="color: #003B4F;">in</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDirectories</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{tfjsModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb7-41">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-42">            <span class="dt" style="color: #AD0000;">string</span> dirStr <span class="op" style="color: #5E5E5E;">=</span> dir<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"/"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-43">            <span class="co" style="color: #5E5E5E;">// Extract the model folder name</span></span>
<span id="cb7-44">            <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> splits <span class="op" style="color: #5E5E5E;">=</span> dirStr<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'/'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-45">            <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> splits<span class="op" style="color: #5E5E5E;">[</span>splits<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb7-46"></span>
<span id="cb7-47">            <span class="co" style="color: #5E5E5E;">// Get the paths for the model.json file for each model</span></span>
<span id="cb7-48">            <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>dirStr<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb7-49">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-50">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"model.json"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb7-51">                <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-52">                    <span class="dt" style="color: #AD0000;">string</span> fileStr <span class="op" style="color: #5E5E5E;">=</span> file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"/"</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span>Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">streamingAssetsPath</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-53">                    models<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelData</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">,</span> fileStr<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb7-54">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-55">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-56">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-57"></span>
<span id="cb7-58">        ModelList modelList <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelList</span><span class="op" style="color: #5E5E5E;">(</span>models<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-59">        <span class="co" style="color: #5E5E5E;">// Format the list of available models as a string in JSON format</span></span>
<span id="cb7-60">        <span class="dt" style="color: #AD0000;">string</span> json <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ToJson</span><span class="op" style="color: #5E5E5E;">(</span>modelList<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-61">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Model List JSON: {json}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-62">        <span class="co" style="color: #5E5E5E;">// Write the list of available TensorFlow.js models to a JSON file</span></span>
<span id="cb7-63">        <span class="kw" style="color: #003B4F;">using</span> StreamWriter writer <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">StreamWriter</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/models.json"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-64">        writer<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Write</span><span class="op" style="color: #5E5E5E;">(</span>json<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-65">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-66"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-67"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>The required public variables are mostly the same as the <a href="../tensorflow-js-unity-tutorial/part-2/#define-public-variables"><code>ImageClassifier</code> script</a>.</p>
<p><strong>Define scene object variables</strong></p>
<p>We’ll add a new variable to indicate whether to mirror the in-scene screen.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Mirror the in-game screen."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>We’ll increase the default target input resolution from <code>216</code> to <code>224</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>We’ll replace the <code>classLabels</code> <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a> with a variable for the colormap JSON file.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the colormaps for object classes"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Minimum confidence score for keeping predictions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-5"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> 1f<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> minConfidence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging (unchanged)</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables (unchanged)</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll replace the <code>displayPredictedClass</code> GUI variable with two new variables that control displaying bounding boxes and the number of detected objects.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayBoundingBoxes <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display number of detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayProposalCount <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-9"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">yellow</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-12"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-15"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-17"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available TFJS models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available TFJS backends"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-23"><span class="kw" style="color: #003B4F;">public</span> Dropdown backendDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define TensorFlow.js variables (unchanged)</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"TFJS"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb14-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the TFJS models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> tfjsModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"TFJSModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables (unchanged)</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables (unchanged)</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb16-2">Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb16-4">Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb16-6">Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb16-8">RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb16-10">Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for colormap</strong></p>
<p>We’ll create a couple of classes to parse the JSON colormap content.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">// A class for parsing in colormaps from a JSON file</span></span>
<span id="cb17-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">class</span> ColorMap <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> label<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> color<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">// A class for reading in a list of colormaps from a JSON file</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;">class</span> ColorMapList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ColorMap<span class="op" style="color: #5E5E5E;">&gt;</span> items<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;">// Stores a list of colormaps from a JSON file</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;">private</span> ColorMapList colormapList<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;">// A list of colors that map to class labels</span></span>
<span id="cb17-10"><span class="kw" style="color: #003B4F;">private</span> Color<span class="op" style="color: #5E5E5E;">[]</span> colors<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;">// A list of single pixel textures that map to class labels</span></span>
<span id="cb17-12"><span class="kw" style="color: #003B4F;">private</span> Texture2D<span class="op" style="color: #5E5E5E;">[]</span> colorTextures<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variable to track whether a model is initialized (unchanged)</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">// Stores whether the TensorFlow.js model is ready for inference</span></span>
<span id="cb18-2"><span class="dt" style="color: #AD0000;">bool</span> modelInitialized<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate (unchanged)</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables to store values for GUI dropdowns (unchanged)</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// File paths for the available TFJS models</span></span>
<span id="cb20-2">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">// Names of the available TFJS models</span></span>
<span id="cb20-4">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;">// Names of the available TFJS backends</span></span>
<span id="cb20-6">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> tfjsBackends <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="st" style="color: #20794D;">"webgl"</span> <span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
<p><strong>Define variables for reading the <code>models.json</code> file (unchanged)</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">// A helper class to store the name and file path of a TensorFlow.js model</span></span>
<span id="cb21-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb21-3"><span class="kw" style="color: #003B4F;">class</span> ModelData <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> name<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> path<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">// A helper class to store a read a list of available TensorFlow.js models from a JSON file</span></span>
<span id="cb21-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;">class</span> ModelList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables for normalization stats</strong></p>
<p>The YOLOX model uses the standard ImageNet normalization stats from PyTorch.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">// The normalization stats for the YOLOX model</span></span>
<span id="cb22-2"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="fl" style="color: #AD0000;">0.485f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.456f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.406f</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb22-3"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="fl" style="color: #AD0000;">0.229f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.224f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.225f</span> <span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
<p><strong>Define struct to store information for object predictions</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Stores the information for a single object</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span><span class="co" style="color: #5E5E5E;"> </span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb23-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;">// The X coordinate for the top left bounding box corner</span></span>
<span id="cb23-7">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-8">    <span class="co" style="color: #5E5E5E;">// The Y coordinate for the top left bounding box cornder</span></span>
<span id="cb23-9">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-10">    <span class="co" style="color: #5E5E5E;">// The width of the bounding box</span></span>
<span id="cb23-11">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-12">    <span class="co" style="color: #5E5E5E;">// The height of the bounding box</span></span>
<span id="cb23-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-14">    <span class="co" style="color: #5E5E5E;">// The object class index for the detected object</span></span>
<span id="cb23-15">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-16">    <span class="co" style="color: #5E5E5E;">// The model confidence score for the object</span></span>
<span id="cb23-17">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-18"></span>
<span id="cb23-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">Object</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb23-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-21">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-22">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-23">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-24">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-25">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">=</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-26">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">=</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-27">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-28"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define struct to store grid offset and stride values</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">// Store grid offset and stride values to decode a section of the model output</span></span>
<span id="cb24-2"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">struct</span> GridAndStride</span>
<span id="cb24-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-4">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-5">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-6">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-7"></span>
<span id="cb24-8">    <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">GridAndStride</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> grid0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> grid1<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> stride<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb24-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-10">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grid0</span> <span class="op" style="color: #5E5E5E;">=</span> grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-11">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grid1</span> <span class="op" style="color: #5E5E5E;">=</span> grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-12">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">stride</span> <span class="op" style="color: #5E5E5E;">=</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables for processing model output</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">// Stores information for the current list of detected objects</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;">private</span> Object<span class="op" style="color: #5E5E5E;">[]</span> objectInfoArray<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">// Stores the grid and stride values to navigate the raw model output</span></span>
<span id="cb25-4">List<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> grid_strides <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;">// The stride values used to generate the gride_strides vector</span></span>
<span id="cb25-6"><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> strides <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">32</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;">// Stores the raw model output</span></span>
<span id="cb25-8"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> output_array<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;">// The scale values used to adjust the model output to the source image resolution</span></span>
<span id="cb25-10"><span class="dt" style="color: #AD0000;">float</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb25-11"><span class="dt" style="color: #AD0000;">float</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb25-12"><span class="co" style="color: #5E5E5E;">// Stores the number of detected objects</span></span>
<span id="cb25-13"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>The initialization methods are identical to those from the <code>ImageClassifier</code> script except for <code>UpdateTFJSModel</code>.</p>
<p><strong>Define method to initialize a webcam device (unchanged)</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb26-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb26-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-12"></span>
<span id="cb26-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb26-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb26-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb26-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-19"></span>
<span id="cb26-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object (unchanged)</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb27-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb27-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb27-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-10"></span>
<span id="cb27-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb27-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb27-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-15"></span>
<span id="cb27-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb27-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb27-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-20"></span>
<span id="cb27-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb27-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to switch TensorFlow.js models</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;">/// Load a TensorFlow.js model</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateTFJSModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb28-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;">// Load TensorFlow.js model in JavaScript plugin</span></span>
<span id="cb28-7">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InitTFJSModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> mean<span class="op" style="color: #5E5E5E;">,</span> std<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to read the list of available TensorFlow.js models (unchanged)</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;">/// Get the names and paths of the available TensorFlow.js models</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"json"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb29-5"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetTFJSModels</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> json<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb29-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-7">    ModelList modelList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ModelList<span class="op" style="color: #5E5E5E;">&gt;(</span>json<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>ModelData model <span class="kw" style="color: #003B4F;">in</span> modelList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">models</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb29-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-10">        <span class="co" style="color: #5E5E5E;">//Debug.Log($"{model.name}: {model.path}");</span></span>
<span id="cb29-11">        modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>model<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-12">        <span class="dt" style="color: #AD0000;">string</span> path <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}{model.path}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-13">        modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>path<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-14">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb29-15">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb29-16">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-17">    <span class="co" style="color: #5E5E5E;">// Add TFJS model names to menu</span></span>
<span id="cb29-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-19">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb29-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to download the list of available TensorFlow.js models (unchanged)</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;">/// Download the JSON file with the available TFJS model information</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"uri"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb30-6">IEnumerator <span class="fu" style="color: #4758AB;">GetRequest</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> uri<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-8">    <span class="kw" style="color: #003B4F;">using</span> <span class="op" style="color: #5E5E5E;">(</span>UnityWebRequest webRequest <span class="op" style="color: #5E5E5E;">=</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Get</span><span class="op" style="color: #5E5E5E;">(</span>uri<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb30-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-10">        <span class="co" style="color: #5E5E5E;">// Request and wait for the desired page.</span></span>
<span id="cb30-11">        <span class="kw" style="color: #003B4F;">yield</span> <span class="kw" style="color: #003B4F;">return</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SendWebRequest</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-12"></span>
<span id="cb30-13">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> pages <span class="op" style="color: #5E5E5E;">=</span> uri<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'/'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-14">        <span class="dt" style="color: #AD0000;">int</span> page <span class="op" style="color: #5E5E5E;">=</span> pages<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-15"></span>
<span id="cb30-16">        <span class="kw" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">result</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-17">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-18">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ConnectionError</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-19">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DataProcessingError</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-20">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LogError</span><span class="op" style="color: #5E5E5E;">(</span>pages<span class="op" style="color: #5E5E5E;">[</span>page<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">": Error: "</span> <span class="op" style="color: #5E5E5E;">+</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">error</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-21">                <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-22">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ProtocolError</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-23">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LogError</span><span class="op" style="color: #5E5E5E;">(</span>pages<span class="op" style="color: #5E5E5E;">[</span>page<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">": HTTP Error: "</span> <span class="op" style="color: #5E5E5E;">+</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">error</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-24">                <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-25">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Success</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-26">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>pages<span class="op" style="color: #5E5E5E;">[</span>page<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">":</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">Received: "</span> <span class="op" style="color: #5E5E5E;">+</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">downloadHandler</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-27"></span>
<span id="cb30-28">                <span class="co" style="color: #5E5E5E;">// Extract the available model names and file paths from the JSON string</span></span>
<span id="cb30-29">                <span class="fu" style="color: #4758AB;">GetTFJSModels</span><span class="op" style="color: #5E5E5E;">(</span>webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">downloadHandler</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-30">                <span class="co" style="color: #5E5E5E;">// Initialize one of the available TensorFlow.js models</span></span>
<span id="cb30-31">                <span class="fu" style="color: #4758AB;">UpdateTFJSModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-32">                <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-33">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-34">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-35"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options (unchanged)</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb31-4"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb31-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb31-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb31-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-9"></span>
<span id="cb31-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb31-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb31-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb31-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-16"></span>
<span id="cb31-17">    <span class="co" style="color: #5E5E5E;">// Get the available TensorFlow.js models</span></span>
<span id="cb31-18">    <span class="dt" style="color: #AD0000;">string</span> modelListPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/models.json"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-19">    <span class="fu" style="color: #4758AB;">StartCoroutine</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetRequest</span><span class="op" style="color: #5E5E5E;">(</span>modelListPath<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-20"></span>
<span id="cb31-21">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb31-22">    backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-23">    <span class="co" style="color: #5E5E5E;">// Add TFJS backend names to menu</span></span>
<span id="cb31-24">    backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>tfjsBackends<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb31-26">    backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-27"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object (unchanged)</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb32-5"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb32-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb32-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb32-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb32-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-awake-method-unchanged" class="level3">
<h3 class="anchored" data-anchor-id="define-awake-method-unchanged">Define Awake method (unchanged)</h3>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">// Awake is called when the script instance is being loaded</span></span>
<span id="cb33-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb33-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-4">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetExternalJS</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb33-5"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start method</h3>
<p>In the Start method, we need to initialize the color map variables with the JSON file.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb34-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb34-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb34-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb34-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-8"></span>
<span id="cb34-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb34-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb34-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-16"></span>
<span id="cb34-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb34-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb34-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb34-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-21"></span>
<span id="cb34-22"></span>
<span id="cb34-23">    <span class="co" style="color: #5E5E5E;">// Initialize list of color maps from JSON file</span></span>
<span id="cb34-24">    colormapList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ColorMapList<span class="op" style="color: #5E5E5E;">&gt;(</span>colormapFile<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-25">    <span class="co" style="color: #5E5E5E;">// Initialize the list of colors</span></span>
<span id="cb34-26">    colors <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Color<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb34-27">    <span class="co" style="color: #5E5E5E;">// Initialize the list of color textures</span></span>
<span id="cb34-28">    colorTextures <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Texture2D<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb34-29"></span>
<span id="cb34-30">    <span class="co" style="color: #5E5E5E;">// Populate the color and color texture arrays</span></span>
<span id="cb34-31">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb34-32">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-33">        <span class="co" style="color: #5E5E5E;">// Create a new color object</span></span>
<span id="cb34-34">        colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Color</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb34-35">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb34-36">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb34-37">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb34-38">        <span class="co" style="color: #5E5E5E;">// Create a single-pixel texture</span></span>
<span id="cb34-39">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-40">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">SetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb34-41">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb34-42"></span>
<span id="cb34-43">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-44"></span>
<span id="cb34-45">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb34-46">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb34-47"></span>
<span id="cb34-48">    <span class="co" style="color: #5E5E5E;">// Update the current TensorFlow.js compute backend</span></span>
<span id="cb34-49">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTFJSBackend</span><span class="op" style="color: #5E5E5E;">(</span>tfjsBackends<span class="op" style="color: #5E5E5E;">[</span>backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb34-50"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>The preprocessing methods are identical to those from the <code>ImageClassifier</code> script. However, we need to add some post-processing methods to extract object predictions from the raw model output.</p>
<p><strong>Define method to calculate input resolution (unchanged)</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb35-8">Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-10">    <span class="co" style="color: #5E5E5E;">// Clamp the minimum dimension value to 64px</span></span>
<span id="cb35-11">    targetDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>targetDim<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-12"></span>
<span id="cb35-13">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-14"></span>
<span id="cb35-15">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb35-16">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-17">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-18">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb35-19">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-21">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb35-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-23">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-24">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb35-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-28"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to scale bounding boxes to the display resolution</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;">/// Scale the latest bounding boxes to the display resolution</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb36-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb36-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-6">    <span class="co" style="color: #5E5E5E;">// Process new detected objects</span></span>
<span id="cb36-7">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> objectInfoArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb36-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-9">        <span class="co" style="color: #5E5E5E;">// The smallest dimension of the screen</span></span>
<span id="cb36-10">        <span class="dt" style="color: #AD0000;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-11">        <span class="co" style="color: #5E5E5E;">// The smallest input dimension</span></span>
<span id="cb36-12">        <span class="dt" style="color: #AD0000;">int</span> minInputDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-13">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb36-14">        <span class="dt" style="color: #AD0000;">float</span> minImgScale <span class="op" style="color: #5E5E5E;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;">/</span> minInputDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-15">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb36-16">        <span class="dt" style="color: #AD0000;">float</span> displayScale <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-17"></span>
<span id="cb36-18">        <span class="co" style="color: #5E5E5E;">// Scale bounding box to in-game screen resolution and flip the bbox coordinates vertically</span></span>
<span id="cb36-19">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-20">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-21">        <span class="dt" style="color: #AD0000;">float</span> width <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-22">        <span class="dt" style="color: #AD0000;">float</span> height <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-23"></span>
<span id="cb36-24">        <span class="co" style="color: #5E5E5E;">// Mirror bounding box across screen</span></span>
<span id="cb36-25">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mirrorScreen <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-26">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-27">            x0 <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">-</span> x0 <span class="op" style="color: #5E5E5E;">-</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-28">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-29"></span>
<span id="cb36-30">        <span class="co" style="color: #5E5E5E;">// Scale bounding boxes to display resolution</span></span>
<span id="cb36-31">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-32">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-33">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-34">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-35"></span>
<span id="cb36-36">        <span class="co" style="color: #5E5E5E;">// Offset the bounding box coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb36-37">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">-</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-38">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-39"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate stride values to navigate the raw model output</strong></p>
<p>We’ll generate offset values based on the input dimensions and stride values, which we can use to traverse the output array.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">/// Generate offset values to navigate the raw model output</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"height"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input height</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb37-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"width"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input width</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb37-7">List<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">GenerateGridStrides</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-9">    List<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> grid_strides <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb37-10"></span>
<span id="cb37-11">    <span class="co" style="color: #5E5E5E;">// Iterate through each stride value</span></span>
<span id="cb37-12">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> stride <span class="kw" style="color: #003B4F;">in</span> strides<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-13">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-14">        <span class="co" style="color: #5E5E5E;">// Calculate the grid dimensions</span></span>
<span id="cb37-15">        <span class="dt" style="color: #AD0000;">int</span> grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-16">        <span class="dt" style="color: #AD0000;">int</span> grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-17"></span>
<span id="cb37-18">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Gride: {grid_height} x {grid_width}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb37-19"></span>
<span id="cb37-20">        <span class="co" style="color: #5E5E5E;">// Store each combination of grid coordinates</span></span>
<span id="cb37-21">        <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g1 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_height<span class="op" style="color: #5E5E5E;">;</span> g1<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb37-22">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-23"></span>
<span id="cb37-24">            <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g0 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_width<span class="op" style="color: #5E5E5E;">;</span> g0<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb37-25">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-26">                grid_strides<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GridAndStride</span><span class="op" style="color: #5E5E5E;">(</span>g0<span class="op" style="color: #5E5E5E;">,</span> g1<span class="op" style="color: #5E5E5E;">,</span> stride<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb37-27">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb37-28">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb37-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb37-30">    <span class="kw" style="color: #003B4F;">return</span> grid_strides<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-31"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>Next, we define a method to iterate through the output array and decode the bounding box information for each object proposal. We only want to keep the ones with a high enough confidence score. The model predicts the center coordinates of a bounding box, but we store the coordinates for the top-left corner as we use this to draw the rectangles on the screen.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;">/// Generate object detection proposals from the raw model output</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model_output"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The raw model output</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"proposal_length"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The length of a single proposal</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb38-7">List<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">GenerateYOLOXProposals</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> model_output<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> proposal_length<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb38-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-9">    List<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb38-10"></span>
<span id="cb38-11">    <span class="co" style="color: #5E5E5E;">// Obtain the number of classes the model was trained to detect</span></span>
<span id="cb38-12">    <span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-13"></span>
<span id="cb38-14">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> anchor_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> anchor_idx <span class="op" style="color: #5E5E5E;">&lt;</span> grid_strides<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">;</span> anchor_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb38-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-16">        <span class="co" style="color: #5E5E5E;">// Get the current grid and stride values</span></span>
<span id="cb38-17">        <span class="dt" style="color: #AD0000;">var</span> grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">grid0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-18">        <span class="dt" style="color: #AD0000;">var</span> grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">grid1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-19">        <span class="dt" style="color: #AD0000;">var</span> stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">stride</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-20"></span>
<span id="cb38-21">        <span class="co" style="color: #5E5E5E;">// Get the starting index for the current proposal</span></span>
<span id="cb38-22">        <span class="dt" style="color: #AD0000;">var</span> start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-23"></span>
<span id="cb38-24">        <span class="co" style="color: #5E5E5E;">// Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb38-25">        <span class="dt" style="color: #AD0000;">var</span> x_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>model_output<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid0<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-26">        <span class="dt" style="color: #AD0000;">var</span> y_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>model_output<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid1<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-27"></span>
<span id="cb38-28">        <span class="co" style="color: #5E5E5E;">// Get the dimensions for the predicted bounding box</span></span>
<span id="cb38-29">        <span class="dt" style="color: #AD0000;">var</span> w <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exp</span><span class="op" style="color: #5E5E5E;">(</span>model_output<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-30">        <span class="dt" style="color: #AD0000;">var</span> h <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exp</span><span class="op" style="color: #5E5E5E;">(</span>model_output<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-31"></span>
<span id="cb38-32">        <span class="co" style="color: #5E5E5E;">// Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb38-33">        <span class="dt" style="color: #AD0000;">var</span> x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-34">        <span class="dt" style="color: #AD0000;">var</span> y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-35"></span>
<span id="cb38-36">        x0 <span class="op" style="color: #5E5E5E;">/=</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-37">        y0 <span class="op" style="color: #5E5E5E;">/=</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-38">        w <span class="op" style="color: #5E5E5E;">/=</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-39">        h <span class="op" style="color: #5E5E5E;">/=</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-40"></span>
<span id="cb38-41">        <span class="co" style="color: #5E5E5E;">// Get the confidence score that an object is present</span></span>
<span id="cb38-42">        <span class="dt" style="color: #AD0000;">var</span> box_objectness <span class="op" style="color: #5E5E5E;">=</span> model_output<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb38-43"></span>
<span id="cb38-44">        <span class="co" style="color: #5E5E5E;">// Initialize object struct with bounding box information</span></span>
<span id="cb38-45">        Object obj <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Object</span><span class="op" style="color: #5E5E5E;">(</span>x0<span class="op" style="color: #5E5E5E;">,</span> y0<span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-46"></span>
<span id="cb38-47">        <span class="co" style="color: #5E5E5E;">// Find the object class with the highest confidence score</span></span>
<span id="cb38-48">        <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> class_idx <span class="op" style="color: #5E5E5E;">&lt;</span> num_classes<span class="op" style="color: #5E5E5E;">;</span> class_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb38-49">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-50">            <span class="co" style="color: #5E5E5E;">// Get the confidence score for the current object class</span></span>
<span id="cb38-51">            <span class="dt" style="color: #AD0000;">var</span> box_cls_score <span class="op" style="color: #5E5E5E;">=</span> model_output<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb38-52">            <span class="co" style="color: #5E5E5E;">// Calculate the final confidence score for the object proposal</span></span>
<span id="cb38-53">            <span class="dt" style="color: #AD0000;">var</span> box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-54"></span>
<span id="cb38-55">            <span class="co" style="color: #5E5E5E;">// Check for the highest confidence score</span></span>
<span id="cb38-56">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb38-57">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-58">                obj<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">=</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-59">                obj<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">=</span> box_prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-60">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb38-61">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb38-62"></span>
<span id="cb38-63">        <span class="co" style="color: #5E5E5E;">// Only add object proposals with high enough confidence scores</span></span>
<span id="cb38-64">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">&gt;</span> minConfidence<span class="op" style="color: #5E5E5E;">)</span> proposals<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-65">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb38-66"></span>
<span id="cb38-67">    <span class="co" style="color: #5E5E5E;">// Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb38-68">    proposals <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">OrderByDescending</span><span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">=&gt;</span> x<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">ToList</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb38-69"></span>
<span id="cb38-70">    <span class="kw" style="color: #003B4F;">return</span> proposals<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-71"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to calculate the union area of two bounding boxes</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;">/// Calculate the union area of two bounding boxes</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"a"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"b"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb39-7"><span class="dt" style="color: #AD0000;">float</span> <span class="fu" style="color: #4758AB;">CalcUnionArea</span><span class="op" style="color: #5E5E5E;">(</span>Object a<span class="op" style="color: #5E5E5E;">,</span> Object b<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb39-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb39-9">    <span class="dt" style="color: #AD0000;">var</span> x <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb39-10">    <span class="dt" style="color: #AD0000;">var</span> y <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb39-11">    <span class="dt" style="color: #AD0000;">var</span> w <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-12">    <span class="dt" style="color: #AD0000;">var</span> h <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">+</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">+</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-13">    <span class="kw" style="color: #003B4F;">return</span> w <span class="op" style="color: #5E5E5E;">*</span> h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to calculate the intersection area of two bounding boxes</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;">/// Calculate the intersection area of two bounding boxes</span></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"a"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"b"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb40-7"><span class="dt" style="color: #AD0000;">float</span> <span class="fu" style="color: #4758AB;">CalcInterArea</span><span class="op" style="color: #5E5E5E;">(</span>Object a<span class="op" style="color: #5E5E5E;">,</span> Object b<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-9">    <span class="dt" style="color: #AD0000;">var</span> x <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-10">    <span class="dt" style="color: #AD0000;">var</span> y <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-11">    <span class="dt" style="color: #AD0000;">var</span> w <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-12">    <span class="dt" style="color: #AD0000;">var</span> h <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">+</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">+</span> b<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-13">    <span class="kw" style="color: #003B4F;">return</span> w <span class="op" style="color: #5E5E5E;">*</span> h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb41-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;">/// Sort bounding box proposals using Non-Maximum Suppression</span></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"proposals"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"nms_thresh"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb41-7">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">NMSSortedBoxes</span><span class="op" style="color: #5E5E5E;">(</span>List<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45f</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb41-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-9">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> proposal_indices <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb41-10"></span>
<span id="cb41-11">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposals<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb41-12">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-13">        <span class="dt" style="color: #AD0000;">var</span> a <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb41-14">        <span class="dt" style="color: #AD0000;">bool</span> keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-15"></span>
<span id="cb41-16">        <span class="co" style="color: #5E5E5E;">// Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb41-17">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="kw" style="color: #003B4F;">in</span> proposal_indices<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb41-18">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-19">            <span class="dt" style="color: #AD0000;">var</span> b <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb41-20"></span>
<span id="cb41-21">            <span class="co" style="color: #5E5E5E;">// Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb41-22">            <span class="dt" style="color: #AD0000;">var</span> inter_area <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalcInterArea</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-23"></span>
<span id="cb41-24">            <span class="co" style="color: #5E5E5E;">// Calculate the union area of both bounding boxes</span></span>
<span id="cb41-25">            <span class="dt" style="color: #AD0000;">var</span> union_area <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalcUnionArea</span><span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-26"></span>
<span id="cb41-27">            <span class="co" style="color: #5E5E5E;">// Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb41-28">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh<span class="op" style="color: #5E5E5E;">)</span> keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-29">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb41-30"></span>
<span id="cb41-31">        <span class="co" style="color: #5E5E5E;">// Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb41-32">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>keep<span class="op" style="color: #5E5E5E;">)</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-33">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb41-34"></span>
<span id="cb41-35">    <span class="kw" style="color: #003B4F;">return</span> proposal_indices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>Most of the Update method is identical to the one from the <code>ImageClassifier</code> script, besides the post-processing steps. Although, there is an odd quirk with part of the YOLOX model in TensorFlow.js.</p>
<p>The YOLOX model requires input dimensions that are multiples of 32. However, if we perform inference with such an input resolution, we get an error like the one below.</p>
<pre class="text"><code>Uncaught (in promise) Error: Error in concat4D: Shape of tensors[1] (1,3,111,112) does not match the shape of the rest (1,3,112,112) along the non-concatenated axis 1.</code></pre>
<p>I don’t know why this occurs in TensorFlow.js, but we can resolve it by adding 1 to each input dimension. So instead of an input resolution of <code>224x224</code>, we have <code>225x225</code>.</p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb43-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb43-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb43-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb43-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb43-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb43-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb43-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-9"></span>
<span id="cb43-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb43-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-12"></span>
<span id="cb43-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb43-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb43-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb43-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb43-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb43-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb43-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb43-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb43-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb43-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb43-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb43-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb43-26"></span>
<span id="cb43-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb43-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb43-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb43-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb43-32"></span>
<span id="cb43-33"></span>
<span id="cb43-34">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb43-35">    Vector2Int sourceDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-36">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> sourceDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-37">    inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">32</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-38">    inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">32</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-39">    scale_x <span class="op" style="color: #5E5E5E;">=</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>sourceDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb43-40">    scale_y <span class="op" style="color: #5E5E5E;">=</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>sourceDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb43-41"></span>
<span id="cb43-42"></span>
<span id="cb43-43">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb43-44">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGB32</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-45"></span>
<span id="cb43-46">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb43-47">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb43-48">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGB24</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-49">        grid_strides <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb43-50">        grid_strides <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GenerateGridStrides</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb43-51"></span>
<span id="cb43-52">        <span class="dt" style="color: #AD0000;">int</span> output_size <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-53">        output_array <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[</span>output_size<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb43-54">        WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UpdateOutputArray</span><span class="op" style="color: #5E5E5E;">(</span>output_array<span class="op" style="color: #5E5E5E;">,</span> output_size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-55">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Updating output array to {output_size}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-56">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureCPU.width}x{inputTextureCPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb43-58"></span>
<span id="cb43-59">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureGPU.width}x{inputTextureGPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-60"></span>
<span id="cb43-61">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb43-62">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-63"></span>
<span id="cb43-64">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb43-65">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-66">    inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-67">    inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb43-68"></span>
<span id="cb43-69">    <span class="co" style="color: #5E5E5E;">// Get the current input dimensions</span></span>
<span id="cb43-70">    <span class="dt" style="color: #AD0000;">int</span> width <span class="op" style="color: #5E5E5E;">=</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-71">    <span class="dt" style="color: #AD0000;">int</span> height <span class="op" style="color: #5E5E5E;">=</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-72">    <span class="dt" style="color: #AD0000;">int</span> size <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> height <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-73"></span>
<span id="cb43-74">    <span class="co" style="color: #5E5E5E;">// Pass the input data to the plugin to perform inference</span></span>
<span id="cb43-75">    modelInitialized <span class="op" style="color: #5E5E5E;">=</span> WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">(),</span> size<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-76"></span>
<span id="cb43-77">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb43-78">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-79"></span>
<span id="cb43-80">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>modelInitialized <span class="op" style="color: #5E5E5E;">==</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-81"></span>
<span id="cb43-82">    List<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GenerateYOLOXProposals</span><span class="op" style="color: #5E5E5E;">(</span>output_array<span class="op" style="color: #5E5E5E;">,</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-83"></span>
<span id="cb43-84">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> proposal_indices <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">NMSSortedBoxes</span><span class="op" style="color: #5E5E5E;">(</span>proposals<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb43-85">    numObjects <span class="op" style="color: #5E5E5E;">=</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb43-86">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span>numObjects<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb43-87">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> objectInfoArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb43-88">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb43-89">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>proposal_indices<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb43-90">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb43-91">    <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb43-92"></span>
<span id="cb43-93"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p><strong>Define method to update webcam usage from GUI (unchanged)</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb44-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb44-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb44-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb44-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb44-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb44-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI (unchanged)</strong></p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb45-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb45-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb45-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb45-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb45-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb45-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb45-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb45-10"></span>
<span id="cb45-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb45-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb45-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb45-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb45-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the TensorFlow.js backend (unchanged)</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb46-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;">/// Update the TensorFlow.js compute backend</span></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb46-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateTFJSBackend</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb46-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb46-6">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTFJSBackend</span><span class="op" style="color: #5E5E5E;">(</span>tfjsBackends<span class="op" style="color: #5E5E5E;">[</span>backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb46-7"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the confidence threshold (unchanged)</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb47-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;">/// Update the minimum confidence score for keeping predictions</span></span>
<span id="cb47-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb47-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"slider"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb47-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>Slider slider<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb47-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb47-7">    minConfidence <span class="op" style="color: #5E5E5E;">=</span> slider<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb47-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted bounding boxes and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method. We’ll show a different message while the model is still loading.</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb48-1"><span class="co" style="color: #5E5E5E;">// OnGUI is called for rendering and handling GUI events.</span></span>
<span id="cb48-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb48-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb48-4">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for label text</span></span>
<span id="cb48-5">    Rect labelRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb48-6">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for bounding boxes</span></span>
<span id="cb48-7">    Rect boxRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb48-8"></span>
<span id="cb48-9">    GUIStyle labelStyle <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb48-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb48-11">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">11e-3</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb48-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb48-13">    labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">alignment</span> <span class="op" style="color: #5E5E5E;">=</span> TextAnchor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">MiddleLeft</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-14"></span>
<span id="cb48-15">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>Object objectInfo <span class="kw" style="color: #003B4F;">in</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb48-16">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb48-17">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>displayBoundingBoxes<span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-18"></span>
<span id="cb48-19">        <span class="co" style="color: #5E5E5E;">// Skip object if label index is out of bounds</span></span>
<span id="cb48-20">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">&gt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-21"></span>
<span id="cb48-22">        <span class="co" style="color: #5E5E5E;">// Get color for current class index</span></span>
<span id="cb48-23">        Color color <span class="op" style="color: #5E5E5E;">=</span> colors<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb48-24">        <span class="co" style="color: #5E5E5E;">// Get label for current class index</span></span>
<span id="cb48-25">        <span class="dt" style="color: #AD0000;">string</span> name <span class="op" style="color: #5E5E5E;">=</span> colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-26"></span>
<span id="cb48-27">        <span class="co" style="color: #5E5E5E;">// Set bounding box coordinates</span></span>
<span id="cb48-28">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-29">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-30">        <span class="co" style="color: #5E5E5E;">// Set bounding box dimensions</span></span>
<span id="cb48-31">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-32">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-33"></span>
<span id="cb48-34">        <span class="co" style="color: #5E5E5E;">// Scale bounding box line width based on display resolution</span></span>
<span id="cb48-35">        <span class="dt" style="color: #AD0000;">int</span> lineWidth <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.75e-3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-36">        <span class="co" style="color: #5E5E5E;">// Render bounding box</span></span>
<span id="cb48-37">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb48-38">            position<span class="op" style="color: #5E5E5E;">:</span> boxRect<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-39">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-40">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-41">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-42">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-43">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-44">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> lineWidth<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-45">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-46"></span>
<span id="cb48-47">        <span class="co" style="color: #5E5E5E;">// Include class label and confidence score in label text</span></span>
<span id="cb48-48">        <span class="dt" style="color: #AD0000;">string</span> labelText <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">" {name}: {(objectInfo.prob * 100).ToString("</span><span class="fl" style="color: #AD0000;">0.</span>##<span class="st" style="color: #20794D;">")}%"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-49"></span>
<span id="cb48-50">        <span class="co" style="color: #5E5E5E;">// Initialize label GUI content</span></span>
<span id="cb48-51">        GUIContent labelContent <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>labelText<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-52"></span>
<span id="cb48-53">        <span class="co" style="color: #5E5E5E;">// Calculate the text size.</span></span>
<span id="cb48-54">        Vector2 textSize <span class="op" style="color: #5E5E5E;">=</span> labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CalcSize</span><span class="op" style="color: #5E5E5E;">(</span>labelContent<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-55"></span>
<span id="cb48-56">        <span class="co" style="color: #5E5E5E;">// Set label text coordinates</span></span>
<span id="cb48-57">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-58">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">-</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> lineWidth<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-59"></span>
<span id="cb48-60">        <span class="co" style="color: #5E5E5E;">// Set label text dimensions</span></span>
<span id="cb48-61">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-62">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-63">        <span class="co" style="color: #5E5E5E;">// Set label text and backgound color</span></span>
<span id="cb48-64">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grayscale</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">?</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">black</span> <span class="op" style="color: #5E5E5E;">:</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">white</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-65">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span> <span class="op" style="color: #5E5E5E;">=</span> colorTextures<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb48-66">        <span class="co" style="color: #5E5E5E;">// Render label</span></span>
<span id="cb48-67">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>labelRect<span class="op" style="color: #5E5E5E;">,</span> labelContent<span class="op" style="color: #5E5E5E;">,</span> labelStyle<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-68"></span>
<span id="cb48-69">        Rect objectDot <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb48-70">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-71">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-72">        <span class="dt" style="color: #AD0000;">float</span> radius <span class="op" style="color: #5E5E5E;">=</span> objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-73">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-74">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-75"></span>
<span id="cb48-76"></span>
<span id="cb48-77">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb48-78">            position<span class="op" style="color: #5E5E5E;">:</span> objectDot<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-79">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-80">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-81">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-82">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-83">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-84">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb48-85">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-86"></span>
<span id="cb48-87">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb48-88"></span>
<span id="cb48-89">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb48-90">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb48-91">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb48-92">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb48-93">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb48-94">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-95"></span>
<span id="cb48-96">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb48-97">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-98">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-99"></span>
<span id="cb48-100">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Objects Detected: {numObjects}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-101">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayProposalCount<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>modelInitialized <span class="op" style="color: #5E5E5E;">?</span> content <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Loading Model..."</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-102"></span>
<span id="cb48-103">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb48-104">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb48-105">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb48-106">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-107">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-108">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb48-109"></span>
<span id="cb48-110">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb48-111">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayProposalCount <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb48-112">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb48-113"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That’s it for the code updates.</p>
</section>
</section>
<section id="update-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="update-unity-scene">Update Unity Scene</h2>
<p>All that’s left is to swap out the <code>ImageClassifier</code> script in the Unity scene.</p>
<p><strong>Update Inference Manager object</strong></p>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ObjectDetector</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-attach-object-detector-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Remove the empty script component left over from the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-remove-empty-script-component.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can assign the Screen object and colormap file in the Inspector tab by dragging them into their respective fields.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-assign-object-detector-script-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ObjectDetector</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-webcamtoggle-update-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the dropdown menu and select <code>ObjectDetector → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-webcamtoggle-update-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-webcamdropdown-update-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>TFJSModelDropdown</code> On Value Changed function</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-update-tfjs-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>TFJSBackendDropdown</code> On Value Changed function</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-update-tfjs-backend-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>ConfidenceThresholdSlider</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-update-confidence-threshold-slider-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-in-browser" class="level2">
<h2 class="anchored" data-anchor-id="test-in-browser">Test in Browser</h2>
<p>Now, we can build the project and test it in a web browser. In the Unity project, select <code>File → Build Settings...</code> in the top menu bar to open the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-open-build-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select <code>WebGL</code> from the list of platforms and click <code>Switch Platform</code> if it is not already the target platform.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-build-settings-switch-to-webgl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can test the WebGL build locally by clicking <code>Build and Run</code> in the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-build-settings-build-and-run.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity will prompt us to select a folder to store the build files or default to the Build folder from the original tutorial. If it’s the former, create a new folder called <code>Build</code>. Open the folder and click <code>Select Folder</code> to start the build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/unity-select-build-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity caps the framerate to the default <a href="https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html">target framerate</a> for the platform. My desktop display maxes out at 60fps.</p>
<p><strong>Test YOLOX Tiny performance</strong></p>
<p>As with the image classifier models in the original tutorial, performance is far lower in WebGL with the YOLOX model than when using native inference options.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/in-browser-test-yolox.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Full-screen</strong></p>
<p>Performance seems slightly better when in full-screen mode.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tfjs-yolox-unity-tutorial/images/in-browser-test-yolox-fullscreen.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered implementing a TensorFlow.js plugin in a Unity project to perform to perform object detection with a <a href="https://arxiv.org/abs/2107.08430">YOLOX</a> model.</p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>unity</category>
  <category>tensorflow</category>
  <category>webgl</category>
  <category>yolox</category>
  <category>object-detection</category>
  <guid>christianjmills.com/posts/tfjs-yolox-unity-tutorial/index.html</guid>
  <pubDate>Sun, 16 Oct 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 3</title>
  <link>christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create GitHub Pages Repository</li>
<li>Add Unity Build Files</li>
<li>Test Live Demo</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a hand gesture classifier using fastai and export it to TensorFlow.js.</li>
<li><a href="../part-2/">Part 2</a>: Create a TensorFlow.js plugin for the Unity game engine.</li>
<li><a href="../part-3/">Part 3</a>: Build a Unity project as a WebGL application and host it using GitHub Pages.</li>
<li><a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered implementing a hand gesture classifier in a Unity project as a <a href="https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html">jslib plugin</a>. In this post, we’ll host the Unity project as a shareable web demo using <a href="https://pages.github.com/">GitHub Pages</a>. The demo will run locally in the user’s web browser.</p>
</section>
<section id="create-github-pages-repository" class="level2">
<h2 class="anchored" data-anchor-id="create-github-pages-repository">Create GitHub Pages Repository</h2>
<p>We first need to create a <a href="https://github.com/new">new GitHub repository</a> to store the WebGL build. We can do this on GitHub or locally using Git, GitHub Desktop, or another tool.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-desktop-create-new-repository.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the Settings tab for the new repository on GitHub.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-new-repository.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>Pages</code> section. Switch the source branch to <code>main</code> and click the <code>Save</code> button to start the automated build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-pages-click-save.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can check the GitHub Pages build progress under the Actions tab for the repository.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-pages-check-build-progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The web page will be accessible once the <code>pages build and deployment</code> workflow completes. Although, we don’t have any web pages at the moment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-pages-build-complete.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>GitHub will provide a URL for accessing the web demo in the GitHub Pages section once it finishes building.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-pages-get-url.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-unity-build-files" class="level2">
<h2 class="anchored" data-anchor-id="add-unity-build-files">Add Unity Build Files</h2>
<p>Now let’s add the WebGL build from the previous post. Open the <code>Build</code> folder from <a href="../part-2/#test-in-browser">part 2.</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/open-build-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Copy the folder content to the repository for the GitHub Pages demo.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/copy-webgl-build-to-demo-repo.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can push the local changes to GitHub, which will automatically trigger the <code>pages build and deployment</code> workflow.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-pages-check-webgl-build-progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-live-demo" class="level2">
<h2 class="anchored" data-anchor-id="test-live-demo">Test Live Demo</h2>
<p>We can test the web demo at the URL provided by GitHub once the build workflow completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/images/github-pages-webgl-demo.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this tutorial series, we trained a hand gesture classifier with the fastai library, created a TensorFlow.js plugin for Unity to perform inference in a web browser, built the Unity project as a shareable web demo, and hosted it for free using GitHub Pages.</p>
<p>Now that we have a general approach for using TensorFlow.js in Unity applications, we could extend the work in this tutorial by instead using one of the several <a href="https://www.tensorflow.org/js/models">pretrained models</a> TensorFlow.js provides.</p>
<p><strong>Previous:</strong> <a href="../part-2/">In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>tensorflow</category>
  <category>webgl</category>
  <guid>christianjmills.com/posts/tensorflow-js-unity-tutorial/part-3/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 2</title>
  <link>christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Set Up Unity Hub</li>
<li>Install Unity Editor</li>
<li>Create New Project</li>
<li>Import Assets</li>
<li>Create JavaScript Utility File</li>
<li>Create jslib Plugin</li>
<li>Import Plugin Functions</li>
<li>Create Image Classifier Script</li>
<li>Set up Unity Scene</li>
<li>Test in Browser</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a hand gesture classifier using fastai and export it to TensorFlow.js.</li>
<li><a href="../part-2/">Part 2</a>: Create a TensorFlow.js plugin for the Unity game engine.</li>
<li><a href="../part-3/">Part 3</a>: Build a Unity project as a WebGL application and host it using GitHub Pages.</li>
<li><a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1">Part 1</a> covered training a hand gesture classifier using the <a href="https://docs.fast.ai/">fastai library</a> and exporting it to <a href="https://www.tensorflow.org/js/">TensorFlow.js</a>. This post covers implementing a <a href="https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html">jslib plugin</a> in a Unity project to perform inference with the trained model.</p>
</section>
<section id="set-up-unity-hub" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-hub">Set Up Unity Hub</h2>
<p>Before creating a project, we must install <a href="https://unity3d.com/get-unity/download">Unity Hub</a>, create a <a href="https://id.unity.com/">UnityID account</a>, and activate a (free) Unity license. The beginner Unity tutorial at the link below covers all these steps and how to create a simple flappy bird-style game.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=8rdfcq-jePw&amp;t=113s">Make Your First Video Game - Ultimate Beginner Unity3D Tutorial</a></li>
</ul>
<p>The link opens to the part covering how to install Unity for the first time, but I recommend watching the entire tutorial for those new to Unity.</p>
</section>
<section id="install-unity-editor" class="level2">
<h2 class="anchored" data-anchor-id="install-unity-editor">Install Unity Editor</h2>
<p>After installing Unity Hub and activating a license, we must add a version of the Unity Editor. We will use the latest 2022.1+ release. The tutorial uses 2022.1.19, which you can install directly from the link below.</p>
<ul>
<li><strong>Unity download archive:</strong> <a href="unityhub://2022.1.19f1/2fd7b40534d1">Unity 2022.1.19</a></li>
</ul>
<p>Open Unity Hub and select the <code>Installs</code> section in the side panel. Then click the <code>Install Editor</code> button in the upper right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-installs.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click the <code>Install</code> button next to the latest <code>2022.1</code> version under <code>Other Versions</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-installs-select-2022-1-19.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Scroll down the <code>Add modules</code> selection menu and click the check box next to <code>WebGL Build Support</code>. Click the <code>Install</code> button after selecting all desired modules.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-install-2022-1-19-with-webgl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity Hub will begin downloading and installing the selected editor version.</p>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Go back to the <code>Projects</code> section after the editor finishes installing and click <code>New Project</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the target editor version from the <code>Editor Version</code> dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>2D Core</code> template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click <code>Create Project</code> in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-hub-new-project-click-create-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The Unity Editor may take a few minutes to open the new project.</p>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Inside the editor window, we will first import any class labels, test images, and TensorFlow.js models into the <code>Assets</code> folder.</p>
<p><strong>Import class labels</strong></p>
<p>Right-click a space in the <code>Assets</code> section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the new folder <code>ClassLabels</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-classlabels-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Drag and drop any JSON class label files from the operating system’s file explorer into the <code>ClassLabels</code> folder. Sample files are available in the Google Drive link below.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1PzdlGfKMScGKhvnIlSPZ1EQDbErkXxkR?usp=sharing">ClassLabels</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-import-classlabels.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Import sample images</strong></p>
<p>Next, create an <code>Images</code> folder and drop any test images into it. Sample files are available in the Google Drive link below.</p>
<p><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1T8C_22m7Rwd6S1FlJG5NdZ2TVMMB_WpB?usp=sharing">Images</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity automatically imports images as a Sprite (2D and UI) <a href="https://docs.unity3d.com/Manual/TextureTypes.html">texture type</a>. We don’t need to change it for our purposes.</p>
<p><strong>Import TFJS models</strong></p>
<p>We need to place the TensorFlow.js models in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in the final application. Create a new folder named <code>StreamingAssets</code>. Let’s put the folders for each model in a new subfolder called <code>TFJSModels</code> to keep things organized.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1H86x7jrS7Bj-4305NclBTHO7VANgm4PG?usp=sharing">TFJSModels</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-tfjs-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Inside each subfolder are the JSON and BIN files for a TensorFlow.js model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-inspect-tfjs-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="create-javascript-utility-file" class="level2">
<h2 class="anchored" data-anchor-id="create-javascript-utility-file">Create JavaScript Utility File</h2>
<p>Before creating the jslib plugin, we’ll add a JavaScript file with a utility function to the <code>StreamingAssets</code> folder. Open the <code>StreamingAssets</code> folder in a code editor and create a new JavaScript file called <code>utils.js</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/vscode-create-javascript-utility-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define function to perform inference asynchronously</strong></p>
<p>This function will take in the model, input data, and shape for the input tensor as input.</p>
<p>We can use the <a href="https://js.tensorflow.org/api/latest/#tidy"><code>tf. tidy()</code></a> method included with TensorFlow.js for automatic memory cleanup. TensorFlow.js also provides a built-in <a href="https://js.tensorflow.org/api/latest/#argMax">ArgMax</a> to extract the predicted class index.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Perform inference with the provided model and input data</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">async</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">PerformInferenceAsync</span>(model<span class="op" style="color: #5E5E5E;">,</span> float32Data<span class="op" style="color: #5E5E5E;">,</span> shape) {</span>
<span id="cb1-3"></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;">const</span> outputData <span class="op" style="color: #5E5E5E;">=</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">tidy</span>(() <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;">// Initialize the input tensor</span></span>
<span id="cb1-6">        <span class="kw" style="color: #003B4F;">const</span> input_tensor <span class="op" style="color: #5E5E5E;">=</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">tensor</span>(float32Data<span class="op" style="color: #5E5E5E;">,</span> shape<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">'float32'</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;">// Make a prediction.</span></span>
<span id="cb1-8">        <span class="cf" style="color: #003B4F;">return</span> model<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">predict</span>(input_tensor)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-9">    })<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;">// Pass raw output through a SoftMax function</span></span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;">let</span> results <span class="op" style="color: #5E5E5E;">=</span> <span class="cf" style="color: #003B4F;">await</span> outputData<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">data</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;">// Extract the predicted class from the model output</span></span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;">let</span> index <span class="op" style="color: #5E5E5E;">=</span> <span class="cf" style="color: #003B4F;">await</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">argMax</span>(results)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">data</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;">return</span> [index<span class="op" style="color: #5E5E5E;">,</span> results[index]]<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-15">}</span></code></pre></div>
</section>
<section id="create-jslib-plugin" class="level2">
<h2 class="anchored" data-anchor-id="create-jslib-plugin">Create jslib Plugin</h2>
<p>Now we can create the jslib <a href="https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html">plugin</a> to use the TensorFlow.js models. In the <code>Assets</code> section, create a new folder called <code>Plugins</code>. Then create a subfolder called <code>WebGL</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-webgl-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>WebGL</code> folder in a code editor and create a new file called <code>WebGLPlugin.jslib</code>. For formatting purposes, we can set the jslib file as JavaScript.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/vscode-create-jslib-file-and-set-language-format.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Basic plugin format</strong></p>
<p>Here is the basic format for the jslib plugin. We’ll place any functions we want accessible from Unity inside the <code>plugin</code> variable.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Define plugin functions</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">let</span> plugin <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb2-3">    </span>
<span id="cb2-4">}</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">// Add plugin functions</span></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">mergeInto</span>(LibraryManager<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">library</span><span class="op" style="color: #5E5E5E;">,</span> plugin)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define function to add external JavaScript dependencies</strong></p>
<p>We first need to add the script tag for the TensorFlow.js <a href="https://www.npmjs.com/package/@tensorflow/tfjs">npm package</a> and the <code>utils.js</code> script in the <code>StreamingAssets</code> folder.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// Add additional JavaScript dependencies to the html page</span></span>
<span id="cb3-2">GetExternalJS<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">function</span> () {</span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;">// Add base TensorFlow.js dependencies</span></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;">let</span> tfjs_script <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">document</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createElement</span>(<span class="st" style="color: #20794D;">"script"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6">    tfjs_script<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">src</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.20.0/dist/tf.min.js"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;">document</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">head</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">appendChild</span>(tfjs_script)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;">// Add custom utility functions</span></span>
<span id="cb3-10">    <span class="kw" style="color: #003B4F;">let</span> script <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">document</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createElement</span>(<span class="st" style="color: #20794D;">"script"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-11">    script<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">src</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"./StreamingAssets/utils.js"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-12">    <span class="bu" style="color: null;">document</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">head</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">appendChild</span>(script)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-13">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p><strong>Define function to set the TensorFlow.js compute backend</strong></p>
<p>Next, we’ll add a function to update the compute backend. At the time of writing, I only recommend using the <a href="https://github.com/tensorflow/tfjs/tree/master/tfjs-backend-webgl">WebGL backend</a>. The base <a href="https://github.com/tensorflow/tfjs/tree/master/tfjs-backend-cpu">CPU backend</a> is not suitable for real-time applications. The <a href="https://github.com/tensorflow/tfjs/tree/master/tfjs-backend-wasm">WASM backend</a> enables multi-threaded CPU inference but does not have full operator support. Lastly, the <a href="https://github.com/tensorflow/tfjs/tree/master/tfjs-backend-webgpu">WebGPU backend</a> is not yet officially supported by browsers.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// Set the TFJS inference backend</span></span>
<span id="cb4-2">SetTFJSBackend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">function</span> (backend) {</span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;">let</span> backend_str <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UTF8ToString</span>(backend)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4">  <span class="cf" style="color: #003B4F;">try</span> {</span>
<span id="cb4-5">     tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">setBackend</span>(backend_str)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">then</span>(() <span class="kw" style="color: #003B4F;">=&gt;</span> { })<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6">     <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="vs" style="color: #20794D;">`Successfully set </span><span class="sc" style="color: #5E5E5E;">${</span>backend_str<span class="sc" style="color: #5E5E5E;">}</span><span class="vs" style="color: #20794D;"> backend.`</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7">  } <span class="cf" style="color: #003B4F;">catch</span> (error) {</span>
<span id="cb4-8">     <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="st" style="color: #20794D;">"Error occurred. Falling back to WebGL backend."</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-9">     tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">setBackend</span>(<span class="st" style="color: #20794D;">'webgl'</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-10">  }</span>
<span id="cb4-11">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p><strong>Define function to Initialize a TensorFlow.js model</strong></p>
<p>We’ll pass a file path for a <code>model.json</code> file and an array to store the predicted class index and the corresponding confidence score. We’ll be able to access the updated array values in Unity.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Load a TFJS model</span></span>
<span id="cb5-2">InitTFJSModel<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">async</span> <span class="kw" style="color: #003B4F;">function</span> (model_path<span class="op" style="color: #5E5E5E;">,</span> output_data) {</span>
<span id="cb5-3"></span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;">// Convert bytes to the text</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;">let</span> model_path_str <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UTF8ToString</span>(model_path)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;">// Load the TensorFlow.js model at the provided file path</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="cf" style="color: #003B4F;">await</span> tf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">loadGraphModel</span>(model_path_str<span class="op" style="color: #5E5E5E;">,</span> { <span class="dt" style="color: #AD0000;">fromTFHub</span><span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span> })<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;">// Check the model input shape</span></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;">const</span> input_shape <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">inputs</span>[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">shape</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-11">    <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="vs" style="color: #20794D;">`Input Shape: </span><span class="sc" style="color: #5E5E5E;">${</span>input_shape<span class="sc" style="color: #5E5E5E;">}</span><span class="vs" style="color: #20794D;">`</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;">// Initialize an array to store the predicted class index and confidence score</span></span>
<span id="cb5-14">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">prediction</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Float32Array</span>(buffer<span class="op" style="color: #5E5E5E;">,</span> output_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-15">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p><strong>Define function to perform inference with a input image</strong></p>
<p>Loading the model can take several seconds, depending on the user’s internet connection. We don’t want to perform inference until after it initializes.</p>
<p>Due to the way Unity reads texture data from the GPU to the CPU, we need to read the image data from the bottom up to make the image correctly oriented.</p>
<p>After populating the input array, we’ll wait for the asynchronous inference function to finish before updating the prediction array.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// Perform inference with the provided image data</span></span>
<span id="cb6-2">PerformInference<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">function</span> (image_data<span class="op" style="color: #5E5E5E;">,</span> size<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> height) {</span>
<span id="cb6-3"></span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;">// Only perform inference after loading a model</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;">if</span> (<span class="kw" style="color: #003B4F;">typeof</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'undefined'</span>) {</span>
<span id="cb6-6">        <span class="bu" style="color: null;">console</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">log</span>(<span class="st" style="color: #20794D;">"Model not defined yet"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-8">    }</span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;">// Initialize an array with the raw image data</span></span>
<span id="cb6-11">    <span class="kw" style="color: #003B4F;">const</span> uintArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Uint8ClampedArray</span>(buffer<span class="op" style="color: #5E5E5E;">,</span> image_data<span class="op" style="color: #5E5E5E;">,</span> size<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> height)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-12"></span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;">// Channels-last order</span></span>
<span id="cb6-14">    <span class="kw" style="color: #003B4F;">const</span> [input_array] <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Array</span>(<span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Array</span>())<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-15"></span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;">// Flip input image from Unity</span></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">let</span> row <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> row <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> row<span class="op" style="color: #5E5E5E;">--</span>) {</span>
<span id="cb6-18">        <span class="kw" style="color: #003B4F;">let</span> slice <span class="op" style="color: #5E5E5E;">=</span> uintArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">slice</span>(row <span class="op" style="color: #5E5E5E;">*</span> width <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> (row <span class="op" style="color: #5E5E5E;">*</span> width <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="op" style="color: #5E5E5E;">+</span> (width <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>))<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19">        <span class="co" style="color: #5E5E5E;">// Scale color values from [0,255] to [0,1]</span></span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">let</span> col <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> col <span class="op" style="color: #5E5E5E;">&lt;</span> slice<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">length</span><span class="op" style="color: #5E5E5E;">;</span> col <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span>) {</span>
<span id="cb6-21">            input_array<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(slice[col <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-22">            input_array<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(slice[col <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-23">            input_array<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(slice[col <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>]<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-24">        }</span>
<span id="cb6-25">    }</span>
<span id="cb6-26"></span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;">// Initialize the input array with the preprocessed input data</span></span>
<span id="cb6-28">    <span class="kw" style="color: #003B4F;">const</span> float32Data <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">Float32Array</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">from</span>(input_array)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-29">    <span class="kw" style="color: #003B4F;">const</span> shape <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span>]<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-30"></span>
<span id="cb6-31">    <span class="co" style="color: #5E5E5E;">// Pass preprocessed input to the model</span></span>
<span id="cb6-32">    <span class="fu" style="color: #4758AB;">PerformInferenceAsync</span>(<span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">model</span><span class="op" style="color: #5E5E5E;">,</span> float32Data<span class="op" style="color: #5E5E5E;">,</span> shape)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">then</span>(output <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb6-33"></span>
<span id="cb6-34">        <span class="co" style="color: #5E5E5E;">// Store class index and confidence value</span></span>
<span id="cb6-35">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">prediction</span>[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> output[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-36">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">prediction</span>[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">=</span> output[<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-37">    })</span>
<span id="cb6-38">    <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-39">}<span class="op" style="color: #5E5E5E;">,</span></span></code></pre></div>
<p>That’s it for the plugin code. Next, we need to import the functions in Unity.</p>
</section>
<section id="import-plugin-functions" class="level2">
<h2 class="anchored" data-anchor-id="import-plugin-functions">Import Plugin Functions</h2>
<p>We’ll import the plugin functions in a dedicated C# script and make them accessible as a static class. Right-click a space inside the <code>WebGL</code> folder and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the new script WebGLPlugin.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-webgl-plugin-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<p>By default, C# scripts contain the following code. We don’t need any of it in this case.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifier <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb7-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb7-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-10">        </span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-12"></span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb7-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb7-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-16">        </span>
<span id="cb7-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-5.0">System.Runtime.InteropServices</a> namespace to handle interactions with the jslib plugin.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// Class with JavaScript plugin functions for WebGL.</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">class</span> WebGLPlugin</span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;">// Import "GetExternalJS" plugin function</span></span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetExternalJS</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;">// Import "SetTFJSBackend" plugin function</span></span>
<span id="cb8-12">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">SetTFJSBackend</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> backend<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;">// Import "InitTFJSModel" plugin function</span></span>
<span id="cb8-15">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-16">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitTFJSModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model_path<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> output_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> output_size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-17">    <span class="co" style="color: #5E5E5E;">// Import "PerformInference" plugin function</span></span>
<span id="cb8-18">    <span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"__Internal"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">bool</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">[]</span> image_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> size<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-20"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-image-classifier-script" class="level2">
<h2 class="anchored" data-anchor-id="create-image-classifier-script">Create Image Classifier Script</h2>
<p>Now we can create the main script for the Unity project. This script will handle getting input images, sending them to the model, and using the returned predictions to update on-screen readouts. We’ll store it in a new <code>Scripts</code> folder and name it <code>ImageClassifier</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/create-image-classifier-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
<li><a href="https://learn.microsoft.com/en-us/dotnet/api/system.io?view=net-7.0">System.IO</a>: Contains types that allow reading and writing to files and data streams, and types that provide basic file and directory support.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.multiplayer-hlapi@1.0/api/UnityEngine.Networking.html">UnityEngine.Networking</a>: Provides access to the <a href="https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.html">UnityWebRequest</a> module to communicate with http services.</li>
</ul>
<hr>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-7"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Networking</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Add code to create a list of available TFJS models</strong></p>
<p>We can’t browse for available TFJS models while running the Unity application in the browser, so we need to create a list of model names and file paths to check at runtime. We can do this automatically within the Unity Editor.</p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html">InitializeOnLoad</a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html">UnityEditor</a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives. This code will go right below the namespaces.</p>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. When we are in the Editor, it returns true, and the code executes.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7">    <span class="co" style="color: #5E5E5E;">// A helper class that stores the name and file path for a TensorFlow.js model</span></span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb10-9">    <span class="kw" style="color: #003B4F;">class</span> ModelData</span>
<span id="cb10-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-11">        <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-12">        <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> path<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-13"></span>
<span id="cb10-14">        <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">ModelData</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> name<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> path<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb10-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-16">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span> <span class="op" style="color: #5E5E5E;">=</span> name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-17">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">path</span> <span class="op" style="color: #5E5E5E;">=</span> path<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-18">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-19">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-20"></span>
<span id="cb10-21">    <span class="co" style="color: #5E5E5E;">// A helper class that stores a list of TensorFlow.js model names and file paths</span></span>
<span id="cb10-22">    <span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb10-23">    <span class="kw" style="color: #003B4F;">class</span> ModelList</span>
<span id="cb10-24">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-25">        <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-26"></span>
<span id="cb10-27">        <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">ModelList</span><span class="op" style="color: #5E5E5E;">(</span>List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb10-28">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-29">            <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">models</span> <span class="op" style="color: #5E5E5E;">=</span> models<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-30">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-32"></span>
<span id="cb10-33">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb10-34">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-35">        <span class="dt" style="color: #AD0000;">string</span> tfjsModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"TFJSModels"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-36">        List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-37"></span>
<span id="cb10-38">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Available models"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-39">        <span class="co" style="color: #5E5E5E;">// Get the paths for each model folder</span></span>
<span id="cb10-40">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> dir <span class="kw" style="color: #003B4F;">in</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDirectories</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{tfjsModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-41">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-42">            <span class="dt" style="color: #AD0000;">string</span> dirStr <span class="op" style="color: #5E5E5E;">=</span> dir<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"/"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-43">            <span class="co" style="color: #5E5E5E;">// Extract the model folder name</span></span>
<span id="cb10-44">            <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> splits <span class="op" style="color: #5E5E5E;">=</span> dirStr<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'/'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-45">            <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> splits<span class="op" style="color: #5E5E5E;">[</span>splits<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-46"></span>
<span id="cb10-47">            <span class="co" style="color: #5E5E5E;">// Get the paths for the model.json file for each model</span></span>
<span id="cb10-48">            <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>dirStr<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-49">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-50">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"model.json"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-51">                <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-52">                    <span class="dt" style="color: #AD0000;">string</span> fileStr <span class="op" style="color: #5E5E5E;">=</span> file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"/"</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span>Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">streamingAssetsPath</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-53">                    models<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelData</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">,</span> fileStr<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-54">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-55">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-56">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-57"></span>
<span id="cb10-58">        ModelList modelList <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelList</span><span class="op" style="color: #5E5E5E;">(</span>models<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-59">        <span class="co" style="color: #5E5E5E;">// Format the list of available models as a string in JSON format</span></span>
<span id="cb10-60">        <span class="dt" style="color: #AD0000;">string</span> json <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ToJson</span><span class="op" style="color: #5E5E5E;">(</span>modelList<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-61">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Model List JSON: {json}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-62">        <span class="co" style="color: #5E5E5E;">// Write the list of available TensorFlow.js models to a JSON file</span></span>
<span id="cb10-63">        <span class="kw" style="color: #003B4F;">using</span> StreamWriter writer <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">StreamWriter</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/models.json"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-64">        writer<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Write</span><span class="op" style="color: #5E5E5E;">(</span>json<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-65">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-66"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-67"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>This code runs after opening the project in the Unity Editor or saving changes to this script. We can verify the code works by saving the script and going to the <code>StreamingAssets</code> folder in the Editor. The <code>models.json</code> file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
</figure>
</div>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>We can set the default target input resolution to 216 and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the class labels"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;">public</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Minimum confidence score for keeping predictions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> 1f<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> minConfidence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console. These messages get printed to the console in the browser as well.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb14-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb15-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb15-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb15-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices, models, and backends.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">yellow</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available TFJS models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available TFJS backends"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb16-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown backendDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define TensorFlow.js variables</strong></p>
<p>We’ll store the path to the <code>StreamingAssets</code> sub-folder containing the TensorFlow.js models in a string variable.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"TFJS"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb17-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the TFJS models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> tfjsModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"TFJSModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb19-2">Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb19-4">Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb19-6">Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb19-8">RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb19-10">Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for class labels</strong></p>
<p>We need to create a little class that indicates the structure of the JSON content. Our JSON file only contains a single array of strings. We can store this array in a dedicated variable.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// A class for reading in class labels from a JSON file</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> classes<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">// The ordered list of class names</span></span>
<span id="cb20-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> classes<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variable to track whether a model is initialized</strong></p>
<p>We’ll track whether a model is ready for inference so we can tell the user if a model is still loading.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">// Stores whether the TensorFlow.js model is ready for inference</span></span>
<span id="cb21-2"><span class="dt" style="color: #AD0000;">bool</span> modelInitialized<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>Lastly, we need to define a couple of variables for the custom fps counter.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables to store values for GUI dropdowns</strong></p>
<p>We’ll update the lists of model paths and names at runtime using the <code>models.json</code> file in the <code>StreamingAssets</code> folder.</p>
<p>As mentioned previously, I only recommend using the WebGL backend at the time of writing, so we’ll hardcode that option here. In the future, we can check if each backend type is available in the jslib plugin and update the list in Unity.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">// File paths for the available TFJS models</span></span>
<span id="cb23-2">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">// Names of the available TFJS models</span></span>
<span id="cb23-4">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;">// Names of the available TFJS backends</span></span>
<span id="cb23-6">List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> tfjsBackends <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="st" style="color: #20794D;">"webgl"</span> <span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
<p><strong>Define variable to store the current inference output</strong></p>
<p>We’ll share the memory for this array with the jslib plugin. We’ll update the values in the plugin and access them in this script.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">// Stores the latest model prediction and confidence score</span></span>
<span id="cb24-2"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> output_data <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">];</span></span></code></pre></div>
<p><strong>Define variables for reading the <code>models.json</code> file</strong></p>
<p>We need to create a couple of helper classes that indicate the structure of the <code>models.json</code> file.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">// A helper class to store the name and file path of a TensorFlow.js model</span></span>
<span id="cb25-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb25-3"><span class="kw" style="color: #003B4F;">class</span> ModelData <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> name<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> path<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;">// A helper class to store a read a list of available TensorFlow.js models from a JSON file</span></span>
<span id="cb25-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb25-6"><span class="kw" style="color: #003B4F;">class</span> ModelList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ModelData<span class="op" style="color: #5E5E5E;">&gt;</span> models<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb26-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb26-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-12"></span>
<span id="cb26-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb26-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb26-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb26-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-19"></span>
<span id="cb26-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb27-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb27-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb27-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-10"></span>
<span id="cb27-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb27-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb27-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-15"></span>
<span id="cb27-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb27-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb27-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-20"></span>
<span id="cb27-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb27-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to switch TensorFlow.js models</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;">/// Load a TensorFlow.js model</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateTFJSModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb28-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;">// Load TensorFlow.js model in JavaScript plugin</span></span>
<span id="cb28-7">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InitTFJSModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> output_data<span class="op" style="color: #5E5E5E;">,</span> output_data<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to read the list of available TensorFlow.js models</strong></p>
<p>We can parse the raw JSON content from the <code>models.json</code> file using the <a href="https://docs.unity3d.com/ScriptReference/JsonUtility.FromJson.html"><code>JsonUtility.FromJson()</code></a> method. We’ll then update the associated GUI dropdown with the available model names.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;">/// Get the names and paths of the available TensorFlow.js models</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"json"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb29-5"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetTFJSModels</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> json<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb29-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-7">    ModelList modelList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ModelList<span class="op" style="color: #5E5E5E;">&gt;(</span>json<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>ModelData model <span class="kw" style="color: #003B4F;">in</span> modelList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">models</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb29-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-10">        <span class="co" style="color: #5E5E5E;">//Debug.Log($"{model.name}: {model.path}");</span></span>
<span id="cb29-11">        modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>model<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-12">        <span class="dt" style="color: #AD0000;">string</span> path <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}{model.path}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-13">        modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>path<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-14">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb29-15">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb29-16">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-17">    <span class="co" style="color: #5E5E5E;">// Add TFJS model names to menu</span></span>
<span id="cb29-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-19">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb29-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to download the list of available TensorFlow.js models</strong></p>
<p>At runtime, we must fetch the <code>models.json</code> file from the hosting server before parsing its content. Getting the file is an asynchronous operation, so we’ll use a <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.StartCoroutine.html">coroutine</a>. Once we have the file, we’ll pass it to the <code>GetTFJSModels</code> method.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;">/// Download the JSON file with the available TFJS model information</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"uri"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb30-6">IEnumerator <span class="fu" style="color: #4758AB;">GetRequest</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> uri<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-8">    <span class="kw" style="color: #003B4F;">using</span> <span class="op" style="color: #5E5E5E;">(</span>UnityWebRequest webRequest <span class="op" style="color: #5E5E5E;">=</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Get</span><span class="op" style="color: #5E5E5E;">(</span>uri<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb30-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-10">        <span class="co" style="color: #5E5E5E;">// Request and wait for the desired page.</span></span>
<span id="cb30-11">        <span class="kw" style="color: #003B4F;">yield</span> <span class="kw" style="color: #003B4F;">return</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SendWebRequest</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-12"></span>
<span id="cb30-13">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> pages <span class="op" style="color: #5E5E5E;">=</span> uri<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'/'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-14">        <span class="dt" style="color: #AD0000;">int</span> page <span class="op" style="color: #5E5E5E;">=</span> pages<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-15"></span>
<span id="cb30-16">        <span class="kw" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">result</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-17">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-18">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ConnectionError</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-19">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DataProcessingError</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-20">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LogError</span><span class="op" style="color: #5E5E5E;">(</span>pages<span class="op" style="color: #5E5E5E;">[</span>page<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">": Error: "</span> <span class="op" style="color: #5E5E5E;">+</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">error</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-21">                <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-22">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ProtocolError</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-23">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LogError</span><span class="op" style="color: #5E5E5E;">(</span>pages<span class="op" style="color: #5E5E5E;">[</span>page<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">": HTTP Error: "</span> <span class="op" style="color: #5E5E5E;">+</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">error</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-24">                <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-25">            <span class="kw" style="color: #003B4F;">case</span> UnityWebRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Result</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Success</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb30-26">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>pages<span class="op" style="color: #5E5E5E;">[</span>page<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">":</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">Received: "</span> <span class="op" style="color: #5E5E5E;">+</span> webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">downloadHandler</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-27"></span>
<span id="cb30-28">                <span class="co" style="color: #5E5E5E;">// Extract the available model names and file paths from the JSON string</span></span>
<span id="cb30-29">                <span class="fu" style="color: #4758AB;">GetTFJSModels</span><span class="op" style="color: #5E5E5E;">(</span>webRequest<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">downloadHandler</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-30">                <span class="co" style="color: #5E5E5E;">// Initialize one of the available TensorFlow.js models</span></span>
<span id="cb30-31">                <span class="fu" style="color: #4758AB;">UpdateTFJSModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-32">                <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-33">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-34">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-35"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb31-4"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb31-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb31-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb31-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-9"></span>
<span id="cb31-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb31-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb31-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb31-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-16"></span>
<span id="cb31-17">    <span class="co" style="color: #5E5E5E;">// Get the available TensorFlow.js models</span></span>
<span id="cb31-18">    <span class="dt" style="color: #AD0000;">string</span> modelListPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/models.json"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-19">    <span class="fu" style="color: #4758AB;">StartCoroutine</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetRequest</span><span class="op" style="color: #5E5E5E;">(</span>modelListPath<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-20"></span>
<span id="cb31-21">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb31-22">    backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-23">    <span class="co" style="color: #5E5E5E;">// Add TFJS backend names to menu</span></span>
<span id="cb31-24">    backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>tfjsBackends<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb31-26">    backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-27"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb32-5"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb32-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb32-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb32-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb32-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-awake-method" class="level3">
<h3 class="anchored" data-anchor-id="define-awake-method">Define Awake method</h3>
<p>We’ll call the <code>GetExternalJS</code> function from the jslib plugin in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">// Awake is called when the script instance is being loaded</span></span>
<span id="cb33-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb33-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-4">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetExternalJS</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb33-5"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb34-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb34-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb34-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb34-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-8"></span>
<span id="cb34-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb34-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb34-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-16"></span>
<span id="cb34-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb34-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb34-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb34-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-21"></span>
<span id="cb34-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb34-23">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-24"></span>
<span id="cb34-25">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb34-26">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb34-27"></span>
<span id="cb34-28">    <span class="co" style="color: #5E5E5E;">// Update the current TensorFlow.js compute backend</span></span>
<span id="cb34-29">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTFJSBackend</span><span class="op" style="color: #5E5E5E;">(</span>tfjsBackends<span class="op" style="color: #5E5E5E;">[</span>backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb34-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define a preprocessing method to calculate the input resolution.</p>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb35-8">Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-10">    <span class="co" style="color: #5E5E5E;">// Clamp the minimum dimension value to 64px</span></span>
<span id="cb35-11">    targetDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>targetDim<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-12"></span>
<span id="cb35-13">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-14"></span>
<span id="cb35-15">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb35-16">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-17">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-18">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb35-19">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-21">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb35-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-23">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-24">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb35-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-28"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb36-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb36-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-9"></span>
<span id="cb36-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb36-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-12"></span>
<span id="cb36-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb36-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb36-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb36-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb36-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-26"></span>
<span id="cb36-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb36-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb36-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-32"></span>
<span id="cb36-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb36-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-35"></span>
<span id="cb36-36">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb36-37">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGB32</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-38"></span>
<span id="cb36-39">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-40">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-41">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGB24</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-42">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-43"></span>
<span id="cb36-44">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureGPU.width}x{inputTextureGPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-45"></span>
<span id="cb36-46">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb36-47">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-48"></span>
<span id="cb36-49">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb36-50">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-51">    inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-52">    inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-53"></span>
<span id="cb36-54">    <span class="co" style="color: #5E5E5E;">// Get the current input dimensions</span></span>
<span id="cb36-55">    <span class="dt" style="color: #AD0000;">int</span> width <span class="op" style="color: #5E5E5E;">=</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-56">    <span class="dt" style="color: #AD0000;">int</span> height <span class="op" style="color: #5E5E5E;">=</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-57">    <span class="dt" style="color: #AD0000;">int</span> size <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> height <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-58"></span>
<span id="cb36-59">    <span class="co" style="color: #5E5E5E;">// Pass the input data to the plugin to perform inference</span></span>
<span id="cb36-60">    modelInitialized <span class="op" style="color: #5E5E5E;">=</span> WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">(),</span> size<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-61"></span>
<span id="cb36-62">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb36-63">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>modelInitialized <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[(int)output_data[0]]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Not Initialized"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-64"></span>
<span id="cb36-65">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb36-66">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-67"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the predicted class and current framerate.</p>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb37-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb38-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb38-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-10"></span>
<span id="cb38-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb38-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb38-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb38-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the TensorFlow.js backend</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;">/// Update the TensorFlow.js compute backend</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateTFJSBackend</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb39-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb39-6">    WebGLPlugin<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTFJSBackend</span><span class="op" style="color: #5E5E5E;">(</span>tfjsBackends<span class="op" style="color: #5E5E5E;">[</span>backendDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb39-7"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the confidence threshold</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;">/// Update the minimum confidence score for keeping predictions</span></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"slider"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb40-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>Slider slider<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-7">    minConfidence <span class="op" style="color: #5E5E5E;">=</span> slider<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted class and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method. We’ll show a different message while the model is still loading.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb41-1"><span class="co" style="color: #5E5E5E;">// OnGUI is called for rendering and handling GUI events.</span></span>
<span id="cb41-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb41-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-4">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb41-5">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb41-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-7">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb41-8">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb41-9">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-10"></span>
<span id="cb41-11">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb41-12">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-13">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-14"></span>
<span id="cb41-15">    <span class="co" style="color: #5E5E5E;">// Verify predicted class index is valid</span></span>
<span id="cb41-16">    <span class="dt" style="color: #AD0000;">string</span> labelText <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{classes[(int)output_data[0]]} {(output_data[1] * 100).ToString("</span><span class="fl" style="color: #AD0000;">0.</span>##<span class="st" style="color: #20794D;">")}%"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-17">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>output_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&lt;</span> minConfidence<span class="op" style="color: #5E5E5E;">)</span> labelText <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"None"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-18">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> modelInitialized <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {labelText}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Loading Model..."</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-19">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayPredictedClass<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-20"></span>
<span id="cb41-21">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb41-22">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb41-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-24">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-25">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb41-27"></span>
<span id="cb41-28">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb41-29">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb41-30">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb41-31"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That’s it for the code.</p>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>We can, at last, start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the <code>ImageClassifier</code> script, a dropdown menu for selecting webcam devices, and a toggle to switch between the test image and a webcam feed.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>3D Object → Quad</code>. We can name the new object <code>Screen</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-quad.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, drag and drop a test image from the <code>Assets → Images</code> folder onto the <code>Screen</code> object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the Shader dropdown menu in the Inspector tab. Type <code>Unlit/Texture</code> into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select Create Empty. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ImageClassifier</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-attach-image-classifier-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can assign the Screen and class labels file in the Inspector tab by dragging them into their respective fields.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-assign-image-classifier-script-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI toggle and dropdown menu. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1K3tgzMmNavqamlHPsrQn26K6A0n1uinb?usp=sharing">Prefabs folder</a></li>
</ul>
<p>Drag and drop the <code>Prefabs</code> folder into the <code>Assets</code> section.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-import-prefabs-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>Prefabs</code> folder and drag the Canvas prefab into the Hierarchy tab. We can see the GUI by switching to the Game view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ImageClassifier</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ImageClassifier → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This time select <code>ImageClassifier → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>TFJSModelDropdown</code> On Value Changed function</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-update-tfjs-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>TFJSBackendDropdown</code> On Value Changed function</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-update-tfjs-backend-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>ConfidenceThresholdSlider</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-update-confidence-threshold-slider-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the <code>WebcamToggle</code> and <code>WebcamDropdown</code> objects to their respective fields for the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-in-browser" class="level2">
<h2 class="anchored" data-anchor-id="test-in-browser">Test in Browser</h2>
<p>Now, we can build the project and test it in a web browser. In the Unity project, select <code>File → Build Settings...</code> in the top menu bar to open the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-open-build-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select <code>WebGL</code> from the list of platforms and click Switch Platform.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-build-settings-switch-to-webgl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity enables compression by default for WebGL builds, which GitHub Pages does not support. We can disable compression in the Player Settings. Click the <code>Player Settings...</code> button in the bottom-left corner of the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-build-settings-open-player-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select <code>Disabled</code> from the Compression Format dropdown menu and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-player-settings-disable-webgl-compression.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can test the WebGL build locally by clicking <code>Build and Run</code> in the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-build-settings-build-and-run.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity will prompt us to select a folder to store the build files. Create a new folder called <code>Build</code>. Open the folder and click <code>Select Folder</code> to start the build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/unity-select-build-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity caps the framerate to the default <a href="https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html">target framerate</a> for the platform. My desktop display maxes out at 60fps.</p>
<p><strong>Test ConvNeXt nano performance</strong></p>
<p>Performance for the ConvNeXt nano model fluctuates in the mid to high 50s. That is significantly lower than native inference options like OpenVINO or DirectML but still usable. GPU utilization seems to max out around 34% on my desktop.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/in-browser-test-convnext.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Test ResNet18 performance</strong></p>
<p>The smaller ResNet18 model reaches the display’s 60fps max refresh rate but likely also falls far short of native inference options.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/images/in-browser-test-resnet.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered implementing a TensorFlow.js plugin in a Unity project to perform inference in a web browser. The performance was well below native inference options but still useable with lightweight models. The last part of this tutorial series covers hosting the WebGL application for free using <a href="https://pages.github.com/">GitHub Pages</a>.</p>
<p><strong>Previous:</strong> <a href="../part-1/">In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>tensorflow</category>
  <category>webgl</category>
  <guid>christianjmills.com/posts/tensorflow-js-unity-tutorial/part-2/index.html</guid>
  <pubDate>Wed, 05 Oct 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 1</title>
  <link>christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Import Dependencies</li>
<li>Select a Model</li>
<li>Download the Dataset</li>
<li>Inspect the Dataset</li>
<li>Define DataLoaders</li>
<li>Finetune the Model</li>
<li>Clean Dataset (Optional)</li>
<li>Test the Model</li>
<li>Export the Model</li>
<li>Export Inference Data</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a hand gesture classifier using fastai and export it to TensorFlow.js.</li>
<li><a href="../part-2/">Part 2</a>: Create a TensorFlow.js plugin for the Unity game engine.</li>
<li><a href="../part-3/">Part 3</a>: Build a Unity project as a WebGL application and host it using GitHub Pages.</li>
<li><a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial series, we will walk through training a hand gesture classifier using the <a href="https://docs.fast.ai/">fastai library</a>. We’ll then create a <a href="https://www.tensorflow.org/js/">TensorFlow.js</a> plugin for the <a href="https://unity.com/">Unity</a> game engine to perform inference in <a href="https://www.khronos.org/webgl/wiki/Getting_Started">WebGL</a> applications.</p>
<p><strong>In-Browser Demo:</strong> <a href="https://cj-mills.github.io/fastai-hand-gesture-classifier-webgl-demo/">Hand Gesture Classifier</a></p>
<p>The tutorial uses a downscaled version of <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset) that I modified for image classification tasks. The dataset contains images for 18 distinct hand gestures and an additional <code>no_gesture</code> class to account for idle hands.</p>
<div>
<details>
<summary>
<strong>Reference Images</strong>
</summary>
<br>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table>
<thead>
<tr>
<th>
Class
</th>
<th>
Image
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
call
</td>
<td>
<img alt="call" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/call.jpg">
</td>
</tr>
<tr>
<td>
dislike
</td>
<td>
<img alt="dislike" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/dislike.jpg">
</td>
</tr>
<tr>
<td>
fist
</td>
<td>
<img alt=" fist" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/fist.jpg">
</td>
</tr>
<tr>
<td>
four
</td>
<td>
<img alt="four" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/four.jpg">
</td>
</tr>
<tr>
<td>
like
</td>
<td>
<img alt=" like" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/like.jpg">
</td>
</tr>
<tr>
<td>
mute
</td>
<td>
<img alt=" mute" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/mute.jpg">
</td>
</tr>
<tr>
<td>
ok
</td>
<td>
<img alt=" ok" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/ok.jpg">
</td>
</tr>
<tr>
<td>
one
</td>
<td>
<img alt=" one" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/one.jpg">
</td>
</tr>
<tr>
<td>
palm
</td>
<td>
<img alt=" palm" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/palm.jpg">
</td>
</tr>
<tr>
<td>
peace
</td>
<td>
<img alt="peace" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/peace.jpg">
</td>
</tr>
<tr>
<td>
peace_inverted
</td>
<td>
<img alt="peace_inverted" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/peace_inverted.jpg">
</td>
</tr>
<tr>
<td>
rock
</td>
<td>
<img alt="rock" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/rock.jpg">
</td>
</tr>
<tr>
<td>
stop
</td>
<td>
<img alt="stop" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/stop.jpg">
</td>
</tr>
<tr>
<td>
stop_inverted
</td>
<td>
<img alt="stop_inverted" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/stop_inverted.jpg">
</td>
</tr>
<tr>
<td>
three
</td>
<td>
<img alt="three" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/three.jpg">
</td>
</tr>
<tr>
<td>
three2
</td>
<td>
<img alt="three2" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/three2.jpg">
</td>
</tr>
<tr>
<td>
two_up
</td>
<td>
<img alt=" two_up" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/two_up.jpg">
</td>
</tr>
<tr>
<td>
two_up_inverted
</td>
<td>
<img alt="two_up_inverted" src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/two_up_inverted.jpg">
</td>
</tr>
</tbody>

</table>
</div>
</details>
</div>
<p>We can use a model trained on this dataset to map hand gestures to user input via a webcam in Unity.</p>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This post covers finetuning an image classifier from the <a href="https://github.com/rwightman/pytorch-image-models">timm library</a> and exporting the model to TensorFlow.js format. A link to the training notebook is below, along with links for training on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a>.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial/blob/main/notebooks/Fastai-timm-HaGRID-classification-TFJS.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/tensorflow-js-unity-tutorial/blob/main/notebooks/Fastai-timm-HaGRID-classification-TFJS-Colab.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/tensorflow-js-unity-tutorial/blob/main/notebooks/Fastai-timm-HaGRID-classification-TFJS-Kaggle.ipynb">Open in Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The training code requires <a href="https://pytorch.org/">PyTorch</a> for the fastai library, the fastai library itself for training, and the <a href="https://github.com/Kaggle/kaggle-api">Kaggle API Python package</a> for downloading the dataset. The <a href="https://github.com/rwightman/pytorch-image-models">timm</a> library provides access to a wide range of pretrained image models.</p>
<p><strong>Install model training dependencies</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip install -U fastai==2.7.9</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip install -U kaggle</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip install -U Pillow</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># !pip install -U timm</span></span></code></pre></div>
<p>The model conversion process involves exporting the PyTorch model to <a href="https://onnx.ai/">ONNX</a>, converting the ONNX model to a TensorFlow <a href="https://www.tensorflow.org/guide/saved_model">SavedModel</a>, then converting the SavedModel to TensorFlow.js <a href="https://www.tensorflow.org/js/tutorials/conversion/import_saved_model#step_1_convert_an_existing_tensorflow_model_to_the_tensorflowjs_web_format">web format</a>.</p>
<p><strong>Install Tensorflow.js conversion dependencies</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># !pip install -U onnxruntime</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># !pip install onnx-tf</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># !pip install tensorflowjs</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># !pip install tensorflow_probability</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># !pip install onnx-simplifier</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># !pip install simple-onnx-processing-tools</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;"># !pip install -U onnx_graphsurgeon --index-url https://pypi.ngc.nvidia.com</span></span></code></pre></div>
</section>
<section id="import-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="import-dependencies">Import Dependencies</h2>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p><strong>Import pandas and disable column and row limits</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb4-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb4-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb4-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
<p><strong>Import timm library</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> timm</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">timm.__version__</span></code></pre></div>
<pre class="text"><code>'0.6.7'</code></pre>
</section>
<section id="select-a-model" class="level2">
<h2 class="anchored" data-anchor-id="select-a-model">Select a Model</h2>
<p>Timm provides many pretrained models, but not all are fast enough for real-time applications. We can filter through the available models using the <code>timm.list_models()</code> function.</p>
<p><strong>View available ResNet models</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'resnet*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
resnet10t
</td>
</tr>
<tr>
<th>
1
</th>
<td>
resnet14t
</td>
</tr>
<tr>
<th>
2
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
3
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
5
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
6
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
7
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
8
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
9
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
10
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
11
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
12
</th>
<td>
resnet50_gn
</td>
</tr>
<tr>
<th>
13
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
14
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
15
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
16
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
17
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
18
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
19
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
20
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
21
</th>
<td>
resnetaa50
</td>
</tr>
<tr>
<th>
22
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
23
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
24
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
25
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
26
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
27
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
28
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
29
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
30
</th>
<td>
resnetv2_50
</td>
</tr>
<tr>
<th>
31
</th>
<td>
resnetv2_50d_evos
</td>
</tr>
<tr>
<th>
32
</th>
<td>
resnetv2_50d_gn
</td>
</tr>
<tr>
<th>
33
</th>
<td>
resnetv2_50x1_bit_distilled
</td>
</tr>
<tr>
<th>
34
</th>
<td>
resnetv2_50x1_bitm
</td>
</tr>
<tr>
<th>
35
</th>
<td>
resnetv2_50x1_bitm_in21k
</td>
</tr>
<tr>
<th>
36
</th>
<td>
resnetv2_50x3_bitm
</td>
</tr>
<tr>
<th>
37
</th>
<td>
resnetv2_50x3_bitm_in21k
</td>
</tr>
<tr>
<th>
38
</th>
<td>
resnetv2_101
</td>
</tr>
<tr>
<th>
39
</th>
<td>
resnetv2_101x1_bitm
</td>
</tr>
<tr>
<th>
40
</th>
<td>
resnetv2_101x1_bitm_in21k
</td>
</tr>
<tr>
<th>
41
</th>
<td>
resnetv2_101x3_bitm
</td>
</tr>
<tr>
<th>
42
</th>
<td>
resnetv2_101x3_bitm_in21k
</td>
</tr>
<tr>
<th>
43
</th>
<td>
resnetv2_152x2_bit_teacher
</td>
</tr>
<tr>
<th>
44
</th>
<td>
resnetv2_152x2_bit_teacher_384
</td>
</tr>
<tr>
<th>
45
</th>
<td>
resnetv2_152x2_bitm
</td>
</tr>
<tr>
<th>
46
</th>
<td>
resnetv2_152x2_bitm_in21k
</td>
</tr>
<tr>
<th>
47
</th>
<td>
resnetv2_152x4_bitm
</td>
</tr>
<tr>
<th>
48
</th>
<td>
resnetv2_152x4_bitm_in21k
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>The smaller ResNet models are both fast and sufficiently accurate in most settings. Unfortunately, the <code>resnet10t</code> and <code>resnet14t</code> models contain operations unsupported by the TensorFlow.js conversion script. We’ll instead use the <code>resnet18</code> model for our lightweight option.</p>
<p><strong>Inspect config for specific model</strong></p>
<p>Each model comes with a set of default configuration parameters. We must keep track of the <code>mean</code> and <code>std</code> values used to normalize the model input. Many pretrained models use the <a href="https://github.com/fastai/fastai/blob/de5982cfac41597d432e3c424da847d250f8c5e1/fastai/vision/core.py#L31">ImageNet normalization stats</a>, but others, like MobileViT, <a href="https://github.com/rwightman/pytorch-image-models/blob/d4ea5c7d7d55967a8bedbfbb58962131d8aba776/timm/models/mobilevit.py#L37">do not</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> resnet</span>
<span id="cb9-2">resnet_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'resnet18'</span></span>
<span id="cb9-3">pd.DataFrame.from_dict(resnet.default_cfgs[resnet_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://download.pytorch.org/models/resnet18-5c106cde.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bilinear
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv1
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
fc
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>View available <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> models</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'convnext*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
convnext_base
</td>
</tr>
<tr>
<th>
1
</th>
<td>
convnext_base_384_in22ft1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
convnext_base_in22ft1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
convnext_base_in22k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
convnext_large
</td>
</tr>
<tr>
<th>
5
</th>
<td>
convnext_large_384_in22ft1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convnext_large_in22ft1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convnext_large_in22k
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext_nano
</td>
</tr>
<tr>
<th>
9
</th>
<td>
convnext_small
</td>
</tr>
<tr>
<th>
10
</th>
<td>
convnext_small_384_in22ft1k
</td>
</tr>
<tr>
<th>
11
</th>
<td>
convnext_small_in22ft1k
</td>
</tr>
<tr>
<th>
12
</th>
<td>
convnext_small_in22k
</td>
</tr>
<tr>
<th>
13
</th>
<td>
convnext_tiny
</td>
</tr>
<tr>
<th>
14
</th>
<td>
convnext_tiny_384_in22ft1k
</td>
</tr>
<tr>
<th>
15
</th>
<td>
convnext_tiny_hnf
</td>
</tr>
<tr>
<th>
16
</th>
<td>
convnext_tiny_in22ft1k
</td>
</tr>
<tr>
<th>
17
</th>
<td>
convnext_tiny_in22k
</td>
</tr>
<tr>
<th>
18
</th>
<td>
convnext_xlarge_384_in22ft1k
</td>
</tr>
<tr>
<th>
19
</th>
<td>
convnext_xlarge_in22ft1k
</td>
</tr>
<tr>
<th>
20
</th>
<td>
convnext_xlarge_in22k
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>The <code>convnext_nano</code> model is highly accurate for its size and is a good choice when compute power is less constrained.</p>
<p><strong>Inspect config for specific model</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> convnext</span>
<span id="cb11-2">convnext_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_nano'</span></span>
<span id="cb11-3">pd.DataFrame.from_dict(convnext.default_cfgs[convnext_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-rsb-weights/convnext_nano_d1h-7eb4bdea.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.95
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
<tr>
<th>
test_input_size
</th>
<td>
(3, 288, 288)
</td>
</tr>
<tr>
<th>
test_crop_pct
</th>
<td>
1.0
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Select a model</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># model_type = resnet</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;"># model_name = resnet_model</span></span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model_type <span class="op" style="color: #5E5E5E;">=</span> convnext</span>
<span id="cb13-2">model_name <span class="op" style="color: #5E5E5E;">=</span> convnext_model</span></code></pre></div>
<p><strong>Extract normalization stats from model config</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">mean <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'mean'</span>]</span>
<span id="cb14-2">std <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'std'</span>]</span>
<span id="cb14-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
</section>
<section id="download-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-the-dataset">Download the Dataset</h2>
<p>The Kaggle API tool requires an API Key for a Kaggle account. Sign in or create a Kaggle account using the link below, then click the Create New API Token button.</p>
<ul>
<li><strong>Kaggle Account Settings:</strong> <a href="https://www.kaggle.com/me/account">https://www.kaggle.com/me/account</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/kaggle-create-new-api-token.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Kaggle will generate and download a <code>kaggle.json</code> file containing your username and new API token. Initialize the <code>creds</code> variable with the values for each.</p>
<p><strong>Enter Kaggle username and API token</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">creds <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'{"username":"","key":""}'</span></span></code></pre></div>
<p><strong>Save Kaggle credentials if none are present</strong></p>
<ul>
<li><strong>Source:</strong> <a href="https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb">https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb</a></li>
</ul>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">cred_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># Save API key to a json file if it does not already exist</span></span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> cred_path.exists():</span>
<span id="cb17-4">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-5">    cred_path.write_text(creds)</span>
<span id="cb17-6">    cred_path.chmod(<span class="bn" style="color: #AD0000;">0o600</span>)</span></code></pre></div>
<p><strong>Import Kaggle API</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span></code></pre></div>
<p><strong>Select a dataset</strong></p>
<p>Now that we have our Kaggle credentials set, we need to define the dataset and where to store it. I made three different-sized versions of the dataset available on Kaggle.</p>
<ul>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-classification-512p-no-gesture-150k">HaGRID Classification 512p no_gesture 150k</a>
<ul>
<li>Images: 154,816</li>
<li>Size: 4 GB</li>
</ul></li>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-classification-512p-no-gesture-300k">HaGRID Classification 512p no_gesture 300k</a>
<ul>
<li>Images: 309,632</li>
<li>Size: 8 GB</li>
</ul></li>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-classification-512p-no-gesture">HaGRID Classification 512p no_gesture</a>
<ul>
<li>Images: 619,264</li>
<li>Size: 15 GB</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'hagrid-classification-512p-no-gesture-150k'</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># dataset_name = 'hagrid-classification-512p-no-gesture-300k'</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># dataset_name = 'hagrid-classification-512p-no-gesture'</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">kaggle_dataset <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'innominate817/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span></code></pre></div>
<p><strong>Define path to dataset</strong></p>
<p>We will use the default archive and data folders for the fastai library to store the compressed and uncompressed datasets.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">archive_dir <span class="op" style="color: #5E5E5E;">=</span> URLs.path()</span>
<span id="cb20-2">dataset_dir <span class="op" style="color: #5E5E5E;">=</span> archive_dir<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'../data'</span></span>
<span id="cb20-3">archive_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.zip'</span>)</span>
<span id="cb20-4">dataset_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Define method to extract the dataset from an archive file</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> file_extract(fname, dest<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;">"Extract `fname` to `dest` using `tarfile` or `zipfile`."</span></span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;">if</span> dest <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: dest <span class="op" style="color: #5E5E5E;">=</span> Path(fname).parent</span>
<span id="cb21-4">    fname <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(fname)</span>
<span id="cb21-5">    <span class="cf" style="color: #003B4F;">if</span>   fname.endswith(<span class="st" style="color: #20794D;">'gz'</span>):  tarfile.<span class="bu" style="color: null;">open</span>(fname, <span class="st" style="color: #20794D;">'r:gz'</span>).extractall(dest)</span>
<span id="cb21-6">    <span class="cf" style="color: #003B4F;">elif</span> fname.endswith(<span class="st" style="color: #20794D;">'zip'</span>): zipfile.ZipFile(fname     ).extractall(dest)</span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;">else</span>: <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="ss" style="color: #20794D;">f'Unrecognized archive: </span><span class="sc" style="color: #5E5E5E;">{</span>fname<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Download the dataset if it is not present</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> archive_path.exists():</span>
<span id="cb22-2">    api.dataset_download_cli(kaggle_dataset, path<span class="op" style="color: #5E5E5E;">=</span>archive_dir)</span>
<span id="cb22-3">    file_extract(fname<span class="op" style="color: #5E5E5E;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;">=</span>dataset_path)</span></code></pre></div>
</section>
<section id="inspect-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-the-dataset">Inspect the Dataset</h2>
<p>We can start inspecting the dataset once it finishes downloading.</p>
<p><strong>Inspect the dataset path</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">pd.DataFrame(<span class="bu" style="color: null;">list</span>(dataset_path.ls()))</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-classification-512p-no-gesture-150k/hagrid-classification-512p-no-gesture-150k
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get image file paths</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">img_dir <span class="op" style="color: #5E5E5E;">=</span> dataset_path<span class="op" style="color: #5E5E5E;">/</span>dataset_name</span></code></pre></div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(img_dir)</span>
<span id="cb25-2"><span class="bu" style="color: null;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>154816</code></pre>
<p><strong>Inspect files</strong></p>
<p>The dataset indicates the image class in the parent folder names.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">pd.DataFrame([files[<span class="dv" style="color: #AD0000;">0</span>], files[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]])</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-classification-512p-no-gesture-150k/hagrid-classification-512p-no-gesture-150k/stop/3ac51cf4-cd81-4803-a608-76a55b36df26.jpeg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-classification-512p-no-gesture-150k/hagrid-classification-512p-no-gesture-150k/two_up/d5a0a30d-92aa-4a7c-9621-1fed0e8f0b66.jpeg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect class folder names</strong></p>
<p>There are 19 class folders, and the dataset does not predefine a training-validation split.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">folder_names <span class="op" style="color: #5E5E5E;">=</span> [path.name <span class="cf" style="color: #003B4F;">for</span> path <span class="kw" style="color: #003B4F;">in</span> Path(img_dir).ls()]</span>
<span id="cb28-2"><span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'models'</span> <span class="kw" style="color: #003B4F;">in</span> folder_names: </span>
<span id="cb28-3">    os.removedirs(img_dir<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'models'</span>)</span>
<span id="cb28-4">    folder_names.remove(<span class="st" style="color: #20794D;">'models'</span>)</span>
<span id="cb28-5">folder_names.sort()</span>
<span id="cb28-6"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Num classes: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(folder_names)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb28-7">pd.DataFrame(folder_names)</span></code></pre></div>
<pre class="text"><code>Num classes: 19</code></pre>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Inspect one of the training images</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">import</span> PIL</span>
<span id="cb30-2">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(files[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb30-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Class: </span><span class="sc" style="color: #5E5E5E;">{</span>files[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">.</span>parent<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;">{</span>img<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-5">img</span></code></pre></div>
<pre class="text"><code>    Class: stop
    Image Dims: (512, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_54_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="define-dataloaders" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloaders">Define DataLoaders</h2>
<p>Next, we need to define the <a href="https://docs.fast.ai/vision.augment.html">Transforms</a> for the <a href="https://docs.fast.ai/vision.data.html#ImageDataLoaders">DataLoaders</a> object.</p>
<p><strong>Define target input dimensions</strong></p>
<p>The Unity project will take input from a webcam, which will likely not have a square aspect ratio. We can still train the models with a square aspect ratio, and training at <code>256x256</code> (65,536 pixels) is more efficient than training at <code>384x216</code> (82,944 pixels) for a 16:9 aspect ratio.</p>
<p>The ResNet and ConvNeXt models handle arbitrary input dimensions well. However, we must export some models like MobileViT with the exact input dimensions used for inference.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">size_1_1 <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">256</span>)</span>
<span id="cb32-2">size_16_9 <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">216</span>, <span class="dv" style="color: #AD0000;">384</span>)</span>
<span id="cb32-3">size <span class="op" style="color: #5E5E5E;">=</span> size_1_1</span></code></pre></div>
<p><strong>Define Transforms</strong></p>
<p>We can leave most of the options in <a href="https://docs.fast.ai/vision.augment.html#aug_transforms"><code>aug_transforms</code></a> at their default values. The HaGRID dataset is diverse enough that we don’t need to add too much augmentation. However, we will disable the <code>max_rotate</code> option as orientation is relevant for gesture recognition.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [Resize(size, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb33-2"></span>
<span id="cb33-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb33-4">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb33-5">        size<span class="op" style="color: #5E5E5E;">=</span>size, </span>
<span id="cb33-6">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb33-7">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb33-8">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb33-9">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb33-10">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb33-11">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.1</span>,</span>
<span id="cb33-12">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>,</span>
<span id="cb33-13">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb33-14">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>,</span>
<span id="cb33-15">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)</span>
<span id="cb33-16">]</span></code></pre></div>
<p><strong>Note:</strong> The fastai library automatically normalizes input for timm models as of version <a href="https://github.com/fastai/fastai/releases/tag/2.7.5">2.7.5</a>.</p>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">32</span></span></code></pre></div>
<p><strong>Define DataLoaders object</strong></p>
<p>We can use the <a href="https://docs.fast.ai/vision.data.html#ImageDataLoaders.from_folder"><code>from_folder</code></a> method to instantiate the DataLoaders object.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(</span>
<span id="cb35-2">    path<span class="op" style="color: #5E5E5E;">=</span>img_dir, </span>
<span id="cb35-3">    valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb35-4">    bs<span class="op" style="color: #5E5E5E;">=</span>bs, </span>
<span id="cb35-5">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>item_tfms, </span>
<span id="cb35-6">    batch_tfms<span class="op" style="color: #5E5E5E;">=</span>batch_tfms</span>
<span id="cb35-7">)</span></code></pre></div>
<p><strong>Verify DataLoaders object</strong></p>
<p>Let’s verify the DataLoaders object works as expected before training a model.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">dls.train.show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_66_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="finetune-the-model" class="level2">
<h2 class="anchored" data-anchor-id="finetune-the-model">Finetune the Model</h2>
<p>Now we can define the <a href="https://docs.fast.ai/learner.html#learner"><code>Learner</code></a> object and finetune the selected model.</p>
<p><strong>Define <a href="https://docs.fast.ai/metrics.html">metrics</a></strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">metrics <span class="op" style="color: #5E5E5E;">=</span> [error_rate, accuracy]</span></code></pre></div>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model_name, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics)</span></code></pre></div>
<p><strong>Define model checkpoint file path</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">checkpoint_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>model_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.pth"</span>)</span>
<span id="cb39-2">checkpoint_path</span></code></pre></div>
<pre class="text"><code>Path('hagrid-classification-512p-no-gesture-150k-convnext_nano.pth')</code></pre>
<p><strong>Load existing checkpoint (Optional)</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># if checkpoint_path.exists():</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;">#     print("Loading checkpoint...")</span></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;">#     checkpoint = torch.load(checkpoint_path)</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;">#     learn.model.load_state_dict(checkpoint)</span></span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">suggested_lrs <span class="op" style="color: #5E5E5E;">=</span> learn.lr_find()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_77_2.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<p>We can use a slightly higher learning rate than the learning rate finder recommends to speed up training.</p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">lr <span class="op" style="color: #5E5E5E;">=</span> suggested_lrs.valley<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb43-2">lr</span></code></pre></div>
<pre class="text"><code>0.003606793354265392</code></pre>
<p><strong>Define number of epochs</strong></p>
<p>We should not need to train for more than a few epochs.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span></code></pre></div>
<p><strong>Define callbacks</strong></p>
<p>Training with mixed precision can significantly reduce training time on modern GPUs. However, the older GPUs on the free tiers for Google Colab and Kaggle will likely not benefit from it.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">cbs <span class="op" style="color: #5E5E5E;">=</span> [MixedPrecision()]</span></code></pre></div>
<p><strong>Fine tune model</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">learn.fine_tune(epochs, base_lr<span class="op" style="color: #5E5E5E;">=</span>lr, cbs<span class="op" style="color: #5E5E5E;">=</span>cbs)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
accuracy
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.372442
</td>
<td>
0.189683
</td>
<td>
0.061299
</td>
<td>
0.938701
</td>
<td>
04:22
</td>
</tr>
</tbody>

</table>
</div>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
accuracy
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.096614
</td>
<td>
0.054749
</td>
<td>
0.017214
</td>
<td>
0.982786
</td>
<td>
05:29
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.048555
</td>
<td>
0.033598
</td>
<td>
0.010012
</td>
<td>
0.989988
</td>
<td>
05:34
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.030899
</td>
<td>
0.018264
</td>
<td>
0.005555
</td>
<td>
0.994445
</td>
<td>
05:32
</td>
</tr>
<tr>
<td>
3
</td>
<td>
0.018128
</td>
<td>
0.015447
</td>
<td>
0.004877
</td>
<td>
0.995123
</td>
<td>
05:30
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Save model checkpoint</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">torch.save(learn.model.state_dict(), checkpoint_path)</span></code></pre></div>
<p><strong>Make predictions for a group of images</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">learn.show_results()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_89_2.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define an Interpretation object</strong></p>
<p>Once the model finishes training, we can create an <a href="https://docs.fast.ai/interpret.html#interpretation">Interpretation</a> object to see where it struggles. An Interpretation object is also helpful to see if there are any mislabeled/low-quality training images.</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">interp <span class="op" style="color: #5E5E5E;">=</span> Interpretation.from_learner(learn)</span></code></pre></div>
<p><strong>Plot top losses</strong></p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">interp.plot_top_losses(k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">15</span>,<span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_93_2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="clean-dataset-optional" class="level2">
<h2 class="anchored" data-anchor-id="clean-dataset-optional">Clean Dataset (Optional)</h2>
<p>I spent some time cleaning the modified HaGRID datasets, but there are likely some training images that should still be moved or deleted. If the model accuracy is insufficient, consider using the <a href="https://docs.fast.ai/vision.widgets.html#imageclassifiercleaner"><code>ImageClassifierCleaner</code></a> widget to edit the dataset.</p>
<p><strong>Import fastai <a href="https://docs.fast.ai/vision.widgets.html#imageclassifiercleaner">ImageClassifierCleaner</a></strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;"># from fastai.vision.widgets import ImageClassifierCleaner</span></span></code></pre></div>
<p><strong>Mark images to delete or move</strong></p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># cleaner = ImageClassifierCleaner(learn)</span></span>
<span id="cb53-2"><span class="co" style="color: #5E5E5E;"># cleaner</span></span></code></pre></div>
<p><strong>Inspect samples to change</strong></p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># cleaner.change()</span></span></code></pre></div>
<p><strong>Move selected samples to target class folder</strong></p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), img_dir/cat)</span></span></code></pre></div>
<p><strong>Inspect samples to delete</strong></p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># cleaner.delete()</span></span></code></pre></div>
<p><strong>Delete selected samples</strong></p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># for idx in cleaner.delete(): cleaner.fns[idx].unlink()</span></span></code></pre></div>
<p><strong>Note:</strong> Restart the notebook and finetune the trained model after cleaning the dataset.</p>
</section>
<section id="test-the-model" class="level2">
<h2 class="anchored" data-anchor-id="test-the-model">Test the Model</h2>
<p>Next, we will test the model on a single image.</p>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="im" style="color: #00769E;">import</span> PIL</span></code></pre></div>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">test_file <span class="op" style="color: #5E5E5E;">=</span> files[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb59-2">test_file.parent.name, test_file.name</span></code></pre></div>
<pre class="text"><code>('stop', '3ac51cf4-cd81-4803-a608-76a55b36df26.jpeg')</code></pre>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file)</span>
<span id="cb61-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Source image size: </span><span class="sc" style="color: #5E5E5E;">{</span>test_img<span class="sc" style="color: #5E5E5E;">.</span>size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb61-3">test_img</span></code></pre></div>
<pre class="text"><code>Source image size: (512, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_112_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Set target size</strong></p>
<p>We will test the model with the target inference resolution to verify it performs as desired.</p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">size <span class="op" style="color: #5E5E5E;">=</span> size_16_9</span>
<span id="cb63-2">size</span></code></pre></div>
<pre class="text"><code>(216, 384)</code></pre>
<p><strong>Option 1: Pad to target input dims</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">padded_img <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageOps.pad(test_img, [size[<span class="dv" style="color: #AD0000;">1</span>], size[<span class="dv" style="color: #AD0000;">0</span>]], method<span class="op" style="color: #5E5E5E;">=</span>PIL.Image.Resampling.BICUBIC)</span>
<span id="cb65-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Padded image size: </span><span class="sc" style="color: #5E5E5E;">{</span>padded_img<span class="sc" style="color: #5E5E5E;">.</span>size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb65-3">padded_img</span></code></pre></div>
<pre class="text"><code>Padded image size: (384, 216)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_117_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Option 2: Stretch to target input dims</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">stretched_img <span class="op" style="color: #5E5E5E;">=</span> test_img.resize([size[<span class="dv" style="color: #AD0000;">1</span>], size[<span class="dv" style="color: #AD0000;">0</span>]])</span>
<span id="cb67-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Stretched image size: </span><span class="sc" style="color: #5E5E5E;">{</span>stretched_img<span class="sc" style="color: #5E5E5E;">.</span>size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb67-3">stretched_img</span></code></pre></div>
<pre class="text"><code>Stretched image size: (384, 216)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/images/output_119_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Make a prediction on padded image using a <a href="https://docs.fast.ai/vision.core.html#PILImage">fastai.vision.core.PILImage</a></strong></p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">pred <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage(padded_img))</span>
<span id="cb69-2">pred, pred[<span class="dv" style="color: #AD0000;">2</span>].<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<pre class="text"><code>    (('stop',
      TensorBase(13),
      TensorBase([5.6481e-08, 2.9167e-09, 1.7013e-08, 1.0619e-07, 7.0342e-09, 4.3362e-10,
              1.9056e-08, 7.8481e-07, 1.9450e-08, 5.0064e-06, 3.8272e-09, 8.2519e-11,
              4.3597e-08, 9.9999e-01, 2.3984e-08, 1.0935e-08, 2.4180e-09, 2.1497e-08,
              5.9654e-10])),
     TensorBase(1.0000))</code></pre>
<p><strong>Make a prediction on stretched image using a <a href="https://docs.fast.ai/vision.core.html#PILImage">fastai.vision.core.PILImage</a></strong></p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">pred <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage(stretched_img))</span>
<span id="cb71-2">pred, pred[<span class="dv" style="color: #AD0000;">2</span>].<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<pre class="text"><code>(('stop',
  TensorBase(13),
  TensorBase([1.3940e-06, 4.6373e-07, 1.3970e-04, 6.4621e-07, 6.8510e-08, 9.9468e-09,
          1.1748e-07, 1.3881e-06, 1.1672e-06, 3.1076e-04, 9.0491e-09, 7.7261e-10,
          8.4245e-08, 9.9954e-01, 1.7898e-07, 2.6569e-08, 3.4712e-08, 2.2750e-08,
          6.5716e-09])),
 TensorBase(0.9995))</code></pre>
<p>When we are satisfied with the model, we can start preparing for implementing it in TensorFlow.js. We will need to apply some of the preprocessing and post-processing that fastai applies automatically.</p>
<p><strong>Inspect the <code>after_item</code> pipeline</strong></p>
<p>We do not need to worry about padding the input image as both the ResNet and ConvNeXt models handle arbitrary input dimensions.</p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">learn.dls.after_item</span></code></pre></div>
<pre class="text"><code>Pipeline: Resize -- {'size': (256, 256), 'method': 'pad', 'pad_mode': 'border', 'resamples': (&lt;Resampling.BILINEAR: 2&gt;, &lt;Resampling.NEAREST: 0&gt;), 'p': 1.0} -&gt; ToTensor</code></pre>
<p><strong>Inspect the <code>after_batch</code> pipeline</strong></p>
<p>The <code>after_batch</code> pipeline first scales the image color channel values from <code>[0,255]</code> to <code>[0,1]</code>. We will need to do the same for the TensorFlow.js plugin. We will also need to normalize the input image with the relevant normalization stats.</p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">learn.dls.after_batch</span></code></pre></div>
<pre class="text"><code>Pipeline: IntToFloatTensor -- {'div': 255.0, 'div_mask': 1} -&gt; Flip -- {'size': (256, 256), 'mode': 'bilinear', 'pad_mode': 'border', 'mode_mask': 'nearest', 'align_corners': True, 'p': 0.5} -&gt; Brightness -- {'max_lighting': 0.2, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Normalize -- {'mean': tensor([[[[0.4850]],

         [[0.4560]],

         [[0.4060]]]], device='cuda:0'), 'std': tensor([[[[0.2290]],

         [[0.2240]],

         [[0.2250]]]], device='cuda:0'), 'axes': (0, 2, 3)}</code></pre>
<p><strong>Convert image to tensor</strong></p>
<p>We’ll first prepare the input image by converting it to a tensor, batching it, and moving it to the GPU.</p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">img_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(padded_img).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>).<span class="bu" style="color: null;">float</span>().unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).cuda()</span>
<span id="cb77-2">img_tensor.shape, img_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([1, 3, 216, 384]),
     tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               ...,
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.]],
     
              [[0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               ...,
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.]],
     
              [[0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               ...,
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.],
               [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0'))</code></pre>
<p><strong>Scale tensor values</strong></p>
<p>We’ll then scale the values from [0, 255] to [0, 1].</p>
<div class="sourceCode" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">255</span></span></code></pre></div>
<p>Next, we’ll prepare the normalization values.</p>
<p><strong>Prepare mean values</strong></p>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">mean_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(mean).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>).unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).cuda()</span>
<span id="cb80-2">mean_tensor.shape, mean_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([1, 3, 1, 1]),
     tensor([[[[0.4850]],
     
              [[0.4560]],
     
              [[0.4060]]]], device='cuda:0'))</code></pre>
<p><strong>Prepare std_dev values</strong></p>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">std_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(std).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>).unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).cuda()</span>
<span id="cb82-2">std_tensor.shape, std_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([1, 3, 1, 1]),
     tensor([[[[0.2290]],
     
              [[0.2240]],
     
              [[0.2250]]]], device='cuda:0'))</code></pre>
<p>We can integrate the normalization preprocessing step and the Softmax postprocessing function into the exported model by creating a custom forward method. This way, we don’t need to store the normalization stats for each model in a separate file.</p>
<p><strong>Create a backup of the default model forward function</strong></p>
<p>We first need to create a backup of the current forward method.</p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">origin_forward <span class="op" style="color: #5E5E5E;">=</span> learn.model.forward</span></code></pre></div>
<p><strong>Define custom forward function for exporting the model</strong></p>
<p>The custom forward method will normalize the input tensor, feed it to the original forward method and pass the raw output through a Softmax function.</p>
<div class="sourceCode" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="kw" style="color: #003B4F;">def</span> forward_export(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb85-2">    </span>
<span id="cb85-3">    <span class="co" style="color: #5E5E5E;"># Normalize input</span></span>
<span id="cb85-4">    normalized_tensor <span class="op" style="color: #5E5E5E;">=</span> (x <span class="op" style="color: #5E5E5E;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;">/</span> std_tensor</span>
<span id="cb85-5">    </span>
<span id="cb85-6">    <span class="co" style="color: #5E5E5E;"># Get raw model output</span></span>
<span id="cb85-7">    preds <span class="op" style="color: #5E5E5E;">=</span> origin_forward(normalized_tensor)</span>
<span id="cb85-8">    </span>
<span id="cb85-9">    <span class="co" style="color: #5E5E5E;"># Apply SoftMax function</span></span>
<span id="cb85-10">    <span class="cf" style="color: #003B4F;">return</span> torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<p><strong>Note:</strong> This custom forward method might also be a suitable spot to resize input images for models like MobileViT with fixed input dimensions.</p>
<p><strong>Add custom forward function to model</strong></p>
<p>We then add the custom forward method to the model using <a href="https://machinelearningmastery.com/monkey-patching-python-code/">monkey patching</a>.</p>
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">learn.model.forward_export <span class="op" style="color: #5E5E5E;">=</span> forward_export.<span class="fu" style="color: #4758AB;">__get__</span>(learn.model)</span></code></pre></div>
<p><strong>Test custom forward function</strong></p>
<p>Now we can test the custom forward method to verify it returns the expected prediction.</p>
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb87-2">    preds <span class="op" style="color: #5E5E5E;">=</span> learn.model.forward_export(scaled_tensor)</span>
<span id="cb87-3">preds.cpu().argmax(), preds.cpu()</span></code></pre></div>
<pre class="text"><code>    (TensorBase(13),
     TensorBase([[1.8443e-08, 1.8163e-09, 1.3866e-08, 2.6368e-08, 1.0109e-09, 6.3904e-10,
              2.6506e-09, 7.7717e-09, 3.7365e-10, 1.0260e-06, 9.1487e-11, 4.4600e-11,
              4.3488e-10, 1.0000e+00, 1.8129e-08, 3.4815e-09, 3.7684e-10, 1.1454e-08,
              1.1459e-10]]))</code></pre>
<p><strong>Get the class labels</strong></p>
<div class="sourceCode" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">learn.dls.vocab</span></code></pre></div>
<pre class="text"><code>    ['call', 'dislike', 'fist', 'four', 'like', 'mute', 'no_gesture', 'ok', 'one', 'palm', 'peace', 'peace_inverted', 'rock', 'stop', 'stop_inverted', 'three', 'three2', 'two_up', 'two_up_inverted']</code></pre>
<p><strong>Get the predicted class label</strong></p>
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">learn.dls.vocab[preds.cpu().argmax()]</span></code></pre></div>
<pre class="text"><code>    'stop'</code></pre>
<p><strong>Replace model forward function with custom function</strong></p>
<p>Lastly, we need to replace the current forward method with the custom one before exporting the model to ONNX.</p>
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">learn.model.forward <span class="op" style="color: #5E5E5E;">=</span> learn.model.forward_export</span></code></pre></div>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>Now we can begin the process of converting the PyTorch model to TensorFlow.js.</p>
<p><strong>Define ONNX opset version</strong></p>
<div class="sourceCode" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">opset <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span></code></pre></div>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-opset</span><span class="sc" style="color: #5E5E5E;">{</span>opset<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb95-2"><span class="bu" style="color: null;">print</span>(onnx_file_name)</span></code></pre></div>
<pre><code>hagrid-classification-512p-no-gesture-150k-convnext_nano-opset15.onnx</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<p>We will also unlock the input dimensions for the model to give ourselves more flexibility in Unity. This setting will not matter for models like MobileViT that require exact input dimensions.</p>
<div class="sourceCode" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">torch.onnx.export(learn.model.cpu(),</span>
<span id="cb97-2">                  batched_tensor,</span>
<span id="cb97-3">                  onnx_file_name,</span>
<span id="cb97-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb97-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span>opset,</span>
<span id="cb97-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb97-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb97-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb97-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb97-10">                 )</span></code></pre></div>
<p><strong>Import dependencies for TensorFlow.js conversion</strong></p>
<div class="sourceCode" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="im" style="color: #00769E;">import</span> onnx</span>
<span id="cb98-2"><span class="im" style="color: #00769E;">from</span> scc4onnx <span class="im" style="color: #00769E;">import</span> order_conversion</span>
<span id="cb98-3"><span class="im" style="color: #00769E;">from</span> onnxsim <span class="im" style="color: #00769E;">import</span> simplify</span>
<span id="cb98-4"><span class="im" style="color: #00769E;">from</span> onnx_tf.backend <span class="im" style="color: #00769E;">import</span> prepare</span></code></pre></div>
<p><strong>Load ONNX model</strong></p>
<div class="sourceCode" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">onnx_model <span class="op" style="color: #5E5E5E;">=</span> onnx.load(onnx_file_name)</span></code></pre></div>
<p><strong>Inspect model input</strong></p>
<p>Looking at the input layer for the ONNX model, we can see that it is channels-first. However, the channels-last format is more straightforward for preparing model input in JavaScript. We can switch the model input to channels-last format using the <a href="https://pypi.org/project/scc4onnx/">scc4onnx</a> package.</p>
<div class="sourceCode" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">onnx_model.graph.<span class="bu" style="color: null;">input</span>[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>name: "input"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 1
      }
      dim {
        dim_value: 3
      }
      dim {
        dim_param: "height"
      }
      dim {
        dim_param: "width"
      }
    }
  }
}</code></pre>
<p><strong>Get input name</strong></p>
<div class="sourceCode" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">input_name <span class="op" style="color: #5E5E5E;">=</span> onnx_model.graph.<span class="bu" style="color: null;">input</span>[<span class="dv" style="color: #AD0000;">0</span>].name</span>
<span id="cb102-2">input_name</span></code></pre></div>
<pre class="text"><code>'input'</code></pre>
<p><strong>Convert model input to channels-last format</strong></p>
<div class="sourceCode" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1">onnx_model <span class="op" style="color: #5E5E5E;">=</span> order_conversion(</span>
<span id="cb104-2">    onnx_graph<span class="op" style="color: #5E5E5E;">=</span>onnx_model,</span>
<span id="cb104-3">    input_op_names_and_order_dims<span class="op" style="color: #5E5E5E;">=</span>{<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>input_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>: [<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">1</span>]},</span>
<span id="cb104-4">    non_verbose<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb104-5">)</span></code></pre></div>
<p><strong>Inspect updated model input</strong></p>
<p>If we look at the input layer again, we can see it is now in channels-last format.</p>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">onnx_model.graph.<span class="bu" style="color: null;">input</span>[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>name: "input"
type {
  tensor_type {
    elem_type: 1
    shape {
      dim {
        dim_value: 1
      }
      dim {
        dim_param: "height"
      }
      dim {
        dim_param: "width"
      }
      dim {
        dim_value: 3
      }
    }
  }
}</code></pre>
<p><strong>Simplify ONNX model</strong></p>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/">onnx-simplifier</a> package to tidy up the exported model. This step is entirely optional.</p>
<div class="sourceCode" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">onnx_model, check <span class="op" style="color: #5E5E5E;">=</span> simplify(onnx_model)</span>
<span id="cb107-2">check</span></code></pre></div>
<pre class="text"><code>True</code></pre>
<p><strong>Prepare ONNX model for Tensorflow Backend</strong></p>
<p>Next, we need to convert the ONNX model to an internal representation of the computational graph.</p>
<div class="sourceCode" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">tf_rep <span class="op" style="color: #5E5E5E;">=</span> prepare(onnx_model)</span></code></pre></div>
<p><strong>Define path for TensorFlow <a href="https://www.tensorflow.org/guide/saved_model">saved model</a> directory</strong></p>
<div class="sourceCode" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">tf_model_dir <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"./</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">.</span>split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb110-2">tf_model_dir</span></code></pre></div>
<pre class="text"><code>'./hagrid-classification-512p-no-gesture-150k-convnext_nano-opset15'</code></pre>
<p>We can now export the internal representation to a Tensorflow proto file.</p>
<p><strong>Export backend representation to a Tensorflow proto file</strong></p>
<div class="sourceCode" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">tf_rep.export_graph(tf_model_dir)</span></code></pre></div>
<p><strong>Define directory path to store tfjs model files</strong></p>
<div class="sourceCode" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">tfjs_model_dir <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>tf_model_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-tfjs-uint8"</span></span>
<span id="cb113-2">tfjs_model_dir</span></code></pre></div>
<pre class="text"><code>'./hagrid-classification-512p-no-gesture-150k-convnext_nano-opset15-tfjs-uint8'</code></pre>
<p><strong>Define arguments for tfjs converter script</strong></p>
<p>The TensorFlow.js conversion script provides a few quantization options. These can significantly reduce the model file size. The file size matters since users download the models when loading the web demo. However, using the quantization options on small models like MobileNet can hurt accuracy.</p>
<div class="sourceCode" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Markdown, display</span></code></pre></div>
<div class="sourceCode" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">tfjs_convert_command <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""tensorflowjs_converter</span></span>
<span id="cb116-2"><span class="ss" style="color: #20794D;">                 --input_format=tf_saved_model </span></span>
<span id="cb116-3"><span class="ss" style="color: #20794D;">                 --output_format=tfjs_graph_model </span></span>
<span id="cb116-4"><span class="ss" style="color: #20794D;">                 --signature_name=serving_default </span></span>
<span id="cb116-5"><span class="ss" style="color: #20794D;">                 --saved_model_tags=serve </span></span>
<span id="cb116-6"><span class="ss" style="color: #20794D;">                 "</span><span class="sc" style="color: #5E5E5E;">{</span>tf_model_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">" </span></span>
<span id="cb116-7"><span class="ss" style="color: #20794D;">                 "</span><span class="sc" style="color: #5E5E5E;">{</span>tfjs_model_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb116-8"><span class="ss" style="color: #20794D;">                 "--quantize_uint8"</span></span>
<span id="cb116-9"><span class="ss" style="color: #20794D;">                 """</span></span>
<span id="cb116-10">tfjs_convert_command <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span>.join(tfjs_convert_command.split())</span>
<span id="cb116-11">display(Markdown(<span class="ss" style="color: #20794D;">f"```bash</span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>tfjs_convert_command<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">```"</span>))</span></code></pre></div>
<div class="sourceCode" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb117-1"><span class="ex" style="color: null;">tensorflowjs_converter</span> <span class="at" style="color: #657422;">--input_format</span><span class="op" style="color: #5E5E5E;">=</span>tf_saved_model <span class="at" style="color: #657422;">--output_format</span><span class="op" style="color: #5E5E5E;">=</span>tfjs_graph_model <span class="at" style="color: #657422;">--signature_name</span><span class="op" style="color: #5E5E5E;">=</span>serving_default <span class="at" style="color: #657422;">--saved_model_tags</span><span class="op" style="color: #5E5E5E;">=</span>serve <span class="st" style="color: #20794D;">"./hagrid-classification-512p-no-gesture-150k-convnext_nano-opset15"</span> <span class="st" style="color: #20794D;">"./hagrid-classification-512p-no-gesture-150k-convnext_nano-opset15-tfjs-uint8"</span> <span class="st" style="color: #20794D;">"--quantize_uint8"</span></span></code></pre></div>
<p><strong>Export SavedModel to TFJS format</strong></p>
<p>The conversion script will create a new folder containing a <code>model.json</code> file describing the model architecture and some BIN files storing the model weights.</p>
<div class="sourceCode" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Exporting TensorFlow SavedModel to TensorFlow.js Graph model..."</span>)</span>
<span id="cb118-2">conversion_result <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sx $tfjs_convert_command</span>
<span id="cb118-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>.join(conversion_result))</span></code></pre></div>
</section>
<section id="export-inference-data" class="level2">
<h2 class="anchored" data-anchor-id="export-inference-data">Export Inference Data</h2>
<p>We can export the list of class labels to a JSON file and import it into the Unity project. That way, we don’t have to hardcode them, and we can easily swap in models trained on different datasets.</p>
<div class="sourceCode" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="im" style="color: #00769E;">import</span> json</span></code></pre></div>
<p><strong>Export class labels</strong></p>
<div class="sourceCode" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1">labels <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(learn.dls.vocab)</span>
<span id="cb120-2">labels</span></code></pre></div>
<pre><code>['call',
 'dislike',
 'fist',
 'four',
 'like',
 'mute',
 'no_gesture',
 'ok',
 'one',
 'palm',
 'peace',
 'peace_inverted',
 'rock',
 'stop',
 'stop_inverted',
 'three',
 'three2',
 'two_up',
 'two_up_inverted']</code></pre>
<div class="sourceCode" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">class_labels <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"classes"</span>: labels}</span>
<span id="cb122-2">class_labels_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-classes.json"</span></span>
<span id="cb122-3"></span>
<span id="cb122-4"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb122-5">    json.dump(class_labels, write_file)</span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered finetuning an image classifier using the fastai library and exporting it to TensorFlow.js web format. Part 2 covers implementing a <a href="https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html">jslib plugin</a> in a Unity project to perform inference with the trained model.</p>
<p><strong>Next:</strong> <a href="../part-2/">In-Browser Hand Gesture Recognition for Unity with Fastai and TensorFlow.js Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/tensorflow-js-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>tensorflow</category>
  <category>webgl</category>
  <guid>christianjmills.com/posts/tensorflow-js-unity-tutorial/part-1/index.html</guid>
  <pubDate>Tue, 04 Oct 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Object Detection for Unity With ONNX Runtime and DirectML Pt. 2</title>
  <link>christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create New Project</li>
<li>Import Assets</li>
<li>Allow Unsafe Code</li>
<li>Create Processing Shader</li>
<li>Create Object Detector Script</li>
<li>Set up Unity Scene</li>
<li>Test in Editor</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../../icevision-openvino-unity-tutorial/part-1/">Training Tutorial</a>: Train a hand gesture classifier using fastai and export it to TensorFlow.js.</li>
<li><a href="../part-1/">Part 1</a>: Create a dynamic link library (DLL) file in Visual Studio to perform object detection with a YOLOX model using ONNX Runtime and DirectML.</li>
<li><a href="../part-2/">Part 2</a>: Perform object detection in a Unity project with ONNX Runtime and DirectML.</li>
<li><a href="https://github.com/cj-mills/onnx-directml-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform object detection using ONNX Runtime and DirectML. This post covers building a project in Unity that leverages the DLL.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes you already have <a href="https://unity3d.com/get-unity/download">Unity Hub</a> on your system. Check out <a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">this section</a> from a previous tutorial if this is not the case (<a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">link</a>).</p>
</blockquote>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Open the Unity Hub and click New Project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the target editor version from the Editor Version dropdown menu. We’ll use Unity 2022 for this post, but the current LTS release should also work fine.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>2D Core</code> template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder before clicking <code>Create Project</code> in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Once the project loads, we’ll store the DLL files from part 2 in a new folder called <code>Plugins</code>. Right-click a space in the Assets section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The DLL targets 64-bit x86 architectures, so we need to place the DLL files in a subfolder named <code>x86_64</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1DnSJDOUbAMH4nONJ0Nh__xEmlqqsSAKy?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> You can place the <code>Plugins</code> folder inside another folder if needed.</p>
</blockquote>
<p>Copy all the DLL files into the <code>Assets/Plugins/x86_64</code> folder. We then need to close and reopen the Unity Editor to load the plugin files.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-onnx-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>After restarting the Unity Editor, create a new folder called <code>Colormaps</code> to store the JSON file from the <a href="../../icevision-openvino-unity-tutorial/part-1/#generate-colormap">training tutorial</a>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1rs2eD9_3Tyg4ADLbF6CNqwRdnhpsiHgk?usp=sharing">Colormaps Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-colormaps-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We’ll place any test images into a new folder called <code>Images</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1jHp3nTw8bRhk9es-osSfCx-B9ga4pt1G?usp=sharing">Images Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, we’ll create a folder to store the ONNX models. We need to place the <code>.onnx</code> files in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in project builds. Create a new folder named <code>StreamingAssets</code>. We’ll place each model file in a separate folder and put those in a new subfolder called <code>ONNXModels</code> to keep things organized.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1r543Rs85Qs78_iaP5_npY0Oi2cC5BLdc?usp=sharing">ONNXModels Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-onnx-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can start coding.</p>
</section>
<section id="create-processing-shader" class="level2">
<h2 class="anchored" data-anchor-id="create-processing-shader">Create Processing Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in a <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute Shader</a>. We’ll add the Compute Shader in a new folder called <code>Shaders</code>. Right-click a space in the <code>Shaders</code> folder and select <code>Create → Shader → Compute Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-compute-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the Compute Shader <code>ProcessingShader</code> and open it in the code editor.</p>
<p><strong>Default Compute Shader Code</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb1-2">#pragma kernel CSMain</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// Create a RenderTexture with enableRandomWrite flag and set it</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// with cs.SetTexture</span></span>
<span id="cb1-6">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb1-9"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">CSMain</span> <span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;">// </span><span class="al" style="color: #AD0000;">TODO</span><span class="co" style="color: #5E5E5E;">: insert actual code here!</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need to add a new <code>Texture2D</code> variable to store the pixel data for the input image. We’ll remove the default method and create a new one called <code>FlipXAxis</code>. Replace the default method name in the <code>#pragma kernel</code> line at the top.</p>
<p>We need the input image height for the flip operation, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb2-2">#pragma kernel FlipXAxis</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb2-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb2-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb2-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb2-14">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-15">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb2-16">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb2-18">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb2-21">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-22">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-object-detector-script" class="level2">
<h2 class="anchored" data-anchor-id="create-object-detector-script">Create Object Detector Script</h2>
<p>We’ll store the C# script that interacts with the plugin in a new <code>Scripts</code> folder. Right-click a space inside it and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the script <code>ObjectDetector</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-object-detector-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ObjectDetector <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb3-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb3-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-10">        </span>
<span id="cb3-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb3-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb3-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-16">        </span>
<span id="cb3-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-6.0">System.Runtime.InteropServices</a>: Provides a wide variety of members that support COM interop and platform invoke services.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.io?view=net-6.0">System.IO</a>: Allows reading and writing to files and data streams.</li>
</ul>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Add code to copy <code>DirectML.dll</code> file to editor folder</strong></p>
<p>We must copy the <code>DirectML.dll</code> file from the Plugins folder to the parent folder for the Unity Editor application to use DirectML in the Editor. We’ll also need to copy that file to the build folder when building the Unity project. We can handle both steps automatically in code.</p>
<p>We can obtain the path to the current Unity Editor from the <a href="https://docs.unity3d.com/ScriptReference/EditorApplication-applicationPath.html"><code>EditorApplication.applicationpath</code></a> variable.</p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html"><code>InitializeOnLoad</code></a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html"><code>UnityEditor</code></a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives. We’ll place this code right below the namespaces.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;">// Get all files named "DirectML.dll" in the Assets directory</span></span>
<span id="cb5-10">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> files <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"./Assets/"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"DirectML.dll"</span><span class="op" style="color: #5E5E5E;">,</span> SearchOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AllDirectories</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-11">        <span class="co" style="color: #5E5E5E;">// Iterate through each found file</span></span>
<span id="cb5-12">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> files<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-14">            <span class="co" style="color: #5E5E5E;">// Check if the file is in the "x86_64" folder</span></span>
<span id="cb5-15">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"x86_64"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb5-16">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;">// Get the file path for the Editor application</span></span>
<span id="cb5-18">                <span class="dt" style="color: #AD0000;">string</span> editorPath <span class="op" style="color: #5E5E5E;">=</span> EditorApplication<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">applicationPath</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-19">                <span class="co" style="color: #5E5E5E;">// Extract the parent folder for the Editor application</span></span>
<span id="cb5-20">                <span class="dt" style="color: #AD0000;">string</span> editorDir <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetParent</span><span class="op" style="color: #5E5E5E;">(</span>editorPath<span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">ToString</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb5-21">                <span class="co" style="color: #5E5E5E;">// Define target file path</span></span>
<span id="cb5-22">                <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{editorDir}/DirectML.dll"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-23">                <span class="co" style="color: #5E5E5E;">// Only copy the file to the Editor application folder if it is not already present</span></span>
<span id="cb5-24">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-25">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-26">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-27">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-28"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-29"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. We are in the Editor, so it returns true, and the code executes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity_scripting_symbol_in_editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>If we check if we are not in the Unity Editor, it returns false, and the code block does not execute.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity_scripting_symbol_not_in_editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can verify the code works by saving the script and going to the parent folder for Editor application. The <code>DirectML.dll</code> file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> I install Unity editors to a location that does not require Administrator access. You might need to manually copy the file if this is not the case for you.</p>
</blockquote>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input. We may or may not want to mirror the screen based on whether a webcam is facing the user.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Mirror the in-game screen."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>Next, we’ll define the variables for processing model input. We can set the default target input resolution to <code>224</code> and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<p>We’ll also add a public <code>ComputeShader</code> variable to access the <code>ProcessingShader</code> we made earlier.</p>
<p>We need to download the pixel data for the input image from the GPU to the CPU before passing it to the plugin. This step can cause a significant performance bottleneck, so we’ll add the option to read the model output asynchronously at the cost of a few frames of latency. This latency might cause the bounding box to trail slightly behind a fast-moving object on the screen. The effect should be minimal, provided the frame rate is high enough.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the colormaps for object classes"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Minimum confidence score for keeping detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span>1f<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> minConfidence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices, models, and execution providers.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayBoundingBoxes <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display number of detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayProposalCount <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-12"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-17"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available ONNX models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available ONNX execution providers"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-23"><span class="kw" style="color: #003B4F;">public</span> Dropdown executionProviderDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the ONNX plugin</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"ONNX"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the ONNX models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> onnxModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ONNXModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<p>When using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb14-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variable for tracking the current number of detected objects</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// Stores the number of detected objects</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for storing colormaps</strong></p>
<p>We need to create a couple of classes to parse the JSON content.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// A class for parsing in colormaps from a JSON file</span></span>
<span id="cb16-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;">class</span> ColorMap <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> label<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> color<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;">// A class for reading in a list of colormaps from a JSON file</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb16-6"><span class="kw" style="color: #003B4F;">class</span> ColorMapList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ColorMap<span class="op" style="color: #5E5E5E;">&gt;</span> items<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;">// Stores a list of colormaps from a JSON file</span></span>
<span id="cb16-8"><span class="kw" style="color: #003B4F;">private</span> ColorMapList colormapList<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;">// A list of colors that map to class labels</span></span>
<span id="cb16-10"><span class="kw" style="color: #003B4F;">private</span> Color<span class="op" style="color: #5E5E5E;">[]</span> colors<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;">// A list of single pixel textures that map to class labels</span></span>
<span id="cb16-12"><span class="kw" style="color: #003B4F;">private</span> Texture2D<span class="op" style="color: #5E5E5E;">[]</span> colorTextures<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>We’ll define some variables to track the frame rate.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the plugin</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">// File paths for the available ONNX models</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">// Names of the available ONNX models</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;">// Names of the available ONNX execution providers</span></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> onnxExecutionProviders <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span></code></pre></div>
<p><strong>Define a struct for reading object information from the plugin</strong></p>
<p>We need to create an <code>Object</code> struct for Unity to match the one we defined for the ONNX Runtime code, along with an array of <code>Object</code> structs that we’ll update with the <code>PopulateObjectsArray()</code> function.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">// Indicate that the members of the struct are laid out sequentially</span></span>
<span id="cb19-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">StructLayout</span><span class="op" style="color: #5E5E5E;">(</span>LayoutKind<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Sequential</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;">/// Stores the information for a single object</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span><span class="co" style="color: #5E5E5E;"> </span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb19-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-8">    <span class="co" style="color: #5E5E5E;">// The X coordinate for the top left bounding box corner</span></span>
<span id="cb19-9">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;">// The Y coordinate for the top left bounding box cornder</span></span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;">// The width of the bounding box</span></span>
<span id="cb19-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-14">    <span class="co" style="color: #5E5E5E;">// The height of the bounding box</span></span>
<span id="cb19-15">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-16">    <span class="co" style="color: #5E5E5E;">// The object class index for the detected object</span></span>
<span id="cb19-17">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-18">    <span class="co" style="color: #5E5E5E;">// The model confidence score for the object</span></span>
<span id="cb19-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-20"></span>
<span id="cb19-21">    <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">Object</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb19-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-23">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-24">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-25">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-26">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-27">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">=</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-28">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">=</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb19-30"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb19-31"></span>
<span id="cb19-32"><span class="co" style="color: #5E5E5E;">// Stores information for the current list of detected objects</span></span>
<span id="cb19-33"><span class="kw" style="color: #003B4F;">private</span> Object<span class="op" style="color: #5E5E5E;">[]</span> objectInfoArray<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Import functions from the plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb20-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ONNX_YOLOX_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">InitOrtAPI</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">GetProviderCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-11"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> IntPtr <span class="fu" style="color: #4758AB;">GetProviderName</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-14"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-17"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">RefreshMemory</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-18"></span>
<span id="cb20-19"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-20"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> execution_provider<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-23"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-24"></span>
<span id="cb20-25"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-26"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr objects<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-27"></span>
<span id="cb20-28"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-29"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb21-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb21-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-9"></span>
<span id="cb21-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb21-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb21-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb21-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb21-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-19"></span>
<span id="cb21-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb22-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb22-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb22-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb22-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-10"></span>
<span id="cb22-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb22-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb22-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-15"></span>
<span id="cb22-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb22-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb22-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-20"></span>
<span id="cb22-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb22-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the available ONNX models</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available ONNX models</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetONNXModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb23-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for each model folder</span></span>
<span id="cb23-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> dir <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDirectories</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{onnxModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb23-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-9">        <span class="co" style="color: #5E5E5E;">// Extract the model folder name</span></span>
<span id="cb23-10">        <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> dir<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb23-11">        <span class="co" style="color: #5E5E5E;">// Add name to list of model names</span></span>
<span id="cb23-12">        modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-13"></span>
<span id="cb23-14">        <span class="co" style="color: #5E5E5E;">// Get the paths for the ONNX file for each model</span></span>
<span id="cb23-15">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>dir<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb23-16">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-17">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".onnx"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb23-18">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-19">                modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-20">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the names of available execution providers</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">/// Get the names of the available ONNX execution providers</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb24-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetONNXExecutionProviders</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb24-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-6">    <span class="co" style="color: #5E5E5E;">// Get the number of available ONNX execution providers</span></span>
<span id="cb24-7">    <span class="dt" style="color: #AD0000;">int</span> providerCount <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GetProviderCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb24-8">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Provider Count: {providerCount}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-9"></span>
<span id="cb24-10">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> providerCount<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb24-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-12">        <span class="dt" style="color: #AD0000;">string</span> providerName <span class="op" style="color: #5E5E5E;">=</span> Marshal<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PtrToStringAnsi</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetProviderName</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-13">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>providerName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-14">        providerName <span class="op" style="color: #5E5E5E;">=</span> providerName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"ExecutionProvider"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-15">        onnxExecutionProviders<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>providerName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-17">    onnxExecutionProviders<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Reverse</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb24-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb25-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb25-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb25-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-9"></span>
<span id="cb25-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb25-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb25-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb25-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb25-16"></span>
<span id="cb25-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb25-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-19">    <span class="co" style="color: #5E5E5E;">// Add ONNX model names to menu</span></span>
<span id="cb25-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb25-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-23"></span>
<span id="cb25-24">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb25-25">    executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-26">    <span class="co" style="color: #5E5E5E;">// Add ONNX provider names to menu</span></span>
<span id="cb25-27">    executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>onnxExecutionProviders<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-28">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb25-29">    executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb26-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb26-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb26-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb26-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the selected ONNX model</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;">/// Update the selected ONNX model</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateONNXModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb27-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-6">    <span class="co" style="color: #5E5E5E;">// Reset objectInfoArray</span></span>
<span id="cb27-7">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb27-8"></span>
<span id="cb27-9">    <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-10">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-11">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span></span>
<span id="cb27-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Source input dims: {inputDims[0]} x {inputDims[1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-15"></span>
<span id="cb27-16">    <span class="co" style="color: #5E5E5E;">// Load the specified ONNX model</span></span>
<span id="cb27-17">    <span class="dt" style="color: #AD0000;">int</span> return_msg <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb27-18">        modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> </span>
<span id="cb27-19">        onnxExecutionProviders<span class="op" style="color: #5E5E5E;">[</span>executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> </span>
<span id="cb27-20">        inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-21"></span>
<span id="cb27-22">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-23"></span>
<span id="cb27-24">    <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> return_messages <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-25">        <span class="st" style="color: #20794D;">"Using DirectML"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-26">        <span class="st" style="color: #20794D;">"Using CPU"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-27">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb27-28"></span>
<span id="cb27-29">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Updated input dims: {inputDims[0]} x {inputDims[1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-30">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Return message: {return_messages[return_msg]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-31"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-awake-method" class="level3">
<h3 class="anchored" data-anchor-id="define-awake-method">Define Awake Method</h3>
<p>We’ll implement the code to copy the <code>DirectML.dll</code> file from the <code>Plugins/x86_64</code> folder to the root of the build folder in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method. The code should be inactive since we are in the Editor.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">// Awake runs when the script instance is being loaded</span></span>
<span id="cb28-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb28-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-4">    <span class="kw" style="color: #003B4F;">#if</span> <span class="op" style="color: #5E5E5E;">!</span>UNITY_EDITOR</span>
<span id="cb28-5">        <span class="co" style="color: #5E5E5E;">// Define the path for the DirectML.dll file in the StreamingAssets folder</span></span>
<span id="cb28-6">        <span class="dt" style="color: #AD0000;">string</span> sourcePath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.dataPath}/Plugins/x86_64/DirectML.dll"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-7"></span>
<span id="cb28-8">    <span class="dt" style="color: #AD0000;">string</span> dataPath <span class="op" style="color: #5E5E5E;">=</span> Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">dataPath</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-9">    <span class="dt" style="color: #AD0000;">string</span> buildDir <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetParent</span><span class="op" style="color: #5E5E5E;">(</span>dataPath<span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">ToString</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb28-10"></span>
<span id="cb28-11">    <span class="co" style="color: #5E5E5E;">// Define the destination path for the DirectML.dll file</span></span>
<span id="cb28-12">    <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{buildDir}/DirectML.dll"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-13">    <span class="co" style="color: #5E5E5E;">// Only copy the file if it is not already present at the destination</span></span>
<span id="cb28-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>sourcePath<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-15">    <span class="kw" style="color: #003B4F;">#endif</span></span>
<span id="cb28-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start Method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">// Start runs before the first frame update</span></span>
<span id="cb29-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb29-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb29-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb29-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-8"></span>
<span id="cb29-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb29-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb29-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-16"></span>
<span id="cb29-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb29-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb29-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-21"></span>
<span id="cb29-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of color maps from JSON file</span></span>
<span id="cb29-23">    colormapList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ColorMapList<span class="op" style="color: #5E5E5E;">&gt;(</span>colormapFile<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-24">    <span class="co" style="color: #5E5E5E;">// Initialize the list of colors</span></span>
<span id="cb29-25">    colors <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Color<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb29-26">    <span class="co" style="color: #5E5E5E;">// Initialize the list of color textures</span></span>
<span id="cb29-27">    colorTextures <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Texture2D<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb29-28"></span>
<span id="cb29-29">    <span class="co" style="color: #5E5E5E;">// Populate the color and color texture arrays</span></span>
<span id="cb29-30">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb29-31">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-32">        <span class="co" style="color: #5E5E5E;">// Create a new color object</span></span>
<span id="cb29-33">        colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Color</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb29-34">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb29-35">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb29-36">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb29-37">        <span class="co" style="color: #5E5E5E;">// Create a single-pixel texture</span></span>
<span id="cb29-38">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-39">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">SetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb29-40">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-41"></span>
<span id="cb29-42">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb29-43"></span>
<span id="cb29-44">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available ONNX models</span></span>
<span id="cb29-45">    <span class="fu" style="color: #4758AB;">GetONNXModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-46">    <span class="co" style="color: #5E5E5E;">// Initialize the ONNX Runtime API</span></span>
<span id="cb29-47">    <span class="fu" style="color: #4758AB;">InitOrtAPI</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-48">    <span class="co" style="color: #5E5E5E;">// Get the names of available ONNX execution providers</span></span>
<span id="cb29-49">    <span class="fu" style="color: #4758AB;">GetONNXExecutionProviders</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-50"></span>
<span id="cb29-51">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb29-52">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-53"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define methods to process images using the Compute Shader, calculate the input resolution, handle asynchronous GPU readback, and scale the bounding box information.</p>
<p><strong>Define method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb30-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb30-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb30-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb30-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb30-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb30-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-20"></span>
<span id="cb30-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb30-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb30-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-25"></span>
<span id="cb30-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb30-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-28"></span>
<span id="cb30-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb30-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-31"></span>
<span id="cb30-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb30-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb31-8"><span class="kw" style="color: #003B4F;">private</span> Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb31-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-10">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-11"></span>
<span id="cb31-12">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb31-13">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb31-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-15">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-16">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb31-18">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb31-19">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-20">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-21">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb31-23"></span>
<span id="cb31-24">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-25"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb32-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-12"></span>
<span id="cb32-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb32-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb32-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb32-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb32-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb32-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb33-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-8">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb33-9">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb33-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-11">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the number of detected objects</span></span>
<span id="cb33-12">        numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-14"></span>
<span id="cb33-15">    <span class="co" style="color: #5E5E5E;">// Initialize the array</span></span>
<span id="cb33-16">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span>numObjects<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb33-17"></span>
<span id="cb33-18">    <span class="co" style="color: #5E5E5E;">// Pin memory</span></span>
<span id="cb33-19">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> o <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-21">        <span class="co" style="color: #5E5E5E;">// Get the detected objects</span></span>
<span id="cb33-22">        <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>o<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-24"></span>
<span id="cb33-25">    <span class="kw" style="color: #003B4F;">return</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-26"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to scale bounding boxes to the display resolution</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;">/// Scale the latest bounding boxes to the display resolution</span></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb34-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb34-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;">// Process new detected objects</span></span>
<span id="cb34-7">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> objectInfoArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb34-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-9">        <span class="co" style="color: #5E5E5E;">// The smallest dimension of the screen</span></span>
<span id="cb34-10">        <span class="dt" style="color: #AD0000;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-11">        <span class="co" style="color: #5E5E5E;">// The smallest input dimension</span></span>
<span id="cb34-12">        <span class="dt" style="color: #AD0000;">int</span> minInputDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-13">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb34-14">        <span class="dt" style="color: #AD0000;">float</span> minImgScale <span class="op" style="color: #5E5E5E;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;">/</span> minInputDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-15">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb34-16">        <span class="dt" style="color: #AD0000;">float</span> displayScale <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-17"></span>
<span id="cb34-18">        <span class="co" style="color: #5E5E5E;">// Scale bounding box to in-game screen resolution and flip the bbox coordinates vertically</span></span>
<span id="cb34-19">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-20">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-21">        <span class="dt" style="color: #AD0000;">float</span> width <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-22">        <span class="dt" style="color: #AD0000;">float</span> height <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-23"></span>
<span id="cb34-24">        <span class="co" style="color: #5E5E5E;">// Mirror bounding box across screen</span></span>
<span id="cb34-25">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mirrorScreen <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span> x0 <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">-</span> x0 <span class="op" style="color: #5E5E5E;">-</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-26"></span>
<span id="cb34-27">        <span class="co" style="color: #5E5E5E;">// Scale bounding boxes to display resolution</span></span>
<span id="cb34-28">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-29">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-30">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-31">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-32"></span>
<span id="cb34-33">        <span class="co" style="color: #5E5E5E;">// Offset the bounding box coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb34-34">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">-</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-35">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">// Update runs once per frame</span></span>
<span id="cb35-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb35-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb35-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-9"></span>
<span id="cb35-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb35-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-12"></span>
<span id="cb35-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb35-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb35-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb35-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb35-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb35-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb35-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-32"></span>
<span id="cb35-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb35-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-36"></span>
<span id="cb35-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb35-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-39"></span>
<span id="cb35-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-43">        <span class="co" style="color: #5E5E5E;">// Update the selected ONNX model</span></span>
<span id="cb35-44">        <span class="fu" style="color: #4758AB;">UpdateONNXModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-46"></span>
<span id="cb35-47">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb35-48">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-49"></span>
<span id="cb35-50">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb35-51">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-52"></span>
<span id="cb35-53">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb35-54">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-55">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-56">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-58">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb35-59">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-61">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-62">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-63">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-64"></span>
<span id="cb35-65">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb35-66">    numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-67">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Detected {numObjects} objects"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-68">    <span class="co" style="color: #5E5E5E;">// Scale bounding boxes</span></span>
<span id="cb35-69">    <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-70"></span>
<span id="cb35-71">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb35-72">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-73"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the bounding boxes and current framerate.</p>
<p><strong>Define method that to handle switching ONNX models and execution providers</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;">/// This method runs when the value for an ONNX dropdown changes</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb36-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ONNXDropdownUpdate</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb36-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-6">    <span class="co" style="color: #5E5E5E;">// Only call plugin methods after initializing the input texture</span></span>
<span id="cb36-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-9">        <span class="fu" style="color: #4758AB;">RefreshMemory</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-10">        <span class="fu" style="color: #4758AB;">UpdateONNXModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-12"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb37-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb38-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb38-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-10"></span>
<span id="cb38-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb38-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb38-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb38-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the minimum confidence value</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;">/// Update the minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"slider"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb39-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>Slider slider<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb39-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb39-7">    minConfidence <span class="op" style="color: #5E5E5E;">=</span> slider<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-8">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb39-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted bounding boxes and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">// OnGUI handles and renders GUI events.</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb40-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-4">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for label text</span></span>
<span id="cb40-5">    Rect labelRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-6">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for bounding boxes</span></span>
<span id="cb40-7">    Rect boxRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-8"></span>
<span id="cb40-9">    GUIStyle labelStyle <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-11">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">11e-3</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-13">    labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">alignment</span> <span class="op" style="color: #5E5E5E;">=</span> TextAnchor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">MiddleLeft</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-14"></span>
<span id="cb40-15">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>Object objectInfo <span class="kw" style="color: #003B4F;">in</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-16">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-17">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>displayBoundingBoxes<span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-18"></span>
<span id="cb40-19">        <span class="co" style="color: #5E5E5E;">// Skip object if label index is out of bounds</span></span>
<span id="cb40-20">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">&gt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-21"></span>
<span id="cb40-22">        <span class="co" style="color: #5E5E5E;">// Get color for current class index</span></span>
<span id="cb40-23">        Color color <span class="op" style="color: #5E5E5E;">=</span> colors<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-24">        <span class="co" style="color: #5E5E5E;">// Get label for current class index</span></span>
<span id="cb40-25">        <span class="dt" style="color: #AD0000;">string</span> name <span class="op" style="color: #5E5E5E;">=</span> colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-26"></span>
<span id="cb40-27">        <span class="co" style="color: #5E5E5E;">// Set bounding box coordinates</span></span>
<span id="cb40-28">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-29">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-30">        <span class="co" style="color: #5E5E5E;">// Set bounding box dimensions</span></span>
<span id="cb40-31">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-32">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-33"></span>
<span id="cb40-34">        <span class="co" style="color: #5E5E5E;">// Scale bounding box line width based on display resolution</span></span>
<span id="cb40-35">        <span class="dt" style="color: #AD0000;">int</span> lineWidth <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.75e-3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-36">        <span class="co" style="color: #5E5E5E;">// Render bounding box</span></span>
<span id="cb40-37">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-38">            position<span class="op" style="color: #5E5E5E;">:</span> boxRect<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-39">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-40">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-41">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-42">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-43">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-44">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> lineWidth<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-45">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-46"></span>
<span id="cb40-47">        <span class="co" style="color: #5E5E5E;">// Include class label and confidence score in label text</span></span>
<span id="cb40-48">        <span class="dt" style="color: #AD0000;">string</span> labelText <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">" {name}: {(objectInfo.prob * 100).ToString("</span><span class="fl" style="color: #AD0000;">0.</span>##<span class="st" style="color: #20794D;">")}%"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-49"></span>
<span id="cb40-50">        <span class="co" style="color: #5E5E5E;">// Initialize label GUI content</span></span>
<span id="cb40-51">        GUIContent labelContent <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>labelText<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-52"></span>
<span id="cb40-53">        <span class="co" style="color: #5E5E5E;">// Calculate the text size.</span></span>
<span id="cb40-54">        Vector2 textSize <span class="op" style="color: #5E5E5E;">=</span> labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CalcSize</span><span class="op" style="color: #5E5E5E;">(</span>labelContent<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-55"></span>
<span id="cb40-56">        <span class="co" style="color: #5E5E5E;">// Set label text coordinates</span></span>
<span id="cb40-57">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-58">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">-</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> lineWidth<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-59"></span>
<span id="cb40-60">        <span class="co" style="color: #5E5E5E;">// Set label text dimensions</span></span>
<span id="cb40-61">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-62">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-63">        <span class="co" style="color: #5E5E5E;">// Set label text and backgound color</span></span>
<span id="cb40-64">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grayscale</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">?</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">black</span> <span class="op" style="color: #5E5E5E;">:</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">white</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-65">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span> <span class="op" style="color: #5E5E5E;">=</span> colorTextures<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-66">        <span class="co" style="color: #5E5E5E;">// Render label</span></span>
<span id="cb40-67">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>labelRect<span class="op" style="color: #5E5E5E;">,</span> labelContent<span class="op" style="color: #5E5E5E;">,</span> labelStyle<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-68"></span>
<span id="cb40-69">        Rect objectDot <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-70">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-71">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-72">        <span class="dt" style="color: #AD0000;">float</span> radius <span class="op" style="color: #5E5E5E;">=</span> objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-73">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-74">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-75"></span>
<span id="cb40-76"></span>
<span id="cb40-77">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-78">            position<span class="op" style="color: #5E5E5E;">:</span> objectDot<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-79">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-80">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-81">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-82">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-83">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-84">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-85">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-86"></span>
<span id="cb40-87">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-88"></span>
<span id="cb40-89">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb40-90">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-91">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-92">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb40-93">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-94">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-95"></span>
<span id="cb40-96">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb40-97">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-98">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-99"></span>
<span id="cb40-100">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Objects Detected: {numObjects}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-101">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayProposalCount<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-102"></span>
<span id="cb40-103">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb40-104">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-105">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-106">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-107">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-108">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-109"></span>
<span id="cb40-110">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb40-111">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayProposalCount <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-112">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-113"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to exit the application using the GUI</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb41-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;">/// This method runs when the user clicks the GUI Quit button</span></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb41-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Quit</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb41-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-6">    Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Quit</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb41-7"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-onapplicationquit-method" class="level3">
<h3 class="anchored" data-anchor-id="define-onapplicationquit-method">Define OnApplicationQuit Method</h3>
<p>We’ll perform any clean-up steps in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnApplicationQuit.html">OnApplicationQuit</a>method.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb42-1"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnApplicationQuit</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb42-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb42-3">    <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb42-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>Now we can start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the object detector script, dropdown menus for selecting webcams, models, and execution providers, a toggle to activate a webcam feed, and a slider to update the confidence threshold.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>3D Object → Quad</code>. We can name the new object Screen.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-quad.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, drag and drop a test image from the <code>Assets → Images</code> folder onto the Screen object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the <code>Shader</code> dropdown menu in the Inspector tab. Type <code>Unlit/Texture</code> into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>Create Empty</code>. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ObjectDetector</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-attach-object-detector-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can assign the screen object, compute shader, and colormap file in the Inspector tab by dragging them into their respective fields.</p>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI controls. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/file/d/14134IOAlvrQpIx0t0uayr4igJa9Pk4OK/view?usp=sharing">Canvas Prefab</a></li>
</ul>
<p>Drag and drop the Canvas prefab into a new folder called Prefabs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-import-canvas-prefab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>From there, drag the prefab into the Hierarchy tab. We can see the GUI by switching to the <code>Game</code> view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ObjectDetector</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ObjectDetector → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This time select <code>ObjectDetector → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>ONNXModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-onnx-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>ONNXExecutionProviderDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-onnx-provider-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>ConfidenceThresholdSlider</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-confidence-threshold-slider-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>QuitButton</code> On Click Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-quit-button-on-click.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the GUI objects to their respective fields for the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-in-editor" class="level2">
<h2 class="anchored" data-anchor-id="test-in-editor">Test in Editor</h2>
<p>Click the play button in the top-middle of the Editor window to test the project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-click-play-button.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>There should be a bounding box for the call sign and one for the idle hand.</p>
<p><strong>CPU Execution Provider</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-test-in-editor-cpu.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>DirectML Execution Provider</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-test-in-editor-dml.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this tutorial series, we created a DLL to perform object detection using ONNX Runtime and DirectML, and built a simple Unity project that leveraged this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-1/">Object Detection for Unity With ONNX Runtime and DirectML Pt. 1</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/onnx-directml-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>onnx</category>
  <category>directml</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/index.html</guid>
  <pubDate>Fri, 19 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/onnx-directml-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Object Detection for Unity With ONNX Runtime and DirectML Pt. 1</title>
  <link>christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Download OpenCV</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Install ONNX Runtime</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../../icevision-openvino-unity-tutorial/part-1/">Training Tutorial</a>: Train a hand gesture classifier using fastai and export it to TensorFlow.js.</li>
<li><a href="../part-1/">Part 1</a>: Create a dynamic link library (DLL) file in Visual Studio to perform object detection with a YOLOX model using ONNX Runtime and DirectML.</li>
<li><a href="../part-2/">Part 2</a>: Perform object detection in a Unity project with ONNX Runtime and DirectML.</li>
<li><a href="https://github.com/cj-mills/onnx-directml-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A <a href="../../icevision-openvino-unity-tutorial/part-1/">previous tutorial series</a> covered training an object detection model using <a href="https://airctic.com/0.12.0/">IceVision</a> and creating an <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a> plugin for the <a href="https://unity.com/">Unity</a> game engine to perform inference with the trained model. OpenVINO can provide fast inference speeds but only targets Intel hardware. Not everyone has an Intel CPU, and discrete Intel GPUs are not yet widely available.</p>
<p>This follow-up tutorial covers building a plugin using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a> and <a href="https://docs.microsoft.com/en-us/windows/ai/directml/dml">DirectML</a> to enable inference on non-Intel CPUs and GPUs. ONNX Runtime is a cross-platform model accelerator that works with several hardware acceleration libraries. DirectML is a hardware-accelerated DirectX 12 library for machine learning on Windows.</p>
<p>We’ll use the ONNX model <a href="../../icevision-openvino-unity-tutorial/part-1/#export-the-model">exported</a> in the original tutorial, so no modifications to the training code are required.</p>
<ul>
<li><strong>Model Training Tutorial:</strong> <a href="../../icevision-openvino-unity-tutorial/part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></li>
</ul>
<section id="unity-demo" class="level4">
<h4 class="anchored" data-anchor-id="unity-demo">Unity Demo</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/unity-onnx-directml-demo.mp4" class="img-fluid" controls=""><a href="./videos/unity-onnx-directml-demo.mp4">Video</a></video></p>
</figure>
</div>
</section>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Part 1 covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with the object detection model.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes <a href="https://visualstudio.microsoft.com/downloads/">Visual Studio</a> is present on your system.</p>
</blockquote>
</section>
<section id="download-opencv" class="level2">
<h2 class="anchored" data-anchor-id="download-opencv">Download OpenCV</h2>
<p>We’ll use the <a href="https://github.com/opencv/opencv">OpenCV</a> library to process image data from Unity. The tutorial uses OpenCV <code>4.6.0</code>, which is available at the link below.</p>
<ul>
<li><a href="https://github.com/opencv/opencv/releases/tag/4.6.0">OpenCV 4.6.0 GitHub</a></li>
</ul>
<p>Select the <code>opencv-4.6.0-vc14_vc15.exe</code> option from the Assets list.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/opencv_github_download_executable.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Run the executable once it finishes downloading. You might get a warning from Windows that the executable is an unrecognized app. We can bypass this by clicking the <code>More info</code> text, then the Run anyway button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/windows-defender-smartscreen-warning.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, click the <code>Run anyway</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/windows-defender-smartscreen-warning-run-anyway.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The executable will prompt us to select a location to extract the <code>opencv</code> folder. We’ll need to give Visual Studio this location to access the library’s functionality. I tend to place my C++ dependencies in a dedicated folder for consistency.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/opencv-select-extraction-location.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>If we open the <code>opencv</code> folder, we can see a build folder and a source folder. Everything we need is in the build folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/opencv-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where OpenCV is so we can access its APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the path for the following folder, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenCV library, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\opencv\build\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the following path, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenCV library, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\opencv\build\x64\vc15\lib\*</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL file included with OpenCV.</p>
<p><strong>OpenCV DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/get-opencv-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenCV library, and click <code>OK</code>.</p>
<ul>
<li><code>xcopy &lt;parent-folder-path&gt;\opencv\build\x64\vc15\bin\opencv_world452.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="install-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="install-onnx-runtime">Install ONNX Runtime</h2>
<p>We can install ONNX Runtime with DirectML directly into our project via the <a href="https://www.nuget.org/">NuGet</a> package manager integrated with Visual Studio. Open the <code>Project</code> menu and select <code>Manage NuGet Packages...</code> from the dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-nuget-package-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>Browse</code> option and enter <code>Microsoft.ML.OnnxRuntime.DirectML</code> into the search box.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-nuget-package-manager-search-for-package.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the package selected, click the <code>Install</code> button. The project uses version <code>1.12.1</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-nuget-package-manager-install-package.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click <code>OK</code> in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-approve-nuget-package-install.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We’ll first update the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> with the required header files. We can open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Comment or remove the <code>#include</code> line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for ONNX Runtime and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;onnxruntime_cxx_api.h&gt;</span></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"dml_provider_factory.h"</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<ul>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html">OrtApi</a>: ONNX Runtime API interface</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_env.html">OrtEnv</a>: Holds the logging state for the ONNX Runtime objects</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_session_options.html">OrtSessionOptions</a>: Holds the options used when creating a new ONNX Runtime session</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_session.html">OrtSession</a>: The ONNX Runtime session</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// The current source image width</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;">int</span> img_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">// The current source image height</span></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;">int</span> img_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">// The current model input width</span></span>
<span id="cb6-6"><span class="dt" style="color: #AD0000;">int</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">// The current model input height</span></span>
<span id="cb6-8"><span class="dt" style="color: #AD0000;">int</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">// The total number pixels in the input image</span></span>
<span id="cb6-10"><span class="dt" style="color: #AD0000;">int</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;">// The number of color channels </span></span>
<span id="cb6-12"><span class="dt" style="color: #AD0000;">int</span> n_channels <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">// Stores information about a single object prediction</span></span>
<span id="cb6-15"><span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb6-16"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-17">    <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-18">    <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19">    <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-20">    <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21">    <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-22">    <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-23"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;">// Store grid offset and stride values to decode a section of the model output</span></span>
<span id="cb6-26"><span class="kw" style="color: #003B4F;">struct</span> GridAndStride</span>
<span id="cb6-27"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-28">    <span class="dt" style="color: #AD0000;">int</span> grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-29">    <span class="dt" style="color: #AD0000;">int</span> grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-30">    <span class="dt" style="color: #AD0000;">int</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-31"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-32"></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;">// The scale values used to adjust the model output to the source image resolution</span></span>
<span id="cb6-34"><span class="dt" style="color: #AD0000;">float</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-35"><span class="dt" style="color: #AD0000;">float</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-36"></span>
<span id="cb6-37"><span class="co" style="color: #5E5E5E;">// The minimum confidence score to consider an object proposal</span></span>
<span id="cb6-38"><span class="dt" style="color: #AD0000;">float</span> bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-39"><span class="co" style="color: #5E5E5E;">// The maximum intersection over union value before an object proposal will be ignored</span></span>
<span id="cb6-40"><span class="dt" style="color: #AD0000;">float</span> nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-41"></span>
<span id="cb6-42"><span class="co" style="color: #5E5E5E;">// Stores the grid and stride values to navigate the raw model output</span></span>
<span id="cb6-43"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> grid_strides<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-44"><span class="co" style="color: #5E5E5E;">// Stores the object proposals with confidence scores above bbox_conf_thresh</span></span>
<span id="cb6-45"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-46"><span class="co" style="color: #5E5E5E;">// Stores the indices for the object proposals selected using non-maximum suppression</span></span>
<span id="cb6-47"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-48"></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;">// The stride values used to generate the gride_strides vector</span></span>
<span id="cb6-50"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> strides <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">32</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-51"></span>
<span id="cb6-52"><span class="co" style="color: #5E5E5E;">// The mean of the ImageNet dataset used to train the model</span></span>
<span id="cb6-53"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">float</span> mean<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="fl" style="color: #AD0000;">0.485</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.456</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.406</span><span class="bu" style="color: null;">f</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;">// The standard deviation of the ImageNet dataset used to train the model</span></span>
<span id="cb6-55"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">float</span> std_dev<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="fl" style="color: #AD0000;">0.229</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.224</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.225</span><span class="bu" style="color: null;">f</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-56"></span>
<span id="cb6-57"><span class="co" style="color: #5E5E5E;">// ONNX Runtime API interface</span></span>
<span id="cb6-58"><span class="at" style="color: #657422;">const</span> OrtApi<span class="op" style="color: #5E5E5E;">*</span> ort <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-59"></span>
<span id="cb6-60"><span class="co" style="color: #5E5E5E;">// List of available execution providers</span></span>
<span id="cb6-61"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**</span> provider_names<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-62"><span class="dt" style="color: #AD0000;">int</span> provider_count<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-63"></span>
<span id="cb6-64"><span class="co" style="color: #5E5E5E;">// Holds the logging state for the ONNX Runtime objects</span></span>
<span id="cb6-65">OrtEnv<span class="op" style="color: #5E5E5E;">*</span> env<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-66"><span class="co" style="color: #5E5E5E;">// Holds the options used when creating a new ONNX Runtime session</span></span>
<span id="cb6-67">OrtSessionOptions<span class="op" style="color: #5E5E5E;">*</span> session_options<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-68"><span class="co" style="color: #5E5E5E;">// The ONNX Runtime session</span></span>
<span id="cb6-69">OrtSession<span class="op" style="color: #5E5E5E;">*</span> session<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-70"></span>
<span id="cb6-71"><span class="co" style="color: #5E5E5E;">// The name of the model input</span></span>
<span id="cb6-72"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> input_name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-73"><span class="co" style="color: #5E5E5E;">// The name of the model output</span></span>
<span id="cb6-74"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> output_name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-75"></span>
<span id="cb6-76"><span class="co" style="color: #5E5E5E;">// A pointer to the raw input data</span></span>
<span id="cb6-77"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> input_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-78"><span class="co" style="color: #5E5E5E;">// The memory size of the raw input data</span></span>
<span id="cb6-79"><span class="dt" style="color: #AD0000;">int</span> input_size<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define a function to convert <code>char</code> data to <code>wchar_t</code></strong></p>
<p>ONNX Runtime expects paths to ONNX model files to be in <code>wchar_t</code> format. We receive the file paths in <code>char</code> format, so we’ll make a function to convert them.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">/// Convert char data to wchar_t</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"text"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;">static</span> <span class="dt" style="color: #AD0000;">wchar_t</span><span class="op" style="color: #5E5E5E;">*</span> charToWChar<span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> text<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-8">    <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">size_t</span> size <span class="op" style="color: #5E5E5E;">=</span> strlen<span class="op" style="color: #5E5E5E;">(</span>text<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-9">    <span class="dt" style="color: #AD0000;">wchar_t</span><span class="op" style="color: #5E5E5E;">*</span> wText <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">wchar_t</span><span class="op" style="color: #5E5E5E;">[</span>size<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb7-10">    <span class="dt" style="color: #AD0000;">size_t</span> converted_chars<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-11">    mbstowcs_s<span class="op" style="color: #5E5E5E;">(&amp;</span>converted_chars<span class="op" style="color: #5E5E5E;">,</span> wText<span class="op" style="color: #5E5E5E;">,</span> size<span class="op" style="color: #5E5E5E;">,</span> text<span class="op" style="color: #5E5E5E;">,</span> _TRUNCATE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;">return</span> wText<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to initialize the interface to the ONNX Runtime API</strong></p>
<ul>
<li><p><a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaff6ff297798b9337d4c0f89a35b76aa6">OrtGetApiBase</a>: The Onnxruntime library’s entry point to access the C API.</p></li>
<li><p><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#aaacd4a9540eb5044291addd2ebd9bc5f">GetAvailableProviders</a>: Get the names of all available providers.</p></li>
</ul>
<hr>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">/// Initialize the ONNX Runtime API interface and get the available execution providers</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb8-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> InitOrtAPI<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">    ort <span class="op" style="color: #5E5E5E;">=</span> OrtGetApiBase<span class="op" style="color: #5E5E5E;">()-&gt;</span>GetApi<span class="op" style="color: #5E5E5E;">(</span>ORT_API_VERSION<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetAvailableProviders<span class="op" style="color: #5E5E5E;">(&amp;</span>provider_names<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>provider_count<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the number of execution providers</strong></p>
<p>The next function we’ll define will create a list of available execution providers and return the number of providers accessible by ONNX Runtime. We’ll use this information to select which device to use to perform inference from the Unity application.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">/// Get the number of available execution providers</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The number of available devices</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb9-5">DLLExport <span class="dt" style="color: #AD0000;">int</span> GetProviderCount<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;">// Return the number of available execution providers</span></span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;">return</span> provider_count<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the name of an execution provider</strong></p>
<p>Next, we’ll define a function to return the name at a specified index in the list of available execution providers.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Get the name of the execution provider at the specified index</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The name of the execution provider at the specified index</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb10-6">DLLExport <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> GetProviderName<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7">    <span class="cf" style="color: #003B4F;">return</span> provider_names<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate stride values to navigate the raw model output</strong></p>
<p>The method for generating the offset values used to traverse the output array is almost identical to the Python implementation from the <a href="../../icevision-openvino-unity-tutorial/part-1/#define-post-processing-steps">training tutorial</a>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">/// Generate offset values to navigate the raw model output</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"height"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input height</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"width"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input width</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-6"><span class="dt" style="color: #AD0000;">void</span> GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;">// Remove the values for the previous input resolution</span></span>
<span id="cb11-9">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;">// Iterate through each stride value</span></span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span> stride <span class="op" style="color: #5E5E5E;">:</span> strides<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb11-13">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-14">        <span class="co" style="color: #5E5E5E;">// Calculate the grid dimensions</span></span>
<span id="cb11-15">        <span class="dt" style="color: #AD0000;">int</span> grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-16">        <span class="dt" style="color: #AD0000;">int</span> grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-17"></span>
<span id="cb11-18">        <span class="co" style="color: #5E5E5E;">// Store each combination of grid coordinates</span></span>
<span id="cb11-19">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g1 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_height<span class="op" style="color: #5E5E5E;">;</span> g1<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb11-20">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-21">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g0 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_width<span class="op" style="color: #5E5E5E;">;</span> g0<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb11-22">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-23">                grid_strides<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>GridAndStride<span class="op" style="color: #5E5E5E;">{</span> g0<span class="op" style="color: #5E5E5E;">,</span> g1<span class="op" style="color: #5E5E5E;">,</span> stride <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb11-24">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-25">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-27"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to set the minimum confidence score from Unity</strong></p>
<p>We might want to try different confidence thresholds for keeping object proposals from the Unity application, so we’ll add a function to enable this.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">/// Set minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"min_confidence"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The minimum confidence score for keeping bounding box proposals</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb12-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> SetConfidenceThreshold<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> min_confidence<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-7">    bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> min_confidence<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to refresh memory when switching models or execution providers</strong></p>
<ul>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ae311be14b0e35ce3ad3bc1418a79d7bb">ReleaseSession</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a5edc51815e9aeba83516e4fe55ef836a">ReleaseEnv</a></li>
</ul>
<hr>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Refresh memory when switching models or execution providers</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4">DLLExport <span class="dt" style="color: #AD0000;">void</span> RefreshMemory<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-5">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">)</span> free<span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">)</span> ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseSession<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">)</span> ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseEnv<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to load an ONNX model</strong></p>
<ul>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a22085f699a2d1adb52f809383f475ed1">CreateEnv</a>: Create an OrtEnv.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a74a22efe6571fe538e60f677654ae01f">DisableTelemetryEvents</a>: Disable telemetry.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a033b8a4a9de072bcc9dda3a8434922c5">CreateSessionOptions</a>: Create an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaa6c56bcb36e39611481a17065d3ce620">OrtSessionOptions</a> object.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ab090eb2a54f5dfaf0377a8cc72d65c5f">DisableMemPattern</a>: Disable the memory pattern optimization.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a8113f817428f87ef4926d97809291155">SetSessionExecutionMode</a>: Controls whether you want to execute operators in your graph sequentially or in parallel.</li>
<li>OrtSessionOptionsAppendExecutionProvider_DML: Add a DirectML execution provider.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a8e8529eb336bbe2334307c9197891838">CreateSession</a>: Create an OrtSession from a model file.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a2fa11d21f36cbd068a82682ea175d774">ReleaseSessionOptions</a>: Free an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaa6c56bcb36e39611481a17065d3ce620">OrtSessionOptions</a> object.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_allocator_with_default_options.html">AllocatorWithDefaultOptions</a>: Create the default allocator.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a811b1773c7d713750716a36b432e2102">SessionGetInputName</a>: Get input name.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a130f69dae071631abd50cae5a26d5d9d">SessionGetOutputName</a>: Get output name.</li>
</ul>
<hr>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Load a model from the specified file path</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model_path"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The full model path to the ONNX model</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"execution_provider"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name for the desired execution_provider</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_dims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image dimensions</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">A status value indicating success or failure to load and reshape the model</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb14-8">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> model_path<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> execution_provider<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span></span>
<span id="cb14-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-10">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;">// Initialize the ONNX runtime environment</span></span>
<span id="cb14-13">    <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>instance_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"yolox-inference"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-14">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateEnv<span class="op" style="color: #5E5E5E;">(</span>ORT_LOGGING_LEVEL_WARNING<span class="op" style="color: #5E5E5E;">,</span> instance_name<span class="op" style="color: #5E5E5E;">.</span>c_str<span class="op" style="color: #5E5E5E;">(),</span> <span class="op" style="color: #5E5E5E;">&amp;</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-15"></span>
<span id="cb14-16">    <span class="co" style="color: #5E5E5E;">// Disable telemetry</span></span>
<span id="cb14-17">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>DisableTelemetryEvents<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;">// Add the selected execution provider</span></span>
<span id="cb14-20">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateSessionOptions<span class="op" style="color: #5E5E5E;">(&amp;</span>session_options<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-21">    <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>provider_name <span class="op" style="color: #5E5E5E;">=</span> execution_provider<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-22">    </span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;">// Add the specified execution provider</span></span>
<span id="cb14-24">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>provider_name<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"CPU"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-25">        return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-27">    <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>provider_name<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Dml"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-28">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>DisableMemPattern<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-29">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>SetSessionExecutionMode<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">,</span> ExecutionMode<span class="op" style="color: #5E5E5E;">::</span>ORT_SEQUENTIAL<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-30">        OrtSessionOptionsAppendExecutionProvider_DML<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-32">    <span class="cf" style="color: #003B4F;">else</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-33"></span>
<span id="cb14-34">    <span class="co" style="color: #5E5E5E;">// Create a new inference session</span></span>
<span id="cb14-35">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateSession<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">,</span> charToWChar<span class="op" style="color: #5E5E5E;">(</span>model_path<span class="op" style="color: #5E5E5E;">),</span> session_options<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>session<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-36">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseSessionOptions<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-37"></span>
<span id="cb14-38">    Ort<span class="op" style="color: #5E5E5E;">::</span>AllocatorWithDefaultOptions allocator<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-39"></span>
<span id="cb14-40">    <span class="co" style="color: #5E5E5E;">// Get input and output names</span></span>
<span id="cb14-41">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>SessionGetInputName<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> allocator<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>input_name<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-42">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>SessionGetOutputName<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> allocator<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>output_name<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-43"></span>
<span id="cb14-44">    <span class="co" style="color: #5E5E5E;">// The dimensions of the source input image</span></span>
<span id="cb14-45">    img_w <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb14-46">    img_h <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb14-47">    <span class="co" style="color: #5E5E5E;">// Calculate new input dimensions based on the max stride value</span></span>
<span id="cb14-48">    input_w <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb14-49">    input_h <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb14-50">    n_pixels <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">*</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-51"></span>
<span id="cb14-52">    <span class="co" style="color: #5E5E5E;">// Calculate the value used to adjust the model output to the source image resolution</span></span>
<span id="cb14-53">    scale_x <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-54">    scale_y <span class="op" style="color: #5E5E5E;">=</span> input_h <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-55"></span>
<span id="cb14-56">    <span class="co" style="color: #5E5E5E;">// Generate the grid and stride values based on input resolution</span></span>
<span id="cb14-57">    GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span>input_h<span class="op" style="color: #5E5E5E;">,</span> input_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-58"></span>
<span id="cb14-59">    <span class="co" style="color: #5E5E5E;">// Replace the initial input dims with the updated values</span></span>
<span id="cb14-60">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-61">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-62"></span>
<span id="cb14-63">    <span class="co" style="color: #5E5E5E;">// Allocate memory for the raw input data</span></span>
<span id="cb14-64">    input_size <span class="op" style="color: #5E5E5E;">=</span> n_pixels <span class="op" style="color: #5E5E5E;">*</span> n_channels <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-65">    input_data <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*)</span>malloc<span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">size_t</span><span class="op" style="color: #5E5E5E;">)</span>input_size <span class="op" style="color: #5E5E5E;">*</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*));</span></span>
<span id="cb14-66">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>input_data <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> memset<span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> input_size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-67"></span>
<span id="cb14-68">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb14-69">    <span class="cf" style="color: #003B4F;">return</span> return_val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-70"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>The method to generate object proposals is nearly identical to the Python implementation from the training tutorial.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">/// Generate object detection proposals from the raw model output</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"out_ptr"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to the output tensor data</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="dt" style="color: #AD0000;">void</span> GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_ptr<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> proposal_length<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb15-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;">// Remove the proposals for the previous model output</span></span>
<span id="cb15-8">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb15-9"></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;">// Obtain the number of classes the model was trained to detect</span></span>
<span id="cb15-11">    <span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-12"></span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> anchor_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> anchor_idx <span class="op" style="color: #5E5E5E;">&lt;</span> grid_strides<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> anchor_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb15-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-15">        <span class="co" style="color: #5E5E5E;">// Get the current grid and stride values</span></span>
<span id="cb15-16">        <span class="dt" style="color: #AD0000;">int</span> grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-17">        <span class="dt" style="color: #AD0000;">int</span> grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-18">        <span class="dt" style="color: #AD0000;">int</span> stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-19"></span>
<span id="cb15-20">        <span class="co" style="color: #5E5E5E;">// Get the starting index for the current proposal</span></span>
<span id="cb15-21">        <span class="dt" style="color: #AD0000;">int</span> start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-22"></span>
<span id="cb15-23">        <span class="co" style="color: #5E5E5E;">// Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb15-24">        <span class="dt" style="color: #AD0000;">float</span> x_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid0<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-25">        <span class="dt" style="color: #AD0000;">float</span> y_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid1<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-26"></span>
<span id="cb15-27">        <span class="co" style="color: #5E5E5E;">// Get the dimensions for the predicted bounding box</span></span>
<span id="cb15-28">        <span class="dt" style="color: #AD0000;">float</span> w <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-29">        <span class="dt" style="color: #AD0000;">float</span> h <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-30"></span>
<span id="cb15-31">        <span class="co" style="color: #5E5E5E;">// Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb15-32">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-33">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-34"></span>
<span id="cb15-35">        <span class="co" style="color: #5E5E5E;">// Get the confidence score that an object is present</span></span>
<span id="cb15-36">        <span class="dt" style="color: #AD0000;">float</span> box_objectness <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb15-37"></span>
<span id="cb15-38">        <span class="co" style="color: #5E5E5E;">// Initialize object struct with bounding box information</span></span>
<span id="cb15-39">        Object obj <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> x0<span class="op" style="color: #5E5E5E;">,</span> y0<span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb15-40"></span>
<span id="cb15-41">        <span class="co" style="color: #5E5E5E;">// Find the object class with the highest confidence score</span></span>
<span id="cb15-42">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> class_idx <span class="op" style="color: #5E5E5E;">&lt;</span> num_classes<span class="op" style="color: #5E5E5E;">;</span> class_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb15-43">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-44">            <span class="co" style="color: #5E5E5E;">// Get the confidence score for the current object class</span></span>
<span id="cb15-45">            <span class="dt" style="color: #AD0000;">float</span> box_cls_score <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb15-46">            <span class="co" style="color: #5E5E5E;">// Calculate the final confidence score for the object proposal</span></span>
<span id="cb15-47">            <span class="dt" style="color: #AD0000;">float</span> box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-48"></span>
<span id="cb15-49">            <span class="co" style="color: #5E5E5E;">// Check for the highest confidence score</span></span>
<span id="cb15-50">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb15-51">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-52">                obj<span class="op" style="color: #5E5E5E;">.</span>label <span class="op" style="color: #5E5E5E;">=</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-53">                obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">=</span> box_prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-54">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-55">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-56"></span>
<span id="cb15-57">        <span class="co" style="color: #5E5E5E;">// Only add object proposals with high enough confidence scores</span></span>
<span id="cb15-58">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> bbox_conf_thresh<span class="op" style="color: #5E5E5E;">)</span> proposals<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-59">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-60"></span>
<span id="cb15-61">    <span class="co" style="color: #5E5E5E;">// Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb15-62">    <span class="bu" style="color: null;">std::</span>sort<span class="op" style="color: #5E5E5E;">(</span>proposals<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> proposals<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">(),</span> <span class="op" style="color: #5E5E5E;">[](</span>Object<span class="op" style="color: #5E5E5E;">&amp;</span> a<span class="op" style="color: #5E5E5E;">,</span> Object<span class="op" style="color: #5E5E5E;">&amp;</span> b<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">bool</span></span>
<span id="cb15-63">              <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> a<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> b<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb15-64"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<p>The C++ API for OpenCV has built-in functionality to perform comparison operations between rectangles. Therefore, we don’t need to define helper functions to calculate the intersection and union areas of two bounding boxes. Otherwise, the method to sort bounding box proposals using Non-Maximum Suppression is almost identical to the Python implementation from part 1.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;">/// Filter through a sorted list of object proposals using Non-maximum suppression</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="dt" style="color: #AD0000;">void</span> NmsSortedBboxes<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;">// Remove the picked proposals for the previous model outptut</span></span>
<span id="cb16-7">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;">// Iterate through the object proposals</span></span>
<span id="cb16-10">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposals<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb16-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-12">        Object<span class="op" style="color: #5E5E5E;">&amp;</span> a <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb16-13"></span>
<span id="cb16-14">        <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb16-15">        cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_a <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>a<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-16"></span>
<span id="cb16-17">        <span class="dt" style="color: #AD0000;">bool</span> keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-18"></span>
<span id="cb16-19">        <span class="co" style="color: #5E5E5E;">// Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb16-20">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">:</span> proposal_indices<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-21">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-22">            Object<span class="op" style="color: #5E5E5E;">&amp;</span> b <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb16-23"></span>
<span id="cb16-24">            <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb16-25">            cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_b <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>b<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-26"></span>
<span id="cb16-27">            <span class="co" style="color: #5E5E5E;">// Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb16-28">            <span class="dt" style="color: #AD0000;">float</span> inter_area <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>rect_a <span class="op" style="color: #5E5E5E;">&amp;</span> rect_b<span class="op" style="color: #5E5E5E;">).</span>area<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-29">            <span class="co" style="color: #5E5E5E;">// Calculate the union area of both bounding boxes</span></span>
<span id="cb16-30">            <span class="dt" style="color: #AD0000;">float</span> union_area <span class="op" style="color: #5E5E5E;">=</span> rect_a<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">+</span> rect_b<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> inter_area<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-31">            <span class="co" style="color: #5E5E5E;">// Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb16-32">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-33">                keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-34">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-35"></span>
<span id="cb16-36">        <span class="co" style="color: #5E5E5E;">// Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb16-37">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>keep<span class="op" style="color: #5E5E5E;">)</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-38">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-39"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1-byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>After processing the model output, we’ll return the final number of detected objects to Unity so we can initialize an array of objects.</p>
<ul>
<li><a href="https://docs.opencv.org/3.4/d3/d63/classcv_1_1Mat.html">cv::Mat</a>: n-dimensional dense array class<br>
</li>
<li><a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv::cvtColor()</a>: Converts an image from one color space to another</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_memory_info.html">OrtMemoryInfo</a>:</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a6a64ee931925577fd40f5f3f7472cfed">CreateCpuMemoryInfo</a>: Create an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga088f45e429651ac29b4a9efb4d88571a">OrtMemoryInfo</a> for CPU memory.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_value.html">OrtValue</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a2aad3ccd68c66d0b38bdb966467d9324">CreateTensorWithDataAsOrtValue</a>: Create a tensor backed by a user supplied buffer.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a62f73350760cf7cc483216ac44222d0b">ReleaseMemoryInfo</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ad8b12cad4160d43da92f49191cd91895">Run</a>: Run the model in an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga5220ca3b3f0a31a01a3f15057c35cac6">OrtSession</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_tensor_type_and_shape_info.html">OrtTensorTypeAndShapeInfo</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a97f8d1f1dbcd39214f50f1dc9e8aef7b">GetTensorTypeAndShape</a>: Get type and shape information from a tensor <a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaab167acf3fe9dabc0195b993fbe7ee7d">OrtValue</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a4b4e5b170de480987d23d350ccc55349">GetDimensionsCount</a>: Get dimension count in <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga6af32c548904330b6bd7e8cba6e186c1">OrtTensorTypeAndShapeInfo</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ae06620ce959abdb68f982a200fb003cd">GetDimensions</a>: Get dimensions in <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga6af32c548904330b6bd7e8cba6e186c1">OrtTensorTypeAndShapeInfo</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a24486475cc05b9228a57b814b2024d77">GetTensorMutableData</a>: Get a pointer to the raw data inside a tensor.</li>
</ul>
<hr>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Perform inference with the provided texture data</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_data"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image data from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The final number of detected objects</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb17-6">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> image_data<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb17-9">    cv<span class="op" style="color: #5E5E5E;">::</span>Mat input_image <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>img_h<span class="op" style="color: #5E5E5E;">,</span> img_w<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> image_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb17-11">    cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;">// Resize the image to the model input dimensions</span></span>
<span id="cb17-13">    cv<span class="op" style="color: #5E5E5E;">::</span>resize<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>Size<span class="op" style="color: #5E5E5E;">(</span>input_w<span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb17-14"></span>
<span id="cb17-15">    <span class="co" style="color: #5E5E5E;">// Iterate over each pixel in image</span></span>
<span id="cb17-16">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">&lt;</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb17-17">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-18">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> ch <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> ch <span class="op" style="color: #5E5E5E;">&lt;</span> n_channels<span class="op" style="color: #5E5E5E;">;</span> ch<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-19">            <span class="co" style="color: #5E5E5E;">// Scale and normalize each value</span></span>
<span id="cb17-20">            input_data<span class="op" style="color: #5E5E5E;">[</span>ch <span class="op" style="color: #5E5E5E;">*</span> n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">((</span>input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p <span class="op" style="color: #5E5E5E;">*</span> n_channels <span class="op" style="color: #5E5E5E;">+</span> ch<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> mean<span class="op" style="color: #5E5E5E;">[</span>ch<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">/</span> std_dev<span class="op" style="color: #5E5E5E;">[</span>ch<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb17-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-23"></span>
<span id="cb17-24">    <span class="co" style="color: #5E5E5E;">// Initialize list of input and output names</span></span>
<span id="cb17-25">    <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> input_names<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> input_name <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-26">    <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> output_names<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> output_name <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-27">    <span class="co" style="color: #5E5E5E;">// Initialize the list of model input dimension</span></span>
<span id="cb17-28">    <span class="dt" style="color: #AD0000;">int64_t</span> input_shape<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">,</span> input_w <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-29">    <span class="dt" style="color: #AD0000;">int</span> input_shape_len <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>input_shape<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>input_shape<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb17-30"></span>
<span id="cb17-31">    <span class="co" style="color: #5E5E5E;">// Initialize an input tensor object with the input_data</span></span>
<span id="cb17-32">    OrtMemoryInfo<span class="op" style="color: #5E5E5E;">*</span> memory_info<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-33">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateCpuMemoryInfo<span class="op" style="color: #5E5E5E;">(</span>OrtArenaAllocator<span class="op" style="color: #5E5E5E;">,</span> OrtMemTypeDefault<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>memory_info<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-34"></span>
<span id="cb17-35">    OrtValue<span class="op" style="color: #5E5E5E;">*</span> input_tensor <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-36">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateTensorWithDataAsOrtValue<span class="op" style="color: #5E5E5E;">(</span>memory_info<span class="op" style="color: #5E5E5E;">,</span> input_data<span class="op" style="color: #5E5E5E;">,</span> input_size<span class="op" style="color: #5E5E5E;">,</span> input_shape<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb17-37">                                        input_shape_len<span class="op" style="color: #5E5E5E;">,</span> ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb17-38">                                        <span class="op" style="color: #5E5E5E;">&amp;</span>input_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-39"></span>
<span id="cb17-40">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseMemoryInfo<span class="op" style="color: #5E5E5E;">(</span>memory_info<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-41"></span>
<span id="cb17-42"></span>
<span id="cb17-43">    OrtValue<span class="op" style="color: #5E5E5E;">*</span> output_tensor <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-44">    <span class="co" style="color: #5E5E5E;">// Perform inference</span></span>
<span id="cb17-45">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>Run<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">,</span> NULL<span class="op" style="color: #5E5E5E;">,</span> input_names<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> OrtValue<span class="op" style="color: #5E5E5E;">*</span> <span class="at" style="color: #657422;">const</span><span class="op" style="color: #5E5E5E;">*)&amp;</span>input_tensor<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> output_names<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb17-46">             <span class="op" style="color: #5E5E5E;">&amp;</span>output_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-47"></span>
<span id="cb17-48">    <span class="co" style="color: #5E5E5E;">// Make sure the output tensor is not NULL to avoid potential crashes</span></span>
<span id="cb17-49">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>output_tensor <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-50">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>input_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-51">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-52">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-53">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-54"></span>
<span id="cb17-55">    <span class="co" style="color: #5E5E5E;">// Get the length of a single object proposal (i.e., number of object classes + 5)</span></span>
<span id="cb17-56">    OrtTensorTypeAndShapeInfo<span class="op" style="color: #5E5E5E;">*</span> output_tensor_info<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-57">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetTensorTypeAndShape<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>output_tensor_info<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-58">    <span class="dt" style="color: #AD0000;">size_t</span> output_length<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{};</span></span>
<span id="cb17-59">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetDimensionsCount<span class="op" style="color: #5E5E5E;">(</span>output_tensor_info<span class="op" style="color: #5E5E5E;">,</span> output_length<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-60">    <span class="dt" style="color: #AD0000;">int64_t</span> output_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{};</span></span>
<span id="cb17-61">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetDimensions<span class="op" style="color: #5E5E5E;">(</span>output_tensor_info<span class="op" style="color: #5E5E5E;">,</span> output_dims<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">*</span>output_length<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-62"></span>
<span id="cb17-63">    <span class="co" style="color: #5E5E5E;">// Access model output</span></span>
<span id="cb17-64">    <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-65">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetTensorMutableData<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">**)&amp;</span>out_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-66"></span>
<span id="cb17-67">    <span class="co" style="color: #5E5E5E;">// Generate new proposals for the current model output</span></span>
<span id="cb17-68">    GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> output_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb17-69"></span>
<span id="cb17-70">    <span class="co" style="color: #5E5E5E;">// Pick detected objects to keep using Non-maximum Suppression</span></span>
<span id="cb17-71">    NmsSortedBboxes<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-72"></span>
<span id="cb17-73">    <span class="co" style="color: #5E5E5E;">// Free memory for input and output tensors</span></span>
<span id="cb17-74">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>input_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-75">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-76"></span>
<span id="cb17-77">    <span class="co" style="color: #5E5E5E;">// return the final number of detected objects</span></span>
<span id="cb17-78">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-79"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to populate an array of objects from Unity</strong></p>
<p>Next, we’ll define a function to populate an array of objects from Unity. We call this function after initializing the list based on the current number of detected objects. We’ll also scale the bounding box information from the input dimensions to the source image resolution.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;">/// Fill the provided array with the detected objects</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"objects"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to a list of objects from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb18-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> PopulateObjectsArray<span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> objects<span class="op" style="color: #5E5E5E;">)</span> </span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-7"></span>
<span id="cb18-8">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb18-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-10">        Object obj <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>proposal_indices<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb18-11"></span>
<span id="cb18-12">        <span class="co" style="color: #5E5E5E;">// Adjust offset to source image resolution and clamp the bounding box</span></span>
<span id="cb18-13">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>x0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>x0 <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-14">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>y0 <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-15">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>width <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>width <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-16">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>height <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>height <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>label <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-19">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>prob <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb18-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to clear memory when the Unity application exits</strong></p>
<p>This last function will free the memory allocated by the plugin. We’ll call it when the Unity application shuts down.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">/// Free memory</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb19-4">DLLExport <span class="dt" style="color: #AD0000;">void</span> FreeResources<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-6">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-7">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-8">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    free<span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-11">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseSession<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-12">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseEnv<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click <code>Build Solution</code>. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference with a YOLOX model using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a> and <a href="https://docs.microsoft.com/en-us/windows/ai/directml/dml">DirectML</a>. In part 2, we’ll build a project in <a href="https://unity.com/">Unity</a> that uses this DLL.</p>
<p><strong>Training Tutorial:</strong> <a href="../../icevision-openvino-unity-tutorial/part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-2/">Object Detection for Unity With ONNX Runtime and DirectML Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/onnx-directml-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>onnx</category>
  <category>directml</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/index.html</guid>
  <pubDate>Thu, 18 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/onnx-directml-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 3</title>
  <link>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create New Project</li>
<li>Import Assets</li>
<li>Allow Unsafe Code</li>
<li>Create Processing Shader</li>
<li>Create Object Detector Script</li>
<li>Set up Unity Scene</li>
<li>Test in Editor</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a YOLOX model using IceVision and export it to OpenVINO.</li>
<li><a href="../part-2/">Part 2</a>: Create a dynamic link library (DLL) file in Visual Studio to perform object detection with a YOLOX model using OpenVINO.</li>
<li><a href="../part-3/">Part 3</a>: Perform object detection in a Unity project with OpenVINO.</li>
<li><a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform object detection using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. This post covers building a project in Unity that leverages this DLL.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes you already have <a href="https://unity3d.com/get-unity/download">Unity Hub</a> on your system. Check out <a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">this section</a> from a previous tutorial if this is not the case (<a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">link</a>).</p>
</blockquote>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Open the Unity Hub and click New Project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the target editor version from the Editor Version dropdown menu. We’ll use Unity 2022 for this post, but the current LTS release should also work fine.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>2D Core</code> template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click <code>Create Project</code> in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-click-create-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Once the project loads, we’ll store the <a href="../part-2/#gather-dependencies">DLL files</a> from part 2 in a new folder called <code>Plugins</code>. Right-click a space in the Assets section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The DLL targets 64-bit x86 architectures, so we need to place the DLL files in a subfolder named <code>x86_64</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1lNsaNuoF2DVcKRN3lpvi716XWfXGWiuN?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> You can place the <code>Plugins</code> folder inside another folder if needed.</p>
</blockquote>
<p>Copy all the DLL files and the <code>plugins.xml</code> file into the <code>Assets/Plugins/x86_64</code> folder. We then need to close and reopen the project for Unity to load the plugin files.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-openvino-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Back in the Unity Editor, create a new folder called <code>Colormaps</code> to store the JSON file from <a href="../part-1/#generate-colormap">part 1</a>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1rs2eD9_3Tyg4ADLbF6CNqwRdnhpsiHgk?usp=sharing">Colormaps Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-colormaps-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We place any test images into a new folder called <code>Images</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1jHp3nTw8bRhk9es-osSfCx-B9ga4pt1G?usp=sharing">Images Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, we’ll create a folder to store the OpenVINO IR models. We need to place the XML and BIN files for the IR models in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in project builds. Create a new folder named <code>StreamingAssets</code>. We’ll place files for each model in a separate folder and put those in a new subfolder called <code>OpenVINOModels</code> to keep things organized.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1cgcrHTdwrUhqsmYThaaB9zoO-6hBp-xM?usp=sharing">OpenVINOModels Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-openvino-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The plugins.xml file included with the DLL files contains locations for the DLL files needed for using different types of devices.</p>
<p><strong><code>plugins.xml</code> content:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb1-1">&lt;<span class="kw" style="color: #003B4F;">ie</span>&gt;</span>
<span id="cb1-2">    &lt;<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-3">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"AUTO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-4">            &lt;<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-5">                &lt;<span class="kw" style="color: #003B4F;">property</span><span class="ot" style="color: #003B4F;"> key=</span><span class="st" style="color: #20794D;">"MULTI_WORK_MODE_AS_AUTO"</span><span class="ot" style="color: #003B4F;"> value=</span><span class="st" style="color: #20794D;">"YES"</span>/&gt;</span>
<span id="cb1-6">            &lt;/<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-7">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-8">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"BATCH"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_batch_plugin.dll"</span>&gt;</span>
<span id="cb1-9">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-10">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"CPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_cpu_plugin.dll"</span>&gt;</span>
<span id="cb1-11">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-12">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GNA"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gna_plugin.dll"</span>&gt;</span>
<span id="cb1-13">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-14">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gpu_plugin.dll"</span>&gt;</span>
<span id="cb1-15">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-16">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HETERO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_hetero_plugin.dll"</span>&gt;</span>
<span id="cb1-17">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-18">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MULTI"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-19">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-20">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MYRIAD"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_myriad_plugin.dll"</span>&gt;</span>
<span id="cb1-21">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-22">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HDDL"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_hddl_plugin.dll"</span>&gt;</span>
<span id="cb1-23">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-24">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"VPUX"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_vpux_plugin.dll"</span>&gt;</span>
<span id="cb1-25">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-26">    &lt;/<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-27">&lt;/<span class="kw" style="color: #003B4F;">ie</span>&gt;</span></code></pre></div>
<p>It needs to be in the same folder as the DLL files for the plugin to work. However, Unity does not include XML files in the Plugins folder when building the project. We need to store a copy of the plugins.xml file in the <code>StreamingAssets</code> folder and then copy it back to the <code>Plugins/x86_64</code> folder when first running the built project. We can handle both steps automatically in code.</p>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the OpenVINO plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can start coding.</p>
</section>
<section id="create-processing-shader" class="level2">
<h2 class="anchored" data-anchor-id="create-processing-shader">Create Processing Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in a <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute Shader</a>. We’ll add the Compute Shader in a new folder called <code>Shaders</code>. Right-click a space in the <code>Shaders</code> folder and select <code>Create → Shader → Compute Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-compute-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the Compute Shader <code>ProcessingShader</code> and open it in the code editor.</p>
<p><strong>Default Compute Shader Code</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb2-2">#pragma kernel CSMain</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// Create a RenderTexture with enableRandomWrite flag and set it</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// with cs.SetTexture</span></span>
<span id="cb2-6">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">CSMain</span> <span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-10"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;">// </span><span class="al" style="color: #AD0000;">TODO</span><span class="co" style="color: #5E5E5E;">: insert actual code here!</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need to add a new <code>Texture2D</code> variable to store the pixel data for the input image. We’ll remove the default method and create a new one called <code>FlipXAxis</code>. Replace the default method name in the <code>#pragma kernel</code> line at the top.</p>
<p>We need the input image height for the flip operation, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb3-2">#pragma kernel FlipXAxis</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb3-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb3-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb3-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb3-14">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb3-16">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb3-18">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-19"></span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb3-21">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-22">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-object-detector-script" class="level2">
<h2 class="anchored" data-anchor-id="create-object-detector-script">Create Object Detector Script</h2>
<p>We’ll store the C# script that interacts with the OpenVINO plugin in a new <code>Scripts</code> folder. Right-click a space inside it and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the script <code>ObjectDetector</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-object-detector-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ObjectDetector <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb4-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb4-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb4-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-10">        </span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb4-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-16">        </span>
<span id="cb4-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-6.0">System.Runtime.InteropServices</a>: Provides a wide variety of members that support COM interop and platform invoke services.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.io?view=net-6.0">System.IO</a>: Allows reading and writing to files and data streams.</li>
</ul>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Add code to copy <code>plugins.xml</code> file to <code>StreamingAssets</code> folder</strong></p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html"><code>InitializeOnLoad</code></a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html"><code>UnityEditor</code></a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives. We’ll place this code right below the namespaces.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb6-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-9">        <span class="co" style="color: #5E5E5E;">// Get all files named "plugins.xml"</span></span>
<span id="cb6-10">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> files <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"./Assets/"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"plugins.xml"</span><span class="op" style="color: #5E5E5E;">,</span> SearchOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AllDirectories</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-11">        <span class="co" style="color: #5E5E5E;">// Iterate through each found file</span></span>
<span id="cb6-12">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> files<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb6-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-14">            <span class="co" style="color: #5E5E5E;">// Check if the file is in the "x86_64" folder</span></span>
<span id="cb6-15">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"x86_64"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb6-16">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-17">                <span class="co" style="color: #5E5E5E;">// Define file path for StreamingAssets folder</span></span>
<span id="cb6-18">                <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19">                <span class="co" style="color: #5E5E5E;">// Print the source file path</span></span>
<span id="cb6-20">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-21">                <span class="co" style="color: #5E5E5E;">// Only copy the file to the StreamingAssets folder if it is not already present</span></span>
<span id="cb6-22">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-26"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-27"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. We are in the Editor, so it returns true, and the code executes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_in_editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>If we check if we are not in the Unity Editor, it returns false, and the code block does not execute.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_not_in_editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can verify the code works by saving the script and going to the <code>StreamingAssets</code> folder in the Editor. The plugins.xml file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
</figure>
</div>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input. We may or may not want to mirror the screen based on whether a webcam is facing the user.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Mirror the in-game screen."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>Next, we’ll define the variables for processing model input. We can set the default target input resolution to <code>224</code> and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<p>We’ll also add a public <code>ComputeShader</code> variable to access the <code>ProcessingShader</code> we made earlier.</p>
<p>We need to download the pixel data for the input image from the GPU to the CPU before passing it to the plugin. This step can cause a significant performance bottleneck, so we’ll add the option to read the model output asynchronously at the cost of a few frames of latency. This latency might cause the bounding box to trail slightly behind a fast-moving object on the screen. The effect should be minimal, provided the frame rate is high enough.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the colormaps for object classes"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Minimum confidence score for keeping detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span>1f<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> minConfidence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices, models, and compute devices.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayBoundingBoxes <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display number of detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayProposalCount <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-9"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-12"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-15"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-17"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-23"><span class="kw" style="color: #003B4F;">public</span> Dropdown deviceDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"OpenVINO"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the openvino models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> openvinoModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINOModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<p>When using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb15-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb15-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variable for tracking the current number of detected objects</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// Stores the number of detected objects</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for storing colormaps</strong></p>
<p>We need to create a couple of classes to parse the JSON content.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">// A class for parsing in colormaps from a JSON file</span></span>
<span id="cb17-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">class</span> ColorMap <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> label<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> color<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">// A class for reading in a list of colormaps from a JSON file</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;">class</span> ColorMapList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ColorMap<span class="op" style="color: #5E5E5E;">&gt;</span> items<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;">// Stores a list of colormaps from a JSON file</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;">private</span> ColorMapList colormapList<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;">// A list of colors that map to class labels</span></span>
<span id="cb17-10"><span class="kw" style="color: #003B4F;">private</span> Color<span class="op" style="color: #5E5E5E;">[]</span> colors<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;">// A list of single pixel textures that map to class labels</span></span>
<span id="cb17-12"><span class="kw" style="color: #003B4F;">private</span> Texture2D<span class="op" style="color: #5E5E5E;">[]</span> colorTextures<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>We’ll define some variables to track the frame rate.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">// File paths for the available OpenVINO models</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO models</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO devices</span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> openvinoDevices <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span></code></pre></div>
<p><strong>Define a struct for reading object information from the OpenVINO plugin</strong></p>
<p>We need to create an <code>Object</code> struct for Unity to match the one we defined for the OpenVINO code, along with an array of <code>Object</code> structs that we’ll update with the <code>PopulateObjectsArray()</code> function.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// Indicate that the members of the struct are laid out sequentially</span></span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">StructLayout</span><span class="op" style="color: #5E5E5E;">(</span>LayoutKind<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Sequential</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;">/// Stores the information for a single object</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span><span class="co" style="color: #5E5E5E;"> </span></span>
<span id="cb20-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;">// The X coordinate for the top left bounding box corner</span></span>
<span id="cb20-9">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-10">    <span class="co" style="color: #5E5E5E;">// The Y coordinate for the top left bounding box cornder</span></span>
<span id="cb20-11">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-12">    <span class="co" style="color: #5E5E5E;">// The width of the bounding box</span></span>
<span id="cb20-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-14">    <span class="co" style="color: #5E5E5E;">// The height of the bounding box</span></span>
<span id="cb20-15">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-16">    <span class="co" style="color: #5E5E5E;">// The object class index for the detected object</span></span>
<span id="cb20-17">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-18">    <span class="co" style="color: #5E5E5E;">// The model confidence score for the object</span></span>
<span id="cb20-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-20"></span>
<span id="cb20-21">    <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">Object</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-23">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-24">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-25">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-26">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-27">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">=</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-28">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">=</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-30"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-31"></span>
<span id="cb20-32"><span class="co" style="color: #5E5E5E;">// Stores information for the current list of detected objects</span></span>
<span id="cb20-33"><span class="kw" style="color: #003B4F;">private</span> Object<span class="op" style="color: #5E5E5E;">[]</span> objectInfoArray<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Import functions from the OpenVINO plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb21-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINO_YOLOX_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> IntPtr <span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-14"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-17"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-18"></span>
<span id="cb21-19"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-20"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr objects<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-21"></span>
<span id="cb21-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-23"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb22-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb22-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb22-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-9"></span>
<span id="cb22-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb22-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-12"></span>
<span id="cb22-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb22-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb22-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb22-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-19"></span>
<span id="cb22-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb23-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb23-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb23-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-10"></span>
<span id="cb23-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb23-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb23-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-15"></span>
<span id="cb23-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb23-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb23-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-20"></span>
<span id="cb23-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb23-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the available OpenVINO models</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available OpenVION models</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb24-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb24-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for each model folder</span></span>
<span id="cb24-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> dir <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDirectories</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{openvinoModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb24-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-9">        <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> dir<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb24-10"></span>
<span id="cb24-11">        modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Substring</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-12"></span>
<span id="cb24-13">        <span class="co" style="color: #5E5E5E;">// Get the paths for the XML file for each model</span></span>
<span id="cb24-14">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>dir<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb24-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-16">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".xml"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb24-17">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-18">                modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-19">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-22"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the names of available OpenVINO devices</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;">/// Get the names of the available OpenVINO devices</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb25-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;">// Get the number of available OpenVINO devices</span></span>
<span id="cb25-7">    <span class="dt" style="color: #AD0000;">int</span> deviceCount <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> deviceCount<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb25-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-11">        openvinoDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>Marshal<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PtrToStringAnsi</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">)));</span></span>
<span id="cb25-12">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb26-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb26-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb26-8">    <span class="kw" style="color: #003B4F;">foreach</span><span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb26-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb26-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb26-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb26-16"></span>
<span id="cb26-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb26-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-19">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO model names to menu</span></span>
<span id="cb26-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb26-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-23"></span>
<span id="cb26-24">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb26-25">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-26">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO device names to menu</span></span>
<span id="cb26-27">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>openvinoDevices<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-28">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb26-29">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb27-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb27-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb27-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb27-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb27-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the selected OpenVINO model</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;">/// Update the selected OpenVINO model</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb28-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;">// Reset objectInfoArray</span></span>
<span id="cb28-7">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb28-8"></span>
<span id="cb28-9">    <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-10">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb28-11">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span></span>
<span id="cb28-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb28-13"></span>
<span id="cb28-14">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Device: {openvinoDevices[deviceDropdown.value]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-15"></span>
<span id="cb28-16">    <span class="co" style="color: #5E5E5E;">// Load the specified OpenVINO model</span></span>
<span id="cb28-17">    <span class="dt" style="color: #AD0000;">int</span> return_msg <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-18"></span>
<span id="cb28-19">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-20"></span>
<span id="cb28-21">    <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> return_messages <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-22">        <span class="st" style="color: #20794D;">"Model loaded and reshaped successfully"</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb28-23">        <span class="st" style="color: #20794D;">"Failed to load model"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb28-24">        <span class="st" style="color: #20794D;">"Failed to reshape model input"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb28-25">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb28-26"></span>
<span id="cb28-27">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Updated input dims: {inputDims[0]} x {inputDims[1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-28">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Return message: {return_messages[return_msg]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-29"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-awake-method" class="level3">
<h3 class="anchored" data-anchor-id="define-awake-method">Define Awake Method</h3>
<p>We’ll implement the code to copy the plugins.xml file from the <code>StreamingAssets</code> folder to the <code>Plugins/x86_64</code> folder in the build folder in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method. The code should be inactive since we are in the Editor.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">// Awake is called when the script instance is being loaded</span></span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb29-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-4">    <span class="kw" style="color: #003B4F;">#if</span> <span class="op" style="color: #5E5E5E;">!</span>UNITY_EDITOR</span>
<span id="cb29-5">    <span class="co" style="color: #5E5E5E;">// Define the path for the plugins.xml file in the StreamingAssets folder</span></span>
<span id="cb29-6">    <span class="dt" style="color: #AD0000;">string</span> sourcePath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-7">    <span class="co" style="color: #5E5E5E;">// Define the destination path for the plugins.xml file</span></span>
<span id="cb29-8">    <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.dataPath}/Plugins/x86_64/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-9">    <span class="co" style="color: #5E5E5E;">// Only copy the file if it is not already present at the destination</span></span>
<span id="cb29-10">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>sourcePath<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-11">    <span class="kw" style="color: #003B4F;">#endif</span></span>
<span id="cb29-12"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start Method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb30-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb30-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb30-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb30-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-8"></span>
<span id="cb30-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb30-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb30-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-16"></span>
<span id="cb30-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb30-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb30-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-21"></span>
<span id="cb30-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of color maps from JSON file</span></span>
<span id="cb30-23">    colormapList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ColorMapList<span class="op" style="color: #5E5E5E;">&gt;(</span>colormapFile<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-24">    <span class="co" style="color: #5E5E5E;">// Initialize the list of colors</span></span>
<span id="cb30-25">    colors <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Color<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb30-26">    <span class="co" style="color: #5E5E5E;">// Initialize the list of color textures</span></span>
<span id="cb30-27">    colorTextures <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Texture2D<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb30-28"></span>
<span id="cb30-29">    <span class="co" style="color: #5E5E5E;">// Populate the color and color texture arrays</span></span>
<span id="cb30-30">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb30-31">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-32">        <span class="co" style="color: #5E5E5E;">// Create a new color object</span></span>
<span id="cb30-33">        colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Color</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb30-34">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb30-35">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb30-36">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb30-37">        <span class="co" style="color: #5E5E5E;">// Create a single-pixel texture</span></span>
<span id="cb30-38">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-39">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">SetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb30-40">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-41"></span>
<span id="cb30-42">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-43"></span>
<span id="cb30-44">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available OpenVINO models</span></span>
<span id="cb30-45">    <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-46">    <span class="co" style="color: #5E5E5E;">// Get the names of available OpenVINO devices</span></span>
<span id="cb30-47">    <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-48"></span>
<span id="cb30-49">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb30-50">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-51"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define methods to process images using the Compute Shader, calculate the input resolution, handle asynchronous GPU readback, and scale the bounding box information.</p>
<p><strong>Define method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb31-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb31-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb31-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb31-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb31-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb31-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb31-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-20"></span>
<span id="cb31-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb31-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb31-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-25"></span>
<span id="cb31-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb31-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-28"></span>
<span id="cb31-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb31-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-31"></span>
<span id="cb31-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb31-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb32-8"><span class="kw" style="color: #003B4F;">private</span> Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-10">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb32-11"></span>
<span id="cb32-12">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb32-13">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-15">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb32-16">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-18">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb32-19">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-20">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-21">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb32-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-23"></span>
<span id="cb32-24">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-25"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb33-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-12"></span>
<span id="cb33-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb33-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb33-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb33-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb33-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb33-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb34-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb34-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-8">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb34-9">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb34-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-11">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the number of detected objects</span></span>
<span id="cb34-12">        numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-14"></span>
<span id="cb34-15">    <span class="co" style="color: #5E5E5E;">// Initialize the array</span></span>
<span id="cb34-16">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span>numObjects<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb34-17"></span>
<span id="cb34-18">    <span class="co" style="color: #5E5E5E;">// Pin memory</span></span>
<span id="cb34-19">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> o <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb34-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-21">        <span class="co" style="color: #5E5E5E;">// Get the detected objects</span></span>
<span id="cb34-22">        <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>o<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-24"></span>
<span id="cb34-25">    <span class="kw" style="color: #003B4F;">return</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-26"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to scale bounding boxes to the display resolution</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;">/// Scale the latest bounding boxes to the display resolution</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb35-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb35-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-6">    <span class="co" style="color: #5E5E5E;">// Process new detected objects</span></span>
<span id="cb35-7">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> objectInfoArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb35-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-9">        <span class="co" style="color: #5E5E5E;">// The smallest dimension of the screen</span></span>
<span id="cb35-10">        <span class="dt" style="color: #AD0000;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-11">        <span class="co" style="color: #5E5E5E;">// The smallest input dimension</span></span>
<span id="cb35-12">        <span class="dt" style="color: #AD0000;">int</span> minInputDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-13">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb35-14">        <span class="dt" style="color: #AD0000;">float</span> minImgScale <span class="op" style="color: #5E5E5E;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;">/</span> minInputDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-15">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb35-16">        <span class="dt" style="color: #AD0000;">float</span> displayScale <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-17"></span>
<span id="cb35-18">        <span class="co" style="color: #5E5E5E;">// Scale bounding box to in-game screen resolution and flip the bbox coordinates vertically</span></span>
<span id="cb35-19">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-20">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-21">        <span class="dt" style="color: #AD0000;">float</span> width <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-22">        <span class="dt" style="color: #AD0000;">float</span> height <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-23"></span>
<span id="cb35-24">        <span class="co" style="color: #5E5E5E;">// Mirror bounding box across screen</span></span>
<span id="cb35-25">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mirrorScreen <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span> x0 <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">-</span> x0 <span class="op" style="color: #5E5E5E;">-</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">        <span class="co" style="color: #5E5E5E;">// Scale bounding boxes to display resolution</span></span>
<span id="cb35-28">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-29">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-30">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-31">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-32"></span>
<span id="cb35-33">        <span class="co" style="color: #5E5E5E;">// Offset the bounding box coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb35-34">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">-</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-35">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb36-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb36-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-9"></span>
<span id="cb36-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb36-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-12"></span>
<span id="cb36-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb36-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb36-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb36-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb36-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-26"></span>
<span id="cb36-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb36-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb36-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-32"></span>
<span id="cb36-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb36-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-36"></span>
<span id="cb36-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb36-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-39"></span>
<span id="cb36-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-43">        <span class="co" style="color: #5E5E5E;">// Update the selected OpenVINO model</span></span>
<span id="cb36-44">        <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-46"></span>
<span id="cb36-47">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb36-48">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-49"></span>
<span id="cb36-50">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb36-51">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-52"></span>
<span id="cb36-53">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb36-54">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-55">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-56">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-58">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb36-59">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-61">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-62">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-63">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-64"></span>
<span id="cb36-65">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb36-66">    numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-67">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Detected {numObjects} objects"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-68">    <span class="co" style="color: #5E5E5E;">// Scale bounding boxes</span></span>
<span id="cb36-69">    <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-70"></span>
<span id="cb36-71">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb36-72">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-73"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the bounding boxes and current framerate.</p>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb37-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb38-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb38-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-10"></span>
<span id="cb38-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb38-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb38-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb38-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the minimum confidence value</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;">/// Update the minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"slider"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb39-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>Slider slider<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb39-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb39-7">    minConfidence <span class="op" style="color: #5E5E5E;">=</span> slider<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-8">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb39-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted bounding boxes and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">// OnGUI is called for rendering and handling GUI events.</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb40-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-4">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for label text</span></span>
<span id="cb40-5">    Rect labelRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-6">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for bounding boxes</span></span>
<span id="cb40-7">    Rect boxRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-8"></span>
<span id="cb40-9">    GUIStyle labelStyle <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-11">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">11e-3</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-13">    labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">alignment</span> <span class="op" style="color: #5E5E5E;">=</span> TextAnchor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">MiddleLeft</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-14"></span>
<span id="cb40-15">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>Object objectInfo <span class="kw" style="color: #003B4F;">in</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-16">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-17">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>displayBoundingBoxes<span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-18"></span>
<span id="cb40-19">        <span class="co" style="color: #5E5E5E;">// Skip object if label index is out of bounds</span></span>
<span id="cb40-20">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">&gt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-21"></span>
<span id="cb40-22">        <span class="co" style="color: #5E5E5E;">// Get color for current class index</span></span>
<span id="cb40-23">        Color color <span class="op" style="color: #5E5E5E;">=</span> colors<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-24">        <span class="co" style="color: #5E5E5E;">// Get label for current class index</span></span>
<span id="cb40-25">        <span class="dt" style="color: #AD0000;">string</span> name <span class="op" style="color: #5E5E5E;">=</span> colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-26"></span>
<span id="cb40-27">        <span class="co" style="color: #5E5E5E;">// Set bounding box coordinates</span></span>
<span id="cb40-28">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-29">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-30">        <span class="co" style="color: #5E5E5E;">// Set bounding box dimensions</span></span>
<span id="cb40-31">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-32">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-33"></span>
<span id="cb40-34">        <span class="co" style="color: #5E5E5E;">// Scale bounding box line width based on display resolution</span></span>
<span id="cb40-35">        <span class="dt" style="color: #AD0000;">int</span> lineWidth <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.75e-3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-36">        <span class="co" style="color: #5E5E5E;">// Render bounding box</span></span>
<span id="cb40-37">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-38">            position<span class="op" style="color: #5E5E5E;">:</span> boxRect<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-39">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-40">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-41">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-42">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-43">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-44">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> lineWidth<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-45">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-46"></span>
<span id="cb40-47">        <span class="co" style="color: #5E5E5E;">// Include class label and confidence score in label text</span></span>
<span id="cb40-48">        <span class="dt" style="color: #AD0000;">string</span> labelText <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">" {name}: {(objectInfo.prob * 100).ToString("</span><span class="fl" style="color: #AD0000;">0.</span>##<span class="st" style="color: #20794D;">")}%"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-49"></span>
<span id="cb40-50">        <span class="co" style="color: #5E5E5E;">// Initialize label GUI content</span></span>
<span id="cb40-51">        GUIContent labelContent <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>labelText<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-52"></span>
<span id="cb40-53">        <span class="co" style="color: #5E5E5E;">// Calculate the text size.</span></span>
<span id="cb40-54">        Vector2 textSize <span class="op" style="color: #5E5E5E;">=</span> labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CalcSize</span><span class="op" style="color: #5E5E5E;">(</span>labelContent<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-55"></span>
<span id="cb40-56">        <span class="co" style="color: #5E5E5E;">// Set label text coordinates</span></span>
<span id="cb40-57">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-58">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">-</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> lineWidth<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-59"></span>
<span id="cb40-60">        <span class="co" style="color: #5E5E5E;">// Set label text dimensions</span></span>
<span id="cb40-61">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-62">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-63">        <span class="co" style="color: #5E5E5E;">// Set label text and backgound color</span></span>
<span id="cb40-64">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grayscale</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">?</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">black</span> <span class="op" style="color: #5E5E5E;">:</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">white</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-65">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span> <span class="op" style="color: #5E5E5E;">=</span> colorTextures<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-66">        <span class="co" style="color: #5E5E5E;">// Render label</span></span>
<span id="cb40-67">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>labelRect<span class="op" style="color: #5E5E5E;">,</span> labelContent<span class="op" style="color: #5E5E5E;">,</span> labelStyle<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-68"></span>
<span id="cb40-69">        Rect objectDot <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-70">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-71">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-72">        <span class="dt" style="color: #AD0000;">float</span> radius <span class="op" style="color: #5E5E5E;">=</span> objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-73">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-74">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-75"></span>
<span id="cb40-76"></span>
<span id="cb40-77">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-78">            position<span class="op" style="color: #5E5E5E;">:</span> objectDot<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-79">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-80">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-81">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-82">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-83">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-84">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-85">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-86"></span>
<span id="cb40-87">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-88"></span>
<span id="cb40-89">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb40-90">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-91">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-92">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb40-93">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-94">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-95"></span>
<span id="cb40-96">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb40-97">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-98">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-99"></span>
<span id="cb40-100">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Objects Detected: {numObjects}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-101">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayProposalCount<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-102"></span>
<span id="cb40-103">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb40-104">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-105">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-106">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-107">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-108">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-109"></span>
<span id="cb40-110">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb40-111">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayProposalCount <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-112">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-113"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-ondisable-method" class="level3">
<h3 class="anchored" data-anchor-id="define-ondisable-method">Define OnDisable Method</h3>
<p>We’ll perform any clean-up steps in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDisable.html">OnDisable</a>method.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb41-1"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnDisable</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb41-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-3">    <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb41-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>Now we can start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the object detector script, dropdown menus for selecting webcams, models, and compute devices, a toggle to activate a webcam feed, and a slider to update the confidence threshold.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>3D Object → Quad</code>. We can name the new object Screen.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-quad.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, drag and drop a test image from the <code>Assets → Images</code> folder onto the Screen object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the <code>Shader</code> dropdown menu in the Inspector tab. Type <code>Unlit/Texture</code> into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>Create Empty</code>. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ObjectDetector</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-attach-object-detector-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can assign the screen object, compute shader, and colormap file in the Inspector tab by dragging them into their respective fields.</p>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI controls. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/file/d/1RbL7qaIQNzWCI4z-WUArHgDFY8pUZtoE/view?usp=sharing">Canvas Prefab</a></li>
</ul>
<p>Drag and drop the Canvas prefab into a new folder called Prefabs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-import-canvas-prefab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>From there, drag the prefab into the Hierarchy tab. We can see the GUI by switching to the Game view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ObjectDetector</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ObjectDetector → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This time select <code>ObjectDetector → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>OpenVINOModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-openvino-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>OpenVINODeviceDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-openvino-device-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure <code>ConfidenceThresholdSlider</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-confidence-threshold-slider-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the GUI objects to their respective fields for the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-in-editor" class="level2">
<h2 class="anchored" data-anchor-id="test-in-editor">Test in Editor</h2>
<p>Click the play button in the top-middle of the Editor window to test the project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-click-play-button.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>There should be a bounding box for the call sign and one for the idle hand.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-test-in-editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this tutorial series, we covered how to train a YOLOX model with the IceVision library, created a DLL to perform inference with the model using OpenVINO, and built a simple Unity project that leveraged this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-2/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>openvino</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/index.html</guid>
  <pubDate>Wed, 10 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-openvino-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 2</title>
  <link>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Install OpenVINO</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a YOLOX model using IceVision and export it to OpenVINO.</li>
<li><a href="../part-2/">Part 2</a>: Create a dynamic link library (DLL) file in Visual Studio to perform object detection with a YOLOX model using OpenVINO.</li>
<li><a href="../part-3/">Part 3</a>: Perform object detection in a Unity project with OpenVINO.</li>
<li><a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered finetuning an object detection model using the IceVision library and exporting it as an OpenVINO IR model. This post covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with this model using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes <a href="https://visualstudio.microsoft.com/downloads/">Visual Studio</a> is present on your system.</p>
</blockquote>
</section>
<section id="install-openvino" class="level2">
<h2 class="anchored" data-anchor-id="install-openvino">Install OpenVINO</h2>
<p>We need to download the OpenVINO Toolkit before creating our Visual Studio project. Go to the OpenVINO download page linked below.</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">OpenVINO Download page</a></li>
</ul>
<p><strong>Download OpenVINO Toolkit</strong></p>
<p>Select the options outlined in the image below and click the Download button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_download_page.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Double-click the file once it finishes downloading and click the Extract button in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_extract_files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The installer will then verify the computer meets the system requirements. The toolkit includes the Python scripts for converting models, which require Python 3.6, 3.7, 3.8, or 3.9 to run. We will only use the files for C++ development in this post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_check_system_requirements.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can stick with the default <code>Recommended Installation</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_recommended_installation.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The installer will then ask whether Intel can collect some information before starting the installation process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_software_improvement_program.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_installation_in_progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click Finish once the installation process completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_finish.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Inspect OpenVINO Folder</strong></p>
<p>If we look at the installation folder for the toolkit, we can see it also includes a version of OpenCV. We’ll use OpenCV to prepare image data from Unity before feeding it to the model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_install_folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I like to copy the OpenVINO folder to a separate directory with other dependencies for my C++ projects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_move_folder_to_dependencies_directory.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can create our Visual Studio DLL project.</p>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where OpenVINO and OpenCV are so we can access their APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the paths for the following folders, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include\ie</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the paths to the following files, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\lib\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\lib\intel64\Release\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\lib\*.lib</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL files included with the OpenVINO and OpenCV libraries.</p>
<p><strong>OpenCV DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/get-opencv-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>OpenVINO DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/get-openvino-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/get-openvino-tbb-dll-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_core453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgproc453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgcodecs453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\bin\intel64\Release\* $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\bin\tbb.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We’ll first update the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> with the required header files. We can open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Comment or remove the <code>#include</code> line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for OpenVINO and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"openvino/openvino.hpp"</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html">ov::Core</a>: represents an OpenVINO runtime Core entity</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Model.html#doxid-classov-1-1-model">ov::Model</a>: A user-defined model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html">ov::CompiledModel</a>: represents a compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request">ov::InferRequest</a>: an infer request that can be run in asynchronous or synchronous manners</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Tensor.html">ov::Tensor</a>: API holding host memory</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// Inference engine instance</span></span>
<span id="cb6-2">ov<span class="op" style="color: #5E5E5E;">::</span>Core core<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">// The user define model representation</span></span>
<span id="cb6-4"><span class="bu" style="color: null;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;">&lt;</span>ov<span class="op" style="color: #5E5E5E;">::</span>Model<span class="op" style="color: #5E5E5E;">&gt;</span> model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">// A device-specific compiled model</span></span>
<span id="cb6-6">ov<span class="op" style="color: #5E5E5E;">::</span>CompiledModel compiled_model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">// List of available compute devices</span></span>
<span id="cb6-9"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> available_devices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">// An inference request for a compiled model</span></span>
<span id="cb6-11">ov<span class="op" style="color: #5E5E5E;">::</span>InferRequest infer_request<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;">// Stores the model input data</span></span>
<span id="cb6-13">ov<span class="op" style="color: #5E5E5E;">::</span>Tensor input_tensor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">// A pointer for accessing the input tensor data</span></span>
<span id="cb6-15"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> input_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;">// model has only one output</span></span>
<span id="cb6-18">ov<span class="op" style="color: #5E5E5E;">::</span>Tensor output_tensor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;">// A pointer for accessing the output tensor data</span></span>
<span id="cb6-20"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21"></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;">// The current source image width</span></span>
<span id="cb6-23"><span class="dt" style="color: #AD0000;">int</span> img_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;">// The current source image height</span></span>
<span id="cb6-25"><span class="dt" style="color: #AD0000;">int</span> img_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;">// The current model input width</span></span>
<span id="cb6-27"><span class="dt" style="color: #AD0000;">int</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-28"><span class="co" style="color: #5E5E5E;">// The current model input height</span></span>
<span id="cb6-29"><span class="dt" style="color: #AD0000;">int</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-30"><span class="co" style="color: #5E5E5E;">// The total number pixels in the input image</span></span>
<span id="cb6-31"><span class="dt" style="color: #AD0000;">int</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-32"><span class="co" style="color: #5E5E5E;">// The number of color channels </span></span>
<span id="cb6-33"><span class="dt" style="color: #AD0000;">int</span> n_channels <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-34"></span>
<span id="cb6-35"><span class="co" style="color: #5E5E5E;">// Stores information about a single object prediction</span></span>
<span id="cb6-36"><span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb6-37"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-38">    <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-39">    <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-40">    <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-41">    <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-42">    <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-43">    <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-44"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-45"></span>
<span id="cb6-46"><span class="co" style="color: #5E5E5E;">// Store grid offset and stride values to decode a section of the model output</span></span>
<span id="cb6-47"><span class="kw" style="color: #003B4F;">struct</span> GridAndStride</span>
<span id="cb6-48"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-49">    <span class="dt" style="color: #AD0000;">int</span> grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-50">    <span class="dt" style="color: #AD0000;">int</span> grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-51">    <span class="dt" style="color: #AD0000;">int</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-52"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-53"></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;">// The scale values used to adjust the model output to the source image resolution</span></span>
<span id="cb6-55"><span class="dt" style="color: #AD0000;">float</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-56"><span class="dt" style="color: #AD0000;">float</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-57"></span>
<span id="cb6-58"><span class="co" style="color: #5E5E5E;">// The minimum confidence score to consider an object proposal</span></span>
<span id="cb6-59"><span class="dt" style="color: #AD0000;">float</span> bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-60"><span class="co" style="color: #5E5E5E;">// The maximum intersection over union value before an object proposal will be ignored</span></span>
<span id="cb6-61"><span class="dt" style="color: #AD0000;">float</span> nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-62"></span>
<span id="cb6-63"><span class="co" style="color: #5E5E5E;">// Stores the grid and stride values to navigate the raw model output</span></span>
<span id="cb6-64"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> grid_strides<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-65"><span class="co" style="color: #5E5E5E;">// Stores the object proposals with confidence scores above bbox_conf_thresh</span></span>
<span id="cb6-66"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-67"><span class="co" style="color: #5E5E5E;">// Stores the indices for the object proposals selected using non-maximum suppression</span></span>
<span id="cb6-68"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-69"></span>
<span id="cb6-70"><span class="co" style="color: #5E5E5E;">// The stride values used to generate the gride_strides vector</span></span>
<span id="cb6-71"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> strides <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">32</span> <span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
<p><strong>Define a function to get the number of compute devices</strong></p>
<p>The first function we’ll define will create a list of available device names and return the number of devices accessible by OpenVINO. We’ll use this information to select which device to use to perform inference from the Unity application. There might be an option named GNA (Gaussian &amp; Neural Accelerator). GNA is a highly specialized neural coprocessor for tasks like noise cancellation. We’ll exclude it from the list of devices presented to the end user.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1aabd82bca4826ee53893f7b5fc9bce813">ov::Core::get_available_devices()</a>: Returns devices available for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">/// Get the number of available compute devices</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The number of available devices</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb7-5">DLLExport <span class="dt" style="color: #AD0000;">int</span> GetDeviceCount<span class="op" style="color: #5E5E5E;">()</span> </span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;">// Reset list of available compute devices</span></span>
<span id="cb7-8">    available_devices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;">// Populate list of available compute devices</span></span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>device <span class="op" style="color: #5E5E5E;">:</span> core<span class="op" style="color: #5E5E5E;">.</span>get_available_devices<span class="op" style="color: #5E5E5E;">())</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;">// Skip GNA device</span></span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GNA"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-14">            available_devices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;">// Return the number of available compute devices</span></span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;">return</span> available_devices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-19"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the name of a compute device</strong></p>
<p>Next, we’ll define a function to return the name of a device at a specified index for the list of available devices.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">/// Get the name of the compute device name at the specified index</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The name of the device at the specified index</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb8-6">DLLExport <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">*</span> GetDeviceName<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">&amp;</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate stride values to navigate the raw model output</strong></p>
<p>The method for generating the offset values used to traverse the output array is almost identical to the Python implementation from <a href="../part-1/#define-post-processing-steps">part 1</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">/// Generate offset values to navigate the raw model output</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"height"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input height</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"width"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input width</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-6"><span class="dt" style="color: #AD0000;">void</span> GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-8">    <span class="co" style="color: #5E5E5E;">// Remove the values for the previous input resolution</span></span>
<span id="cb9-9">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb9-10"></span>
<span id="cb9-11">    <span class="co" style="color: #5E5E5E;">// Iterate through each stride value</span></span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span> stride <span class="op" style="color: #5E5E5E;">:</span> strides<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb9-13">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;">// Calculate the grid dimensions</span></span>
<span id="cb9-15">        <span class="dt" style="color: #AD0000;">int</span> grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-16">        <span class="dt" style="color: #AD0000;">int</span> grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-17"></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;">// Store each combination of grid coordinates</span></span>
<span id="cb9-19">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g1 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_height<span class="op" style="color: #5E5E5E;">;</span> g1<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb9-20">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-21">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g0 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_width<span class="op" style="color: #5E5E5E;">;</span> g0<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb9-22">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-23">                grid_strides<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>GridAndStride<span class="op" style="color: #5E5E5E;">{</span> g0<span class="op" style="color: #5E5E5E;">,</span> g1<span class="op" style="color: #5E5E5E;">,</span> stride <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb9-24">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-25">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-27"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to set the minimum confidence score from Unity</strong></p>
<p>We might want to try different confidence thresholds for keeping object proposals from the Unity application, so we’ll add a function to enable this.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Set minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"min_confidence"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The minimum confidence score for keeping bounding box proposals</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb10-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> SetConfidenceThreshold<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> min_confidence<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7">    bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> min_confidence<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to load an OpenVINO model</strong></p>
<p>OpenVINO needs to compile models for the target device. This process can take several seconds when using GPU inference. We can create a cache directory, so we only need to compile models for a specific resolution-device pair once.</p>
<p>We’ll place the code for loading an OpenVINO model inside a try-catch block to avoid crashing the application if we pass an incorrect file path.</p>
<p>If the model loads successfully, we’ll attempt to reshape the model input to the desired input dimensions. After reshaping the model input, we can compile the model for the target device.</p>
<p>We can get pointers to the model input tensor and create an inference request using the compiled model.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a14cba2136b972ee34478dd11633293a2">ov::Core::set_property()</a>: Sets properties for a device</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1ae0576a95f841c3a6f5e46e4802716981">ov::Core::read_model()</a>: Reads models from IR/ONNX/PDPD formats</li>
<li><a href="https://docs.openvino.ai/latest/openvino_docs_OV_UG_ShapeInference.html">ov::Model::reshape()</a>: Updates input shapes and propagates them down to the outputs of the model through all intermediate layers</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a46555f0803e8c29524626be08e7f5c5a">ov::Core::compile_model()</a>: Creates a compiled model from a source model object</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html#doxid-classov-1-1-compiled-model-1ae3633c0eb5173ed776446fba32b95953">ov::CompiledModel::create_infer_request()</a>: Creates an inference request object used to infer the compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a5f0bc1ab40de6a7a12136b4a4e6a8b54">ov::InferRequest::get_input_tensor()</a>: Gets an input tensor for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">/// Load a model from the specified file path</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model_path"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The full model path to the OpenVINO IR model</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The index for the available_devices vector</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_dims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image dimensions</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">A status value indicating success or failure to load and reshape the model</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb11-8">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> model_path<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> </span>
<span id="cb11-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;">// Set the cache directory for compiled GPU models</span></span>
<span id="cb11-13">    core<span class="op" style="color: #5E5E5E;">.</span>set_property<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU"</span><span class="op" style="color: #5E5E5E;">,</span> ov<span class="op" style="color: #5E5E5E;">::</span>cache_dir<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"cache"</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb11-14"></span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;">// Try loading the specified model</span></span>
<span id="cb11-16">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>read_model<span class="op" style="color: #5E5E5E;">(</span>model_path<span class="op" style="color: #5E5E5E;">);</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-18"></span>
<span id="cb11-19">    <span class="co" style="color: #5E5E5E;">// The dimensions of the source input image</span></span>
<span id="cb11-20">    img_w <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb11-21">    img_h <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb11-22">    <span class="co" style="color: #5E5E5E;">// Calculate new input dimensions based on the max stride value</span></span>
<span id="cb11-23">    input_w <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb11-24">    input_h <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb11-25">    n_pixels <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">*</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-26"></span>
<span id="cb11-27">    <span class="co" style="color: #5E5E5E;">// Calculate the value used to adjust the model output to the source image resolution</span></span>
<span id="cb11-28">    scale_x <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-29">    scale_y <span class="op" style="color: #5E5E5E;">=</span> input_h <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-30"></span>
<span id="cb11-31">    <span class="co" style="color: #5E5E5E;">// Generate the grid and stride values based on input resolution</span></span>
<span id="cb11-32">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-33">    GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span>input_h<span class="op" style="color: #5E5E5E;">,</span> input_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-34"></span>
<span id="cb11-35">    <span class="co" style="color: #5E5E5E;">// Try updating the model input dimensions</span></span>
<span id="cb11-36">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model<span class="op" style="color: #5E5E5E;">-&gt;</span>reshape<span class="op" style="color: #5E5E5E;">({</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">,</span> input_w <span class="op" style="color: #5E5E5E;">});</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-37">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-38"></span>
<span id="cb11-39">    <span class="co" style="color: #5E5E5E;">// Create a compiled model for the taret compute device</span></span>
<span id="cb11-40">    <span class="kw" style="color: #003B4F;">auto</span> compiled_model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>compile_model<span class="op" style="color: #5E5E5E;">(</span>model<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"MULTI"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb11-41">                                             ov<span class="op" style="color: #5E5E5E;">::</span>device<span class="op" style="color: #5E5E5E;">::</span>priorities<span class="op" style="color: #5E5E5E;">(</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">]),</span></span>
<span id="cb11-42">                                             ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>performance_mode<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>PerformanceMode<span class="op" style="color: #5E5E5E;">::</span>LATENCY<span class="op" style="color: #5E5E5E;">),</span></span>
<span id="cb11-43">                                             ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>inference_precision<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>element<span class="op" style="color: #5E5E5E;">::</span>f32<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb11-44"></span>
<span id="cb11-45">    <span class="co" style="color: #5E5E5E;">// Create an inference request</span></span>
<span id="cb11-46">    infer_request <span class="op" style="color: #5E5E5E;">=</span> compiled_model<span class="op" style="color: #5E5E5E;">.</span>create_infer_request<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-47"></span>
<span id="cb11-48">    <span class="co" style="color: #5E5E5E;">// Get input tensor by index</span></span>
<span id="cb11-49">    input_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_input_tensor<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-50">    <span class="co" style="color: #5E5E5E;">// Get a pointer to the input tensor data</span></span>
<span id="cb11-51">    input_data <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb11-52"></span>
<span id="cb11-53">    <span class="co" style="color: #5E5E5E;">// Get output tensor</span></span>
<span id="cb11-54">    output_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_output_tensor<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-55">    <span class="co" style="color: #5E5E5E;">// Get a pointer to the output tensor data</span></span>
<span id="cb11-56">    out_data <span class="op" style="color: #5E5E5E;">=</span> output_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb11-57"></span>
<span id="cb11-58">    <span class="co" style="color: #5E5E5E;">// Replace the initial input dims with the updated values</span></span>
<span id="cb11-59">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-60">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-61"></span>
<span id="cb11-62">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb11-63">    <span class="cf" style="color: #003B4F;">return</span> return_val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-64"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>The method to generate object proposals is nearly identical to the Python implementation from part 1.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">/// Generate object detection proposals from the raw model output</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"out_ptr"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to the output tensor data</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb12-5"><span class="dt" style="color: #AD0000;">void</span> GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_ptr<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> proposal_length<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;">// Remove the proposals for the previous model output</span></span>
<span id="cb12-8">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-9"></span>
<span id="cb12-10">    <span class="co" style="color: #5E5E5E;">// Obtain the number of classes the model was trained to detect</span></span>
<span id="cb12-11">    <span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-12"></span>
<span id="cb12-13">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> anchor_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> anchor_idx <span class="op" style="color: #5E5E5E;">&lt;</span> grid_strides<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> anchor_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-15">        <span class="co" style="color: #5E5E5E;">// Get the current grid and stride values</span></span>
<span id="cb12-16">        <span class="dt" style="color: #AD0000;">int</span> grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-17">        <span class="dt" style="color: #AD0000;">int</span> grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-18">        <span class="dt" style="color: #AD0000;">int</span> stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-19"></span>
<span id="cb12-20">        <span class="co" style="color: #5E5E5E;">// Get the starting index for the current proposal</span></span>
<span id="cb12-21">        <span class="dt" style="color: #AD0000;">int</span> start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">        <span class="co" style="color: #5E5E5E;">// Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb12-24">        <span class="dt" style="color: #AD0000;">float</span> x_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid0<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-25">        <span class="dt" style="color: #AD0000;">float</span> y_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid1<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-26"></span>
<span id="cb12-27">        <span class="co" style="color: #5E5E5E;">// Get the dimensions for the predicted bounding box</span></span>
<span id="cb12-28">        <span class="dt" style="color: #AD0000;">float</span> w <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-29">        <span class="dt" style="color: #AD0000;">float</span> h <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-30"></span>
<span id="cb12-31">        <span class="co" style="color: #5E5E5E;">// Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb12-32">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-33">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-34"></span>
<span id="cb12-35">        <span class="co" style="color: #5E5E5E;">// Get the confidence score that an object is present</span></span>
<span id="cb12-36">        <span class="dt" style="color: #AD0000;">float</span> box_objectness <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb12-37"></span>
<span id="cb12-38">        <span class="co" style="color: #5E5E5E;">// Initialize object struct with bounding box information</span></span>
<span id="cb12-39">        Object obj <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> x0<span class="op" style="color: #5E5E5E;">,</span> y0<span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb12-40"></span>
<span id="cb12-41">        <span class="co" style="color: #5E5E5E;">// Find the object class with the highest confidence score</span></span>
<span id="cb12-42">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> class_idx <span class="op" style="color: #5E5E5E;">&lt;</span> num_classes<span class="op" style="color: #5E5E5E;">;</span> class_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb12-43">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-44">            <span class="co" style="color: #5E5E5E;">// Get the confidence score for the current object class</span></span>
<span id="cb12-45">            <span class="dt" style="color: #AD0000;">float</span> box_cls_score <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb12-46">            <span class="co" style="color: #5E5E5E;">// Calculate the final confidence score for the object proposal</span></span>
<span id="cb12-47">            <span class="dt" style="color: #AD0000;">float</span> box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-48"></span>
<span id="cb12-49">            <span class="co" style="color: #5E5E5E;">// Check for the highest confidence score</span></span>
<span id="cb12-50">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-51">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-52">                obj<span class="op" style="color: #5E5E5E;">.</span>label <span class="op" style="color: #5E5E5E;">=</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-53">                obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">=</span> box_prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-54">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-55">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-56"></span>
<span id="cb12-57">        <span class="co" style="color: #5E5E5E;">// Only add object proposals with high enough confidence scores</span></span>
<span id="cb12-58">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> bbox_conf_thresh<span class="op" style="color: #5E5E5E;">)</span> proposals<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-59">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-60"></span>
<span id="cb12-61">    <span class="co" style="color: #5E5E5E;">// Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb12-62">    <span class="bu" style="color: null;">std::</span>sort<span class="op" style="color: #5E5E5E;">(</span>proposals<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> proposals<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">(),</span> <span class="op" style="color: #5E5E5E;">[](</span>Object<span class="op" style="color: #5E5E5E;">&amp;</span> a<span class="op" style="color: #5E5E5E;">,</span> Object<span class="op" style="color: #5E5E5E;">&amp;</span> b<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">bool</span></span>
<span id="cb12-63">              <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> a<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> b<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb12-64"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<p>The C++ API for OpenCV has built-in functionality to perform comparison operations between rectangles. Therefore, we don’t need to define helper functions to calculate the intersection and union areas of two bounding boxes. Otherwise, the method to sort bounding box proposals using Non-Maximum Suppression is almost identical to the Python implementation from part 1.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Filter through a sorted list of object proposals using Non-maximum suppression</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="dt" style="color: #AD0000;">void</span> NmsSortedBboxes<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;">// Remove the picked proposals for the previous model outptut</span></span>
<span id="cb13-7">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-8"></span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;">// Iterate through the object proposals</span></span>
<span id="cb13-10">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposals<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb13-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-12">        Object<span class="op" style="color: #5E5E5E;">&amp;</span> a <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb13-13"></span>
<span id="cb13-14">        <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb13-15">        cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_a <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>a<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-16"></span>
<span id="cb13-17">        <span class="dt" style="color: #AD0000;">bool</span> keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-18"></span>
<span id="cb13-19">        <span class="co" style="color: #5E5E5E;">// Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb13-20">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">:</span> proposal_indices<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb13-21">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-22">            Object<span class="op" style="color: #5E5E5E;">&amp;</span> b <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb13-23"></span>
<span id="cb13-24">            <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb13-25">            cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_b <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>b<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-26"></span>
<span id="cb13-27">            <span class="co" style="color: #5E5E5E;">// Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb13-28">            <span class="dt" style="color: #AD0000;">float</span> inter_area <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>rect_a <span class="op" style="color: #5E5E5E;">&amp;</span> rect_b<span class="op" style="color: #5E5E5E;">).</span>area<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-29">            <span class="co" style="color: #5E5E5E;">// Calculate the union area of both bounding boxes</span></span>
<span id="cb13-30">            <span class="dt" style="color: #AD0000;">float</span> union_area <span class="op" style="color: #5E5E5E;">=</span> rect_a<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">+</span> rect_b<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> inter_area<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-31">            <span class="co" style="color: #5E5E5E;">// Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb13-32">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb13-33">                keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-34">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb13-35"></span>
<span id="cb13-36">        <span class="co" style="color: #5E5E5E;">// Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb13-37">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>keep<span class="op" style="color: #5E5E5E;">)</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-38">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb13-39"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1-byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>We don’t need to normalize the input image since the IR model does it internally.</p>
<p>After processing the model output, we’ll return the final number of detected objects to Unity so we can initialize an array of objects.</p>
<ul>
<li><a href="https://docs.opencv.org/3.4/d3/d63/classcv_1_1Mat.html">cv::Mat</a>: n-dimensional dense array class<br>
</li>
<li><a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv::cvtColor()</a>: Converts an image from one color space to another</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1abcb7facc9f7c4b9226a1fd343e56958d">ov::InferRequest::infer()</a>: Infers specified input in synchronous mode</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a9bf7bf67c58858bda86ae01e83cd14c1">ov::InferRequest::get_output_tensor()</a>: Gets an output tensor for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Perform inference with the provided texture data</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_data"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image data from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The final number of detected objects</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb14-6">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> image_data<span class="op" style="color: #5E5E5E;">)</span> </span>
<span id="cb14-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-8"></span>
<span id="cb14-9">    <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb14-10">    cv<span class="op" style="color: #5E5E5E;">::</span>Mat input_image <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>img_h<span class="op" style="color: #5E5E5E;">,</span> img_w<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> image_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb14-13">    cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-14"></span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;">// Resize the input image</span></span>
<span id="cb14-16">    cv<span class="op" style="color: #5E5E5E;">::</span>resize<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>Size<span class="op" style="color: #5E5E5E;">(</span>input_w<span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb14-17"></span>
<span id="cb14-18">    <span class="co" style="color: #5E5E5E;">// Iterate over each pixel in image</span></span>
<span id="cb14-19">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">&lt;</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-21">        input_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">*</span>n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p<span class="op" style="color: #5E5E5E;">*</span>n_channels <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-22">        input_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">*</span>n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p<span class="op" style="color: #5E5E5E;">*</span>n_channels <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-23">        input_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p<span class="op" style="color: #5E5E5E;">*</span>n_channels <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-25"></span>
<span id="cb14-26">    <span class="co" style="color: #5E5E5E;">// Perform inference</span></span>
<span id="cb14-27">    infer_request<span class="op" style="color: #5E5E5E;">.</span>infer<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-28"></span>
<span id="cb14-29">    <span class="co" style="color: #5E5E5E;">// Generate new proposals for the current model output</span></span>
<span id="cb14-30">    GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> output_tensor<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb14-31"></span>
<span id="cb14-32">    <span class="co" style="color: #5E5E5E;">// Pick detected objects to keep using Non-maximum Suppression</span></span>
<span id="cb14-33">    NmsSortedBboxes<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-34"></span>
<span id="cb14-35">    <span class="co" style="color: #5E5E5E;">// return the final number of detected objects</span></span>
<span id="cb14-36">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-37"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to populate an array of objects from Unity</strong></p>
<p>Next, we’ll define a function to populate an array of objects from Unity. We call this function after initializing the list based on the current number of detected objects. We’ll also scale the bounding box information from the input dimensions to the source image resolution.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">/// Fill the provided array with the detected objects</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"objects"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to a list of objects from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb15-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> PopulateObjectsArray<span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> objects<span class="op" style="color: #5E5E5E;">)</span> </span>
<span id="cb15-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-7"></span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb15-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-10">        Object obj <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>proposal_indices<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb15-11"></span>
<span id="cb15-12">        <span class="co" style="color: #5E5E5E;">// Adjust offset to source image resolution and clamp the bounding box</span></span>
<span id="cb15-13">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>x0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>x0 <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-14">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>y0 <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-15">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>width <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>width <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-16">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>height <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>height <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-17"></span>
<span id="cb15-18">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>label <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-19">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>prob <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to reset the vectors when the Unity application exits</strong></p>
<p>This last function will free the memory allocated by the vectors. We’ll call it when the Unity application shuts down.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;">/// Reset vectors</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb16-4">DLLExport <span class="dt" style="color: #AD0000;">void</span> FreeResources<span class="op" style="color: #5E5E5E;">()</span> </span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-6">    available_devices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-7">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-8">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-9">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click <code>Build Solution</code>. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder and the plugins.xml file to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference with a YOLOX model using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. In part 3, we build a project in <a href="https://unity.com/">Unity</a> that uses this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>openvino</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/index.html</guid>
  <pubDate>Tue, 09 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-openvino-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</title>
  <link>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Setup Conda Environment</li>
<li>Import Dependencies</li>
<li>Configure Kaggle API</li>
<li>Download the Dataset</li>
<li>Inspect the Dataset</li>
<li>Create Dataset Parser</li>
<li>Define DataLoader Objects</li>
<li>Finetune the Model</li>
<li>Prepare Model for Export</li>
<li>Export the Model</li>
<li>Verify OpenVINO Inference</li>
<li>Define Post-processing Steps</li>
<li>Generate Colormap</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a YOLOX model using IceVision and export it to OpenVINO.</li>
<li><a href="../part-2/">Part 2</a>: Create a dynamic link library (DLL) file in Visual Studio to perform object detection with a YOLOX model using OpenVINO.</li>
<li><a href="../part-3/">Part 3</a>: Perform object detection in a Unity project with OpenVINO.</li>
<li><a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial series, we will walk through training an object detector using the <a href="https://airctic.com/0.12.0/">IceVision</a> library. We will then implement the trained model in a <a href="https://unity.com/">Unity</a> game engine project using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>, an open-source toolkit for optimizing model inference.</p>
<strong>Unity Demo</strong>
<center>
<iframe src="./videos/HaGRID-demo.mp4" width="100%" max-width="100%" height="480">
</iframe>
</center>
<p>The tutorial uses a downscaled subsample of <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset). The dataset contains annotated sample images for 18 distinct hand gestures and an additional <code>no_gesture</code> class to account for idle hands.</p>
<div>
<details>
<summary>
<strong>Reference Images</strong>
</summary>
<br>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table>
<thead>
<tr>
<th>
Class
</th>
<th>
Image
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
call
</td>
<td>
<img alt="call" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/call.jpg">
</td>
</tr>
<tr>
<td>
dislike
</td>
<td>
<img alt="dislike" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/dislike.jpg">
</td>
</tr>
<tr>
<td>
fist
</td>
<td>
<img alt=" fist" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/fist.jpg">
</td>
</tr>
<tr>
<td>
four
</td>
<td>
<img alt="four" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/four.jpg">
</td>
</tr>
<tr>
<td>
like
</td>
<td>
<img alt=" like" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/like.jpg">
</td>
</tr>
<tr>
<td>
mute
</td>
<td>
<img alt=" mute" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/mute.jpg">
</td>
</tr>
<tr>
<td>
ok
</td>
<td>
<img alt=" ok" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/ok.jpg">
</td>
</tr>
<tr>
<td>
one
</td>
<td>
<img alt=" one" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/one.jpg">
</td>
</tr>
<tr>
<td>
palm
</td>
<td>
<img alt=" palm" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/palm.jpg">
</td>
</tr>
<tr>
<td>
peace
</td>
<td>
<img alt="peace" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/peace.jpg">
</td>
</tr>
<tr>
<td>
peace_inverted
</td>
<td>
<img alt="peace_inverted" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/peace_inverted.jpg">
</td>
</tr>
<tr>
<td>
rock
</td>
<td>
<img alt="rock" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/rock.jpg">
</td>
</tr>
<tr>
<td>
stop
</td>
<td>
<img alt="stop" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stop.jpg">
</td>
</tr>
<tr>
<td>
stop_inverted
</td>
<td>
<img alt="stop_inverted" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stop_inverted.jpg">
</td>
</tr>
<tr>
<td>
three
</td>
<td>
<img alt="three" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/three.jpg">
</td>
</tr>
<tr>
<td>
three2
</td>
<td>
<img alt="three2" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/three2.jpg">
</td>
</tr>
<tr>
<td>
two_up
</td>
<td>
<img alt=" two_up" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/two_up.jpg">
</td>
</tr>
<tr>
<td>
two_up_inverted
</td>
<td>
<img alt="two_up_inverted" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/two_up_inverted.jpg">
</td>
</tr>
</tbody>

</table>
</div>
</details>
</div>
<p>One could use a model trained on this dataset to map hand gestures and locations to user input in Unity.</p>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Part 1 covers finetuning a <a href="https://github.com/Megvii-BaseDetection/YOLOX">YOLOX</a> Tiny model using the IceVision library and exporting it to OpenVINO’s <a href="https://docs.openvino.ai/latest/openvino_docs_MO_DG_IR_and_opsets.html">Intermediate Representation</a> (IR) format. The training code is available in the Jupyter notebook linked below, and links for training on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a> are also available below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial/blob/main/notebooks/Icevision-YOLOX-to-OpenVINO-Tutorial-HaGRID.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/icevision-openvino-unity-tutorial/blob/main/notebooks/Icevision-YOLOX-to-OpenVINO-Tutorial-HaGRID-Colab.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/icevision-openvino-unity-tutorial/blob/main/notebooks/Icevision-YOLOX-to-OpenVINO-Tutorial-HaGRID-Kaggle.ipynb">Open in Kaggle</a></td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Note:</strong> The free GPU tier for Google Colab takes approximately 11 minutes per epoch, while the free GPU tier for Kaggle Notebooks takes around 15 minutes per epoch.</p>
</blockquote>
</section>
<section id="setup-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="setup-conda-environment">Setup Conda Environment</h2>
<p>The IceVision library builds upon specific versions of libraries like <a href="https://docs.fast.ai/">fastai</a> and <a href="https://mmdetection.readthedocs.io/en/latest/">mmdetection</a>, and the cumulative dependency requirements mean it is best to use a dedicated <a href="https://docs.python.org/3/tutorial/venv.html">virtual environment</a>. Below are the steps to create a virtual environment using <a href="https://docs.conda.io/en/latest/">Conda</a>. Be sure to execute each command in the provided order.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> IceVision currently only supports Linux/macOS. Try using <a href="https://docs.microsoft.com/en-us/windows/wsl/install">WSL</a> (Windows Subsystem for Linux) if training locally on Windows.</p>
</blockquote>
<p><strong>Install CUDA Toolkit</strong></p>
<p>You might need to install the CUDA Toolkit on your system if you plan to run the training code locally. CUDA requires an Nvidia GPU. Version 11.1.0 of the toolkit is available at the link below. Both Google Colab and Kaggle Notebooks already have CUDA installed.</p>
<ul>
<li><a href="https://developer.nvidia.com/cuda-11.1.0-download-archive">CUDA Toolkit 11.1.0</a></li>
<li><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a></li>
</ul>
<p><strong>Conda environment setup steps</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">--name</span> icevision python==3.8</span>
<span id="cb1-2"><span class="ex" style="color: null;">conda</span> activate icevision</span>
<span id="cb1-3"><span class="ex" style="color: null;">pip</span> install torch==1.10.0+cu111 torchvision==0.11.1+cu111 <span class="at" style="color: #657422;">-f</span> https://download.pytorch.org/whl/torch_stable.html</span>
<span id="cb1-4"><span class="ex" style="color: null;">pip</span> install mmcv-full==1.3.17 <span class="at" style="color: #657422;">-f</span> https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html</span>
<span id="cb1-5"><span class="ex" style="color: null;">pip</span> install mmdet==2.17.0</span>
<span id="cb1-6"><span class="ex" style="color: null;">pip</span> install icevision==0.11.0</span>
<span id="cb1-7"><span class="ex" style="color: null;">pip</span> install icedata==0.5.1</span>
<span id="cb1-8"><span class="ex" style="color: null;">pip</span> install setuptools==59.5.0</span>
<span id="cb1-9"><span class="ex" style="color: null;">pip</span> install openvino-dev</span>
<span id="cb1-10"><span class="ex" style="color: null;">pip</span> install distinctipy</span>
<span id="cb1-11"><span class="ex" style="color: null;">pip</span> install jupyter</span>
<span id="cb1-12"><span class="ex" style="color: null;">pip</span> install onnxruntime</span>
<span id="cb1-13"><span class="ex" style="color: null;">pip</span> install onnx-simplifier</span>
<span id="cb1-14"><span class="ex" style="color: null;">pip</span> install kaggle</span></code></pre></div>
<p>The <a href="https://pypi.org/project/mmdet/"><code>mmdet</code></a> package contains the pretrained YOLOX Tiny model we will finetune with IceVision. The package depends on the <a href="https://mmcv.readthedocs.io/en/latest/"><code>mmcv-full</code></a> library, which is picky about the CUDA version used by <a href="https://pytorch.org/">PyTorch</a>. We need to install the PyTorch version with the exact CUDA version expected by <code>mmcv-full</code>.</p>
<p>The <a href="https://pypi.org/project/icevision/"><code>icevision</code></a> package provides the functionality for data curation, data transforms, and training loops we’ll use to train the model. The <a href="https://airctic.github.io/icedata/"><code>icedata</code></a> package provides the functionality we’ll use to create a custom parser to read the dataset.</p>
<p>The <a href="https://pypi.org/project/openvino-dev/"><code>openvino-dev</code></a> pip package contains the model-conversion script to convert trained models from <a href="https://onnx.ai/">ONNX</a> to OpenVINO’s IR format.</p>
<p>We’ll use the <a href="https://pypi.org/project/distinctipy/"><code>distinctipy</code></a> pip package to generate a visually distinct colormap for drawing bounding boxes on images.</p>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/">onnx-simplifier</a> package to tidy up the exported model. This step is entirely optional.</p>
<p><strong>Original ONNX model (<a href="https://netron.app/">Netron</a>)</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/onnx-model.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Simplified ONNX model (<a href="https://netron.app/">Netron</a>)</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/onnx-model-simplified.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Colab and Kaggle Setup Requirements</strong></p>
<p>When running the training code on Google Colab and Kaggle Notebooks, we need to uninstall several packages before installing IceVision and its dependencies to avoid conflicts. The platform-specific setup steps are at the top of the notebooks linked above.</p>
</section>
<section id="import-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="import-dependencies">Import Dependencies</h2>
<p>IceVision will download some additional resources the first time we import the library.</p>
<p><strong>Import IceVision library</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> icevision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p><strong>Import and configure Pandas</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb3-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="configure-kaggle-api" class="level2">
<h2 class="anchored" data-anchor-id="configure-kaggle-api">Configure Kaggle API</h2>
<p>The Kaggle API tool requires an API Key for a Kaggle account. Sign in or create a Kaggle account using the link below, then click the <code>Create New API Token</code> button.</p>
<ul>
<li><strong>Kaggle Account Settings:</strong> <a href="https://www.kaggle.com/me/account">https://www.kaggle.com/me/account</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/kaggle-create-new-api-token.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Enter Kaggle username and API token</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">creds <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'{"username":"","key":""}'</span></span></code></pre></div>
<p><strong>Save Kaggle credentials if none are present</strong> * <strong>Source:</strong> <a href="https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb">https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb</a></p>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">cred_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># Save API key to a json file if it does not already exist</span></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> cred_path.exists():</span>
<span id="cb5-4">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-5">    cred_path.write_text(creds)</span>
<span id="cb5-6">    cred_path.chmod(<span class="bn" style="color: #AD0000;">0o600</span>)</span></code></pre></div>
<p><strong>Import Kaggle API</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span></code></pre></div>
</section>
<section id="download-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-the-dataset">Download the Dataset</h2>
<p>Now that we have our Kaggle credentials set, we need to define the dataset and where to store it. I made two versions of the dataset available on Kaggle. One contains approximately thirty thousand training samples, and the other has over one hundred and twenty thousand.</p>
<ul>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-sample-30k-384p">HaGRID Sample 30k 384p</a></li>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-sample-120k-384p">HaGRID Sample 120k 384p</a></li>
</ul>
<p><strong>Define path to dataset</strong></p>
<p>We’ll use the default archive and data folders for the fastai library (installed with IceVision) to store the compressed and uncompressed datasets.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> fastai.data.external <span class="im" style="color: #00769E;">import</span> URLs</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'hagrid-sample-30k-384p'</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># dataset_name = 'hagrid-sample-120k-384p'</span></span>
<span id="cb8-3">kaggle_dataset <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'innominate817/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb8-4">archive_dir <span class="op" style="color: #5E5E5E;">=</span> URLs.path()</span>
<span id="cb8-5">dataset_dir <span class="op" style="color: #5E5E5E;">=</span> archive_dir<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'../data'</span></span>
<span id="cb8-6">archive_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.zip'</span>)</span>
<span id="cb8-7">dataset_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Define method to extract the dataset from an archive file</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> file_extract(fname, dest<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;">"Extract `fname` to `dest` using `tarfile` or `zipfile`."</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;">if</span> dest <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: dest <span class="op" style="color: #5E5E5E;">=</span> Path(fname).parent</span>
<span id="cb9-4">    fname <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(fname)</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;">if</span>   fname.endswith(<span class="st" style="color: #20794D;">'gz'</span>):  tarfile.<span class="bu" style="color: null;">open</span>(fname, <span class="st" style="color: #20794D;">'r:gz'</span>).extractall(dest)</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;">elif</span> fname.endswith(<span class="st" style="color: #20794D;">'zip'</span>): zipfile.ZipFile(fname     ).extractall(dest)</span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;">else</span>: <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="ss" style="color: #20794D;">f'Unrecognized archive: </span><span class="sc" style="color: #5E5E5E;">{</span>fname<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Download the dataset if it is not present</strong></p>
<p>The archive file for the 30K dataset is 4GB, so we don’t want to download it more than necessary.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> archive_path.exists():</span>
<span id="cb10-2">    api.dataset_download_cli(kaggle_dataset, path<span class="op" style="color: #5E5E5E;">=</span>archive_dir)</span>
<span id="cb10-3">    file_extract(fname<span class="op" style="color: #5E5E5E;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;">=</span>dataset_dir)</span></code></pre></div>
</section>
<section id="inspect-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-the-dataset">Inspect the Dataset</h2>
<p>We can start inspecting the dataset once it finishes downloading.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dir_content <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(dataset_path.ls())</span>
<span id="cb11-2">annotation_dir <span class="op" style="color: #5E5E5E;">=</span> dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ann_train_val'</span></span>
<span id="cb11-3">dir_content.remove(annotation_dir)</span>
<span id="cb11-4">img_dir <span class="op" style="color: #5E5E5E;">=</span> dir_content[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb11-5">annotation_dir, img_dir</span></code></pre></div>
<pre class="text"><code>(Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val'),
 Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k'))</code></pre>
<p><strong>Inspect the annotation folder</strong></p>
<p>The bounding box annotations for each image are stored in JSON files organized by object class. The files contain annotations for all 552,992 images from the full HaGRID dataset.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pd.DataFrame([<span class="bu" style="color: null;">file</span>.name <span class="cf" style="color: #003B4F;">for</span> <span class="bu" style="color: null;">file</span> <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(annotation_dir.ls())])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like.json
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute.json
</td>
</tr>
<tr>
<th>
6
</th>
<td>
ok.json
</td>
</tr>
<tr>
<th>
7
</th>
<td>
one.json
</td>
</tr>
<tr>
<th>
8
</th>
<td>
palm.json
</td>
</tr>
<tr>
<th>
9
</th>
<td>
peace.json
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace_inverted.json
</td>
</tr>
<tr>
<th>
11
</th>
<td>
rock.json
</td>
</tr>
<tr>
<th>
12
</th>
<td>
stop.json
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop_inverted.json
</td>
</tr>
<tr>
<th>
14
</th>
<td>
three.json
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three2.json
</td>
</tr>
<tr>
<th>
16
</th>
<td>
two_up.json
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up_inverted.json
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the image folder</strong></p>
<p>The sample images are stored in folders separated by object class.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pd.DataFrame([folder.name <span class="cf" style="color: #003B4F;">for</span> folder <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(img_dir.ls())])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
train_val_call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
train_val_dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
train_val_fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
train_val_four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
train_val_like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
train_val_mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
train_val_ok
</td>
</tr>
<tr>
<th>
7
</th>
<td>
train_val_one
</td>
</tr>
<tr>
<th>
8
</th>
<td>
train_val_palm
</td>
</tr>
<tr>
<th>
9
</th>
<td>
train_val_peace
</td>
</tr>
<tr>
<th>
10
</th>
<td>
train_val_peace_inverted
</td>
</tr>
<tr>
<th>
11
</th>
<td>
train_val_rock
</td>
</tr>
<tr>
<th>
12
</th>
<td>
train_val_stop
</td>
</tr>
<tr>
<th>
13
</th>
<td>
train_val_stop_inverted
</td>
</tr>
<tr>
<th>
14
</th>
<td>
train_val_three
</td>
</tr>
<tr>
<th>
15
</th>
<td>
train_val_three2
</td>
</tr>
<tr>
<th>
16
</th>
<td>
train_val_two_up
</td>
</tr>
<tr>
<th>
17
</th>
<td>
train_val_two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get image file paths</strong></p>
<p>We can use the <code>get_image_file</code> method to get the full paths for every image file in the image directory.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(img_dir)</span>
<span id="cb15-2"><span class="bu" style="color: null;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>31833</code></pre>
<p><strong>Inspect files</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pd.DataFrame([files[<span class="dv" style="color: #AD0000;">0</span>], files[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00005c9c-3548-4a8f-9d0b-2dd4aff37fc9.jpg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_two_up_inverted/fff4d2f6-9890-4225-8d9c-73a02ba8f9ac.jpg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect one of the training images</strong></p>
<p>The sample images are all downscaled to 384p.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> PIL</span>
<span id="cb18-2">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(files[<span class="dv" style="color: #AD0000;">0</span>]).convert(<span class="st" style="color: #20794D;">'RGB'</span>)</span>
<span id="cb18-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;">{</span>img<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb18-4">img</span></code></pre></div>
<pre class="text"><code>Image Dims: (512, 384)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_28_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create a dictionary that maps image names to file paths</strong></p>
<p>Let’s create a dictionary to quickly obtain full image file paths, given a file name. We’ll need this later.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">img_dict <span class="op" style="color: #5E5E5E;">=</span> {<span class="bu" style="color: null;">file</span>.name.split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>] : <span class="bu" style="color: null;">file</span> <span class="cf" style="color: #003B4F;">for</span> <span class="bu" style="color: null;">file</span> <span class="kw" style="color: #003B4F;">in</span> files}</span>
<span id="cb20-2"><span class="bu" style="color: null;">list</span>(img_dict.items())[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>('00005c9c-3548-4a8f-9d0b-2dd4aff37fc9',
 Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00005c9c-3548-4a8f-9d0b-2dd4aff37fc9.jpg'))</code></pre>
<p><strong>Get list of annotation file paths</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb22-2"><span class="im" style="color: #00769E;">from</span> glob <span class="im" style="color: #00769E;">import</span> glob</span></code></pre></div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">annotation_paths <span class="op" style="color: #5E5E5E;">=</span> glob(os.path.join(annotation_dir, <span class="st" style="color: #20794D;">"*.json"</span>))</span>
<span id="cb23-2">annotation_paths</span></code></pre></div>
<pre class="text"><code>['/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/fist.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/one.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/rock.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/stop_inverted.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/like.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/two_up.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/two_up_inverted.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/peace.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/stop.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/four.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/dislike.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/palm.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/call.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/three2.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/ok.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/mute.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/three.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/peace_inverted.json']</code></pre>
<p><strong>Create annotations dataframe</strong></p>
<p>Next, we’ll read all the image annotations into a single Pandas DataFrame and filter out annotations for images not present in the current subsample.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">cls_dataframes <span class="op" style="color: #5E5E5E;">=</span> (pd.read_json(f).transpose() <span class="cf" style="color: #003B4F;">for</span> f <span class="kw" style="color: #003B4F;">in</span> annotation_paths)</span>
<span id="cb25-2">annotation_df <span class="op" style="color: #5E5E5E;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb25-3">annotation_df <span class="op" style="color: #5E5E5E;">=</span> annotation_df.loc[<span class="bu" style="color: null;">list</span>(img_dict.keys())]</span>
<span id="cb25-4">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
bboxes
</th>
<th>
labels
</th>
<th>
leading_hand
</th>
<th>
leading_conf
</th>
<th>
user_id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
<td>
[[0.23925175, 0.28595301, 0.25055143, 0.20777627]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
5a389ffe1bed6660a59f4586c7d8fe2770785e5bf79b09334aa951f6f119c024
</td>
</tr>
<tr>
<th>
0020a3db-82d8-47aa-8642-2715d4744db5
</th>
<td>
[[0.5801012999999999, 0.53265105, 0.14562138, 0.12286348]]
</td>
<td>
[call]
</td>
<td>
left
</td>
<td>
1
</td>
<td>
0d6da2c87ef8eabeda2dcfee2dc5b5035e878137a91b149c754a59804f3dce32
</td>
</tr>
<tr>
<th>
004ac93f-0f7c-49a4-aadc-737e0ad4273c
</th>
<td>
[[0.46294793, 0.26419774, 0.13834939000000002, 0.10784189]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
d50f05d9d6ca9771938cec766c3d621ff863612f9665b0e4d991c086ec04acc9
</td>
</tr>
<tr>
<th>
006cac69-d3f0-47f9-aac9-38702d038ef1
</th>
<td>
[[0.38799208, 0.44643898, 0.27068787, 0.18277858]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
998f6ad69140b3a59cb9823ba680cce62bf2ba678058c2fc497dbbb8b22b29fe
</td>
</tr>
<tr>
<th>
00973fac-440e-4a56-b60c-2a06d5fb155d
</th>
<td>
[[0.40980118, 0.38144198, 0.08338464, 0.06229785], [0.6122035100000001, 0.6780825500000001, 0.04700606, 0.07640522]]
</td>
<td>
[call, no_gesture]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
4bb3ee1748be58e05bd1193939735e57bb3c0ca59a7ee38901744d6b9e94632e
</td>
</tr>
</tbody>

</table>
</div>
<p>Notice that one of the samples contains a <code>no_gesture</code> label to identify an idle hand in the image.</p>
<p><strong>Inspect annotation data for sample image</strong></p>
<p>We can retrieve the annotation data for a specific image file using its name.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">file_id <span class="op" style="color: #5E5E5E;">=</span> files[<span class="dv" style="color: #AD0000;">0</span>].name.split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb26-2">file_id</span></code></pre></div>
<pre class="text"><code>'00005c9c-3548-4a8f-9d0b-2dd4aff37fc9'</code></pre>
<p>The image file names are the index values for the annotation DataFrame.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
bboxes
</th>
<td>
[[0.23925175, 0.28595301, 0.25055143, 0.20777627]]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[call]
</td>
</tr>
<tr>
<th>
leading_hand
</th>
<td>
right
</td>
</tr>
<tr>
<th>
leading_conf
</th>
<td>
1
</td>
</tr>
<tr>
<th>
user_id
</th>
<td>
5a389ffe1bed6660a59f4586c7d8fe2770785e5bf79b09334aa951f6f119c024
</td>
</tr>
</tbody>

</table>
</div>
<p>The <code>bboxes</code> entry contains the <code>[top-left-X-position, top-left-Y-position, width, height]</code> information for any bounding boxes. The values are scaled based on the image dimensions. We multiply <code>top-left-X-position</code> and <code>width</code> values by the image width and multiply <code>top-left-Y-position</code> and <code>height</code> values by the image height to obtain the actual values.</p>
<p><strong>Download font file</strong></p>
<p>We need a font file to annotate the images with class labels. We can download one from <a href="https://fonts.google.com/">Google Fonts</a>.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">font_file <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb29-2"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> os.path.exists(font_file): </span>
<span id="cb29-3">    <span class="op" style="color: #5E5E5E;">!</span>wget https:<span class="op" style="color: #5E5E5E;">//</span>fonts.gstatic.com<span class="op" style="color: #5E5E5E;">/</span>s<span class="op" style="color: #5E5E5E;">/</span>roboto<span class="op" style="color: #5E5E5E;">/</span>v30<span class="op" style="color: #5E5E5E;">/</span>$font_file</span></code></pre></div>
<p><strong>Annotate sample image</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> ImageDraw</span></code></pre></div>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">width, height <span class="op" style="color: #5E5E5E;">=</span> img.size</span>
<span id="cb31-2">annotated_img <span class="op" style="color: #5E5E5E;">=</span> img.copy()</span>
<span id="cb31-3">draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb31-4">fnt_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb31-5">annotation <span class="op" style="color: #5E5E5E;">=</span> annotation_df.loc[file_id]</span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(annotation[<span class="st" style="color: #20794D;">'labels'</span>])):</span>
<span id="cb31-8">    x, y, w, h <span class="op" style="color: #5E5E5E;">=</span> annotation[<span class="st" style="color: #20794D;">'bboxes'</span>][i]</span>
<span id="cb31-9">    x <span class="op" style="color: #5E5E5E;">*=</span> width</span>
<span id="cb31-10">    y <span class="op" style="color: #5E5E5E;">*=</span> height</span>
<span id="cb31-11">    w <span class="op" style="color: #5E5E5E;">*=</span> width</span>
<span id="cb31-12">    h <span class="op" style="color: #5E5E5E;">*=</span> height</span>
<span id="cb31-13">    shape <span class="op" style="color: #5E5E5E;">=</span> (x, y, x<span class="op" style="color: #5E5E5E;">+</span>w, y<span class="op" style="color: #5E5E5E;">+</span>h)</span>
<span id="cb31-14">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb31-15">    fnt <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageFont.truetype(font_file, fnt_size)</span>
<span id="cb31-16">    draw.multiline_text((x, y<span class="op" style="color: #5E5E5E;">-</span>fnt_size<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>), <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>annotation[<span class="st" style="color: #20794D;">'labels'</span>][i]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, font<span class="op" style="color: #5E5E5E;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb31-17"><span class="bu" style="color: null;">print</span>(annotated_img.size) </span>
<span id="cb31-18">annotated_img</span></code></pre></div>
<pre class="text"><code>(384, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_43_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create a class map</strong></p>
<p>We need to provide IceVision with a class map that maps index values to unique class names.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">labels <span class="op" style="color: #5E5E5E;">=</span> annotation_df[<span class="st" style="color: #20794D;">'labels'</span>].explode().unique().tolist()</span>
<span id="cb33-2">labels</span></code></pre></div>
<pre class="text"><code>['call',
 'no_gesture',
 'dislike',
 'fist',
 'four',
 'like',
 'mute',
 'ok',
 'one',
 'palm',
 'peace',
 'peace_inverted',
 'rock',
 'stop',
 'stop_inverted',
 'three',
 'three2',
 'two_up',
 'two_up_inverted']</code></pre>
<p>IceVision adds an additional <code>background</code> class at index <code>0</code>.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">class_map <span class="op" style="color: #5E5E5E;">=</span> ClassMap(labels)</span>
<span id="cb35-2">class_map</span></code></pre></div>
<pre class="text"><code>&lt;ClassMap: {'background': 0, 'call': 1, 'no_gesture': 2, 'dislike': 3, 'fist': 4, 'four': 5, 'like': 6, 'mute': 7, 'ok': 8, 'one': 9, 'palm': 10, 'peace': 11, 'peace_inverted': 12, 'rock': 13, 'stop': 14, 'stop_inverted': 15, 'three': 16, 'three2': 17, 'two_up': 18, 'two_up_inverted': 19}&gt;</code></pre>
<blockquote class="blockquote">
<p><strong>Note:</strong> The <code>background</code> class is not included in the final model.</p>
</blockquote>
</section>
<section id="create-dataset-parser" class="level2">
<h2 class="anchored" data-anchor-id="create-dataset-parser">Create Dataset Parser</h2>
<p>Now we can create a custom <code>Parser</code> class that tells IceVision how to read the dataset.</p>
<p><strong>View template for an object detection record</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">template_record <span class="op" style="color: #5E5E5E;">=</span> ObjectDetectionRecord()</span>
<span id="cb37-2">template_record</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Image size None
    - Record ID: None
    - Filepath: None
    - Img: None
detection: 
    - Class Map: None
    - Labels: []
    - BBoxes: []</code></pre>
<p><strong>View template for an object detection parser</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">Parser.generate_template(template_record)</span></code></pre></div>
<pre class="text"><code>class MyParser(Parser):
    def __init__(self, template_record):
        super().__init__(template_record=template_record)
    def __iter__(self) -&gt; Any:
    def __len__(self) -&gt; int:
    def record_id(self, o: Any) -&gt; Hashable:
    def parse_fields(self, o: Any, record: BaseRecord, is_new: bool):
        record.set_img_size(&lt;ImgSize&gt;)
        record.set_filepath(&lt;Union[str, Path]&gt;)
        record.detection.set_class_map(&lt;ClassMap&gt;)
        record.detection.add_labels(&lt;Sequence[Hashable]&gt;)
        record.detection.add_bboxes(&lt;Sequence[BBox]&gt;)</code></pre>
<p><strong>Define custom parser class</strong></p>
<p>As mentioned earlier, we need the dimensions for an image to scale the corresponding bounding box information. The dataset contains images with different resolutions, so we need to check for each image.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">class</span> HagridParser(Parser):</span>
<span id="cb41-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, template_record, annotations_df, img_dict, class_map):</span>
<span id="cb41-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(template_record<span class="op" style="color: #5E5E5E;">=</span>template_record)</span>
<span id="cb41-4">        <span class="va" style="color: #111111;">self</span>.img_dict <span class="op" style="color: #5E5E5E;">=</span> img_dict</span>
<span id="cb41-5">        <span class="va" style="color: #111111;">self</span>.df <span class="op" style="color: #5E5E5E;">=</span> annotations_df</span>
<span id="cb41-6">        <span class="va" style="color: #111111;">self</span>.class_map <span class="op" style="color: #5E5E5E;">=</span> class_map</span>
<span id="cb41-7">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__iter__</span>(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> Any:</span>
<span id="cb41-8">        <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.df.itertuples(): <span class="cf" style="color: #003B4F;">yield</span> o</span>
<span id="cb41-9">    </span>
<span id="cb41-10">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__len__</span>(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>: </span>
<span id="cb41-11">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.df)</span>
<span id="cb41-12">    </span>
<span id="cb41-13">    <span class="kw" style="color: #003B4F;">def</span> record_id(<span class="va" style="color: #111111;">self</span>, o: Any) <span class="op" style="color: #5E5E5E;">-&gt;</span> Hashable:</span>
<span id="cb41-14">        <span class="cf" style="color: #003B4F;">return</span> o.Index</span>
<span id="cb41-15">    </span>
<span id="cb41-16">    <span class="kw" style="color: #003B4F;">def</span> parse_fields(<span class="va" style="color: #111111;">self</span>, o: Any, record: BaseRecord, is_new: <span class="bu" style="color: null;">bool</span>):</span>
<span id="cb41-17">        </span>
<span id="cb41-18">        filepath <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img_dict[o.Index]</span>
<span id="cb41-19">        </span>
<span id="cb41-20">        width, height <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(filepath).convert(<span class="st" style="color: #20794D;">'RGB'</span>).size</span>
<span id="cb41-21">        </span>
<span id="cb41-22">        record.set_img_size(ImgSize(width<span class="op" style="color: #5E5E5E;">=</span>width, height<span class="op" style="color: #5E5E5E;">=</span>height))</span>
<span id="cb41-23">        record.set_filepath(filepath)</span>
<span id="cb41-24">        record.detection.set_class_map(<span class="va" style="color: #111111;">self</span>.class_map)</span>
<span id="cb41-25">        </span>
<span id="cb41-26">        record.detection.add_labels(o.labels)</span>
<span id="cb41-27">        bbox_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb41-28">        </span>
<span id="cb41-29">        <span class="cf" style="color: #003B4F;">for</span> i, label <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(o.labels):</span>
<span id="cb41-30">            x <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>width</span>
<span id="cb41-31">            y <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>height</span>
<span id="cb41-32">            w <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">2</span>]<span class="op" style="color: #5E5E5E;">*</span>width</span>
<span id="cb41-33">            h <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">3</span>]<span class="op" style="color: #5E5E5E;">*</span>height</span>
<span id="cb41-34">            bbox_list.append( BBox.from_xywh(x, y, w, h))</span>
<span id="cb41-35">        record.detection.add_bboxes(bbox_list)</span>
<span id="cb41-36">            </span></code></pre></div>
<p><strong>Create a custom parser object</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">parser <span class="op" style="color: #5E5E5E;">=</span> HagridParser(template_record, annotation_df, img_dict, class_map)</span>
<span id="cb42-2"><span class="bu" style="color: null;">len</span>(parser)</span></code></pre></div>
<pre class="text"><code>31833</code></pre>
<p><strong>Parse annotations to create records</strong></p>
<p>We’ll randomly split the samples into training and validation sets.</p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;"># Randomly split our data into train/valid</span></span>
<span id="cb44-2">data_splitter <span class="op" style="color: #5E5E5E;">=</span> RandomSplitter([<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.2</span>])</span>
<span id="cb44-3"></span>
<span id="cb44-4">train_records, valid_records <span class="op" style="color: #5E5E5E;">=</span> parser.parse(data_splitter, cache_filepath<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-cache.pkl'</span>)</span></code></pre></div>
<p><strong>Inspect training records</strong></p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">train_records[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Filepath: /mnt/980SSD_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_one/2507aacb-43d2-4114-91f1-008e3c7a181c.jpg
    - Img: None
    - Record ID: 2507aacb-43d2-4114-91f1-008e3c7a181c
    - Image size ImgSize(width=640, height=853)
detection: 
    - BBoxes: [&lt;BBox (xmin:153.0572608, ymin:197.40873228, xmax:213.5684992, ymax:320.45228481000004)&gt;, &lt;BBox (xmin:474.20276479999995, ymin:563.67557885, xmax:520.8937472, ymax:657.61167499)&gt;]
    - Class Map: &lt;ClassMap: {'background': 0, 'call': 1, 'no_gesture': 2, 'dislike': 3, 'fist': 4, 'four': 5, 'like': 6, 'mute': 7, 'ok': 8, 'one': 9, 'palm': 10, 'peace': 11, 'peace_inverted': 12, 'rock': 13, 'stop': 14, 'stop_inverted': 15, 'three': 16, 'three2': 17, 'two_up': 18, 'two_up_inverted': 19}&gt;
    - Labels: [9, 2]</code></pre>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">show_record(train_records[<span class="dv" style="color: #AD0000;">0</span>], figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>), display_label<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> )</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_59_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">show_records(train_records[<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">4</span>], ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>,display_label<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_60_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="define-dataloader-objects" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloader-objects">Define DataLoader Objects</h2>
<p>The YOLOX model examines an input image using the stride values <code>[8, 16, 32]</code> to detect objects of various sizes.</p>
<p>The max number of detections depends on the input resolution and these stride values. Given a <code>384x512</code> image, the model will make <code>(384/8)*(512/8) + (384/16)*(512/16) + (384/32)*(512/32) = 4032</code> predictions. Although, many of those predictions get filtered out during post-processing.</p>
<p>Here, we can see the difference in results when using a single stride value in isolation with a YOLOX model trained on the <a href="https://cocodataset.org/#home">COCO</a> dataset.</p>
<p><strong>Stride 8</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stride_8_demo.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Stride 16</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stride_16_demo.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Stride 32</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stride_32_demo.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define stride values</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">strides <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">32</span>]</span>
<span id="cb49-2">max_stride <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(strides)</span></code></pre></div>
<p><strong>Select a multiple of the max stride value as the input resolution</strong></p>
<p>We need to set the input height and width to multiples of the highest stride value (i.e., 32).</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">[max_stride<span class="op" style="color: #5E5E5E;">*</span>i <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">21</span>)]</span></code></pre></div>
<pre class="text"><code>[224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640] </code></pre>
<p><strong>Define input resolution</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">image_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">384</span></span>
<span id="cb52-2">presize <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> You can lower the image_size to reduce training time at the cost of a potential decrease in accuracy.</p>
</blockquote>
<p><strong>Define Transforms</strong></p>
<p>IceVision provides several default methods for data augmentation to help the model generalize. It automatically updates the bounding box information for an image based on the applied augmentations.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">pd.DataFrame(tfms.A.aug_tfms(size<span class="op" style="color: #5E5E5E;">=</span>image_size, presize<span class="op" style="color: #5E5E5E;">=</span>presize))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
SmallestMaxSize(always_apply=False, p=1, max_size=512, interpolation=1)
</td>
</tr>
<tr>
<th>
1
</th>
<td>
HorizontalFlip(always_apply=False, p=0.5)
</td>
</tr>
<tr>
<th>
2
</th>
<td>
ShiftScaleRotate(always_apply=False, p=0.5, shift_limit_x=(-0.0625, 0.0625), shift_limit_y=(-0.0625, 0.0625), scale_limit=(-0.09999999999999998, 0.10000000000000009), rotate_limit=(-15, 15), interpolation=1, border_mode=4, value=None, mask_value=None)
</td>
</tr>
<tr>
<th>
3
</th>
<td>
RGBShift(always_apply=False, p=0.5, r_shift_limit=(-10, 10), g_shift_limit=(-10, 10), b_shift_limit=(-10, 10))
</td>
</tr>
<tr>
<th>
4
</th>
<td>
RandomBrightnessContrast(always_apply=False, p=0.5, brightness_limit=(-0.2, 0.2), contrast_limit=(-0.2, 0.2), brightness_by_max=True)
</td>
</tr>
<tr>
<th>
5
</th>
<td>
Blur(always_apply=False, p=0.5, blur_limit=(1, 3))
</td>
</tr>
<tr>
<th>
6
</th>
<td>
OneOrOther([RandomSizedBBoxSafeCrop(always_apply=False, p=0.5, height=384, width=384, erosion_rate=0.0, interpolation=1),LongestMaxSize(always_apply=False, p=1, max_size=384, interpolation=1),], p=0.5)
</td>
</tr>
<tr>
<th>
7
</th>
<td>
PadIfNeeded(always_apply=False, p=1.0, min_height=384, min_width=384, pad_height_divisor=None, pad_width_divisor=None, border_mode=0, value=[124, 116, 104], mask_value=None)
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">pd.DataFrame(tfms.A.resize_and_pad(size<span class="op" style="color: #5E5E5E;">=</span>image_size))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
LongestMaxSize(always_apply=False, p=1, max_size=384, interpolation=1)
</td>
</tr>
<tr>
<th>
1
</th>
<td>
PadIfNeeded(always_apply=False, p=1.0, min_height=384, min_width=384, pad_height_divisor=None, pad_width_divisor=None, border_mode=0, value=[124, 116, 104], mask_value=None)
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">train_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.aug_tfms(size<span class="op" style="color: #5E5E5E;">=</span>image_size, presize<span class="op" style="color: #5E5E5E;">=</span>presize), tfms.A.Normalize()])</span>
<span id="cb55-2">valid_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.resize_and_pad(image_size), tfms.A.Normalize()])</span></code></pre></div>
<p><strong>Get normalization stats</strong></p>
<p>We can extract the normalization stats from the <code>tfms.A.Normalize()</code> method for future use. We’ll use these same stats when performing inference with the trained model.</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">mean <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Normalize().mean</span>
<span id="cb56-2">std <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Normalize().std</span>
<span id="cb56-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p><strong>Define Datasets</strong></p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">train_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset(train_records, train_tfms)</span>
<span id="cb58-2">valid_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset(valid_records, valid_tfms)</span>
<span id="cb58-3">train_ds, valid_ds</span></code></pre></div>
<pre class="text"><code>(&lt;Dataset with 25466 items&gt;, &lt;Dataset with 6367 items&gt;)</code></pre>
<p><strong>Apply augmentations to a training sample</strong></p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">samples <span class="op" style="color: #5E5E5E;">=</span> [train_ds[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">3</span>)]</span>
<span id="cb60-2">show_samples(samples, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_76_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define model type</strong></p>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">model_type <span class="op" style="color: #5E5E5E;">=</span> models.mmdet.yolox</span></code></pre></div>
<p><strong>Define backbone</strong></p>
<p>We’ll use a model pretrained on the COCO dataset rather than train a new model from scratch.</p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">backbone <span class="op" style="color: #5E5E5E;">=</span> model_type.backbones.yolox_tiny_8x8(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb62-2">pd.DataFrame.from_dict(backbone.__dict__, orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
model_name
</th>
<td>
yolox
</td>
</tr>
<tr>
<th>
config_path
</th>
<td>
/home/innom-dt/.icevision/mmdetection_configs/mmdetection_configs-2.16.0/configs/yolox/yolox_tiny_8x8_300e_coco.py
</td>
</tr>
<tr>
<th>
weights_url
</th>
<td>
https://download.openmmlab.com/mmdetection/v2.0/yolox/yolox_tiny_8x8_300e_coco/yolox_tiny_8x8_300e_coco_20210806_234250-4ff3b67e.pth
</td>
</tr>
<tr>
<th>
pretrained
</th>
<td>
True
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">32</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Adjust the batch size based on the available GPU memory.</p>
</blockquote>
<p><strong>Define DataLoaders</strong></p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">train_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.train_dl(train_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-2">valid_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.valid_dl(valid_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Be careful when increasing the number of workers. There is a bug that significantly increases system memory usage with more workers.</p>
</blockquote>
</section>
<section id="finetune-the-model" class="level2">
<h2 class="anchored" data-anchor-id="finetune-the-model">Finetune the Model</h2>
<p>Now, we can move on to training the model.</p>
<p><strong>Instantiate the model</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">model <span class="op" style="color: #5E5E5E;">=</span> model_type.model(backbone<span class="op" style="color: #5E5E5E;">=</span>backbone(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>), num_classes<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(parser.class_map)) </span></code></pre></div>
<p><strong>Define metrics</strong></p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">metrics <span class="op" style="color: #5E5E5E;">=</span> [COCOMetric(metric_type<span class="op" style="color: #5E5E5E;">=</span>COCOMetricType.bbox)]</span></code></pre></div>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">learn <span class="op" style="color: #5E5E5E;">=</span> model_type.fastai.learner(dls<span class="op" style="color: #5E5E5E;">=</span>[train_dl, valid_dl], model<span class="op" style="color: #5E5E5E;">=</span>model, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics)</span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">learn.lr_find()</span></code></pre></div>
<pre class="text"><code>SuggestedLRs(valley=0.0012022644514217973)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_92_3.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1e-3</span></span></code></pre></div>
<p><strong>Define number of epochs</strong></p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span></code></pre></div>
<p><strong>Finetune model</strong></p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">learn.fine_tune(epochs, lr, freeze_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
5.965206
</td>
<td>
5.449240
</td>
<td>
0.343486
</td>
<td>
03:31
</td>
</tr>
</tbody>

</table>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
3.767774
</td>
<td>
3.712888
</td>
<td>
0.572857
</td>
<td>
03:53
</td>
</tr>
<tr>
<td>
1
</td>
<td>
3.241024
</td>
<td>
3.204471
</td>
<td>
0.615708
</td>
<td>
03:50
</td>
</tr>
<tr>
<td>
2
</td>
<td>
2.993548
</td>
<td>
3.306303
</td>
<td>
0.578024
</td>
<td>
03:48
</td>
</tr>
<tr>
<td>
3
</td>
<td>
2.837985
</td>
<td>
3.157353
</td>
<td>
0.607766
</td>
<td>
03:51
</td>
</tr>
<tr>
<td>
4
</td>
<td>
2.714989
</td>
<td>
2.684248
</td>
<td>
0.687850
</td>
<td>
03:52
</td>
</tr>
<tr>
<td>
5
</td>
<td>
2.614549
</td>
<td>
2.545124
</td>
<td>
0.708479
</td>
<td>
03:49
</td>
</tr>
<tr>
<td>
6
</td>
<td>
2.466678
</td>
<td>
2.597708
</td>
<td>
0.677954
</td>
<td>
03:54
</td>
</tr>
<tr>
<td>
7
</td>
<td>
2.395620
</td>
<td>
2.459959
</td>
<td>
0.707709
</td>
<td>
03:53
</td>
</tr>
<tr>
<td>
8
</td>
<td>
2.295367
</td>
<td>
2.621239
</td>
<td>
0.679657
</td>
<td>
03:48
</td>
</tr>
<tr>
<td>
9
</td>
<td>
2.201542
</td>
<td>
2.636252
</td>
<td>
0.681469
</td>
<td>
03:47
</td>
</tr>
<tr>
<td>
10
</td>
<td>
2.177531
</td>
<td>
2.352600
</td>
<td>
0.723354
</td>
<td>
03:48
</td>
</tr>
<tr>
<td>
11
</td>
<td>
2.086292
</td>
<td>
2.376842
</td>
<td>
0.726306
</td>
<td>
03:47
</td>
</tr>
<tr>
<td>
12
</td>
<td>
2.009476
</td>
<td>
2.424167
</td>
<td>
0.712507
</td>
<td>
03:46
</td>
</tr>
<tr>
<td>
13
</td>
<td>
1.951761
</td>
<td>
2.324901
</td>
<td>
0.730893
</td>
<td>
03:49
</td>
</tr>
<tr>
<td>
14
</td>
<td>
1.916571
</td>
<td>
2.243153
</td>
<td>
0.739224
</td>
<td>
03:45
</td>
</tr>
<tr>
<td>
15
</td>
<td>
1.834777
</td>
<td>
2.208674
</td>
<td>
0.747359
</td>
<td>
03:52
</td>
</tr>
<tr>
<td>
16
</td>
<td>
1.802138
</td>
<td>
2.120061
</td>
<td>
0.757734
</td>
<td>
04:00
</td>
</tr>
<tr>
<td>
17
</td>
<td>
1.764611
</td>
<td>
2.187056
</td>
<td>
0.746236
</td>
<td>
03:53
</td>
</tr>
<tr>
<td>
18
</td>
<td>
1.753366
</td>
<td>
2.143199
</td>
<td>
0.754093
</td>
<td>
04:03
</td>
</tr>
<tr>
<td>
19
</td>
<td>
1.735740
</td>
<td>
2.154315
</td>
<td>
0.751422
</td>
<td>
03:55
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-model-for-export" class="level2">
<h2 class="anchored" data-anchor-id="prepare-model-for-export">Prepare Model for Export</h2>
<p>Once the model finishes training, we need to modify it before exporting it. First, we’ll prepare an input image to feed to the model.</p>
<p><strong>Define method to convert a PIL Image to a Pytorch Tensor</strong></p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;">def</span> img_to_tensor(img:PIL.Image, mean<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.485</span>, <span class="fl" style="color: #AD0000;">0.456</span>, <span class="fl" style="color: #AD0000;">0.406</span>], std<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.229</span>, <span class="fl" style="color: #AD0000;">0.224</span>, <span class="fl" style="color: #AD0000;">0.225</span>]):</span>
<span id="cb73-2">    <span class="co" style="color: #5E5E5E;"># Convert image to tensor</span></span>
<span id="cb73-3">    img_tensor <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor(np.array(img)).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb73-4">    <span class="co" style="color: #5E5E5E;"># Scale pixels values from [0,255] to [0,1]</span></span>
<span id="cb73-5">    scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb73-6">    <span class="co" style="color: #5E5E5E;"># Prepare normalization tensors</span></span>
<span id="cb73-7">    mean_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(mean).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb73-8">    std_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(std).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb73-9">    <span class="co" style="color: #5E5E5E;"># Normalize tensor    </span></span>
<span id="cb73-10">    normalized_tensor <span class="op" style="color: #5E5E5E;">=</span> (scaled_tensor <span class="op" style="color: #5E5E5E;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;">/</span> std_tensor</span>
<span id="cb73-11">    <span class="co" style="color: #5E5E5E;"># Batch tensor</span></span>
<span id="cb73-12">    <span class="cf" style="color: #003B4F;">return</span> normalized_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">annotation_df.iloc[<span class="dv" style="color: #AD0000;">4</span>].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
00973fac-440e-4a56-b60c-2a06d5fb155d
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
bboxes
</th>
<td>
[[0.40980118, 0.38144198, 0.08338464, 0.06229785], [0.6122035100000001, 0.6780825500000001, 0.04700606, 0.07640522]]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[call, no_gesture]
</td>
</tr>
<tr>
<th>
leading_hand
</th>
<td>
right
</td>
</tr>
<tr>
<th>
leading_conf
</th>
<td>
1
</td>
</tr>
<tr>
<th>
user_id
</th>
<td>
4bb3ee1748be58e05bd1193939735e57bb3c0ca59a7ee38901744d6b9e94632e
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get the test image file path</strong></p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">test_file <span class="op" style="color: #5E5E5E;">=</span> img_dict[annotation_df.iloc[<span class="dv" style="color: #AD0000;">4</span>].name]</span>
<span id="cb75-2">test_file</span></code></pre></div>
<pre class="text"><code>Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00973fac-440e-4a56-b60c-2a06d5fb155d.jpg')</code></pre>
<p><strong>Load the test image</strong></p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file).convert(<span class="st" style="color: #20794D;">'RGB'</span>)</span>
<span id="cb77-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_108_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Calculate valid input dimensions</strong></p>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">input_h <span class="op" style="color: #5E5E5E;">=</span> test_img.height <span class="op" style="color: #5E5E5E;">-</span> (test_img.height <span class="op" style="color: #5E5E5E;">%</span> max_stride)</span>
<span id="cb78-2">input_w <span class="op" style="color: #5E5E5E;">=</span> test_img.width <span class="op" style="color: #5E5E5E;">-</span> (test_img.width <span class="op" style="color: #5E5E5E;">%</span> max_stride)</span>
<span id="cb78-3">input_h, input_w</span></code></pre></div>
<pre class="text"><code>(512, 384)</code></pre>
<p><strong>Crop image to supported resolution</strong></p>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">test_img <span class="op" style="color: #5E5E5E;">=</span> test_img.crop_pad((input_w, input_h))</span>
<span id="cb80-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_112_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Convert image to a normalized tensor</strong></p>
<div class="sourceCode" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">test_tensor <span class="op" style="color: #5E5E5E;">=</span> img_to_tensor(test_img, mean<span class="op" style="color: #5E5E5E;">=</span>mean, std<span class="op" style="color: #5E5E5E;">=</span>std)</span>
<span id="cb81-2">test_tensor.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 384])</code></pre>
<p><strong>Inspect raw model output</strong></p>
<p>Before making any changes, let’s inspect the current model output.</p>
<div class="sourceCode" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">model_output <span class="op" style="color: #5E5E5E;">=</span> model.cpu().forward_dummy(test_tensor.cpu())</span></code></pre></div>
<p>The model currently organizes the output into three tuples. The first tuple contains three tensors storing the object class predictions using the three stride values. Recall that there are 19 object classes, excluding the background class added by IceVision.</p>
<p>The second tuple contains three tensors with the predicted bounding box coordinates and dimensions using the three stride values.</p>
<p>The third tuple contains three tensors with the confidence score for whether an object is present in a given section of the input image using the three stride values.</p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="cf" style="color: #003B4F;">for</span> raw_out <span class="kw" style="color: #003B4F;">in</span> model_output:</span>
<span id="cb84-2">    <span class="cf" style="color: #003B4F;">for</span> out <span class="kw" style="color: #003B4F;">in</span> raw_out:</span>
<span id="cb84-3">        <span class="bu" style="color: null;">print</span>(out.shape)</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 19, 64, 48])
torch.Size([1, 19, 32, 24])
torch.Size([1, 19, 16, 12])
torch.Size([1, 4, 64, 48])
torch.Size([1, 4, 32, 24])
torch.Size([1, 4, 16, 12])
torch.Size([1, 1, 64, 48])
torch.Size([1, 1, 32, 24])
torch.Size([1, 1, 16, 12])</code></pre>
<ul>
<li><p><code>512/8 = 64</code>, <code>512/16 = 32</code>, <code>512/32 = 16</code></p></li>
<li><p><code>384/8 = 48</code>, <code>384/16 = 24</code>, <code>384/32 = 12</code></p></li>
</ul>
<p>If we examine the end of a model from the official <a href="https://github.com/Megvii-BaseDetection/YOLOX/tree/main/demo/ONNXRuntime">YOLOX repo</a>, we can see the output looks a bit different.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/yolox_official_model.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The official model first passes the tensors with the object class and “objectness” scores through sigmoid functions. It then combines the three tensors for each stride value into a single tensor before combining the resulting three tensors into a single flat array.</p>
<p>We can apply these same steps to our model by adding a new forward function using <a href="https://machinelearningmastery.com/monkey-patching-python-code/">monkey patching</a>.</p>
<p><strong>Define custom forward function for exporting the model</strong></p>
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="kw" style="color: #003B4F;">def</span> forward_export(<span class="va" style="color: #111111;">self</span>, input_tensor):</span>
<span id="cb86-2">    <span class="co" style="color: #5E5E5E;"># Get raw model output</span></span>
<span id="cb86-3">    model_output <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.forward_dummy(input_tensor.cpu())</span>
<span id="cb86-4">    <span class="co" style="color: #5E5E5E;"># Extract class scores</span></span>
<span id="cb86-5">    cls_scores <span class="op" style="color: #5E5E5E;">=</span> model_output[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb86-6">    <span class="co" style="color: #5E5E5E;"># Extract bounding box predictions</span></span>
<span id="cb86-7">    bbox_preds <span class="op" style="color: #5E5E5E;">=</span> model_output[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb86-8">    <span class="co" style="color: #5E5E5E;"># Extract objectness scores</span></span>
<span id="cb86-9">    objectness <span class="op" style="color: #5E5E5E;">=</span> model_output[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb86-10">    </span>
<span id="cb86-11">    stride_8_cls <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(cls_scores[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb86-12">    stride_8_bbox <span class="op" style="color: #5E5E5E;">=</span> bbox_preds[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb86-13">    stride_8_objectness <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(objectness[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb86-14">    stride_8_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_8_bbox, stride_8_objectness, stride_8_cls), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb86-15">    stride_8_flat <span class="op" style="color: #5E5E5E;">=</span> torch.flatten(stride_8_cat, start_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-16"></span>
<span id="cb86-17">    stride_16_cls <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(cls_scores[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb86-18">    stride_16_bbox <span class="op" style="color: #5E5E5E;">=</span> bbox_preds[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb86-19">    stride_16_objectness <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(objectness[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb86-20">    stride_16_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_16_bbox, stride_16_objectness, stride_16_cls), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb86-21">    stride_16_flat <span class="op" style="color: #5E5E5E;">=</span> torch.flatten(stride_16_cat, start_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-22"></span>
<span id="cb86-23">    stride_32_cls <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(cls_scores[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb86-24">    stride_32_bbox <span class="op" style="color: #5E5E5E;">=</span> bbox_preds[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb86-25">    stride_32_objectness <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(objectness[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb86-26">    stride_32_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_32_bbox, stride_32_objectness, stride_32_cls), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb86-27">    stride_32_flat <span class="op" style="color: #5E5E5E;">=</span> torch.flatten(stride_32_cat, start_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-28"></span>
<span id="cb86-29">    full_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_8_flat, stride_16_flat, stride_32_flat), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-30"></span>
<span id="cb86-31">    <span class="cf" style="color: #003B4F;">return</span> full_cat.permute(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<p><strong>Add custom forward function to model</strong></p>
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">model.forward_export <span class="op" style="color: #5E5E5E;">=</span> forward_export.<span class="fu" style="color: #4758AB;">__get__</span>(model)</span></code></pre></div>
<p><strong>Verify output shape</strong></p>
<p>Let’s verify the new forward function works as intended. The output should have a batch size of 1 and contain 4032 elements, given the input dimensions (calculated earlier), each with 24 values (19 classes + 1 objectness score + 4 bounding box values).</p>
<div class="sourceCode" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">model.forward_export(test_tensor).shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 4032, 24])</code></pre>
<p>We need to replace the current forward function before exporting the model.</p>
<p><strong>Create a backup of the default model forward function</strong></p>
<p>We can create a backup of the original forward function just in case.</p>
<div class="sourceCode" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">origin_forward <span class="op" style="color: #5E5E5E;">=</span> model.forward</span></code></pre></div>
<p><strong>Replace model forward function with custom function</strong></p>
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">model.forward <span class="op" style="color: #5E5E5E;">=</span> model.forward_export</span></code></pre></div>
<p><strong>Verify output shape</strong></p>
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">model(test_tensor).shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 4032, 24])</code></pre>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>The OpenVINO model conversion script does not support PyTorch models, so we need to export the trained model to ONNX. We can then convert the ONNX model to OpenVINO’s IR format.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(model)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb94-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>'hagrid-sample-30k-384p-YOLOX.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<div class="sourceCode" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">torch.onnx.export(model,</span>
<span id="cb96-2">                  test_tensor,</span>
<span id="cb96-3">                  onnx_file_name,</span>
<span id="cb96-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb96-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>,</span>
<span id="cb96-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb96-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb96-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb96-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb96-10">                 )</span></code></pre></div>
<p><strong>Simplify ONNX model</strong></p>
<p>As mentioned earlier, this step is entirely optional.</p>
<div class="sourceCode" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="im" style="color: #00769E;">import</span> onnx</span>
<span id="cb97-2"><span class="im" style="color: #00769E;">from</span> onnxsim <span class="im" style="color: #00769E;">import</span> simplify</span></code></pre></div>
<div class="sourceCode" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="co" style="color: #5E5E5E;"># load model</span></span>
<span id="cb98-2">onnx_model <span class="op" style="color: #5E5E5E;">=</span> onnx.load(onnx_file_name)</span>
<span id="cb98-3"></span>
<span id="cb98-4"><span class="co" style="color: #5E5E5E;"># convert model</span></span>
<span id="cb98-5">model_simp, check <span class="op" style="color: #5E5E5E;">=</span> simplify(onnx_model)</span>
<span id="cb98-6"></span>
<span id="cb98-7"><span class="co" style="color: #5E5E5E;"># save model</span></span>
<span id="cb98-8">onnx.save(model_simp, onnx_file_name)</span></code></pre></div>
<p>Now we can export the ONNX model to OpenVINO’s IR format.</p>
<p><strong>Import OpenVINO Dependencies</strong></p>
<div class="sourceCode" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1"><span class="im" style="color: #00769E;">from</span> openvino.runtime <span class="im" style="color: #00769E;">import</span> Core</span></code></pre></div>
<div class="sourceCode" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Markdown, display</span></code></pre></div>
<p><strong>Define export directory</strong></p>
<div class="sourceCode" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">output_dir <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'./'</span>)</span>
<span id="cb101-2">output_dir</span></code></pre></div>
<pre class="text"><code>Path('.')</code></pre>
<p><strong>Define path for OpenVINO IR xml model file</strong></p>
<p>The conversion script generates an XML file containing information about the model architecture and a BIN file that stores the trained weights. We need both files to perform inference. OpenVINO uses the same name for the BIN file as provided for the XML file.</p>
<div class="sourceCode" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">ir_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">.</span>split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.xml"</span>)</span>
<span id="cb103-2">ir_path</span></code></pre></div>
<pre class="text"><code>Path('hagrid-sample-30k-384p-YOLOX.xml')</code></pre>
<p><strong>Define arguments for model conversion script</strong></p>
<p>OpenVINO provides the option to include the normalization stats in the IR model. That way, we don’t need to account for different normalization stats when performing inference with multiple models. We can also convert the model to FP16 precision to reduce file size and improve inference speed.</p>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;"># Construct the command for Model Optimizer</span></span>
<span id="cb105-2">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""mo</span></span>
<span id="cb105-3"><span class="ss" style="color: #20794D;">                 --input_model "</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-4"><span class="ss" style="color: #20794D;">                 --input_shape "[1,3, </span><span class="sc" style="color: #5E5E5E;">{</span>image_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span>image_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span></span>
<span id="cb105-5"><span class="ss" style="color: #20794D;">                 --mean_values="</span><span class="sc" style="color: #5E5E5E;">{</span>mean<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-6"><span class="ss" style="color: #20794D;">                 --scale_values="</span><span class="sc" style="color: #5E5E5E;">{</span>std<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-7"><span class="ss" style="color: #20794D;">                 --data_type FP16</span></span>
<span id="cb105-8"><span class="ss" style="color: #20794D;">                 --output_dir "</span><span class="sc" style="color: #5E5E5E;">{</span>output_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-9"><span class="ss" style="color: #20794D;">                 """</span></span>
<span id="cb105-10">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span>.join(mo_command.split())</span>
<span id="cb105-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model Optimizer command to convert the ONNX model to OpenVINO:"</span>)</span>
<span id="cb105-12">display(Markdown(<span class="ss" style="color: #20794D;">f"`</span><span class="sc" style="color: #5E5E5E;">{</span>mo_command<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`"</span>))</span></code></pre></div>
<pre class="text"><code>Model Optimizer command to convert the ONNX model to OpenVINO:</code></pre>
<div class="sourceCode" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb107-1"><span class="ex" style="color: null;">mo</span> <span class="at" style="color: #657422;">--input_model</span> <span class="st" style="color: #20794D;">"hagrid-sample-30k-384p-YOLOX.onnx"</span> <span class="at" style="color: #657422;">--input_shape</span> <span class="st" style="color: #20794D;">"[1,3, 384, 384]"</span> <span class="at" style="color: #657422;">--mean_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.485, 0.456, 0.406)"</span> <span class="at" style="color: #657422;">--scale_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.229, 0.224, 0.225)"</span> <span class="at" style="color: #657422;">--data_type</span> FP16 <span class="at" style="color: #657422;">--output_dir</span> <span class="st" style="color: #20794D;">"."</span></span></code></pre></div>
<p><strong>Convert ONNX model to OpenVINO IR</strong></p>
<div class="sourceCode" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> ir_path.exists():</span>
<span id="cb108-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Exporting ONNX model to IR... This may take a few minutes."</span>)</span>
<span id="cb108-3">    mo_result <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sx $mo_command</span>
<span id="cb108-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>.join(mo_result))</span>
<span id="cb108-5"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb108-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"IR model </span><span class="sc" style="color: #5E5E5E;">{</span>ir_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> already exists."</span>)</span></code></pre></div>
<pre class="text"><code>Exporting ONNX model to IR... This may take a few minutes.
Model Optimizer arguments:
Common parameters:
    - Path to the Input Model:  /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/hagrid-sample-30k-384p-YOLOX.onnx
    - Path for generated IR:    /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/.
    - IR output name:   hagrid-sample-30k-384p-YOLOX
    - Log level:    ERROR
    - Batch:    Not specified, inherited from the model
    - Input layers:     Not specified, inherited from the model
    - Output layers:    Not specified, inherited from the model
    - Input shapes:     [1,3, 384, 384]
    - Source layout:    Not specified
    - Target layout:    Not specified
    - Layout:   Not specified
    - Mean values:  (0.485, 0.456, 0.406)
    - Scale values:     (0.229, 0.224, 0.225)
    - Scale factor:     Not specified
    - Precision of IR:  FP16
    - Enable fusing:    True
    - User transformations:     Not specified
    - Reverse input channels:   False
    - Enable IR generation for fixed input shape:   False
    - Use the transformations config file:  None
Advanced parameters:
    - Force the usage of legacy Frontend of Model Optimizer for model conversion into IR:   False
    - Force the usage of new Frontend of Model Optimizer for model conversion into IR:  False
OpenVINO runtime found in:  /home/innom-dt/mambaforge/envs/icevision/lib/python3.8/site-packages/openvino
OpenVINO runtime version:   2022.1.0-7019-cdb9bec7210-releases/2022/1
Model Optimizer version:    2022.1.0-7019-cdb9bec7210-releases/2022/1
[ WARNING ]  
Detected not satisfied dependencies:
    numpy: installed: 1.23.1, required: &lt; 1.20

Please install required versions of components or run pip installation
pip install openvino-dev
[ SUCCESS ] Generated IR version 11 model.
[ SUCCESS ] XML file: /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/hagrid-sample-30k-384p-YOLOX.xml
[ SUCCESS ] BIN file: /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/hagrid-sample-30k-384p-YOLOX.bin
[ SUCCESS ] Total execution time: 0.47 seconds. 
[ SUCCESS ] Memory consumed: 115 MB. 
It's been a while, check for a new version of Intel(R) Distribution of OpenVINO(TM) toolkit here https://software.intel.com/content/www/us/en/develop/tools/openvino-toolkit/download.html?cid=other&amp;source=prod&amp;campid=ww_2022_bu_IOTG_OpenVINO-2022-1&amp;content=upg_all&amp;medium=organic or on the GitHub*
[ INFO ] The model was converted to IR v11, the latest model format that corresponds to the source DL framework input/output format. While IR v11 is backwards compatible with OpenVINO Inference Engine API v1.0, please use API v2.0 (as of 2022.1) to take advantage of the latest improvements in IR v11.
Find more information about API v2.0 and IR v11 at https://docs.openvino.ai</code></pre>
</section>
<section id="verify-openvino-inference" class="level2">
<h2 class="anchored" data-anchor-id="verify-openvino-inference">Verify OpenVINO Inference</h2>
<p>Now, we can verify the OpenVINO model works as desired using the test image.</p>
<p><strong>Get available OpenVINO compute devices</strong></p>
<div class="sourceCode" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb110-2">devices <span class="op" style="color: #5E5E5E;">=</span> ie.available_devices</span>
<span id="cb110-3"><span class="cf" style="color: #003B4F;">for</span> device <span class="kw" style="color: #003B4F;">in</span> devices:</span>
<span id="cb110-4">    device_name <span class="op" style="color: #5E5E5E;">=</span> ie.get_property(device_name<span class="op" style="color: #5E5E5E;">=</span>device, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FULL_DEVICE_NAME"</span>)</span>
<span id="cb110-5">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>device<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>device_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>CPU: 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz</code></pre>
<p><strong>Prepare input image for OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="co" style="color: #5E5E5E;"># Convert image to tensor</span></span>
<span id="cb112-2">img_tensor <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor(np.array(test_img)).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb112-3"><span class="co" style="color: #5E5E5E;"># Scale pixels values from [0,255] to [0,1]</span></span>
<span id="cb112-4">scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span></code></pre></div>
<div class="sourceCode" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">input_image <span class="op" style="color: #5E5E5E;">=</span> scaled_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb113-2">input_image.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 384])</code></pre>
<p><strong>Test OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="co" style="color: #5E5E5E;"># Load the network in Inference Engine</span></span>
<span id="cb115-2">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb115-3">model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.read_model(model<span class="op" style="color: #5E5E5E;">=</span>ir_path)</span>
<span id="cb115-4">model_ir.reshape(input_image.shape)</span>
<span id="cb115-5">compiled_model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.compile_model(model<span class="op" style="color: #5E5E5E;">=</span>model_ir, device_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPU"</span>)</span>
<span id="cb115-6"></span>
<span id="cb115-7"><span class="co" style="color: #5E5E5E;"># Get input and output layers</span></span>
<span id="cb115-8">input_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.inputs))</span>
<span id="cb115-9">output_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.outputs))</span>
<span id="cb115-10"></span>
<span id="cb115-11"><span class="co" style="color: #5E5E5E;"># Run inference on the input image</span></span>
<span id="cb115-12">res_ir <span class="op" style="color: #5E5E5E;">=</span> compiled_model_ir([input_image])[output_layer_ir]</span></code></pre></div>
<div class="sourceCode" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">res_ir.shape</span></code></pre></div>
<pre class="text"><code>(1, 4032, 24)</code></pre>
<p>The output shape is correct, meaning we can move on to the post-processing steps.</p>
</section>
<section id="define-post-processing-steps" class="level2">
<h2 class="anchored" data-anchor-id="define-post-processing-steps">Define Post-processing Steps</h2>
<p>To process the model output, we need to iterate through each of the 4032 object proposals and save the ones that meet a user-defined confidence threshold (e.g., 50%). We then filter out the redundant proposals (i.e., detecting the same object multiple times) from that subset using <a href="https://learnopencv.com/non-maximum-suppression-theory-and-implementation-in-pytorch/">Non-Maximum Suppression (NMS)</a>.</p>
<p><strong>Define method to generate offset values to navigate the raw model output</strong></p>
<p>We’ll first define a method that generates offset values based on the input dimensions and stride values, which we can use to traverse the output array.</p>
<div class="sourceCode" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1"><span class="kw" style="color: #003B4F;">def</span> generate_grid_strides(height, width, strides<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">32</span>]):</span>
<span id="cb118-2">    </span>
<span id="cb118-3">    grid_strides <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb118-4"></span>
<span id="cb118-5">    <span class="co" style="color: #5E5E5E;"># Iterate through each stride value</span></span>
<span id="cb118-6">    <span class="cf" style="color: #003B4F;">for</span> stride <span class="kw" style="color: #003B4F;">in</span> strides:</span>
<span id="cb118-7">        <span class="co" style="color: #5E5E5E;"># Calculate the grid dimensions</span></span>
<span id="cb118-8">        grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">//</span> stride</span>
<span id="cb118-9">        grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">//</span> stride</span>
<span id="cb118-10"></span>
<span id="cb118-11">        <span class="co" style="color: #5E5E5E;"># Store each combination of grid coordinates</span></span>
<span id="cb118-12">        <span class="cf" style="color: #003B4F;">for</span> g1 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(grid_height):</span>
<span id="cb118-13">            </span>
<span id="cb118-14">            <span class="cf" style="color: #003B4F;">for</span> g0 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(grid_width):</span>
<span id="cb118-15">                grid_strides.append({<span class="st" style="color: #20794D;">'grid0'</span>:g0, <span class="st" style="color: #20794D;">'grid1'</span>:g1, <span class="st" style="color: #20794D;">'stride'</span>:stride })</span>
<span id="cb118-16">    </span>
<span id="cb118-17">    <span class="cf" style="color: #003B4F;">return</span> grid_strides</span></code></pre></div>
<p><strong>Generate offset values to navigate model output</strong></p>
<div class="sourceCode" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1">grid_strides <span class="op" style="color: #5E5E5E;">=</span> generate_grid_strides(test_img.height, test_img.width, strides)</span>
<span id="cb119-2"><span class="bu" style="color: null;">len</span>(grid_strides)</span></code></pre></div>
<pre class="text"><code>4032</code></pre>
<div class="sourceCode" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">pd.DataFrame(grid_strides).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
grid0
</th>
<th>
grid1
</th>
<th>
stride
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
4
</th>
<td>
4
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>Next, we’ll define a method to iterate through the output array and decode the bounding box information for each object proposal. As mentioned earlier, we’ll only keep the ones with a high enough confidence score. The model predicts the center coordinates of a bounding box, but we’ll store the coordinates for the top-left corner as that is what the <code>ImageDraw.Draw.rectangle()</code> method expects as input.</p>
<div class="sourceCode" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1"><span class="kw" style="color: #003B4F;">def</span> generate_yolox_proposals(model_output, proposal_length, grid_strides, bbox_conf_thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.3</span>):</span>
<span id="cb122-2">    </span>
<span id="cb122-3">    proposals <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb122-4">    </span>
<span id="cb122-5">    <span class="co" style="color: #5E5E5E;"># Obtain the number of classes the model was trained to detect</span></span>
<span id="cb122-6">    num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb122-7"></span>
<span id="cb122-8">    <span class="cf" style="color: #003B4F;">for</span> anchor_idx <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(grid_strides)):</span>
<span id="cb122-9">        </span>
<span id="cb122-10">        <span class="co" style="color: #5E5E5E;"># Get the current grid and stride values</span></span>
<span id="cb122-11">        grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides[anchor_idx][<span class="st" style="color: #20794D;">'grid0'</span>]</span>
<span id="cb122-12">        grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides[anchor_idx][<span class="st" style="color: #20794D;">'grid1'</span>]</span>
<span id="cb122-13">        stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides[anchor_idx][<span class="st" style="color: #20794D;">'stride'</span>]</span>
<span id="cb122-14"></span>
<span id="cb122-15">        <span class="co" style="color: #5E5E5E;"># Get the starting index for the current proposal</span></span>
<span id="cb122-16">        start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length</span>
<span id="cb122-17"></span>
<span id="cb122-18">        <span class="co" style="color: #5E5E5E;"># Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb122-19">        x_center <span class="op" style="color: #5E5E5E;">=</span> (model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> grid0) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-20">        y_center <span class="op" style="color: #5E5E5E;">=</span> (model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> grid1) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-21"></span>
<span id="cb122-22">        <span class="co" style="color: #5E5E5E;"># Get the dimensions for the predicted bounding box</span></span>
<span id="cb122-23">        w <span class="op" style="color: #5E5E5E;">=</span> np.exp(model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>]) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-24">        h <span class="op" style="color: #5E5E5E;">=</span> np.exp(model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>]) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-25"></span>
<span id="cb122-26">        <span class="co" style="color: #5E5E5E;"># Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb122-27">        x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb122-28">        y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb122-29"></span>
<span id="cb122-30">        <span class="co" style="color: #5E5E5E;"># Get the confidence score that an object is present</span></span>
<span id="cb122-31">        box_objectness <span class="op" style="color: #5E5E5E;">=</span> model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span>]</span>
<span id="cb122-32"></span>
<span id="cb122-33">        <span class="co" style="color: #5E5E5E;"># Initialize object struct with bounding box information</span></span>
<span id="cb122-34">        obj <span class="op" style="color: #5E5E5E;">=</span> { <span class="st" style="color: #20794D;">'x0'</span>:x0, <span class="st" style="color: #20794D;">'y0'</span>:y0, <span class="st" style="color: #20794D;">'width'</span>:w, <span class="st" style="color: #20794D;">'height'</span>:h, <span class="st" style="color: #20794D;">'label'</span>:<span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'prob'</span>:<span class="dv" style="color: #AD0000;">0</span> }</span>
<span id="cb122-35"></span>
<span id="cb122-36">        <span class="co" style="color: #5E5E5E;"># Find the object class with the highest confidence score</span></span>
<span id="cb122-37">        <span class="cf" style="color: #003B4F;">for</span> class_idx <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_classes):</span>
<span id="cb122-38">            </span>
<span id="cb122-39">            <span class="co" style="color: #5E5E5E;"># Get the confidence score for the current object class</span></span>
<span id="cb122-40">            box_cls_score <span class="op" style="color: #5E5E5E;">=</span> model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx]</span>
<span id="cb122-41">            <span class="co" style="color: #5E5E5E;"># Calculate the final confidence score for the object proposal</span></span>
<span id="cb122-42">            box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score</span>
<span id="cb122-43">            </span>
<span id="cb122-44">            <span class="co" style="color: #5E5E5E;"># Check for the highest confidence score</span></span>
<span id="cb122-45">            <span class="cf" style="color: #003B4F;">if</span> (box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj[<span class="st" style="color: #20794D;">'prob'</span>]):</span>
<span id="cb122-46">                obj[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> class_idx</span>
<span id="cb122-47">                obj[<span class="st" style="color: #20794D;">'prob'</span>] <span class="op" style="color: #5E5E5E;">=</span> box_prob</span>
<span id="cb122-48"></span>
<span id="cb122-49">        <span class="co" style="color: #5E5E5E;"># Only add object proposals with high enough confidence scores</span></span>
<span id="cb122-50">        <span class="cf" style="color: #003B4F;">if</span> obj[<span class="st" style="color: #20794D;">'prob'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> bbox_conf_thresh: proposals.append(obj)</span>
<span id="cb122-51">    </span>
<span id="cb122-52">    <span class="co" style="color: #5E5E5E;"># Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb122-53">    proposals.sort(key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x:x[<span class="st" style="color: #20794D;">'prob'</span>], reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb122-54">    <span class="cf" style="color: #003B4F;">return</span> proposals</span></code></pre></div>
<p><strong>Define minimum confidence score for keeping bounding box proposals</strong></p>
<div class="sourceCode" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span></code></pre></div>
<p><strong>Process raw model output</strong></p>
<div class="sourceCode" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">proposals <span class="op" style="color: #5E5E5E;">=</span> generate_yolox_proposals(res_ir.flatten(), res_ir.shape[<span class="dv" style="color: #AD0000;">2</span>], grid_strides, bbox_conf_thresh)</span>
<span id="cb124-2">proposals_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(proposals)</span>
<span id="cb124-3">proposals_df[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> proposals_df[<span class="st" style="color: #20794D;">'label'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: labels[x])</span>
<span id="cb124-4">proposals_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
x0
</th>
<th>
y0
</th>
<th>
width
</th>
<th>
height
</th>
<th>
label
</th>
<th>
prob
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
233.453819
</td>
<td>
345.319857
</td>
<td>
20.237036
</td>
<td>
39.237568
</td>
<td>
no_gesture
</td>
<td>
0.892190
</td>
</tr>
<tr>
<th>
1
</th>
<td>
233.411983
</td>
<td>
345.079270
</td>
<td>
20.298084
</td>
<td>
39.369030
</td>
<td>
no_gesture
</td>
<td>
0.883036
</td>
</tr>
<tr>
<th>
2
</th>
<td>
233.482836
</td>
<td>
345.070212
</td>
<td>
20.273870
</td>
<td>
39.556046
</td>
<td>
no_gesture
</td>
<td>
0.881625
</td>
</tr>
<tr>
<th>
3
</th>
<td>
233.226050
</td>
<td>
345.559044
</td>
<td>
20.653538
</td>
<td>
38.985397
</td>
<td>
no_gesture
</td>
<td>
0.876668
</td>
</tr>
<tr>
<th>
4
</th>
<td>
233.354270
</td>
<td>
345.466457
</td>
<td>
20.351070
</td>
<td>
38.968014
</td>
<td>
no_gesture
</td>
<td>
0.872296
</td>
</tr>
<tr>
<th>
5
</th>
<td>
153.331284
</td>
<td>
193.410838
</td>
<td>
38.274513
</td>
<td>
35.176327
</td>
<td>
call
</td>
<td>
0.870502
</td>
</tr>
<tr>
<th>
6
</th>
<td>
233.583658
</td>
<td>
345.261926
</td>
<td>
20.347435
</td>
<td>
39.517403
</td>
<td>
no_gesture
</td>
<td>
0.868382
</td>
</tr>
<tr>
<th>
7
</th>
<td>
153.666840
</td>
<td>
193.238544
</td>
<td>
38.145180
</td>
<td>
35.976635
</td>
<td>
call
</td>
<td>
0.866106
</td>
</tr>
<tr>
<th>
8
</th>
<td>
154.866353
</td>
<td>
194.021563
</td>
<td>
35.857136
</td>
<td>
34.749817
</td>
<td>
call
</td>
<td>
0.862080
</td>
</tr>
<tr>
<th>
9
</th>
<td>
155.096351
</td>
<td>
193.696654
</td>
<td>
35.662899
</td>
<td>
35.185398
</td>
<td>
call
</td>
<td>
0.861144
</td>
</tr>
<tr>
<th>
10
</th>
<td>
154.931746
</td>
<td>
193.533106
</td>
<td>
35.849140
</td>
<td>
35.373035
</td>
<td>
call
</td>
<td>
0.859096
</td>
</tr>
<tr>
<th>
11
</th>
<td>
154.988088
</td>
<td>
193.921200
</td>
<td>
35.850899
</td>
<td>
34.878162
</td>
<td>
call
</td>
<td>
0.856778
</td>
</tr>
<tr>
<th>
12
</th>
<td>
153.371142
</td>
<td>
193.670131
</td>
<td>
37.459030
</td>
<td>
35.085506
</td>
<td>
call
</td>
<td>
0.832275
</td>
</tr>
<tr>
<th>
13
</th>
<td>
154.885031
</td>
<td>
193.393148
</td>
<td>
37.161541
</td>
<td>
35.756050
</td>
<td>
call
</td>
<td>
0.814937
</td>
</tr>
<tr>
<th>
14
</th>
<td>
154.807318
</td>
<td>
193.586627
</td>
<td>
37.247711
</td>
<td>
34.852604
</td>
<td>
call
</td>
<td>
0.803999
</td>
</tr>
<tr>
<th>
15
</th>
<td>
233.458529
</td>
<td>
345.055026
</td>
<td>
20.226809
</td>
<td>
39.549839
</td>
<td>
no_gesture
</td>
<td>
0.797995
</td>
</tr>
<tr>
<th>
16
</th>
<td>
233.216641
</td>
<td>
346.149529
</td>
<td>
20.414558
</td>
<td>
38.401203
</td>
<td>
no_gesture
</td>
<td>
0.794114
</td>
</tr>
<tr>
<th>
17
</th>
<td>
233.675367
</td>
<td>
345.060542
</td>
<td>
20.194427
</td>
<td>
39.166901
</td>
<td>
no_gesture
</td>
<td>
0.612079
</td>
</tr>
</tbody>

</table>
</div>
<p>We know the test image contains one call gesture and one idle hand. The model seems pretty confident about the locations of those two hands as the bounding box values are nearly identical across the <code>no_gesture</code> predictions and among the <code>call</code> predictions.</p>
<p>We can filter out the redundant predictions by checking how much the bounding boxes overlap. When two bounding boxes overlap beyond a user-defined threshold, we keep the one with a higher confidence score.</p>
<p><strong>Define function to calculate the union area of two bounding boxes</strong></p>
<div class="sourceCode" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="kw" style="color: #003B4F;">def</span> calc_union_area(a, b):</span>
<span id="cb125-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'x0'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>])</span>
<span id="cb125-3">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'y0'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>])</span>
<span id="cb125-4">    w <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'width'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'width'</span>]) <span class="op" style="color: #5E5E5E;">-</span> x</span>
<span id="cb125-5">    h <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'height'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'height'</span>]) <span class="op" style="color: #5E5E5E;">-</span> y</span>
<span id="cb125-6">    <span class="cf" style="color: #003B4F;">return</span> w<span class="op" style="color: #5E5E5E;">*</span>h</span></code></pre></div>
<p><strong>Define function to calculate the intersection area of two bounding boxes</strong></p>
<div class="sourceCode" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1"><span class="kw" style="color: #003B4F;">def</span> calc_inter_area(a, b):</span>
<span id="cb126-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'x0'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>])</span>
<span id="cb126-3">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'y0'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>])</span>
<span id="cb126-4">    w <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'width'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'width'</span>]) <span class="op" style="color: #5E5E5E;">-</span> x</span>
<span id="cb126-5">    h <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'height'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'height'</span>]) <span class="op" style="color: #5E5E5E;">-</span> y</span>
<span id="cb126-6">    <span class="cf" style="color: #003B4F;">return</span> w<span class="op" style="color: #5E5E5E;">*</span>h</span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<div class="sourceCode" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1"><span class="kw" style="color: #003B4F;">def</span> nms_sorted_boxes(nms_thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.45</span>):</span>
<span id="cb127-2">    </span>
<span id="cb127-3">    proposal_indices <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb127-4">    </span>
<span id="cb127-5">    <span class="co" style="color: #5E5E5E;"># Iterate through the object proposals</span></span>
<span id="cb127-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(proposals)):</span>
<span id="cb127-7">        </span>
<span id="cb127-8">        a <span class="op" style="color: #5E5E5E;">=</span> proposals[i]</span>
<span id="cb127-9">        keep <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb127-10"></span>
<span id="cb127-11">        <span class="co" style="color: #5E5E5E;"># Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb127-12">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> proposal_indices:</span>
<span id="cb127-13">            </span>
<span id="cb127-14">            b <span class="op" style="color: #5E5E5E;">=</span> proposals[j]</span>
<span id="cb127-15"></span>
<span id="cb127-16">            <span class="co" style="color: #5E5E5E;"># Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb127-17">            inter_area <span class="op" style="color: #5E5E5E;">=</span> calc_inter_area(a, b)</span>
<span id="cb127-18"></span>
<span id="cb127-19">            <span class="co" style="color: #5E5E5E;"># Calculate the union area of both bounding boxes</span></span>
<span id="cb127-20">            union_area <span class="op" style="color: #5E5E5E;">=</span> calc_union_area(a, b)</span>
<span id="cb127-21">            </span>
<span id="cb127-22">            <span class="co" style="color: #5E5E5E;"># Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb127-23">            <span class="cf" style="color: #003B4F;">if</span> inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh: keep <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb127-24"></span>
<span id="cb127-25">        <span class="co" style="color: #5E5E5E;"># Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb127-26">        <span class="cf" style="color: #003B4F;">if</span> keep: proposal_indices.append(i)</span>
<span id="cb127-27">    </span>
<span id="cb127-28">    <span class="cf" style="color: #003B4F;">return</span> proposal_indices</span></code></pre></div>
<p><strong>Define threshold for sorting bounding box proposals</strong></p>
<div class="sourceCode" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span></span></code></pre></div>
<p><strong>Sort bouning box proposals using NMS</strong></p>
<div class="sourceCode" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">proposal_indices <span class="op" style="color: #5E5E5E;">=</span> nms_sorted_boxes(nms_thresh)</span>
<span id="cb129-2">proposal_indices</span></code></pre></div>
<pre class="text"><code>[0, 5]</code></pre>
<p><strong>Filter excluded bounding box proposals</strong></p>
<div class="sourceCode" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">proposals_df.iloc[proposal_indices]</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
x0
</th>
<th>
y0
</th>
<th>
width
</th>
<th>
height
</th>
<th>
label
</th>
<th>
prob
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
233.453819
</td>
<td>
345.319857
</td>
<td>
20.237036
</td>
<td>
39.237568
</td>
<td>
no_gesture
</td>
<td>
0.892190
</td>
</tr>
<tr>
<th>
5
</th>
<td>
153.331284
</td>
<td>
193.410838
</td>
<td>
38.274513
</td>
<td>
35.176327
</td>
<td>
call
</td>
<td>
0.870502
</td>
</tr>
</tbody>

</table>
</div>
<p>Now we have a single prediction for an idle hand and a single prediction for a call sign.</p>
</section>
<section id="generate-colormap" class="level2">
<h2 class="anchored" data-anchor-id="generate-colormap">Generate Colormap</h2>
<p>Before we annotate the input image with the predicted bounding boxes, let’s generate a colormap for the object classes.</p>
<p><strong>Import library for generating color palette</strong></p>
<div class="sourceCode" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1"><span class="im" style="color: #00769E;">from</span> distinctipy <span class="im" style="color: #00769E;">import</span> distinctipy</span></code></pre></div>
<p><strong>Generate a visually distinct color for each label</strong></p>
<div class="sourceCode" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">colors <span class="op" style="color: #5E5E5E;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;">len</span>(labels))</span></code></pre></div>
<p><strong>Display the generated color palette</strong></p>
<div class="sourceCode" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_184_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Set precision for color values</strong></p>
<div class="sourceCode" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">precision <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<p><strong>Round color values to specified precision</strong></p>
<div class="sourceCode" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1">colors <span class="op" style="color: #5E5E5E;">=</span> [[np.<span class="bu" style="color: null;">round</span>(ch, precision) <span class="cf" style="color: #003B4F;">for</span> ch <span class="kw" style="color: #003B4F;">in</span> color] <span class="cf" style="color: #003B4F;">for</span> color <span class="kw" style="color: #003B4F;">in</span> colors]</span>
<span id="cb136-2">colors</span></code></pre></div>
<pre class="text"><code>[[0.0, 1.0, 0.0],
 [1.0, 0.0, 1.0],
 [0.0, 0.5, 1.0],
 [1.0, 0.5, 0.0],
 [0.5, 0.75, 0.5],
 [0.30555, 0.01317, 0.67298],
 [0.87746, 0.03327, 0.29524],
 [0.05583, 0.48618, 0.15823],
 [0.95094, 0.48649, 0.83322],
 [0.0884, 0.99616, 0.95391],
 [1.0, 1.0, 0.0],
 [0.52176, 0.27352, 0.0506],
 [0.55398, 0.36059, 0.57915],
 [0.08094, 0.99247, 0.4813],
 [0.49779, 0.8861, 0.03131],
 [0.49106, 0.6118, 0.97323],
 [0.98122, 0.81784, 0.51752],
 [0.02143, 0.61905, 0.59307],
 [0.0, 0.0, 1.0]]</code></pre>
<p><strong>Annotate image using bounding box proposals</strong></p>
<div class="sourceCode" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1">annotated_img <span class="op" style="color: #5E5E5E;">=</span> test_img.copy()</span>
<span id="cb138-2">draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb138-3">fnt_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb138-4"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> proposal_indices:</span>
<span id="cb138-5">    x, y, w, h, l, p <span class="op" style="color: #5E5E5E;">=</span> proposals[i].values()</span>
<span id="cb138-6">    shape <span class="op" style="color: #5E5E5E;">=</span> (x, y, x<span class="op" style="color: #5E5E5E;">+</span>w, y<span class="op" style="color: #5E5E5E;">+</span>h)</span>
<span id="cb138-7">    color <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">tuple</span>([<span class="bu" style="color: null;">int</span>(ch<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">255</span>) <span class="cf" style="color: #003B4F;">for</span> ch <span class="kw" style="color: #003B4F;">in</span> colors[proposals[i][<span class="st" style="color: #20794D;">'label'</span>]]])</span>
<span id="cb138-8">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;">=</span>color)</span>
<span id="cb138-9">    fnt <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageFont.truetype(<span class="st" style="color: #20794D;">"KFOlCnqEu92Fr1MmEU9vAw.ttf"</span>, fnt_size)</span>
<span id="cb138-10">    draw.multiline_text((x, y<span class="op" style="color: #5E5E5E;">-</span>fnt_size<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>), <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>labels[l]<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>p<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">%"</span>, font<span class="op" style="color: #5E5E5E;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;">=</span>color)</span>
<span id="cb138-11"><span class="bu" style="color: null;">print</span>(annotated_img.size) </span>
<span id="cb138-12">annotated_img</span></code></pre></div>
<pre class="text"><code>(384, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_190_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create JSON colormap</strong></p>
<p>We can export the colormap to a JSON file and import it into the Unity project. That way, we can easily swap colormaps for models trained on different datasets without changing any code.</p>
<div class="sourceCode" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">color_map <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'items'</span>: <span class="bu" style="color: null;">list</span>()}</span>
<span id="cb140-2">color_map[<span class="st" style="color: #20794D;">'items'</span>] <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">'label'</span>: label, <span class="st" style="color: #20794D;">'color'</span>: color} <span class="cf" style="color: #003B4F;">for</span> label, color <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(labels, colors)]</span>
<span id="cb140-3">color_map</span></code></pre></div>
<pre class="text"><code>{'items': [{'label': 'call', 'color': [0.0, 1.0, 0.0]},
  {'label': 'no_gesture', 'color': [1.0, 0.0, 1.0]},
  {'label': 'dislike', 'color': [0.0, 0.5, 1.0]},
  {'label': 'fist', 'color': [1.0, 0.5, 0.0]},
  {'label': 'four', 'color': [0.5, 0.75, 0.5]},
  {'label': 'like', 'color': [0.30555, 0.01317, 0.67298]},
  {'label': 'mute', 'color': [0.87746, 0.03327, 0.29524]},
  {'label': 'ok', 'color': [0.05583, 0.48618, 0.15823]},
  {'label': 'one', 'color': [0.95094, 0.48649, 0.83322]},
  {'label': 'palm', 'color': [0.0884, 0.99616, 0.95391]},
  {'label': 'peace', 'color': [1.0, 1.0, 0.0]},
  {'label': 'peace_inverted', 'color': [0.52176, 0.27352, 0.0506]},
  {'label': 'rock', 'color': [0.55398, 0.36059, 0.57915]},
  {'label': 'stop', 'color': [0.08094, 0.99247, 0.4813]},
  {'label': 'stop_inverted', 'color': [0.49779, 0.8861, 0.03131]},
  {'label': 'three', 'color': [0.49106, 0.6118, 0.97323]},
  {'label': 'three2', 'color': [0.98122, 0.81784, 0.51752]},
  {'label': 'two_up', 'color': [0.02143, 0.61905, 0.59307]},
  {'label': 'two_up_inverted', 'color': [0.0, 0.0, 1.0]}]}</code></pre>
<p><strong>Export colormap</strong></p>
<div class="sourceCode" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb142-2"></span>
<span id="cb142-3">color_map_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-colormap.json"</span></span>
<span id="cb142-4"></span>
<span id="cb142-5"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(color_map_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb142-6">    json.dump(color_map, write_file)</span>
<span id="cb142-7">    </span>
<span id="cb142-8">color_map_file_name</span></code></pre></div>
<pre class="text"><code>'hagrid-sample-30k-384p-colormap.json'</code></pre>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post, we finetuned an object detection model using the IceVision library and exported it as an OpenVINO IR model. Part 2 will cover creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with this model using OpenVINO.</p>
<p><strong>Beginner Tutorial:</strong> <a href="../../fastai-to-unity-tutorial/part-1/">Fastai to Unity Beginner Tutorial Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-2/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 2</a></p>
<p><strong>Alternative Next:</strong> <a href="../../onnx-directml-unity-tutorial/part-1/">Object Detection for Unity With ONNX Runtime and DirectML Pt. 1</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>openvino</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/index.html</guid>
  <pubDate>Mon, 08 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-openvino-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to Create an OpenVINO Plugin for Unity on Windows Pt. 3</title>
  <link>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Open Unity Project</li>
<li>Add New Asset Files</li>
<li>Allow Unsafe Code</li>
<li>Modify Compute Shader</li>
<li>Create <code>ImageClassifierOpenVINO</code> Script</li>
<li>Modify GUI</li>
<li>Add <code>ImageClassifierOpenVINO</code> Component</li>
<li>Update On Value Changed Events</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform image classification using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. This post covers the required modifications for the Unity project from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a> to use this DLL.</p>
</section>
<section id="open-unity-project" class="level2">
<h2 class="anchored" data-anchor-id="open-unity-project">Open Unity Project</h2>
<p>Open the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial/tree/main/Fastai-Unity-Tutorial">Fastai-Unity-Tutorial</a> project in the Unity Editor. The project is available in the GitHub repository linked below for anyone who did not follow the original tutorial series.</p>
<ul>
<li><strong><a href="https://github.com/cj-mills/fastai-to-unity-tutorial">fastai-to-unity-tutorial GitHub repository</a></strong></li>
</ul>
</section>
<section id="add-new-asset-files" class="level2">
<h2 class="anchored" data-anchor-id="add-new-asset-files">Add New Asset Files</h2>
<p>We’ll store the <a href="../../fastai-openvino-unity-tutorial/part-2/#gather-dependencies">DLL files</a> from part 2 in a new folder called <code>Plugins</code>. The DLL targets 64-bit x86 architectures, so we need to place the DLL files in a subfolder named <code>x86_64</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1zPHOeYB9jOlPG_KSZyvUVipmBDbV2p76?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Copy all the DLL files and the <code>plugins.xml</code> file into the <code>Assets/Plugins/x86_64</code> folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-openvino-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We then need to close and reopen the project for Unity to load the plugin files.</p>
<p>Next, we’ll create a folder to store the OpenVINO IR models. We need to place the XML and BIN files for the IR models in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in project builds. Create a new folder named <code>StreamingAssets</code>. We’ll put the files in a new subfolder called <code>OpenVINOModels</code> to keep things organized.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1QE9d7pADn4THB91_WwwQgD7NsjbBUnE6?usp=sharing">OpenVINOModels Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-openvino-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The plugins.xml file included with the DLL files contains locations for the DLL files needed for using different types of devices.</p>
<p><strong><code>plugins.xml</code> content:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb1-1">&lt;<span class="kw" style="color: #003B4F;">ie</span>&gt;</span>
<span id="cb1-2">    &lt;<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-3">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"AUTO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-4">            &lt;<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-5">                &lt;<span class="kw" style="color: #003B4F;">property</span><span class="ot" style="color: #003B4F;"> key=</span><span class="st" style="color: #20794D;">"MULTI_WORK_MODE_AS_AUTO"</span><span class="ot" style="color: #003B4F;"> value=</span><span class="st" style="color: #20794D;">"YES"</span>/&gt;</span>
<span id="cb1-6">            &lt;/<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-7">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-8">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"BATCH"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_batch_plugin.dll"</span>&gt;</span>
<span id="cb1-9">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-10">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"CPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_cpu_plugin.dll"</span>&gt;</span>
<span id="cb1-11">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-12">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GNA"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gna_plugin.dll"</span>&gt;</span>
<span id="cb1-13">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-14">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gpu_plugin.dll"</span>&gt;</span>
<span id="cb1-15">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-16">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HETERO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_hetero_plugin.dll"</span>&gt;</span>
<span id="cb1-17">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-18">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MULTI"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-19">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-20">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MYRIAD"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_myriad_plugin.dll"</span>&gt;</span>
<span id="cb1-21">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-22">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HDDL"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_hddl_plugin.dll"</span>&gt;</span>
<span id="cb1-23">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-24">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"VPUX"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_vpux_plugin.dll"</span>&gt;</span>
<span id="cb1-25">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-26">    &lt;/<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-27">&lt;/<span class="kw" style="color: #003B4F;">ie</span>&gt;</span></code></pre></div>
<p>It needs to be in the same folder as the DLL files for the plugin to work. However, Unity does not include XML files in the Plugins folder when building the project. We need to store a copy of the plugins.xml file in the StreamingAssets folder and then copy it back to the Plugins/x86_64 folder when first running the built project. We can handle both steps automatically in code.</p>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the OpenVINO plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can start modifying the code.</p>
</section>
<section id="modify-compute-shader" class="level2">
<h2 class="anchored" data-anchor-id="modify-compute-shader">Modify Compute Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in the <code>ProcessingShader</code> compute shader before sending it to the plugin. We need to know the height of the input image, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb2-2">#pragma kernel NormalizeImageNet</span>
<span id="cb2-3">#pragma kernel FlipXAxis</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb2-6">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb2-8">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-12"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-13"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-14">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb2-15">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb2-17">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb2-19">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb2-22">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-23">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-24"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb2-27"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-28"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-29"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-30">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb2-31">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb2-32">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb2-33">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-34">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb2-35">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-36">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb2-37">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-38">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb2-39">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-40"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-imageclassifieropenvino-script" class="level2">
<h2 class="anchored" data-anchor-id="create-imageclassifieropenvino-script">Create <code>ImageClassifierOpenVINO</code> Script</h2>
<p>Duplicate the <code>ImageClassifier</code> script and name the copy <code>ImageClassifierOpenVINO</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-create-image-classifier-openvino-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update class name</strong></p>
<p>Open the new script in the code editor and replace the class name with the new file name.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifierOpenVINO <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span></code></pre></div>
<p><strong>Update required namespaces</strong></p>
<p>We no longer need the Barracuda namespace. Instead, we need the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-5.0">System.Runtime.InteropServices</a> namespace to handle interactions with the OpenVINO plugin.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Remove Barracuda code</strong></p>
<p>We need to delete all the public and private Barracuda variables, along with the <code>InitializeWorker</code> and <code>OnDisable</code> methods.</p>
<p><strong>Add code to copy <code>plugins.xml</code> file to <code>StreamingAssets</code> folder</strong></p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html"><code>InitializeOnLoad</code></a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html"><code>UnityEditor</code></a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;">// Get all files named "plugins.xml"</span></span>
<span id="cb5-10">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> files <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"./Assets/"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"plugins.xml"</span><span class="op" style="color: #5E5E5E;">,</span> SearchOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AllDirectories</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-11">        <span class="co" style="color: #5E5E5E;">// Iterate through each found file</span></span>
<span id="cb5-12">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> files<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-14">            <span class="co" style="color: #5E5E5E;">// Check if the file is in the "x86_64" folder</span></span>
<span id="cb5-15">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"x86_64"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb5-16">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;">// Define file path for StreamingAssets folder</span></span>
<span id="cb5-18">                <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-19">                <span class="co" style="color: #5E5E5E;">// Print the source file path</span></span>
<span id="cb5-20">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-21">                <span class="co" style="color: #5E5E5E;">// Only copy the file to the StreamingAssets folder if it is not already present</span></span>
<span id="cb5-22">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-26"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-27"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. We are in the Editor, so it returns true, and the code executes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_in_editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>If we check if we are not in the Unity Editor, it returns false, and the code block does not execute.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_not_in_editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can verify the code works by saving the script and going to the <code>StreamingAssets</code> folder in the Editor. The plugins.xml file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update data processing variables</strong></p>
<p>Next, we can remove the <code>processingMaterial</code> variable from the Data Processing section. We no longer need to download model output from the GPU to the CPU. However, we now need to download the input image to the CPU before sending it to the plugin. We can do this asynchronously to help reduce the GPU-to-CPU performance bottleneck.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update variables for user interface</strong></p>
<p>We’ll add new dropdown menus so that we can switch between the available OpenVINO models and devices at runtime.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown deviceDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"OpenVINO"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the openvino models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> openvinoModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINOModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update input variables</strong></p>
<p>Like in the previous tutorial series, when using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">// File paths for the available OpenVINO models</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO models</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO devices</span></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> openvinoDevices <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span></code></pre></div>
<p><strong>Import functions from the OpenVINO plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINO_Image_Classifier_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> IntPtr <span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p><strong>Define method to get the available OpenVINO models</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available OpenVION models</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for the XML file for each model</span></span>
<span id="cb12-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{openvinoModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb12-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-9">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".xml"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb12-10">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-11">            modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-12">            <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'.'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb12-13">            modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Substring</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb12-14">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the names of available OpenVINO devices</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Get the names of the available OpenVINO devices</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;">// Get the number of available OpenVINO devices</span></span>
<span id="cb13-7">    <span class="dt" style="color: #AD0000;">int</span> deviceCount <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-8"></span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> deviceCount<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb13-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-11">        openvinoDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>Marshal<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PtrToStringAnsi</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">)));</span></span>
<span id="cb13-12">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb13-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb14-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;">foreach</span><span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb14-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb14-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb14-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb14-16"></span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb14-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO model names to menu</span></span>
<span id="cb14-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb14-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-23"></span>
<span id="cb14-24">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb14-25">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-26">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO device names to menu</span></span>
<span id="cb14-27">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>openvinoDevices<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-28">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb14-29">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define Awake Method</strong></p>
<p>We’ll implement the code to copy the plugins.xml file from the <code>StreamingAssets</code> folder to the <code>Plugins/x86_64</code> folder in the build folder in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method. The code should be inactive since we are in the Editor.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// Awake is called when the script instance is being loaded</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb15-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-4">    <span class="kw" style="color: #003B4F;">#if</span> <span class="op" style="color: #5E5E5E;">!</span>UNITY_EDITOR</span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;">// Define the path for the plugins.xml file in the StreamingAssets folder</span></span>
<span id="cb15-6">        <span class="dt" style="color: #AD0000;">string</span> sourcePath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;">// Define the destination path for the plugins.xml file</span></span>
<span id="cb15-8">    <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.dataPath}/Plugins/x86_64/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;">// Only copy the file if it is not already present at the destination</span></span>
<span id="cb15-10">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>sourcePath<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;">#endif</span></span>
<span id="cb15-12"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update Start method</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb16-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb16-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb16-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb16-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb16-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-16"></span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb16-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb16-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb16-23">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available OpenVINO models</span></span>
<span id="cb16-26">    <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-27">    <span class="co" style="color: #5E5E5E;">// Get the names of available OpenVINO devices</span></span>
<span id="cb16-28">    <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-29"></span>
<span id="cb16-30">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb16-31">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-32"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb17-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb17-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb17-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb17-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb17-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-20"></span>
<span id="cb17-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb17-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb17-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-25"></span>
<span id="cb17-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb17-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb17-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-31"></span>
<span id="cb17-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb17-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb18-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb18-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb18-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb18-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb18-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb18-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb18-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb18-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb19-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-8">    <span class="dt" style="color: #AD0000;">int</span> classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb19-12">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-13">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the predicted class index</span></span>
<span id="cb19-14">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb19-16"></span>
<span id="cb19-17">    <span class="kw" style="color: #003B4F;">return</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Modify Update method</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb20-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb20-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb20-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-9"></span>
<span id="cb20-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb20-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-12"></span>
<span id="cb20-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb20-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb20-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb20-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb20-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-26"></span>
<span id="cb20-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb20-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb20-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-32"></span>
<span id="cb20-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb20-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-36"></span>
<span id="cb20-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb20-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-39"></span>
<span id="cb20-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-43">        <span class="co" style="color: #5E5E5E;">// Update the selected OpenVINO model</span></span>
<span id="cb20-44">        <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-46"></span>
<span id="cb20-47">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureGPU.width}x{inputTextureGPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-48"></span>
<span id="cb20-49">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb20-50">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-51"></span>
<span id="cb20-52">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb20-53">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-54"></span>
<span id="cb20-55">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb20-56">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-57">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-58">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-59">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-60">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb20-61">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-62">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-63">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-64">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-65">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-66"></span>
<span id="cb20-67">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb20-68">    classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-69">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Class Index: {classIndex}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-70"></span>
<span id="cb20-71">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb20-72">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-73">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>validIndex <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[classIndex]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Invalid index"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-74"></span>
<span id="cb20-75">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb20-76">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-77"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a method to update the current OpenVINO model and device</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">/// Update the selected OpenVINO model</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb21-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-6">    <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-7">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb21-8">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span></span>
<span id="cb21-9">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb21-10"></span>
<span id="cb21-11">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Device: {openvinoDevices[deviceDropdown.value]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    <span class="co" style="color: #5E5E5E;">// Load the specified OpenVINO model</span></span>
<span id="cb21-14">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-15"></span>
<span id="cb21-16">    <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> return_messages <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-17">        <span class="st" style="color: #20794D;">"Model loaded and reshaped successfully"</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb21-18">        <span class="st" style="color: #20794D;">"Failed to load model"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb21-19">        <span class="st" style="color: #20794D;">"Failed to reshape model input"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb21-20">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb21-21"></span>
<span id="cb21-22">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>return_messages<span class="op" style="color: #5E5E5E;">[</span>return_val<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb21-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That covers the required code changes.</p>
</section>
<section id="modify-gui" class="level2">
<h2 class="anchored" data-anchor-id="modify-gui">Modify GUI</h2>
<p>As mentioned earlier, we’ll add new dropdown menus to the GUI so we can switch between available OpenVINO models and devices at runtime.</p>
<p><strong>Create new GUI objects</strong></p>
<p>Select the <code>WebcamDeviceText</code> and <code>WebcamDropdown</code> objects and press Ctrl-d to duplicate them. Rename the duplicates to <code>OpenVINOModelText</code> and <code>OpenVINOModelDropdown</code>, respectively. Then select <code>OpenVINOModelText</code> and <code>OpenVINOModelDropdown</code> and press Ctrl-d.&nbsp;Rename the copies to <code>OpenVINODevicelText</code> and <code>OpenVINODevicelDropdown</code>, respectively.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-add-openvino-gui-objects.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update GUI Settings Panel Height</strong></p>
<p>Select the <code>SettingsPanel</code> object and update the <code>Height</code> value to <code>255</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-settings-panel-height.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update GUI object positions</strong></p>
<p>Select the <code>OpenVINOModelText</code> object and update the <code>Pos Y</code> value to <code>-145</code> and the Text value to <code>OpenVINO Model:</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinomodeltext-position-and-text.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, select the <code>OpenVINOModelDropdown</code> object and update the <code>Pos Y</code> value to <code>-165</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinomodeldropdown-position.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, select the <code>OpenVINODevicelText</code> object and update the <code>Pos Y</code> value to <code>-200</code> and the Text value to <code>OpenVINO Device:</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinodevicetext-position-and-text.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Last but not least, select the <code>OpenVINODevicelDropdown</code> object and update the <code>Pos Y</code> value to <code>-220</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinodevicedropdown-position.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The updated GUI should look like the image below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-view-updated-gui.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-imageclassifieropenvino-component" class="level2">
<h2 class="anchored" data-anchor-id="add-imageclassifieropenvino-component">Add <code>ImageClassifierOpenVINO</code> Component</h2>
<p>Now we can add the new <code>ImageClassifierOpenVINO</code> script to the <code>InferenceManager</code> object. Make sure to disable the existing <code>ImageClassifier</code> component, as shown below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-add-image-classifier-openvino-component.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="update-on-value-changed-events" class="level2">
<h2 class="anchored" data-anchor-id="update-on-value-changed-events">Update On Value Changed Events</h2>
<p>With the <code>ImageClassifierOpenVINO</code> component added, we can update the On Value Changed events for the <code>WebcamToggle</code>, <code>WebcamDropdown</code>, <code>OpenVINOModelDropdown</code>, and <code>OpenVINODevicelDropdown</code> objects.</p>
<p><strong>Update the <code>WebcamToggle</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-webcam-toggle-update-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update the <code>WebcamDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-webcam-dropdown-update-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update the <code>OpenVINOModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvino-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update the <code>OpenVINODeviceDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvino-device-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This tutorial series covered creating an OpenVINO plugin to improve inference speed in the Unity game engine.</p>
<p><strong>Previous:</strong> <a href="../part-2/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>openvino</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/index.html</guid>
  <pubDate>Mon, 18 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create an OpenVINO Plugin for Unity on Windows Pt. 2</title>
  <link>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Install OpenVINO</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered modifying the training code from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a> to finetune models from the Timm library and exporting them as OpenVINO IR models. This post covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these IR models using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>.</p>
</section>
<section id="install-openvino" class="level2">
<h2 class="anchored" data-anchor-id="install-openvino">Install OpenVINO</h2>
<p>We need to download the OpenVINO Toolkit before creating our Visual Studio project. Go to the OpenVINO download page linked below.</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">OpenVINO Download page</a></li>
</ul>
<p><strong>Download OpenVINO Toolkit</strong></p>
<p>Select the options outlined in the image below and click the Download button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_download_page.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Double-click the file once it finishes downloading and click the Extract button in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_extract_files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The installer will then verify the computer meets the system requirements. The toolkit includes the Python scripts for converting models, which require Python 3.6, 3.7, 3.8, or 3.9 to run. We will only use the files for C++ development in this post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_check_system_requirements.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can stick with the default <code>Recommended Installation</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_recommended_installation.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The installer will then ask whether Intel can collect some information before starting the installation process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_software_improvement_program.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_installation_in_progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click Finish once the installation process completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_finish.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Inspect OpenVINO Folder</strong></p>
<p>If we look at the installation folder for the toolkit, we can see it also includes a version of OpenCV. We’ll use OpenCV to prepare image data from Unity before feeding it to the model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_install_folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I like to copy the OpenVINO folder to a separate directory with other dependencies for my C++ projects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_move_folder_to_dependencies_directory.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can create our Visual Studio DLL project.</p>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where OpenVINO and OpenCV are so we can access their APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the paths for the following folders, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include\ie</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the paths to the following files, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\lib\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\lib\intel64\Release\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\lib\*.lib</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL files included with the OpenVINO and OpenCV libraries.</p>
<p><strong>OpenCV DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/get-opencv-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>OpenVINO DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/get-openvino-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/get-openvino-tbb-dll-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_core453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgproc453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgcodecs453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\bin\intel64\Release\* $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\bin\tbb.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We’ll first update the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> with the required header files. We can open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Comment or remove the “#include” line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for OpenVINO and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"openvino/openvino.hpp"</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html">ov::Core</a>: represents an OpenVINO runtime Core entity</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Model.html#doxid-classov-1-1-model">ov::Model</a>: A user-defined model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html">ov::CompiledModel</a>: represents a compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request">ov::InferRequest</a>: an infer request that can be run in asynchronous or synchronous manners</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Tensor.html">ov::Tensor</a>: API holding host memory</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// Inference engine instance</span></span>
<span id="cb6-2">ov<span class="op" style="color: #5E5E5E;">::</span>Core core<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">// The user define model representation</span></span>
<span id="cb6-4"><span class="bu" style="color: null;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;">&lt;</span>ov<span class="op" style="color: #5E5E5E;">::</span>Model<span class="op" style="color: #5E5E5E;">&gt;</span> model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">// A device-specific compiled model</span></span>
<span id="cb6-6">ov<span class="op" style="color: #5E5E5E;">::</span>CompiledModel compiled_model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">// List of available compute devices</span></span>
<span id="cb6-9"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> available_devices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">// An inference request for a compiled model</span></span>
<span id="cb6-11">ov<span class="op" style="color: #5E5E5E;">::</span>InferRequest infer_request<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;">// Stores the model input data</span></span>
<span id="cb6-13">ov<span class="op" style="color: #5E5E5E;">::</span>Tensor input_tensor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">// A pointer for accessing the input tensor data</span></span>
<span id="cb6-15"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> input_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;">// The number of image classes the current model can detect</span></span>
<span id="cb6-18"><span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;">// The current input image width</span></span>
<span id="cb6-20"><span class="dt" style="color: #AD0000;">int</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;">// The current input image height</span></span>
<span id="cb6-22"><span class="dt" style="color: #AD0000;">int</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;">// The total number pixels in the input image</span></span>
<span id="cb6-24"><span class="dt" style="color: #AD0000;">int</span> nPixels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;">// The number of color channels in the input image</span></span>
<span id="cb6-26"><span class="dt" style="color: #AD0000;">int</span> num_channels <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define a function to get the number of compute devices</strong></p>
<p>The first function we’ll define will create a list of available device names and return the number of devices accessible by OpenVINO. We’ll use this information to select which device to use to perform inference from the Unity application. There might be an option named GNA (Gaussian &amp; Neural Accelerator). GNA is a highly specialized neural coprocessor for tasks like noise cancellation. We’ll exclude it from the list of devices presented to the end user.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1aabd82bca4826ee53893f7b5fc9bce813">ov::Core::get_available_devices()</a>: Returns devices available for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">/// Get the number of available compute devices</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb7-5">DLLExport <span class="dt" style="color: #AD0000;">int</span> GetDeviceCount<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;">// Reset list of available compute devices</span></span>
<span id="cb7-8">    available_devices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;">// Populate list of available compute devices</span></span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>device <span class="op" style="color: #5E5E5E;">:</span> core<span class="op" style="color: #5E5E5E;">.</span>get_available_devices<span class="op" style="color: #5E5E5E;">())</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;">// Skip GNA device</span></span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GNA"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-14">            available_devices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;">// Return the number of available compute devices</span></span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;">return</span> available_devices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-19"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the name of a compute device</strong></p>
<p>Next, we’ll define a function to return the name of a device at a specified index for the list of available devices.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">/// Get the name of the compute device name at the specified index</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb8-6">DLLExport <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">*</span> GetDeviceName<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">&amp;</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to load an OpenVINO model</strong></p>
<p>OpenVINO needs to compile models for the target device. This process can take several seconds when using GPU inference. We can create a cache directory, so we only need to compile models for a specific resolution-device pair once.</p>
<p>We’ll place the code for loading an OpenVINO model inside a try-catch block to avoid crashing the application if we pass an incorrect file path.</p>
<p>If the model loads successfully, we’ll attempt to reshape the model input to the desired input dimensions. Note that models like MobileViT will need to use the input dimensions from training.</p>
<p>After reshaping the model input, we can compile the model for the target device.</p>
<p>We can get pointers to the model input tensor and create an inference request using the compiled model.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a14cba2136b972ee34478dd11633293a2">ov::Core::set_property()</a>: Sets properties for a device</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1ae0576a95f841c3a6f5e46e4802716981">ov::Core::read_model()</a>: Reads models from IR/ONNX/PDPD formats</li>
<li><a href="https://docs.openvino.ai/latest/openvino_docs_OV_UG_ShapeInference.html">ov::Model::reshape()</a>: Updates input shapes and propagates them down to the outputs of the model through all intermediate layers</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a46555f0803e8c29524626be08e7f5c5a">ov::Core::compile_model()</a>: Creates a compiled model from a source model object</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html#doxid-classov-1-1-compiled-model-1ae3633c0eb5173ed776446fba32b95953">ov::CompiledModel::create_infer_request()</a>: Creates an inference request object used to infer the compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a5f0bc1ab40de6a7a12136b4a4e6a8b54">ov::InferRequest::get_input_tensor()</a>: Gets an input tensor for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">/// Load a model from the specified file path</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"modelPath"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The path to the OpenVINO IR model file</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The compute device index</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"inputDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image resolution</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb9-8">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> modelPath<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">    <span class="co" style="color: #5E5E5E;">// Initialize return value</span></span>
<span id="cb9-11">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;">// Specify the cache directory for compiled gpu models</span></span>
<span id="cb9-13">    core<span class="op" style="color: #5E5E5E;">.</span>set_property<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU"</span><span class="op" style="color: #5E5E5E;">,</span> ov<span class="op" style="color: #5E5E5E;">::</span>cache_dir<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"cache"</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="co" style="color: #5E5E5E;">// Try loading the specified model</span></span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>read_model<span class="op" style="color: #5E5E5E;">(</span>modelPath<span class="op" style="color: #5E5E5E;">);</span> <span class="op" style="color: #5E5E5E;">}</span> </span>
<span id="cb9-17">    <span class="co" style="color: #5E5E5E;">// Return 1 if the model fails to load</span></span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-19"></span>
<span id="cb9-20">    <span class="co" style="color: #5E5E5E;">// Try updating the model input dimensions</span></span>
<span id="cb9-21">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model<span class="op" style="color: #5E5E5E;">-&gt;</span>reshape<span class="op" style="color: #5E5E5E;">({</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">});</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-22">    <span class="co" style="color: #5E5E5E;">// Return a value of 2 if we can't update the model input dimensions</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-24"></span>
<span id="cb9-25">    <span class="co" style="color: #5E5E5E;">// Compile the loaded model for the target compute device</span></span>
<span id="cb9-26">    <span class="kw" style="color: #003B4F;">auto</span> compiled_model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>compile_model<span class="op" style="color: #5E5E5E;">(</span>model<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"MULTI"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb9-27">         ov<span class="op" style="color: #5E5E5E;">::</span>device<span class="op" style="color: #5E5E5E;">::</span>priorities<span class="op" style="color: #5E5E5E;">(</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">]),</span></span>
<span id="cb9-28">         ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>performance_mode<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>PerformanceMode<span class="op" style="color: #5E5E5E;">::</span>LATENCY<span class="op" style="color: #5E5E5E;">),</span></span>
<span id="cb9-29">         ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>inference_precision<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>element<span class="op" style="color: #5E5E5E;">::</span>f32<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb9-30"></span>
<span id="cb9-31">    <span class="co" style="color: #5E5E5E;">// Get the number of classes the current model can detect</span></span>
<span id="cb9-32">    ov<span class="op" style="color: #5E5E5E;">::</span>Output<span class="op" style="color: #5E5E5E;">&lt;</span><span class="at" style="color: #657422;">const</span> ov<span class="op" style="color: #5E5E5E;">::</span>Node<span class="op" style="color: #5E5E5E;">&gt;</span> output <span class="op" style="color: #5E5E5E;">=</span> compiled_model<span class="op" style="color: #5E5E5E;">.</span>output<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb9-33">    num_classes <span class="op" style="color: #5E5E5E;">=</span> output<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-34">    <span class="co" style="color: #5E5E5E;">// Create an inference request to use the compiled model</span></span>
<span id="cb9-35">    infer_request <span class="op" style="color: #5E5E5E;">=</span> compiled_model<span class="op" style="color: #5E5E5E;">.</span>create_infer_request<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb9-36"></span>
<span id="cb9-37">    <span class="co" style="color: #5E5E5E;">// Get input tensor by index</span></span>
<span id="cb9-38">    input_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_input_tensor<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-39"></span>
<span id="cb9-40">    <span class="co" style="color: #5E5E5E;">// Get model input dimensions</span></span>
<span id="cb9-41">    input_w <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-42">    input_h <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-43">    nPixels <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">*</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-44"></span>
<span id="cb9-45">    <span class="co" style="color: #5E5E5E;">// Get a pointer to the input tensor</span></span>
<span id="cb9-46">    input_data <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb9-47"></span>
<span id="cb9-48">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb9-49">    <span class="cf" style="color: #003B4F;">return</span> return_val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-50"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1-byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>We don’t need to normalize the input image since the IR model does it internally.</p>
<p>Once again, we’ll use a try-catch block to avoid crashing the application if an error occurs during the forward pass. We can use the <code>std::max_element()</code> and <code>std::distance()</code> functions to find the class index with the highest confidence score.</p>
<ul>
<li><a href="https://docs.opencv.org/3.4/d3/d63/classcv_1_1Mat.html">cv::Mat</a>: n-dimensional dense array class<br>
</li>
<li><a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv::cvtColor()</a>: Converts an image from one color space to another</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1abcb7facc9f7c4b9226a1fd343e56958d">ov::InferRequest::infer()</a>: Infers specified input in synchronous mode</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a9bf7bf67c58858bda86ae01e83cd14c1">ov::InferRequest::get_output_tensor()</a>: Gets an output tensor for inference</li>
<li><a href="https://cplusplus.com/reference/iterator/distance/">std::distance()</a>: Calculates the number of elements between first and last</li>
<li><a href="https://cplusplus.com/reference/algorithm/max_element/">std::max_element()</a>: Returns an iterator pointing to the element with the largest value in the range <code>[first,last)</code></li>
</ul>
<hr>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Perform inference with the provided texture data</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"inputData"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb10-6">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> inputData<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">    <span class="co" style="color: #5E5E5E;">// Initialize predicted class index to an invalid value</span></span>
<span id="cb10-9">    <span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-10"></span>
<span id="cb10-11">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-12"></span>
<span id="cb10-13">        <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb10-14">        cv<span class="op" style="color: #5E5E5E;">::</span>Mat texture <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>input_h<span class="op" style="color: #5E5E5E;">,</span> input_w<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-15">        <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb10-16">        cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">        <span class="co" style="color: #5E5E5E;">// Iterate over each pixel in image</span></span>
<span id="cb10-19">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">&lt;</span> nPixels<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-20">            <span class="co" style="color: #5E5E5E;">// Iterate over each color channel for each pixel in image</span></span>
<span id="cb10-21">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> ch <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> ch <span class="op" style="color: #5E5E5E;">&lt;</span> num_channels<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">++</span>ch<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-22">                input_data<span class="op" style="color: #5E5E5E;">[</span>ch <span class="op" style="color: #5E5E5E;">*</span> nPixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p <span class="op" style="color: #5E5E5E;">*</span> num_channels <span class="op" style="color: #5E5E5E;">+</span> ch<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-25"></span>
<span id="cb10-26">        <span class="co" style="color: #5E5E5E;">// Perform inference</span></span>
<span id="cb10-27">        infer_request<span class="op" style="color: #5E5E5E;">.</span>infer<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-28"></span>
<span id="cb10-29">        <span class="co" style="color: #5E5E5E;">// model has only one output</span></span>
<span id="cb10-30">        ov<span class="op" style="color: #5E5E5E;">::</span>Tensor output_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_output_tensor<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-31">        <span class="co" style="color: #5E5E5E;">// IR v10 works with converted precisions (i64 -&gt; i32)</span></span>
<span id="cb10-32">        <span class="kw" style="color: #003B4F;">auto</span> out_data <span class="op" style="color: #5E5E5E;">=</span> output_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-33"></span>
<span id="cb10-34">        <span class="co" style="color: #5E5E5E;">// Get the predicted class index with the highest confidence score</span></span>
<span id="cb10-35">        class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>distance<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> <span class="bu" style="color: null;">std::</span>max_element<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> out_data <span class="op" style="color: #5E5E5E;">+</span> num_classes<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-36">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-37">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-38">        <span class="co" style="color: #5E5E5E;">// Return a value of -2 if an error occurs during the forward pass</span></span>
<span id="cb10-39">        class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-40">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-41"></span>
<span id="cb10-42">    <span class="cf" style="color: #003B4F;">return</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-43"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click Build Solution. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder and the plugins.xml file to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. Part 3 will cover the required modifications for the original Unity project to use this DLL.</p>
<p><strong>Previous:</strong> <a href="../../fastai-to-unity-tutorial/part-1/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>openvino</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/index.html</guid>
  <pubDate>Sun, 17 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create an OpenVINO Plugin for Unity on Windows Pt. 1</title>
  <link>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Select a Model</li>
<li>Modify Transforms</li>
<li>Define Learner</li>
<li>Export the Model</li>
<li>Benchmark OpenVINO Inference</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This tutorial is a follow-up to the <a href="../../fastai-to-unity-tutorial/part-1">fastai-to-unity</a> tutorial series and covers using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>, an open-source toolkit for optimizing model inference, instead of Unity’s Barracuda library. OpenVINO enables significantly faster CPU inference than Barracuda and supports more model types. It also supports GPU inference for integrated and discrete Intel GPUs and will be able to leverage the AI hardware acceleration available in Intel’s upcoming ARC GPUs.</p>
<p>We’ll modify the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">original tutorial code</a> and create a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to access the OpenVINO functionality in Unity.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/openvino-plugin-demo.mp4" class="img-fluid" controls=""><a href="./videos/openvino-plugin-demo.mp4">Video</a></video></p>
</figure>
</div>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This post covers the required modifications to the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial#training-code">original training code</a>. We’ll finetune models from the <a href="https://github.com/rwightman/pytorch-image-models">Timm library</a> on the same <a href="https://www.kaggle.com/datasets/belalelwikel/asl-and-some-words">ASL dataset</a> as the original tutorial, just like in this <a href="../../fastai-libtorch-unity-tutorial/part-1/">previous follow-up</a>. Below is a link to the complete modified training code, along with links for running the notebook on Google Colab and Kaggle.</p>
<table class="table">
<thead>
<tr class="header">
<th>GitHub Repository</th>
<th>Colab</th>
<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kaggle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-OpenVINO-Tutorial.ipynb">Jupyter Notebook</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-to-openvino-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-OpenVINO-Tutorial.ipynb">Open in Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-OpenVINO-Tutorial.ipynb">Open in Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The <a href="https://pypi.org/project/timm/">pip package</a> for the Timm library is generally more stable than the GitHub repository but may have fewer model types and pretrained weights. However, the latest pip version had some issues running the MobileNetV3 models at the time of writing. Downgrade to version <code>0.5.4</code> to use those models.</p>
<p>Recent <a href="https://github.com/fastai/fastai/releases/tag/2.7.0">updates</a> to the fastai library resolve some <a href="https://benjaminwarner.dev/2022/06/14/debugging-pytorch-performance-decrease">performance issues</a> with PyTorch so let’s update that too.</p>
<p>We need to install the <a href="https://pypi.org/project/openvino-dev/"><code>openvino-dev</code></a> pip package to convert trained models to OpenVINO’s <a href="https://docs.openvino.ai/latest/openvino_docs_MO_DG_IR_and_opsets.html">Intermediate Representation</a> (IR) format.</p>
<p><strong>Uncomment the cell below if running on Google Colab or Kaggle</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip3 install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip3 install -U fastai==2.7.6</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip3 install -U kaggle==1.5.12</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip3 install -U Pillow==9.1.0</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># !pip3 install -U timm==0.6.5 # more stable fewer models</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># # !pip3 install -U git+https://github.com/rwightman/pytorch-image-models.git # more models less stable</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># !pip3 install openvino-dev==2022.1.0 </span></span></code></pre></div>
<p><strong>Note for Colab:</strong> You must restart the runtime in order to use newly installed version of Pillow.</p>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> fastai</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">fastai.__version__</span></code></pre></div>
<pre class="text"><code>'2.7.6'</code></pre>
<p><strong>Disable max rows and columns for pandas</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="select-a-model" class="level2">
<h2 class="anchored" data-anchor-id="select-a-model">Select a Model</h2>
<p>Let’s start by selecting a model from the Timm library to finetune. The available pretrained models depend on the version of the Timm library installed.</p>
<p><strong>Import the Timm library</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> timm</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">timm.__version__</span></code></pre></div>
<pre class="text"><code>'0.6.5'</code></pre>
<p><strong>Check available pretrained model types</strong></p>
<p>We can check which model types have pretrained weights using the <code>timm.list_models()</code> function.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model_types <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">set</span>([model.split(<span class="st" style="color: #20794D;">'_'</span>)[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> model <span class="kw" style="color: #003B4F;">in</span> timm.list_models(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)]))</span>
<span id="cb10-2">model_types.sort()</span>
<span id="cb10-3">pd.DataFrame(model_types)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
adv
</td>
</tr>
<tr>
<th>
1
</th>
<td>
bat
</td>
</tr>
<tr>
<th>
2
</th>
<td>
beit
</td>
</tr>
<tr>
<th>
3
</th>
<td>
botnet26t
</td>
</tr>
<tr>
<th>
4
</th>
<td>
cait
</td>
</tr>
<tr>
<th>
5
</th>
<td>
coat
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convit
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convmixer
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext
</td>
</tr>
<tr>
<th>
9
</th>
<td>
crossvit
</td>
</tr>
<tr>
<th>
10
</th>
<td>
cs3darknet
</td>
</tr>
<tr>
<th>
11
</th>
<td>
cspdarknet53
</td>
</tr>
<tr>
<th>
12
</th>
<td>
cspresnet50
</td>
</tr>
<tr>
<th>
13
</th>
<td>
cspresnext50
</td>
</tr>
<tr>
<th>
14
</th>
<td>
darknet53
</td>
</tr>
<tr>
<th>
15
</th>
<td>
deit
</td>
</tr>
<tr>
<th>
16
</th>
<td>
deit3
</td>
</tr>
<tr>
<th>
17
</th>
<td>
densenet121
</td>
</tr>
<tr>
<th>
18
</th>
<td>
densenet161
</td>
</tr>
<tr>
<th>
19
</th>
<td>
densenet169
</td>
</tr>
<tr>
<th>
20
</th>
<td>
densenet201
</td>
</tr>
<tr>
<th>
21
</th>
<td>
densenetblur121d
</td>
</tr>
<tr>
<th>
22
</th>
<td>
dla102
</td>
</tr>
<tr>
<th>
23
</th>
<td>
dla102x
</td>
</tr>
<tr>
<th>
24
</th>
<td>
dla102x2
</td>
</tr>
<tr>
<th>
25
</th>
<td>
dla169
</td>
</tr>
<tr>
<th>
26
</th>
<td>
dla34
</td>
</tr>
<tr>
<th>
27
</th>
<td>
dla46
</td>
</tr>
<tr>
<th>
28
</th>
<td>
dla46x
</td>
</tr>
<tr>
<th>
29
</th>
<td>
dla60
</td>
</tr>
<tr>
<th>
30
</th>
<td>
dla60x
</td>
</tr>
<tr>
<th>
31
</th>
<td>
dm
</td>
</tr>
<tr>
<th>
32
</th>
<td>
dpn107
</td>
</tr>
<tr>
<th>
33
</th>
<td>
dpn131
</td>
</tr>
<tr>
<th>
34
</th>
<td>
dpn68
</td>
</tr>
<tr>
<th>
35
</th>
<td>
dpn68b
</td>
</tr>
<tr>
<th>
36
</th>
<td>
dpn92
</td>
</tr>
<tr>
<th>
37
</th>
<td>
dpn98
</td>
</tr>
<tr>
<th>
38
</th>
<td>
eca
</td>
</tr>
<tr>
<th>
39
</th>
<td>
ecaresnet101d
</td>
</tr>
<tr>
<th>
40
</th>
<td>
ecaresnet269d
</td>
</tr>
<tr>
<th>
41
</th>
<td>
ecaresnet26t
</td>
</tr>
<tr>
<th>
42
</th>
<td>
ecaresnet50d
</td>
</tr>
<tr>
<th>
43
</th>
<td>
ecaresnet50t
</td>
</tr>
<tr>
<th>
44
</th>
<td>
ecaresnetlight
</td>
</tr>
<tr>
<th>
45
</th>
<td>
edgenext
</td>
</tr>
<tr>
<th>
46
</th>
<td>
efficientnet
</td>
</tr>
<tr>
<th>
47
</th>
<td>
efficientnetv2
</td>
</tr>
<tr>
<th>
48
</th>
<td>
ens
</td>
</tr>
<tr>
<th>
49
</th>
<td>
ese
</td>
</tr>
<tr>
<th>
50
</th>
<td>
fbnetc
</td>
</tr>
<tr>
<th>
51
</th>
<td>
fbnetv3
</td>
</tr>
<tr>
<th>
52
</th>
<td>
gc
</td>
</tr>
<tr>
<th>
53
</th>
<td>
gcresnet33ts
</td>
</tr>
<tr>
<th>
54
</th>
<td>
gcresnet50t
</td>
</tr>
<tr>
<th>
55
</th>
<td>
gcresnext26ts
</td>
</tr>
<tr>
<th>
56
</th>
<td>
gcresnext50ts
</td>
</tr>
<tr>
<th>
57
</th>
<td>
gernet
</td>
</tr>
<tr>
<th>
58
</th>
<td>
ghostnet
</td>
</tr>
<tr>
<th>
59
</th>
<td>
gluon
</td>
</tr>
<tr>
<th>
60
</th>
<td>
gmixer
</td>
</tr>
<tr>
<th>
61
</th>
<td>
gmlp
</td>
</tr>
<tr>
<th>
62
</th>
<td>
halo2botnet50ts
</td>
</tr>
<tr>
<th>
63
</th>
<td>
halonet26t
</td>
</tr>
<tr>
<th>
64
</th>
<td>
halonet50ts
</td>
</tr>
<tr>
<th>
65
</th>
<td>
haloregnetz
</td>
</tr>
<tr>
<th>
66
</th>
<td>
hardcorenas
</td>
</tr>
<tr>
<th>
67
</th>
<td>
hrnet
</td>
</tr>
<tr>
<th>
68
</th>
<td>
ig
</td>
</tr>
<tr>
<th>
69
</th>
<td>
inception
</td>
</tr>
<tr>
<th>
70
</th>
<td>
jx
</td>
</tr>
<tr>
<th>
71
</th>
<td>
lambda
</td>
</tr>
<tr>
<th>
72
</th>
<td>
lamhalobotnet50ts
</td>
</tr>
<tr>
<th>
73
</th>
<td>
lcnet
</td>
</tr>
<tr>
<th>
74
</th>
<td>
legacy
</td>
</tr>
<tr>
<th>
75
</th>
<td>
levit
</td>
</tr>
<tr>
<th>
76
</th>
<td>
mixer
</td>
</tr>
<tr>
<th>
77
</th>
<td>
mixnet
</td>
</tr>
<tr>
<th>
78
</th>
<td>
mnasnet
</td>
</tr>
<tr>
<th>
79
</th>
<td>
mobilenetv2
</td>
</tr>
<tr>
<th>
80
</th>
<td>
mobilenetv3
</td>
</tr>
<tr>
<th>
81
</th>
<td>
mobilevit
</td>
</tr>
<tr>
<th>
82
</th>
<td>
mobilevitv2
</td>
</tr>
<tr>
<th>
83
</th>
<td>
nasnetalarge
</td>
</tr>
<tr>
<th>
84
</th>
<td>
nf
</td>
</tr>
<tr>
<th>
85
</th>
<td>
nfnet
</td>
</tr>
<tr>
<th>
86
</th>
<td>
pit
</td>
</tr>
<tr>
<th>
87
</th>
<td>
pnasnet5large
</td>
</tr>
<tr>
<th>
88
</th>
<td>
poolformer
</td>
</tr>
<tr>
<th>
89
</th>
<td>
regnetv
</td>
</tr>
<tr>
<th>
90
</th>
<td>
regnetx
</td>
</tr>
<tr>
<th>
91
</th>
<td>
regnety
</td>
</tr>
<tr>
<th>
92
</th>
<td>
regnetz
</td>
</tr>
<tr>
<th>
93
</th>
<td>
repvgg
</td>
</tr>
<tr>
<th>
94
</th>
<td>
res2net101
</td>
</tr>
<tr>
<th>
95
</th>
<td>
res2net50
</td>
</tr>
<tr>
<th>
96
</th>
<td>
res2next50
</td>
</tr>
<tr>
<th>
97
</th>
<td>
resmlp
</td>
</tr>
<tr>
<th>
98
</th>
<td>
resnest101e
</td>
</tr>
<tr>
<th>
99
</th>
<td>
resnest14d
</td>
</tr>
<tr>
<th>
100
</th>
<td>
resnest200e
</td>
</tr>
<tr>
<th>
101
</th>
<td>
resnest269e
</td>
</tr>
<tr>
<th>
102
</th>
<td>
resnest26d
</td>
</tr>
<tr>
<th>
103
</th>
<td>
resnest50d
</td>
</tr>
<tr>
<th>
104
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
105
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
106
</th>
<td>
resnet10t
</td>
</tr>
<tr>
<th>
107
</th>
<td>
resnet14t
</td>
</tr>
<tr>
<th>
108
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
109
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
110
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
111
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
112
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
113
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
114
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
115
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
116
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
117
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
118
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
119
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
120
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
121
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
122
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
123
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
124
</th>
<td>
resnetaa50
</td>
</tr>
<tr>
<th>
125
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
126
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
127
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
128
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
129
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
130
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
131
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
132
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
133
</th>
<td>
resnetv2
</td>
</tr>
<tr>
<th>
134
</th>
<td>
resnext101
</td>
</tr>
<tr>
<th>
135
</th>
<td>
resnext26ts
</td>
</tr>
<tr>
<th>
136
</th>
<td>
resnext50
</td>
</tr>
<tr>
<th>
137
</th>
<td>
resnext50d
</td>
</tr>
<tr>
<th>
138
</th>
<td>
rexnet
</td>
</tr>
<tr>
<th>
139
</th>
<td>
sebotnet33ts
</td>
</tr>
<tr>
<th>
140
</th>
<td>
sehalonet33ts
</td>
</tr>
<tr>
<th>
141
</th>
<td>
selecsls42b
</td>
</tr>
<tr>
<th>
142
</th>
<td>
selecsls60
</td>
</tr>
<tr>
<th>
143
</th>
<td>
selecsls60b
</td>
</tr>
<tr>
<th>
144
</th>
<td>
semnasnet
</td>
</tr>
<tr>
<th>
145
</th>
<td>
sequencer2d
</td>
</tr>
<tr>
<th>
146
</th>
<td>
seresnet152d
</td>
</tr>
<tr>
<th>
147
</th>
<td>
seresnet33ts
</td>
</tr>
<tr>
<th>
148
</th>
<td>
seresnet50
</td>
</tr>
<tr>
<th>
149
</th>
<td>
seresnext101
</td>
</tr>
<tr>
<th>
150
</th>
<td>
seresnext101d
</td>
</tr>
<tr>
<th>
151
</th>
<td>
seresnext26d
</td>
</tr>
<tr>
<th>
152
</th>
<td>
seresnext26t
</td>
</tr>
<tr>
<th>
153
</th>
<td>
seresnext26ts
</td>
</tr>
<tr>
<th>
154
</th>
<td>
seresnext50
</td>
</tr>
<tr>
<th>
155
</th>
<td>
seresnextaa101d
</td>
</tr>
<tr>
<th>
156
</th>
<td>
skresnet18
</td>
</tr>
<tr>
<th>
157
</th>
<td>
skresnet34
</td>
</tr>
<tr>
<th>
158
</th>
<td>
skresnext50
</td>
</tr>
<tr>
<th>
159
</th>
<td>
spnasnet
</td>
</tr>
<tr>
<th>
160
</th>
<td>
ssl
</td>
</tr>
<tr>
<th>
161
</th>
<td>
swin
</td>
</tr>
<tr>
<th>
162
</th>
<td>
swinv2
</td>
</tr>
<tr>
<th>
163
</th>
<td>
swsl
</td>
</tr>
<tr>
<th>
164
</th>
<td>
tf
</td>
</tr>
<tr>
<th>
165
</th>
<td>
tinynet
</td>
</tr>
<tr>
<th>
166
</th>
<td>
tnt
</td>
</tr>
<tr>
<th>
167
</th>
<td>
tresnet
</td>
</tr>
<tr>
<th>
168
</th>
<td>
tv
</td>
</tr>
<tr>
<th>
169
</th>
<td>
twins
</td>
</tr>
<tr>
<th>
170
</th>
<td>
vgg11
</td>
</tr>
<tr>
<th>
171
</th>
<td>
vgg13
</td>
</tr>
<tr>
<th>
172
</th>
<td>
vgg16
</td>
</tr>
<tr>
<th>
173
</th>
<td>
vgg19
</td>
</tr>
<tr>
<th>
174
</th>
<td>
visformer
</td>
</tr>
<tr>
<th>
175
</th>
<td>
vit
</td>
</tr>
<tr>
<th>
176
</th>
<td>
volo
</td>
</tr>
<tr>
<th>
177
</th>
<td>
wide
</td>
</tr>
<tr>
<th>
178
</th>
<td>
xception
</td>
</tr>
<tr>
<th>
179
</th>
<td>
xception41
</td>
</tr>
<tr>
<th>
180
</th>
<td>
xception41p
</td>
</tr>
<tr>
<th>
181
</th>
<td>
xception65
</td>
</tr>
<tr>
<th>
182
</th>
<td>
xception65p
</td>
</tr>
<tr>
<th>
183
</th>
<td>
xception71
</td>
</tr>
<tr>
<th>
184
</th>
<td>
xcit
</td>
</tr>
</tbody>

</table>
</div>
<p>Timm provides many pretrained models, but not all of them are fast enough for real-time applications. We can filter the results by providing a full or partial model name.</p>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> models</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'convnext*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
convnext_base
</td>
</tr>
<tr>
<th>
1
</th>
<td>
convnext_base_384_in22ft1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
convnext_base_in22ft1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
convnext_base_in22k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
convnext_large
</td>
</tr>
<tr>
<th>
5
</th>
<td>
convnext_large_384_in22ft1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convnext_large_in22ft1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convnext_large_in22k
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext_small
</td>
</tr>
<tr>
<th>
9
</th>
<td>
convnext_small_384_in22ft1k
</td>
</tr>
<tr>
<th>
10
</th>
<td>
convnext_small_in22ft1k
</td>
</tr>
<tr>
<th>
11
</th>
<td>
convnext_small_in22k
</td>
</tr>
<tr>
<th>
12
</th>
<td>
convnext_tiny
</td>
</tr>
<tr>
<th>
13
</th>
<td>
convnext_tiny_384_in22ft1k
</td>
</tr>
<tr>
<th>
14
</th>
<td>
convnext_tiny_hnf
</td>
</tr>
<tr>
<th>
15
</th>
<td>
convnext_tiny_in22ft1k
</td>
</tr>
<tr>
<th>
16
</th>
<td>
convnext_tiny_in22k
</td>
</tr>
<tr>
<th>
17
</th>
<td>
convnext_xlarge_384_in22ft1k
</td>
</tr>
<tr>
<th>
18
</th>
<td>
convnext_xlarge_in22ft1k
</td>
</tr>
<tr>
<th>
19
</th>
<td>
convnext_xlarge_in22k
</td>
</tr>
</tbody>

</table>
</div>
<p>Let’s go with the <code>convnext_tiny</code> model since we want higher framerates. Each model comes with a set of default configuration parameters. We must keep track of the mean and std values used to normalize the model input.</p>
<p><strong>Inspect the default configuration for the <code>convnext_tiny</code> model</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> convnext</span>
<span id="cb12-2">convnext_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_tiny'</span></span>
<span id="cb12-3">pd.DataFrame.from_dict(convnext.default_cfgs[convnext_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://dl.fbaipublicfiles.com/convnext/convnext_tiny_1k_224_ema.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/1801.04381">MobileNetV2</a> models</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilenetv2*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilenetv2_050
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilenetv2_100
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilenetv2_110d
</td>
</tr>
<tr>
<th>
3
</th>
<td>
mobilenetv2_120d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
mobilenetv2_140
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilenetv2_100</code> model</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> efficientnet</span>
<span id="cb14-2">mobilenetv2_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilenetv2_100'</span></span>
<span id="cb14-3">pd.DataFrame.from_dict(efficientnet.default_cfgs[mobilenetv2_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv2_100_ra-b33bc2c4.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv_stem
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
classifier
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="">ResNet</a> models</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'resnet*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
resnet10t
</td>
</tr>
<tr>
<th>
1
</th>
<td>
resnet14t
</td>
</tr>
<tr>
<th>
2
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
3
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
5
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
6
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
7
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
8
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
9
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
10
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
11
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
12
</th>
<td>
resnet50_gn
</td>
</tr>
<tr>
<th>
13
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
14
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
15
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
16
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
17
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
18
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
19
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
20
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
21
</th>
<td>
resnetaa50
</td>
</tr>
<tr>
<th>
22
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
23
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
24
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
25
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
26
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
27
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
28
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
29
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
30
</th>
<td>
resnetv2_50
</td>
</tr>
<tr>
<th>
31
</th>
<td>
resnetv2_50d_evos
</td>
</tr>
<tr>
<th>
32
</th>
<td>
resnetv2_50d_gn
</td>
</tr>
<tr>
<th>
33
</th>
<td>
resnetv2_50x1_bit_distilled
</td>
</tr>
<tr>
<th>
34
</th>
<td>
resnetv2_50x1_bitm
</td>
</tr>
<tr>
<th>
35
</th>
<td>
resnetv2_50x1_bitm_in21k
</td>
</tr>
<tr>
<th>
36
</th>
<td>
resnetv2_50x3_bitm
</td>
</tr>
<tr>
<th>
37
</th>
<td>
resnetv2_50x3_bitm_in21k
</td>
</tr>
<tr>
<th>
38
</th>
<td>
resnetv2_101
</td>
</tr>
<tr>
<th>
39
</th>
<td>
resnetv2_101x1_bitm
</td>
</tr>
<tr>
<th>
40
</th>
<td>
resnetv2_101x1_bitm_in21k
</td>
</tr>
<tr>
<th>
41
</th>
<td>
resnetv2_101x3_bitm
</td>
</tr>
<tr>
<th>
42
</th>
<td>
resnetv2_101x3_bitm_in21k
</td>
</tr>
<tr>
<th>
43
</th>
<td>
resnetv2_152x2_bit_teacher
</td>
</tr>
<tr>
<th>
44
</th>
<td>
resnetv2_152x2_bit_teacher_384
</td>
</tr>
<tr>
<th>
45
</th>
<td>
resnetv2_152x2_bitm
</td>
</tr>
<tr>
<th>
46
</th>
<td>
resnetv2_152x2_bitm_in21k
</td>
</tr>
<tr>
<th>
47
</th>
<td>
resnetv2_152x4_bitm
</td>
</tr>
<tr>
<th>
48
</th>
<td>
resnetv2_152x4_bitm_in21k
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>resnet10t</code> model</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> resnet</span>
<span id="cb16-2">resnet_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'resnet10t'</span></span>
<span id="cb16-3">pd.DataFrame.from_dict(resnet.default_cfgs[resnet_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:600px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-rsb-weights/resnet10t_176_c3-f3215ab1.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 176, 176)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(6, 6)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bilinear
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv1.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
fc
</td>
</tr>
<tr>
<th>
test_crop_pct
</th>
<td>
0.95
</td>
</tr>
<tr>
<th>
test_input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Select a model</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># model_type = convnext</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># model_name = convnext_model</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;"># model_type = efficientnet</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># model_name = mobilenetv2_model</span></span>
<span id="cb17-5">model_type <span class="op" style="color: #5E5E5E;">=</span> resnet</span>
<span id="cb17-6">model_name <span class="op" style="color: #5E5E5E;">=</span> resnet_model</span></code></pre></div>
<p><strong>Store normalization stats</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">mean <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'mean'</span>]</span>
<span id="cb18-2">std <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'std'</span>]</span>
<span id="cb18-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
</section>
<section id="modify-transforms" class="level2">
<h2 class="anchored" data-anchor-id="modify-transforms">Modify Transforms</h2>
<p>We can apply the normalization stats at the end of the batch transforms.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [FlipItem(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>), Resize(input_dims, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb20-2"></span>
<span id="cb20-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb20-4">    Contrast(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb20-5">    Saturation(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb20-6">    Hue(max_hue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb20-7">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb20-8">        size<span class="op" style="color: #5E5E5E;">=</span>input_dims, </span>
<span id="cb20-9">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb20-10">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb20-11">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb20-12">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb20-13">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb20-14">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb20-15">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb20-16">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb20-17">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb20-18">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border),</span>
<span id="cb20-19">    Normalize.from_stats(mean<span class="op" style="color: #5E5E5E;">=</span>mean, std<span class="op" style="color: #5E5E5E;">=</span>std)</span>
<span id="cb20-20">]</span></code></pre></div>
</section>
<section id="define-learner" class="level2">
<h2 class="anchored" data-anchor-id="define-learner">Define Learner</h2>
<p>The training process is identical to the original tutorial, and we only need to pass the name of the Timm model to the <code>vision_learner</code> object.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model_name, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics).to_fp16()</span></code></pre></div>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>The OpenVINO model conversion script does not support PyTorch models, so we need to export the trained model to ONNX. We can then convert the ONNX model to OpenVINO’s IR format.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb22-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>'asl-and-some-words-resnet10t.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">torch.onnx.export(learn.model.cpu(),</span>
<span id="cb24-2">                  batched_tensor,</span>
<span id="cb24-3">                  onnx_file_name,</span>
<span id="cb24-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb24-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>,</span>
<span id="cb24-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb24-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb24-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb24-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb24-10">                 )</span></code></pre></div>
<p>Now we can define the argument for OpenVINO’s model conversion script.</p>
<p><strong>Import OpenVINO Dependencies</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Markdown, display</span></code></pre></div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">from</span> openvino.runtime <span class="im" style="color: #00769E;">import</span> Core</span></code></pre></div>
<p><strong>Define export directory</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">output_dir <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'./'</span>)</span>
<span id="cb27-2">output_dir</span></code></pre></div>
<pre class="text"><code>Path('.')</code></pre>
<p><strong>Define path for OpenVINO IR xml model file</strong></p>
<p>The conversion script generates an XML containing information about the model architecture and a BIN file that stores the trained weights. We need both files to perform inference. OpenVINO uses the same name for the BIN file as provided for the XML file.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">ir_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">.</span>split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.xml"</span>)</span>
<span id="cb29-2">ir_path</span></code></pre></div>
<pre class="text"><code>Path('asl-and-some-words-resnet10t.xml')</code></pre>
<p><strong>Define arguments for model conversion script</strong></p>
<p>OpenVINO provides the option to include the normalization stats in the IR model. That way, we don’t need to account for different normalization stats when performing inference with multiple models. We can also convert the model to FP16 precision to reduce file size and improve inference speed.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Construct the command for Model Optimizer</span></span>
<span id="cb31-2">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""mo</span></span>
<span id="cb31-3"><span class="ss" style="color: #20794D;">                 --input_model "</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-4"><span class="ss" style="color: #20794D;">                 --input_shape "[1,3, </span><span class="sc" style="color: #5E5E5E;">{</span>input_dims[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span>input_dims[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span></span>
<span id="cb31-5"><span class="ss" style="color: #20794D;">                 --mean_values="</span><span class="sc" style="color: #5E5E5E;">{</span>mean<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-6"><span class="ss" style="color: #20794D;">                 --scale_values="</span><span class="sc" style="color: #5E5E5E;">{</span>std<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-7"><span class="ss" style="color: #20794D;">                 --data_type FP16</span></span>
<span id="cb31-8"><span class="ss" style="color: #20794D;">                 --output_dir "</span><span class="sc" style="color: #5E5E5E;">{</span>output_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-9"><span class="ss" style="color: #20794D;">                 """</span></span>
<span id="cb31-10">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span>.join(mo_command.split())</span>
<span id="cb31-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model Optimizer command to convert the ONNX model to OpenVINO:"</span>)</span>
<span id="cb31-12">display(Markdown(<span class="ss" style="color: #20794D;">f"`</span><span class="sc" style="color: #5E5E5E;">{</span>mo_command<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`"</span>))</span></code></pre></div>
<pre class="text"><code>Model Optimizer command to convert the ONNX model to OpenVINO:</code></pre>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;">mo</span> <span class="at" style="color: #657422;">--input_model</span> <span class="st" style="color: #20794D;">"asl-and-some-words-resnet10t.onnx"</span> <span class="at" style="color: #657422;">--input_shape</span> <span class="st" style="color: #20794D;">"[1,3, 216, 384]"</span> <span class="at" style="color: #657422;">--mean_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.485, 0.456, 0.406)"</span> <span class="at" style="color: #657422;">--scale_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.229, 0.224, 0.225)"</span> <span class="at" style="color: #657422;">--data_type</span> FP16 <span class="at" style="color: #657422;">--output_dir</span> <span class="st" style="color: #20794D;">"."</span></span></code></pre></div>
<p><strong>Convert ONNX model to OpenVINO IR</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> ir_path.exists():</span>
<span id="cb34-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Exporting ONNX model to IR... This may take a few minutes."</span>)</span>
<span id="cb34-3">    mo_result <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sx $mo_command</span>
<span id="cb34-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>.join(mo_result))</span>
<span id="cb34-5"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb34-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"IR model </span><span class="sc" style="color: #5E5E5E;">{</span>ir_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> already exists."</span>)</span></code></pre></div>
<pre class="text"><code>    Exporting ONNX model to IR... This may take a few minutes.
    Model Optimizer arguments:
    Common parameters:
        - Path to the Input Model:  /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/asl-and-some-words-resnet10t.onnx
        - Path for generated IR:    /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/.
        - IR output name:   asl-and-some-words-resnet10t
        - Log level:    ERROR
        - Batch:    Not specified, inherited from the model
        - Input layers:     Not specified, inherited from the model
        - Output layers:    Not specified, inherited from the model
        - Input shapes:     [1,3, 216, 384]
        - Source layout:    Not specified
        - Target layout:    Not specified
        - Layout:   Not specified
        - Mean values:  (0.485, 0.456, 0.406)
        - Scale values:     (0.229, 0.224, 0.225)
        - Scale factor:     Not specified
        - Precision of IR:  FP16
        - Enable fusing:    True
        - User transformations:     Not specified
        - Reverse input channels:   False
        - Enable IR generation for fixed input shape:   False
        - Use the transformations config file:  None
    Advanced parameters:
        - Force the usage of legacy Frontend of Model Optimizer for model conversion into IR:   False
        - Force the usage of new Frontend of Model Optimizer for model conversion into IR:  False
    OpenVINO runtime found in:  /home/innom-dt/mambaforge/envs/fastai-openvino/lib/python3.9/site-packages/openvino
    OpenVINO runtime version:   2022.1.0-7019-cdb9bec7210-releases/2022/1
    Model Optimizer version:    2022.1.0-7019-cdb9bec7210-releases/2022/1
    [ WARNING ]  
    Detected not satisfied dependencies:
        numpy: installed: 1.23.0, required: &lt; 1.20
    
    Please install required versions of components or run pip installation
    pip install openvino-dev
    [ SUCCESS ] Generated IR version 11 model.
    [ SUCCESS ] XML file: /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/asl-and-some-words-resnet10t.xml
    [ SUCCESS ] BIN file: /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/asl-and-some-words-resnet10t.bin
    [ SUCCESS ] Total execution time: 0.43 seconds. 
    [ SUCCESS ] Memory consumed: 123 MB. 
    It's been a while, check for a new version of Intel(R) Distribution of OpenVINO(TM) toolkit here https://software.intel.com/content/www/us/en/develop/tools/openvino-toolkit/download.html?cid=other&amp;source=prod&amp;campid=ww_2022_bu_IOTG_OpenVINO-2022-1&amp;content=upg_all&amp;medium=organic or on the GitHub*
    [ INFO ] The model was converted to IR v11, the latest model format that corresponds to the source DL framework input/output format. While IR v11 is backwards compatible with OpenVINO Inference Engine API v1.0, please use API v2.0 (as of 2022.1) to take advantage of the latest improvements in IR v11.
    Find more information about API v2.0 and IR v11 at https://docs.openvino.ai</code></pre>
</section>
<section id="benchmark-openvino-inference" class="level2">
<h2 class="anchored" data-anchor-id="benchmark-openvino-inference">Benchmark OpenVINO Inference</h2>
<p>Now we can compare inference speed between OpenVINO and PyTorch. OpenVINO supports inference with ONNX models in addition to its IR format.</p>
<p><strong>Get available OpenVINO compute devices</strong></p>
<p>OpenVINO does not support GPU inference with non-Intel GPUs.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">devices <span class="op" style="color: #5E5E5E;">=</span> ie.available_devices</span>
<span id="cb36-2"><span class="cf" style="color: #003B4F;">for</span> device <span class="kw" style="color: #003B4F;">in</span> devices:</span>
<span id="cb36-3">    device_name <span class="op" style="color: #5E5E5E;">=</span> ie.get_property(device_name<span class="op" style="color: #5E5E5E;">=</span>device, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FULL_DEVICE_NAME"</span>)</span>
<span id="cb36-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>device<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>device_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>CPU: 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz</code></pre>
<p><strong>Create normalized input for ONNX model</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">normalized_input_image <span class="op" style="color: #5E5E5E;">=</span> batched_tensor.cpu().detach().numpy()</span>
<span id="cb38-2">normalized_input_image.shape</span></code></pre></div>
<pre class="text"><code>(1, 3, 224, 224)</code></pre>
<p><strong>Test ONNX model using OpenVINO</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># Load network to Inference Engine</span></span>
<span id="cb40-2">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb40-3">model_onnx <span class="op" style="color: #5E5E5E;">=</span> ie.read_model(model<span class="op" style="color: #5E5E5E;">=</span>onnx_file_name)</span>
<span id="cb40-4">compiled_model_onnx <span class="op" style="color: #5E5E5E;">=</span> ie.compile_model(model<span class="op" style="color: #5E5E5E;">=</span>model_onnx, device_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPU"</span>)</span>
<span id="cb40-5"></span>
<span id="cb40-6">input_layer_onnx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_onnx.inputs))</span>
<span id="cb40-7">output_layer_onnx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_onnx.outputs))</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;"># Run inference on the input image</span></span>
<span id="cb40-10">res_onnx <span class="op" style="color: #5E5E5E;">=</span> compiled_model_onnx(inputs<span class="op" style="color: #5E5E5E;">=</span>[normalized_input_image])[output_layer_onnx]</span>
<span id="cb40-11">learn.dls.vocab[np.argmax(res_onnx)]</span></code></pre></div>
<pre class="text"><code>'J'</code></pre>
<p><strong>Benchmark ONNX model CPU inference speed</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb42-2">compiled_model_onnx(inputs<span class="op" style="color: #5E5E5E;">=</span>[normalized_input_image])[output_layer_onnx]</span></code></pre></div>
<pre class="text"><code>3.62 ms ± 61.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
<p><strong>Prepare input image for OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">input_image <span class="op" style="color: #5E5E5E;">=</span> scaled_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb44-2">input_image.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 224, 224])</code></pre>
<p><strong>Test OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># Load the network in Inference Engine</span></span>
<span id="cb46-2">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb46-3">model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.read_model(model<span class="op" style="color: #5E5E5E;">=</span>ir_path)</span>
<span id="cb46-4">model_ir.reshape(input_image.shape)</span>
<span id="cb46-5">compiled_model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.compile_model(model<span class="op" style="color: #5E5E5E;">=</span>model_ir, device_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPU"</span>)</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;"># Get input and output layers</span></span>
<span id="cb46-8">input_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.inputs))</span>
<span id="cb46-9">output_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.outputs))</span>
<span id="cb46-10"></span>
<span id="cb46-11"><span class="co" style="color: #5E5E5E;"># Run inference on the input image</span></span>
<span id="cb46-12">res_ir <span class="op" style="color: #5E5E5E;">=</span> compiled_model_ir([input_image])[output_layer_ir]</span>
<span id="cb46-13">learn.dls.vocab[np.argmax(res_ir)]</span></code></pre></div>
<pre class="text"><code>'J'</code></pre>
<p><strong>Benchmark OpenVINO IR model CPU inference speed</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb48-2">compiled_model_ir([input_image])[output_layer_ir]</span></code></pre></div>
<pre class="text"><code>3.39 ms ± 84.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
<p><strong>Note:</strong> The IR model is slightly faster than the ONNX model and half the file size.</p>
<p><strong>Benchmark PyTorch model GPU inference speed</strong></p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb50-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;">=</span> learn.model.cuda()(batched_tensor.cuda())</span></code></pre></div>
<pre class="text"><code>1.81 ms ± 5.52 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
<p>PyTorch inference with a Titan RTX is still faster than OpenVINO inference with an i7-11700K for a ResNet10 model. However, OpenVINO CPU inference is often faster when using models optimized for mobile devices, like MobileNet.</p>
<p><strong>Benchmark PyTorch model CPU inference speed</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb52-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;">=</span> learn.model.cpu()(batched_tensor.cpu())</span></code></pre></div>
<pre class="text"><code>8.94 ms ± 52.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
<p>OpenVINO is easily faster than PyTorch for CPU inference.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered how to modify the training code from the <a href="../../fastai-to-unity-tutorial/part-1">fastai-to-unity tutorial</a>to finetune models from the Timm library and export them as OpenVINO IR models. Part 2 will cover creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these models using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>.</p>
<p><strong>Previous:</strong> <a href="../../fastai-to-unity-tutorial/part-3/">Fastai to Unity Tutorial Pt. 3</a></p>
<p><strong>Next:</strong> <a href="../part-2/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>openvino</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-1/index.html</guid>
  <pubDate>Sun, 17 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create a LibTorch Plugin for Unity on Windows Pt. 3</title>
  <link>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Open Unity Project</li>
<li>Add New Asset Files</li>
<li>Allow Unsafe Code</li>
<li>Modify Compute Shader</li>
<li>Create <code>ImageClassifierTorch</code> Script</li>
<li>Modify GUI</li>
<li>Add <code>ImageClassifierTorch</code> Component</li>
<li>Update On Value Changed Events</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform image classification with TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>. This post covers the required modifications for the Unity project from the fastai-to-unity tutorial to use this DLL.</p>
</section>
<section id="open-unity-project" class="level2">
<h2 class="anchored" data-anchor-id="open-unity-project">Open Unity Project</h2>
<p>Open the <a href="../../fastai-to-unity-tutorial/part-1/">Fastai-Unity-Tutorial</a> project in the Unity Editor. The project is available in the GitHub repository linked below for anyone who did not follow the previous tutorial series.</p>
<ul>
<li><strong><a href="https://github.com/cj-mills/fastai-to-unity-tutorial">fastai-to-unity-tutorial GitHub repository</a></strong></li>
</ul>
</section>
<section id="add-new-asset-files" class="level2">
<h2 class="anchored" data-anchor-id="add-new-asset-files">Add New Asset Files</h2>
<p>First, we’ll create a new folder to store the <a href="../part-2/#gather-dependencies">DLL files</a> from part 2. Create a new folder called <code>Plugins</code>, then create a subfolder named <code>x86_64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Copy all the DLL files into the <code>Assets/Plugins/x86_64</code> folder. We then need to close and reopen the project for Unity to load the plugin files.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1eH1JdyFkQQRAK8EA0gsTxXtOylWxZ9Nd?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, we’ll create a folder to store the TorchScript modules. TorchScript modules are not <a href="https://docs.unity3d.com/Manual/AssetTypes.html">supported asset types</a>, so we need to place them in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder. Create a new folder named <code>StreamingAssets</code>. We’ll put the files in a new subfolder called <code>TorchScriptModules</code> to keep things organized.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-streaming-assets-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add any TorchScript files into the <code>Assets/StreamingAssets/TorchScriptModules</code> folder.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1J6keeA3w22Lk0s-mSHfPcFbSosalCSyL?usp=sharing">TorchScriptModules Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-torchscript-modules.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Lastly, we’ll store the JSON files with the normalization stats in a new assets folder called <code>NormalizationStats</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-normalization-stats-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the LibTorch plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can start modifying the code.</p>
</section>
<section id="modify-compute-shader" class="level2">
<h2 class="anchored" data-anchor-id="modify-compute-shader">Modify Compute Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in the <code>ProcessingShader</code> compute shader before sending it to the plugin. We need to know the height of the input image, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb1-2">#pragma kernel NormalizeImageNet</span>
<span id="cb1-3">#pragma kernel FlipXAxis</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb1-6">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb1-8">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb1-12"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb1-15">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-16">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb1-17">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-18">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb1-19">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb1-22">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-23">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb1-27"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb1-28"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-29"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb1-31">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb1-33">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb1-34">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb1-35">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb1-36">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb1-37">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb1-38">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb1-39">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-40"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-imageclassifiertorch-script" class="level2">
<h2 class="anchored" data-anchor-id="create-imageclassifiertorch-script">Create <code>ImageClassifierTorch</code> Script</h2>
<p>Duplicate the <code>ImageClassifier</code> script and name the copy <code>ImageClassifierTorch</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-image-classifier-torch-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update class name</strong></p>
<p>Open the new script in the code editor and replace the class name with the new file name.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifierTorch <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span></code></pre></div>
<p><strong>Update required namespaces</strong></p>
<p>We no longer need the Barracuda namespace. Instead, we need the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-5.0">System.Runtime.InteropServices</a> namespace to handle interactions with the LibTorch plugin.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Remove Barracuda code</strong></p>
<p>We need to delete all the public and private Barracuda variables, along with the <code>InitializeWorker</code> and <code>OnDisable</code> methods.</p>
<p><strong>Update data processing variables</strong></p>
<p>We can remove the <code>processingMaterial</code> variable from the Data Processing section. We no longer need to download model output from the GPU to the CPU. However, we now need to download the input image to the CPU before sending it to the plugin. We can do this asynchronously to help reduce the GPU-to-CPU performance bottleneck.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update variables for user interface</strong></p>
<p>We’ll add a new dropdown so that we can switch between the available TorchScript modules at runtime.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available torchscript models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the LibTorch plugin</strong></p>
<p>Next, we’ll create variables to indicate the StreamingAssets subfolder for the TorchScript modules and add the JSON files with the normalization stats.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Libtorch"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the libtorch models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> torchscriptModulesDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"TorchScriptModules"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A list json files containing the normalization stats for available models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> TextAsset<span class="op" style="color: #5E5E5E;">[]</span> normalizationStatsList<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update input variables</strong></p>
<p>Like in the previous tutorial series, when using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the LibTorch plugin</strong></p>
<p>We’ll store the full paths and names for the Torchscript modules in separate lists. We also need to create another little class that indicates the structure of the JSON content for files with normalization stats.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">// File paths for the available torchscript models</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">// Names of the available torchscript models</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;">// A class for reading in normalization stats from a JSON file</span></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;">class</span> NormalizationStats <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Import functions from the LibTorch plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Libtorch_CPU_Image_Classifier_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p><strong>Define method to get the available TorchScript modules</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available torchscript models</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetTorchModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb10-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for the .pt file for each model</span></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{modelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-9">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".pt"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-10">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-11">            modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-12">            <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'.'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-13">            modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Substring</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-14">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb11-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb11-8">    <span class="kw" style="color: #003B4F;">foreach</span><span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb11-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb11-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb11-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb11-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-19">    <span class="co" style="color: #5E5E5E;">// Add TorchScript model names to menu</span></span>
<span id="cb11-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb11-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update Start method</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb12-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb12-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb12-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb12-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb12-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb12-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb12-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-21"></span>
<span id="cb12-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb12-23">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-24"></span>
<span id="cb12-25">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available torchscript models</span></span>
<span id="cb12-26">    <span class="fu" style="color: #4758AB;">GetTorchModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-27"></span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb12-29">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-30"></span>
<span id="cb12-31">    <span class="co" style="color: #5E5E5E;">// Update the selected torchscript model</span></span>
<span id="cb12-32">    <span class="fu" style="color: #4758AB;">UpdateTorchScriptModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-33"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb13-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb13-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb13-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb13-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb13-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb13-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb13-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-20"></span>
<span id="cb13-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb13-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb13-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-25"></span>
<span id="cb13-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb13-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-28"></span>
<span id="cb13-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb13-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-31"></span>
<span id="cb13-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb13-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb14-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb14-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb14-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb14-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb15-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-8">    <span class="dt" style="color: #AD0000;">int</span> classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-9"></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb15-12">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-13">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the predicted class index</span></span>
<span id="cb15-14">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-16"></span>
<span id="cb15-17">    <span class="kw" style="color: #003B4F;">return</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Modify Update method</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb16-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb16-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-9"></span>
<span id="cb16-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb16-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-12"></span>
<span id="cb16-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb16-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb16-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb16-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb16-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-26"></span>
<span id="cb16-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb16-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb16-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-32"></span>
<span id="cb16-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb16-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-36"></span>
<span id="cb16-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb16-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-39"></span>
<span id="cb16-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-43">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-44"></span>
<span id="cb16-45">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureGPU.width}x{inputTextureGPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-46"></span>
<span id="cb16-47">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb16-48">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-49"></span>
<span id="cb16-50">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb16-51">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-52"></span>
<span id="cb16-53">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb16-54">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-55">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-56">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-58">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb16-59">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-61">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-62">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-63">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-64"></span>
<span id="cb16-65">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb16-66">    classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-67">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Class Index: {classIndex}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-68"></span>
<span id="cb16-69">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb16-70">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-71">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>validIndex <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[classIndex]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Invalid index"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-72"></span>
<span id="cb16-73">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb16-74">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-75"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a method to update the current TorchScript model</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Update the selected torchscript model</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateTorchScriptModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-6">    <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> modelNames<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb17-7">    <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-8">    <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>TextAsset textAsset <span class="kw" style="color: #003B4F;">in</span> normalizationStatsList<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-12">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span>textAsset<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"-"</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]))</span></span>
<span id="cb17-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-14">            <span class="co" style="color: #5E5E5E;">// Initialize the normalization stats from JSON file</span></span>
<span id="cb17-15">            mean <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>NormalizationStats<span class="op" style="color: #5E5E5E;">&gt;(</span>textAsset<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">mean</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-16">            std <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>NormalizationStats<span class="op" style="color: #5E5E5E;">&gt;(</span>textAsset<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">std</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-17">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-18">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-19"></span>
<span id="cb17-20">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mean<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-21">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-22">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Unable to find normalization stats"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-23">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-25">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-26">        <span class="dt" style="color: #AD0000;">string</span> mean_str <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-27">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> val <span class="kw" style="color: #003B4F;">in</span> mean<span class="op" style="color: #5E5E5E;">)</span> mean_str <span class="op" style="color: #5E5E5E;">+=</span> $<span class="st" style="color: #20794D;">"{val} "</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-28">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Mean Stats: {mean_str}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-29">        <span class="dt" style="color: #AD0000;">string</span> std_str <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-30">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> val <span class="kw" style="color: #003B4F;">in</span> std<span class="op" style="color: #5E5E5E;">)</span> std_str <span class="op" style="color: #5E5E5E;">+=</span> $<span class="st" style="color: #20794D;">"{val} "</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-31">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Std Stats: {std_str}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-32">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-33"></span>
<span id="cb17-34">    <span class="co" style="color: #5E5E5E;">// Load the specified torchscript model</span></span>
<span id="cb17-35">    <span class="dt" style="color: #AD0000;">int</span> result <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> mean<span class="op" style="color: #5E5E5E;">,</span> std<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-36">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>result <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Model loaded successfully"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"error loading the model"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-37"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="modify-gui" class="level2">
<h2 class="anchored" data-anchor-id="modify-gui">Modify GUI</h2>
<p>As mentioned earlier, we’ll add a new dropdown menu to the GUI so we can switch between available TorchScript modules at runtime. Select the <code>WebcamDeviceText</code> and <code>WebcamDropdown</code> objects and press Ctrl-d to duplicate them. Rename the duplicates to <code>TorchScriptModelText</code> and <code>TorchScriptModelDropdown</code> respectively.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-torchscript-model-dropdown.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>TorchScriptModelText</code> object and update the <code>Pos Y</code> value to <code>-145</code> and the Text value to <code>TorchScript Model:</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-update-torchscript-model-text-position-and-text.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, select the <code>TorchScriptModelDropdown</code> object and update the <code>Pos Y</code> value to <code>-165</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-update-torchscript-model-dropdown-position.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The updated GUI should look like the image below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-view-updated-gui.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-imageclassifiertorch-component" class="level2">
<h2 class="anchored" data-anchor-id="add-imageclassifiertorch-component">Add <code>ImageClassifierTorch</code> Component</h2>
<p>Now we can add the new <code>ImageClassifierTorch</code> script to the <code>InferenceManager</code> object. Make sure to disable the existing <code>ImageClassifier</code> component, as shown below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-image-classifier-torch-component.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="update-on-value-changed-events" class="level2">
<h2 class="anchored" data-anchor-id="update-on-value-changed-events">Update On Value Changed Events</h2>
<p>With the <code>ImageClassifierTorch</code> component added, we can update the On Value Changed events for the <code>WebcamToggle</code>, <code>WebcamDropdown</code>, and <code>TorchScriptModelDropdown</code> objects.</p>
<p><strong>Update the <code>WebcamToggle</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-webcam-toggle-update-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update the <code>WebcamDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-webcam-dropdown-update-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Update the <code>TorchScriptModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-update-torchscript-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This tutorial series covered creating a LibTorch plugin to perform inference with recent model architectures in the Unity game engine. LibTorch also provides the ability to update the model weights within the Unity application, which we might explore in a future tutorial.</p>
<p><strong>Previous:</strong> <a href="../part-2/">How to Create a LibTorch Plugin for Unity on Windows Pt.2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>libtorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/index.html</guid>
  <pubDate>Tue, 28 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create a LibTorch Plugin for Unity on Windows Pt. 2</title>
  <link>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Download Dependencies</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered modifying the training code from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a> to finetune models from the Timm library and export them as TorchScript modules. This post covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>.</p>
</section>
<section id="download-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="download-dependencies">Download Dependencies</h2>
<p>We need to download some dependencies before creating our Visual Studio project.</p>
<section id="download-opencv" class="level3">
<h3 class="anchored" data-anchor-id="download-opencv">Download OpenCV</h3>
<p>Our LibTorch DLL requires the <a href="https://github.com/opencv/opencv">OpenCV</a> library to process image data from Unity. The tutorial uses OpenCV 4.6.0, which is available at the link below.</p>
<ul>
<li><a href="https://github.com/opencv/opencv/releases/tag/4.6.0">OpenCV 4.6.0 GitHub</a></li>
</ul>
<p>Select the <code>opencv-4.6.0-vc14_vc15.exe</code> option from the Assets list.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/opencv_github_download_executable.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Run the executable once it finishes downloading. You might get a warning from Windows that the executable is an unrecognized app. We can bypass this by clicking the <code>More info</code> text, then the Run anyway button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/windows-defender-smartscreen-warning.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, click the <code>Run anyway</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/windows-defender-smartscreen-warning-run-anyway.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The executable will prompt us to select a location to extract the opencv folder. We’ll need to give Visual Studio this location to access the library’s functionality. I tend to place my C++ dependencies in a dedicated folder for consistency.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/opencv-select-extraction-location.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>If we open the opencv folder, we can see a build folder and a source folder. Everything we need is in the build folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/opencv-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="download-libtorch" class="level3">
<h3 class="anchored" data-anchor-id="download-libtorch">Download LibTorch</h3>
<p>PyTorch provides CPU and CUDA versions of LibTorch for Windows, but we’ll only be working with the CPU version for this post.</p>
<p>I encountered significant variance in CUDA performance between the Stable, Preview, and LTS releases. Stable CUDA inference speed was slower than CPU inference for the ConvNext and MobileViT models. The LTS release did not seem to support those models at all.</p>
<p>More importantly, LibTorch requires a “warmup” phase for CUDA inference where the initial model executions take a few seconds instead of a few milliseconds. Unity did not handle this well and kept crashing. There might be a way around this issue, but I’ll leave that for a future post.</p>
<p>The LibTorch releases are available on the PyTorch install page linked below. The tutorial uses the <code>Stable (1.1.0)</code> version.</p>
<ul>
<li><a href="https://pytorch.org/get-started/locally/">PyTorch install page</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/download-libtorch-cpu.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>As with the OpenCV library, we must pick a location to extract the LibTorch library.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/libtorch-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can create the Visual Studio DLL project.</p>
</section>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where LibTorch and OpenCV are so we can access their APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Note:</strong> We can change the name of the DLL file using the Target Name parameter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-properties-target-name.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the paths for the following folders and click <code>OK</code>.</p>
<ul>
<li><code>opencv\build\include</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\include</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\include\torch\csrc\api\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the paths to the following files and click <code>OK</code>.</p>
<ul>
<li><code>opencv\build\x64\vc15\lib\*</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\lib\c10.lib</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\lib\torch.lib</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\lib\torch_cpu.lib</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL files included with the LibTorch and OpenCV libraries.</p>
<p><strong>OpenCV DLL file</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/get-opencv-world-dll-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>LibTorch DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/get-libtorch-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the path to the parent folder on your system and click <code>OK</code>.</p>
<ul>
<li><p><code>xcopy &lt;parent-folder-path&gt;\opencv\build\x64\vc15\bin\opencv_world452.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></p></li>
<li><p><code>xcopy &lt;parent-folder-path&gt;\libtorch\lib\*.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></p></li>
<li><p><strong>Example:</strong> <code>xcopy G:\Projects\C++_Projects\Dependencies\opencv\build\x64\vc15\bin\opencv_world452.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We need to make a small change to the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> to avoid some conflicts with LibTorch. Open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Comment or remove the “#include” line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for LibTorch and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;">// One-stop LibTorch header</span></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;torch/script.h&gt;</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;">// One-stop OpenCV header</span></span>
<span id="cb2-15"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// The current torchscript model</span></span>
<span id="cb6-2">torch<span class="op" style="color: #5E5E5E;">::</span>jit<span class="op" style="color: #5E5E5E;">::</span>Module network<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">// The mean normalization stats for the current model</span></span>
<span id="cb6-5"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> mean_stats<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">// The std normalization stats for the current model</span></span>
<span id="cb6-7"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> std_stats<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define a function to load a TorchScript module</strong></p>
<p>We’ll place the code for loading a TorchScript module inside a try-catch block to avoid crashing the application if we pass an incorrect file path. We’ll also update the mean and std vectors here since each model might use different normalization stats.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// Load a torchscript model from the specified file path</span></span>
<span id="cb7-2">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> modelPath<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> mean<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">],</span> <span class="dt" style="color: #AD0000;">float</span> std<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-3"></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-5">        <span class="co" style="color: #5E5E5E;">// Deserialize the ScriptModule from a file using torch::jit::load().</span></span>
<span id="cb7-6">        network <span class="op" style="color: #5E5E5E;">=</span> torch<span class="op" style="color: #5E5E5E;">::</span>jit<span class="op" style="color: #5E5E5E;">::</span>load<span class="op" style="color: #5E5E5E;">(</span>modelPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">        <span class="co" style="color: #5E5E5E;">// Empty the normalization vectors</span></span>
<span id="cb7-9">        mean_stats<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-10">        std_stats<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-11"></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;">// Update the normalization vectors</span></span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-14">            mean_stats<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>mean<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb7-15">            std_stats<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>std<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb7-16">        <span class="op" style="color: #5E5E5E;">}</span>           </span>
<span id="cb7-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> c10<span class="op" style="color: #5E5E5E;">::</span>Error<span class="op" style="color: #5E5E5E;">&amp;</span> e<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-19">        <span class="co" style="color: #5E5E5E;">// Return a value of -1 if the model fails to load</span></span>
<span id="cb7-20">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-22"></span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-25"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1 byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>We must first remove the alpha channel and convert the image to a three-channel matrix of 32-bit floats. We can then initialize an input tensor with the pixel data and apply the usual preprocessing steps.</p>
<p>Once again, we’ll use a try-catch block to avoid crashing the application if an error occurs during the forward pass. We can apply the same postprocessing steps as in the training code and return the predicted class index to Unity.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">// Perform inference with the provided texture data</span></span>
<span id="cb8-2">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> inputData<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-3"></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb8-5">    cv<span class="op" style="color: #5E5E5E;">::</span>Mat texture <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>height<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb8-7">    cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;">// Convert RGB image to a three-channel matrix of 32-bit floats</span></span>
<span id="cb8-9">    texture<span class="op" style="color: #5E5E5E;">.</span>convertTo<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">,</span> CV_32FC3<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;">// Initialize a tensor using the texture data</span></span>
<span id="cb8-12">    torch<span class="op" style="color: #5E5E5E;">::</span>Tensor input <span class="op" style="color: #5E5E5E;">=</span> torch<span class="op" style="color: #5E5E5E;">::</span>from_blob<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;">// Permute tensor dimensions</span></span>
<span id="cb8-14">    input <span class="op" style="color: #5E5E5E;">=</span> input<span class="op" style="color: #5E5E5E;">.</span>permute<span class="op" style="color: #5E5E5E;">({</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;">// Scale and normalize color channel values</span></span>
<span id="cb8-16">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> input<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">][</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="va" style="color: #111111;">div_</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">).</span><span class="va" style="color: #111111;">sub_</span><span class="op" style="color: #5E5E5E;">(</span>mean_stats<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]).</span><span class="va" style="color: #111111;">div_</span><span class="op" style="color: #5E5E5E;">(</span>std_stats<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;">// Initialize a vector to store model inputs</span></span>
<span id="cb8-19">    <span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>torch<span class="op" style="color: #5E5E5E;">::</span>jit<span class="op" style="color: #5E5E5E;">::</span>IValue<span class="op" style="color: #5E5E5E;">&gt;</span> inputs<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-20">    <span class="co" style="color: #5E5E5E;">// Add input tensor to inputs vector</span></span>
<span id="cb8-21">    inputs<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>input<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-22"></span>
<span id="cb8-23">    <span class="co" style="color: #5E5E5E;">// Initialize predicted class index to an invalid value</span></span>
<span id="cb8-24">    <span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-25"></span>
<span id="cb8-26">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-27">        <span class="co" style="color: #5E5E5E;">// Enable inference mode</span></span>
<span id="cb8-28">        torch<span class="op" style="color: #5E5E5E;">::</span>InferenceMode guard<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-29">        <span class="co" style="color: #5E5E5E;">// Perform inference and extract the predicted class index</span></span>
<span id="cb8-30">        class_idx <span class="op" style="color: #5E5E5E;">=</span> torch<span class="op" style="color: #5E5E5E;">::</span>softmax<span class="op" style="color: #5E5E5E;">(</span>network<span class="op" style="color: #5E5E5E;">.</span>forward<span class="op" style="color: #5E5E5E;">(</span>inputs<span class="op" style="color: #5E5E5E;">).</span>toTensor<span class="op" style="color: #5E5E5E;">(),</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">).</span>argmax<span class="op" style="color: #5E5E5E;">().</span>item<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb8-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-32">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-33">        <span class="co" style="color: #5E5E5E;">// Return a value of -2 if an error occurs during the forward pass</span></span>
<span id="cb8-34">        class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-35">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-36"></span>
<span id="cb8-37">    <span class="cf" style="color: #003B4F;">return</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-38"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click Build Solution. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference with TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>. Part 3 will cover the required modifications for the original Unity project to use this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-1/">How to Create a LibTorch Plugin for Unity on Windows Pt.1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">How to Create a LibTorch Plugin for Unity on Windows Pt.3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>libtorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/index.html</guid>
  <pubDate>Tue, 28 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create a LibTorch Plugin for Unity on Windows Pt. 1</title>
  <link>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Select a Model</li>
<li>Modify Transforms</li>
<li>Define Learner</li>
<li>Export the Model</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The previous <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity</a> tutorial series implemented a <a href="https://arxiv.org/abs/1512.03385">ResNet</a>-based image classifier in <a href="https://unity.com/">Unity</a> with the <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> inference library. The Barracuda library works well with the older ResNet architecture but does not support more recent ones like <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> and <a href="https://arxiv.org/abs/2110.02178">MobileViT</a> at the time of writing.</p>
<p>This follow-up series covers using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>, the C++ distribution of <a href="https://pytorch.org/">PyTorch</a>, to perform inference with these newer model architectures. We’ll modify the original tutorial code and create a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to access the LibTorch functionality in Unity.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/libtorch-plugin-demo.mp4" class="img-fluid" controls=""><a href="./videos/libtorch-plugin-demo.mp4">Video</a></video></p>
</figure>
</div>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This post covers the required modifications to the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial#training-code">original training code</a>. We’ll finetune models from the <a href="https://github.com/rwightman/pytorch-image-models">Timm library</a> on the same <a href="https://www.kaggle.com/datasets/belalelwikel/asl-and-some-words">ASL dataset</a> as the original tutorial. The Timm library provides access to a wide range of pretrained computer vision models and integrates with the <a href="https://docs.fast.ai/">fastai library</a>. Below is a link to the complete modified training code, along with links for running the notebook on Google Colab and Kaggle.</p>
<table class="table">
<thead>
<tr class="header">
<th>GitHub Repository</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-Torchscript-Tutorial.ipynb">Jupyter Notebook</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-to-libtorch-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-Torchscript-Tutorial.ipynb">Open in Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-Torchscript-Tutorial.ipynb">Open in Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The <a href="https://pypi.org/project/timm/">pip package</a> for the Timm library is more stable than the GitHub repository but has fewer model types and pretrained weights. For example, the pip package has <a href="https://github.com/rwightman/pytorch-image-models/blob/0.5.x/timm/models/convnext.py">pretrained ConvNeXt models</a> but no MobileViT models. However, the latest GitHub version had some issues running the MobileNetV3 models at the time of writing.</p>
<p>Recent <a href="https://github.com/fastai/fastai/releases/tag/2.7.0">updates</a> to the fastai library resolve some <a href="https://benjaminwarner.dev/2022/06/14/debugging-pytorch-performance-decrease">performance issues</a> with PyTorch so let’s update that too. They also provide a new <code>ChannelsLast</code> (beta) callback that further <a href="https://pytorch.org/tutorials/intermediate/memory_format_tutorial.html#performance-gains">improves performance</a> on modern GPUs.</p>
<p><strong>Uncomment the cell below if running on Google Colab or Kaggle</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip3 install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip3 install -U fastai==2.7.2</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip3 install -U kaggle==1.5.12</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip3 install -U Pillow==9.1.0</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># !pip3 install -U timm==0.5.4 # more stable fewer models</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># !pip3 install -U git+https://github.com/rwightman/pytorch-image-models.git # more models less stable</span></span></code></pre></div>
<p><strong>Note for Colab:</strong> You must restart the runtime in order to use newly installed version of Pillow.</p>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p><strong>Disable max rows and columns for pandas</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb3-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="select-a-model" class="level2">
<h2 class="anchored" data-anchor-id="select-a-model">Select a Model</h2>
<p>Let’s start by selecting a model from the Timm library to finetune. The available pretrained models depend on the version of the Timm library installed.</p>
<p><strong>Import the Timm library</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> timm</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">timm.__version__</span></code></pre></div>
<pre class="text"><code>'0.6.2.dev0'</code></pre>
<p><strong>Check available pretrained model types</strong></p>
<p>We can check which model types have pretrained weights using the <code>timm.list_models()</code> function.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">model_types <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">set</span>([model.split(<span class="st" style="color: #20794D;">'_'</span>)[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> model <span class="kw" style="color: #003B4F;">in</span> timm.list_models(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)]))</span>
<span id="cb7-2">model_types.sort()</span>
<span id="cb7-3">pd.DataFrame(model_types)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
adv
</td>
</tr>
<tr>
<th>
1
</th>
<td>
bat
</td>
</tr>
<tr>
<th>
2
</th>
<td>
beit
</td>
</tr>
<tr>
<th>
3
</th>
<td>
botnet26t
</td>
</tr>
<tr>
<th>
4
</th>
<td>
cait
</td>
</tr>
<tr>
<th>
5
</th>
<td>
coat
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convit
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convmixer
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext
</td>
</tr>
<tr>
<th>
9
</th>
<td>
crossvit
</td>
</tr>
<tr>
<th>
10
</th>
<td>
cspdarknet53
</td>
</tr>
<tr>
<th>
11
</th>
<td>
cspresnet50
</td>
</tr>
<tr>
<th>
12
</th>
<td>
cspresnext50
</td>
</tr>
<tr>
<th>
13
</th>
<td>
deit
</td>
</tr>
<tr>
<th>
14
</th>
<td>
densenet121
</td>
</tr>
<tr>
<th>
15
</th>
<td>
densenet161
</td>
</tr>
<tr>
<th>
16
</th>
<td>
densenet169
</td>
</tr>
<tr>
<th>
17
</th>
<td>
densenet201
</td>
</tr>
<tr>
<th>
18
</th>
<td>
densenetblur121d
</td>
</tr>
<tr>
<th>
19
</th>
<td>
dla102
</td>
</tr>
<tr>
<th>
20
</th>
<td>
dla102x
</td>
</tr>
<tr>
<th>
21
</th>
<td>
dla102x2
</td>
</tr>
<tr>
<th>
22
</th>
<td>
dla169
</td>
</tr>
<tr>
<th>
23
</th>
<td>
dla34
</td>
</tr>
<tr>
<th>
24
</th>
<td>
dla46
</td>
</tr>
<tr>
<th>
25
</th>
<td>
dla46x
</td>
</tr>
<tr>
<th>
26
</th>
<td>
dla60
</td>
</tr>
<tr>
<th>
27
</th>
<td>
dla60x
</td>
</tr>
<tr>
<th>
28
</th>
<td>
dm
</td>
</tr>
<tr>
<th>
29
</th>
<td>
dpn107
</td>
</tr>
<tr>
<th>
30
</th>
<td>
dpn131
</td>
</tr>
<tr>
<th>
31
</th>
<td>
dpn68
</td>
</tr>
<tr>
<th>
32
</th>
<td>
dpn68b
</td>
</tr>
<tr>
<th>
33
</th>
<td>
dpn92
</td>
</tr>
<tr>
<th>
34
</th>
<td>
dpn98
</td>
</tr>
<tr>
<th>
35
</th>
<td>
eca
</td>
</tr>
<tr>
<th>
36
</th>
<td>
ecaresnet101d
</td>
</tr>
<tr>
<th>
37
</th>
<td>
ecaresnet269d
</td>
</tr>
<tr>
<th>
38
</th>
<td>
ecaresnet26t
</td>
</tr>
<tr>
<th>
39
</th>
<td>
ecaresnet50d
</td>
</tr>
<tr>
<th>
40
</th>
<td>
ecaresnet50t
</td>
</tr>
<tr>
<th>
41
</th>
<td>
ecaresnetlight
</td>
</tr>
<tr>
<th>
42
</th>
<td>
efficientnet
</td>
</tr>
<tr>
<th>
43
</th>
<td>
efficientnetv2
</td>
</tr>
<tr>
<th>
44
</th>
<td>
ens
</td>
</tr>
<tr>
<th>
45
</th>
<td>
ese
</td>
</tr>
<tr>
<th>
46
</th>
<td>
fbnetc
</td>
</tr>
<tr>
<th>
47
</th>
<td>
fbnetv3
</td>
</tr>
<tr>
<th>
48
</th>
<td>
gc
</td>
</tr>
<tr>
<th>
49
</th>
<td>
gcresnet33ts
</td>
</tr>
<tr>
<th>
50
</th>
<td>
gcresnet50t
</td>
</tr>
<tr>
<th>
51
</th>
<td>
gcresnext26ts
</td>
</tr>
<tr>
<th>
52
</th>
<td>
gcresnext50ts
</td>
</tr>
<tr>
<th>
53
</th>
<td>
gernet
</td>
</tr>
<tr>
<th>
54
</th>
<td>
ghostnet
</td>
</tr>
<tr>
<th>
55
</th>
<td>
gluon
</td>
</tr>
<tr>
<th>
56
</th>
<td>
gmixer
</td>
</tr>
<tr>
<th>
57
</th>
<td>
gmlp
</td>
</tr>
<tr>
<th>
58
</th>
<td>
halo2botnet50ts
</td>
</tr>
<tr>
<th>
59
</th>
<td>
halonet26t
</td>
</tr>
<tr>
<th>
60
</th>
<td>
halonet50ts
</td>
</tr>
<tr>
<th>
61
</th>
<td>
haloregnetz
</td>
</tr>
<tr>
<th>
62
</th>
<td>
hardcorenas
</td>
</tr>
<tr>
<th>
63
</th>
<td>
hrnet
</td>
</tr>
<tr>
<th>
64
</th>
<td>
ig
</td>
</tr>
<tr>
<th>
65
</th>
<td>
inception
</td>
</tr>
<tr>
<th>
66
</th>
<td>
jx
</td>
</tr>
<tr>
<th>
67
</th>
<td>
lambda
</td>
</tr>
<tr>
<th>
68
</th>
<td>
lamhalobotnet50ts
</td>
</tr>
<tr>
<th>
69
</th>
<td>
lcnet
</td>
</tr>
<tr>
<th>
70
</th>
<td>
legacy
</td>
</tr>
<tr>
<th>
71
</th>
<td>
levit
</td>
</tr>
<tr>
<th>
72
</th>
<td>
mixer
</td>
</tr>
<tr>
<th>
73
</th>
<td>
mixnet
</td>
</tr>
<tr>
<th>
74
</th>
<td>
mnasnet
</td>
</tr>
<tr>
<th>
75
</th>
<td>
mobilenetv2
</td>
</tr>
<tr>
<th>
76
</th>
<td>
mobilenetv3
</td>
</tr>
<tr>
<th>
77
</th>
<td>
mobilevit
</td>
</tr>
<tr>
<th>
78
</th>
<td>
nasnetalarge
</td>
</tr>
<tr>
<th>
79
</th>
<td>
nf
</td>
</tr>
<tr>
<th>
80
</th>
<td>
nfnet
</td>
</tr>
<tr>
<th>
81
</th>
<td>
pit
</td>
</tr>
<tr>
<th>
82
</th>
<td>
pnasnet5large
</td>
</tr>
<tr>
<th>
83
</th>
<td>
poolformer
</td>
</tr>
<tr>
<th>
84
</th>
<td>
regnetv
</td>
</tr>
<tr>
<th>
85
</th>
<td>
regnetx
</td>
</tr>
<tr>
<th>
86
</th>
<td>
regnety
</td>
</tr>
<tr>
<th>
87
</th>
<td>
regnetz
</td>
</tr>
<tr>
<th>
88
</th>
<td>
repvgg
</td>
</tr>
<tr>
<th>
89
</th>
<td>
res2net101
</td>
</tr>
<tr>
<th>
90
</th>
<td>
res2net50
</td>
</tr>
<tr>
<th>
91
</th>
<td>
res2next50
</td>
</tr>
<tr>
<th>
92
</th>
<td>
resmlp
</td>
</tr>
<tr>
<th>
93
</th>
<td>
resnest101e
</td>
</tr>
<tr>
<th>
94
</th>
<td>
resnest14d
</td>
</tr>
<tr>
<th>
95
</th>
<td>
resnest200e
</td>
</tr>
<tr>
<th>
96
</th>
<td>
resnest269e
</td>
</tr>
<tr>
<th>
97
</th>
<td>
resnest26d
</td>
</tr>
<tr>
<th>
98
</th>
<td>
resnest50d
</td>
</tr>
<tr>
<th>
99
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
100
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
101
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
102
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
103
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
104
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
105
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
106
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
107
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
108
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
109
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
110
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
111
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
112
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
113
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
114
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
115
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
116
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
117
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
118
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
119
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
120
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
121
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
122
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
123
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
124
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
125
</th>
<td>
resnetv2
</td>
</tr>
<tr>
<th>
126
</th>
<td>
resnext101
</td>
</tr>
<tr>
<th>
127
</th>
<td>
resnext26ts
</td>
</tr>
<tr>
<th>
128
</th>
<td>
resnext50
</td>
</tr>
<tr>
<th>
129
</th>
<td>
resnext50d
</td>
</tr>
<tr>
<th>
130
</th>
<td>
rexnet
</td>
</tr>
<tr>
<th>
131
</th>
<td>
sebotnet33ts
</td>
</tr>
<tr>
<th>
132
</th>
<td>
sehalonet33ts
</td>
</tr>
<tr>
<th>
133
</th>
<td>
selecsls42b
</td>
</tr>
<tr>
<th>
134
</th>
<td>
selecsls60
</td>
</tr>
<tr>
<th>
135
</th>
<td>
selecsls60b
</td>
</tr>
<tr>
<th>
136
</th>
<td>
semnasnet
</td>
</tr>
<tr>
<th>
137
</th>
<td>
sequencer2d
</td>
</tr>
<tr>
<th>
138
</th>
<td>
seresnet152d
</td>
</tr>
<tr>
<th>
139
</th>
<td>
seresnet33ts
</td>
</tr>
<tr>
<th>
140
</th>
<td>
seresnet50
</td>
</tr>
<tr>
<th>
141
</th>
<td>
seresnext101
</td>
</tr>
<tr>
<th>
142
</th>
<td>
seresnext101d
</td>
</tr>
<tr>
<th>
143
</th>
<td>
seresnext26d
</td>
</tr>
<tr>
<th>
144
</th>
<td>
seresnext26t
</td>
</tr>
<tr>
<th>
145
</th>
<td>
seresnext26ts
</td>
</tr>
<tr>
<th>
146
</th>
<td>
seresnext50
</td>
</tr>
<tr>
<th>
147
</th>
<td>
seresnextaa101d
</td>
</tr>
<tr>
<th>
148
</th>
<td>
skresnet18
</td>
</tr>
<tr>
<th>
149
</th>
<td>
skresnet34
</td>
</tr>
<tr>
<th>
150
</th>
<td>
skresnext50
</td>
</tr>
<tr>
<th>
151
</th>
<td>
spnasnet
</td>
</tr>
<tr>
<th>
152
</th>
<td>
ssl
</td>
</tr>
<tr>
<th>
153
</th>
<td>
swin
</td>
</tr>
<tr>
<th>
154
</th>
<td>
swinv2
</td>
</tr>
<tr>
<th>
155
</th>
<td>
swsl
</td>
</tr>
<tr>
<th>
156
</th>
<td>
tf
</td>
</tr>
<tr>
<th>
157
</th>
<td>
tinynet
</td>
</tr>
<tr>
<th>
158
</th>
<td>
tnt
</td>
</tr>
<tr>
<th>
159
</th>
<td>
tresnet
</td>
</tr>
<tr>
<th>
160
</th>
<td>
tv
</td>
</tr>
<tr>
<th>
161
</th>
<td>
twins
</td>
</tr>
<tr>
<th>
162
</th>
<td>
vgg11
</td>
</tr>
<tr>
<th>
163
</th>
<td>
vgg13
</td>
</tr>
<tr>
<th>
164
</th>
<td>
vgg16
</td>
</tr>
<tr>
<th>
165
</th>
<td>
vgg19
</td>
</tr>
<tr>
<th>
166
</th>
<td>
visformer
</td>
</tr>
<tr>
<th>
167
</th>
<td>
vit
</td>
</tr>
<tr>
<th>
168
</th>
<td>
volo
</td>
</tr>
<tr>
<th>
169
</th>
<td>
wide
</td>
</tr>
<tr>
<th>
170
</th>
<td>
xception
</td>
</tr>
<tr>
<th>
171
</th>
<td>
xception41
</td>
</tr>
<tr>
<th>
172
</th>
<td>
xception41p
</td>
</tr>
<tr>
<th>
173
</th>
<td>
xception65
</td>
</tr>
<tr>
<th>
174
</th>
<td>
xception65p
</td>
</tr>
<tr>
<th>
175
</th>
<td>
xception71
</td>
</tr>
<tr>
<th>
176
</th>
<td>
xcit
</td>
</tr>
</tbody>

</table>
</div>
<p>Timm provides many pretrained models, but not all of them are fast enough for real-time applications. We can filter the results by providing a full or partial model name.</p>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> models</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'convnext*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
convnext_base
</td>
</tr>
<tr>
<th>
1
</th>
<td>
convnext_base_384_in22ft1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
convnext_base_in22ft1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
convnext_base_in22k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
convnext_large
</td>
</tr>
<tr>
<th>
5
</th>
<td>
convnext_large_384_in22ft1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convnext_large_in22ft1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convnext_large_in22k
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext_small
</td>
</tr>
<tr>
<th>
9
</th>
<td>
convnext_small_384_in22ft1k
</td>
</tr>
<tr>
<th>
10
</th>
<td>
convnext_small_in22ft1k
</td>
</tr>
<tr>
<th>
11
</th>
<td>
convnext_small_in22k
</td>
</tr>
<tr>
<th>
12
</th>
<td>
convnext_tiny
</td>
</tr>
<tr>
<th>
13
</th>
<td>
convnext_tiny_384_in22ft1k
</td>
</tr>
<tr>
<th>
14
</th>
<td>
convnext_tiny_hnf
</td>
</tr>
<tr>
<th>
15
</th>
<td>
convnext_tiny_in22ft1k
</td>
</tr>
<tr>
<th>
16
</th>
<td>
convnext_tiny_in22k
</td>
</tr>
<tr>
<th>
17
</th>
<td>
convnext_xlarge_384_in22ft1k
</td>
</tr>
<tr>
<th>
18
</th>
<td>
convnext_xlarge_in22ft1k
</td>
</tr>
<tr>
<th>
19
</th>
<td>
convnext_xlarge_in22k
</td>
</tr>
</tbody>

</table>
</div>
<p>Let’s go with the <code>convnext_tiny</code> model since we want higher framerates. Each model comes with a set of default configuration parameters. We must keep track of the mean and std values used to normalize the model input. Many pretrained models use the ImageNet normalization stats, but others like MobileViT do not.</p>
<p><strong>Inspect the default configuration for the <code>convnext_tiny</code> model</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> convnext</span>
<span id="cb9-2">convnext_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_tiny'</span></span>
<span id="cb9-3">pd.DataFrame.from_dict(convnext.default_cfgs[convnext_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x: auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://dl.fbaipublicfiles.com/convnext/convnext_tiny_1k_224_ema.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/1801.04381">MobileNetV2</a> models</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilenetv2*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilenetv2_050
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilenetv2_100
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilenetv2_110d
</td>
</tr>
<tr>
<th>
3
</th>
<td>
mobilenetv2_120d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
mobilenetv2_140
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilenetv2_050</code> model</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> efficientnet</span>
<span id="cb11-2">mobilenetv2_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilenetv2_050'</span></span>
<span id="cb11-3">pd.DataFrame.from_dict(efficientnet.default_cfgs[mobilenetv2_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv2_050-3d30d450.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv_stem
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
classifier
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/1905.02244">MobileNetV3</a> models</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilenetv3*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilenetv3_large_100
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilenetv3_large_100_miil
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilenetv3_large_100_miil_in21k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
mobilenetv3_rw
</td>
</tr>
<tr>
<th>
4
</th>
<td>
mobilenetv3_small_050
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mobilenetv3_small_075
</td>
</tr>
<tr>
<th>
6
</th>
<td>
mobilenetv3_small_100
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilenetv3_small_050</code> model</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> mobilenetv3</span>
<span id="cb13-2">mobilenetv3_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilenetv3_small_050'</span></span>
<span id="cb13-3">pd.DataFrame.from_dict(mobilenetv3.default_cfgs[mobilenetv3_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv3_small_050_lambc-4b7bbe87.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv_stem
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
classifier
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/2110.02178">MobileViT</a> models</strong> * <strong>Note:</strong> MobileViT models are not available in timm <code>0.5.4</code></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilevit*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilevit_s
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilevit_xs
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilevit_xxs
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilevit_xxs</code> model</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> mobilevit</span>
<span id="cb15-2">mobilevit_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilevit_xxs'</span></span>
<span id="cb15-3">pd.DataFrame.from_dict(mobilevit.default_cfgs[mobilevit_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-mvit-weights/mobilevit_xxs-ad385b40.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 256, 256)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(8, 8)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.9
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0, 0, 0)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(1, 1, 1)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.conv
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
<tr>
<th>
fixed_input_size
</th>
<td>
False
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Select a model</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">model_type <span class="op" style="color: #5E5E5E;">=</span> convnext</span>
<span id="cb16-2">model_name <span class="op" style="color: #5E5E5E;">=</span> convnext_model</span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># model_type = efficientnet</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;"># model_name = mobilenetv2_model</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;"># model_type = mobilenetv3</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;"># model_name = mobilenetv3_model</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># model_type = mobilevit</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;"># model_name = mobilevit_model</span></span></code></pre></div>
<p>After picking a model, we’ll store the related normalization stats for future use.</p>
<p><strong>Store normalization stats</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">mean <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'mean'</span>]</span>
<span id="cb17-2">std <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'std'</span>]</span>
<span id="cb17-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p><strong>Define target input dimensions</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># size_1_1 = (224, 224)</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># size_3_2 = (224, 336)</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># size_4_3 = (216, 288)</span></span>
<span id="cb19-4">size_16_9 <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">216</span>, <span class="dv" style="color: #AD0000;">384</span>)</span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># size_16_9_l = (288, 512)</span></span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">input_dims <span class="op" style="color: #5E5E5E;">=</span> size_16_9</span></code></pre></div>
</section>
<section id="modify-transforms" class="level2">
<h2 class="anchored" data-anchor-id="modify-transforms">Modify Transforms</h2>
<p>We can apply the normalization stats at the end of the batch transforms.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [FlipItem(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>), Resize(input_dims, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb21-2"></span>
<span id="cb21-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb21-4">    Contrast(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb21-5">    Saturation(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb21-6">    Hue(max_hue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb21-7">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb21-8">        size<span class="op" style="color: #5E5E5E;">=</span>input_dims, </span>
<span id="cb21-9">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb21-10">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb21-11">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb21-12">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb21-13">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb21-14">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb21-15">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb21-16">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb21-17">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb21-18">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border),</span>
<span id="cb21-19">    Normalize.from_stats(mean<span class="op" style="color: #5E5E5E;">=</span>mean, std<span class="op" style="color: #5E5E5E;">=</span>std)</span>
<span id="cb21-20">]</span></code></pre></div>
</section>
<section id="define-learner" class="level2">
<h2 class="anchored" data-anchor-id="define-learner">Define Learner</h2>
<p>The training process is identical to the original tutorial, and we only need to pass the name of the Timm model to the <code>vision_learner</code> object.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model_name, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics).to_fp16()</span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;"># learn = vision_learner(dls, model_name, metrics=metrics, cbs=[ChannelsLast]).to_fp16()</span></span></code></pre></div>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>Once training completes, we need to convert our trained PyTorch model to a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript</a> module for use in LibTorch. We do so using the <a href="https://pytorch.org/docs/stable/generated/torch.jit.trace.html"><code>torch.jit.trace()</code></a> method.</p>
<p><strong>Generate a TorchScript module using the test image</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">traced_script_module <span class="op" style="color: #5E5E5E;">=</span> torch.jit.trace(learn.model.cpu(), batched_tensor)</span></code></pre></div>
<p>We can perform inference with the TorchScript module the same way we would a PyTorch model.</p>
<p><strong>Verify the TorchScript module’s accuracy</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb24-2">    torchscript_preds <span class="op" style="color: #5E5E5E;">=</span> traced_script_module(batched_tensor)</span>
<span id="cb24-3">learn.dls.vocab[torch.nn.functional.softmax(torchscript_preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).argmax()]</span></code></pre></div>
<pre class="text"><code>'J'</code></pre>
<p><strong>Define TorchScript file name</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">module_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.pt"</span></span>
<span id="cb26-2">module_file_name</span></code></pre></div>
<pre class="text"><code>'asl-and-some-words-convnext_tiny.pt'</code></pre>
<p>Some models like MobileViT will require the exact input dimensions in LibTorch as was used in the <code>torch.jit.trace()</code> method. Therefore we’ll convert the PyTorch model again using the training dimensions before saving the TorchScript module to a file.</p>
<p><strong>Generate a torchscript module using the target input dimensions and save it to a file</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.randn(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">*</span>input_dims).shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 216, 384])</code></pre>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">traced_script_module <span class="op" style="color: #5E5E5E;">=</span> torch.jit.trace(learn.model.cpu(), torch.randn(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">*</span>input_dims))</span>
<span id="cb30-2">traced_script_module.save(module_file_name)</span></code></pre></div>
<p>We can export the normalization stats to a JSON file using the same method for the class labels. We’ll load the stats in Unity and pass them to the LibTorch plugin.</p>
<p><strong>Export model normalization stats</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">normalization_stats <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"mean"</span>: <span class="bu" style="color: null;">list</span>(mean), <span class="st" style="color: #20794D;">"std"</span>: <span class="bu" style="color: null;">list</span>(std)}</span>
<span id="cb31-2">normalization_stats_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-normalization_stats.json"</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(normalization_stats_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb31-5">    json.dump(normalization_stats, write_file)</span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered how to modify the training code from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a>to finetune models from the Timm library and export them as TorchScript modules. Part 2 will cover creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>.</p>
<p><strong>Previous:</strong> <a href="../../fastai-to-unity-tutorial/part-3/">Fastai to Unity Tutorial Pt. 3</a></p>
<p><strong>Next:</strong> <a href="../part-2/">How to Create a LibTorch Plugin for Unity on Windows Pt.2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>libtorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-1/index.html</guid>
  <pubDate>Tue, 28 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fastai to Unity Beginner Tutorial Pt. 3</title>
  <link>christianjmills.com/posts/fastai-to-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create GitHub Pages Repository</li>
<li>Build WebGL Application</li>
<li>Test Live Demo</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1">Part 1</a> covered training an image classification model using the fastai library and exporting it to ONNX. <a href="../part-2/">Part 2</a> covered implementing a trained image classification model in a Unity project using the Barracuda library. In this post, we’ll build a Unity project as a shareable web demo and host it for free using GitHub Pages. The image classifier will execute locally in the user’s web browser.</p>
<p>WebGL builds use Barracuda’s Pixel Shader backend, which is not nearly as performant as the Compute Shader backend. Therefore, I recommend using WebGL for sharing prototypes and target operating systems for final projects.</p>
<p><strong>Pixel Shader Backend: ResNet18</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-pixel-shader-fps-resnet18.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Pixel Shader Backend: ResNet34</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-pixel-shader-fps-resnet34.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Compute Shader Backend: ResNet18</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-fps-resnet18.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Compute Shader Backend: ResNet34</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-fps-resnet34.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Compute Shader Backend with asynchronous GPU readback: ResNet18</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-async-fps-resnet18.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Compute Shader Backend with asynchronous GPU readback: ResNet34</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-async-fps-resnet34.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="create-github-pages-repository" class="level2">
<h2 class="anchored" data-anchor-id="create-github-pages-repository">Create GitHub Pages Repository</h2>
<p>We first need to create a <a href="https://github.com/new">new GitHub repository</a> to store the WebGL build. We can do this on GitHub or locally using Git, GitHub Desktop, or another tool.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-desktop-create-new-repository.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the Settings tab for the new repository on GitHub.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-new-repository.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the Pages section and select the main branch as the source for GitHub Pages.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-select-main-branch.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click the Save button to start the automated build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-click-save.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>GitHub will provide a URL for accessing the web demo once it finishes building.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-get-url.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can check the GitHub Pages build progress under the Actions tab for the repository.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-check-build-progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The web page will be accessible once the “pages build and deployment” workflow completes. Although, we don’t have any web pages at the moment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-build-complete.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="build-webgl-application" class="level2">
<h2 class="anchored" data-anchor-id="build-webgl-application">Build WebGL Application</h2>
<p>In the Unity project, select <code>File → Build Settings...</code> in the top menu bar to open the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-open-build-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select <code>WebGL</code> from the list of platforms and click Switch Platform.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-settings-switch-to-webgl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity enables compression by default for WebGL builds, which GitHub Pages does not support. We can disable compression in the Player Settings. Click the Player Settings button in the bottom-left corner of the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-settings-open-player-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select <code>Disabled</code> from the Compression Format dropdown menu and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-player-settings-disable-webgl-compression.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can test the WebGL build locally by clicking Build and Run in the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-settings-build-and-run.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity will prompt us to select a folder to store the build files.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-select-build-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Navigate to the local folder for the GitHub Pages repository and click Select Folder to start the build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-select-github-pages-repo-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once the build completes, Unity will launch the demo in the default web browser. Unity caps the framerate to the platform’s default <a href="https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html">target framerate</a> by default. On my Windows 10 desktop, that is 60fps.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webgl-build-local-test.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>If we examine the repository folder, we can see a new <code>Build</code> folder, a <code>StreamingAssets</code> folder, a <code>TemplateData</code> folder, and an <code>index.html</code> file.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-repo-folder-after-webgl-build.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can push the local changes to GitHub, which will automatically trigger the “pages build and deployment” workflow.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-check-webgl-build-progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-live-demo" class="level2">
<h2 class="anchored" data-anchor-id="test-live-demo">Test Live Demo</h2>
<p>We can test the web demo at the URL provided by GitHub once the build workflow completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-webgl-demo.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered how to build a Unity project as a shareable web demo and host it using GitHub Pages.</p>
<p><strong>Previous:</strong> <a href="../part-2">Fastai to Unity Tutorial Pt. 2</a></p>
<p><strong>Follow Up:</strong> <a href="../../fastai-libtorch-unity-tutorial/part-1">How to Create a LibTorch Plugin for Unity on Windows Pt.1</a></p>
<p><strong>Follow Up:</strong> <a href="../../fastai-openvino-unity-tutorial/part-1">How to Create an OpenVINO Plugin for Unity on Windows Pt. 1</a></p>
<p><strong>Intermediate Tutorial:</strong> <a href="../../icevision-openvino-unity-tutorial/part-1">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/fastai-to-unity-tutorial/part-3/index.html</guid>
  <pubDate>Wed, 08 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fastai to Unity Beginner Tutorial Pt. 2</title>
  <link>christianjmills.com/posts/fastai-to-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Set Up Unity Hub</li>
<li>Install Unity Editor</li>
<li>Create New Project</li>
<li>Install Barracuda Package</li>
<li>Import Assets</li>
<li>Create Image Classifier Script</li>
<li>Create Processing Shaders</li>
<li>Set up Unity Scene</li>
<li>Test in Editor</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1">Part 1</a> covered training an image classification model using the fastai library and exporting it to ONNX. In this post, we’ll cover implementing a trained image classification model in a Unity project using the Barracuda library.</p>
</section>
<section id="set-up-unity-hub" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-hub">Set Up Unity Hub</h2>
<p>Before creating a project, we need to install <a href="https://unity3d.com/get-unity/download">Unity Hub</a>, create a <a href="https://id.unity.com/">UnityID account</a>, and activate a (free) Unity license. The beginner Unity tutorial linked below covers all these steps and how to create a simple flappy bird-style game.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=8rdfcq-jePw&amp;t=113s">Make Your First Video Game - Ultimate Beginner Unity3D Tutorial</a></li>
</ul>
<p>The link opens to the part covering how to install Unity for the first time, but I recommend watching the entire tutorial for those new to Unity.</p>
</section>
<section id="install-unity-editor" class="level2">
<h2 class="anchored" data-anchor-id="install-unity-editor">Install Unity Editor</h2>
<p>Once we have Unity Hub installed and an activated license, we need to install a version of the Unity Editor. We will use the latest 2022.1+ release as early versions have some issues building WebGL projects with Barracuda. The tutorial uses 2022.1.3.f1, which you can install directly from the link below.</p>
<ul>
<li><strong>Unity download archive:</strong> <a href="unityhub://2022.1.3f1/1cedbfe38737">Unity 2022.1.3</a></li>
</ul>
<p>Open Unity Hub and select the <code>Installs</code> section in the side panel. Then click the <code>Install Editor</code> button in the upper right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-installs.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click the <code>Install</code> button next to the latest <code>2022.1</code> version under <code>Other Versions</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-installs-select-2022-1-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Scroll down the <code>Add modules</code> selection menu and click the check box next to <code>WebGL Build Support</code>. Feel free to add any additional target platforms here as well. Click the <code>Install</code> button after selecting all desired modules.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-install-2022-1-3-with-webgl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity Hub will begin downloading and installing the selected editor version. If the install fails the first time, click the retry button, and it should complete successfully.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-install-editor-failed-message.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Go back to the Projects section after the editor finishes installing and click New Project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the target editor version from the Editor Version dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the 2D Core template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, click Create Project in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-click-create-project.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="install-barracuda-package" class="level2">
<h2 class="anchored" data-anchor-id="install-barracuda-package">Install Barracuda Package</h2>
<p>Inside the editor window, we’ll first install the Barracuda package. Select <code>Window → Package Manager</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-open-package-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the Package Manager window, click the little <code>+</code> sign in the upper left-hand corner and select <code>Add package from git URL...</code> from the dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-package-manager-add-from-git.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Enter <code>com.unity.barracuda</code> into the text box and click <code>Add</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-package-manager-add-barracuda.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Wait for the Barracuda package to install and close the Package Manager window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-package-manager-installing-barracuda-please-wait.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Next, we’ll import any ONNX, JSON, and test image files into the Assets folder. Right-click a space in the Assets section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the new folder Models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-models-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Drag and drop any ONNX files and JSON class label files from the operating system’s file explorer into the Models folder. Sample files are available in the Google Drive link below.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1VCDqvkBiHOJX5Xe64Ay3Y2ARz4ZBmqCw?usp=sharing">Model Assets</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-import-model-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can click on an ONNX file to examine it in the Inspector tab on the right-hand side of the editor window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-inspect-model-asset.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>When <a href="https://netron.app/">Netron</a> is available, we can double-click on the ONNX file to open it in Netron.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-inspect-model-asset-netron.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-y:auto; max-height:500px">
<pre><code>&lt;img src="./images/asl-and-some-words-resnet18.png" alt="asl-and-some-words-resnet18"&gt;</code></pre>
</div>
<p>Next, create an Images folder and drop any test images into it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-images-folder.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Maybe stick with symmetrical hand signs (e.g., Play) since the model expects mirrored input images.</p>
<p><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1MyMQZzLx_PoCl3vArCjMqRWQkVyf99Cz?usp=sharing">Image Assets</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Unity automatically imports images as a Sprite (2D and UI) <a href="https://docs.unity3d.com/Manual/TextureTypes.html">texture type</a>. We don’t need to change it for our purposes.</p>
</section>
<section id="create-image-classifier-script" class="level2">
<h2 class="anchored" data-anchor-id="create-image-classifier-script">Create Image Classifier Script</h2>
<p>Now we can start coding. We’ll store C# scripts in a new Scripts folder. Right-click a space inside it and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We’ll name the script <code>ImageClassifier</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-image-classifier-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<p>By default, C# scripts contain the following code.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifier <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb2-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb2-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb2-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-10">        </span>
<span id="cb2-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb2-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-16">        </span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.html">Unity.Barracuda</a>: Provides access to the Barracuda API.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
</ul>
<hr>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">using</span> Unity<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Barracuda</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>Next, we’ll define the variables for processing model input. We can set the default target input resolution to 216 and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<p>The only preprocessing step we need to implement is normalizing images using the ImageNet stats. The fastest way to do this is with shaders. Shaders are programs that run on the GPU. We will implement ImageNet normalization in a <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute Shader</a> and a <a href="https://docs.unity3d.com/Manual/SL-VertexFragmentShaderExamples.html">Fragment shader</a> to account for platform support. We attach a Fragment shader to a <a href="https://docs.unity3d.com/Manual/Materials.html">Material</a>, so that is what we’ll pass into the script.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The material with the fragment shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">public</span> Material processingMaterial<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define Barracuda variables</strong></p>
<p>We’ll add the required private variables right below the public variables. We pass in ONNX files as an <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.NNModel.html">NNModel</a> object.</p>
<p>We’ll be adding a SoftMax and an Argmax layer to the end of the model, so we need to define names for those. We need to indicate the output layer we want to modify with the new layers. In our case, there is only one output layer.</p>
<p>By default, Barracuda uses a channels-last order for Tensors. However, switching to channels first can significantly improve performance on some GPUs.</p>
<p>We can choose from <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.WorkerFactory.Type.html">several</a> different inference backends (Although we’ll only want to use two in practice). The Auto option will automatically pick the best backend for the target platform.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Barracuda"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Barracuda/ONNX asset file"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> NNModel modelAsset<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name for the custom softmax output layer"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> softmaxLayer <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"softmaxLayer"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name for the custom softmax output layer"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> argmaxLayer <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"argmaxLayer"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target output layer index"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> outputLayerIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"EXPERIMENTAL: Indicate whether to order tensor data channels first"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useNCHW <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The model execution backend"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;">public</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span> workerType <span class="op" style="color: #5E5E5E;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Auto</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>As mentioned in a <a href="../../deep-learning-unity-intro/">previous post</a>, reading model output from the GPU to the CPU can cause a significant performance bottleneck. Therefore, we will add the option to read the model output asynchronously at the cost of a few frames of latency. Unfortunately, this feature does not work with the inference backend used for WebGL builds.</p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download model output from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the class labels"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console. These messages get printed to the console in the browser as well.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;">// The model input texture</span></span>
<span id="cb12-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTexture<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define Barracuda variables</strong></p>
<p>We execute models in Barracuda using an <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.IWorker.html">IWorker</a>interface and store data in <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.Tensor.html">Tensor</a> objects.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">// The main interface to execute models</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">private</span> IWorker engine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">// Stores the input data for the model</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">private</span> Tensor input<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for handling asynchronous GPU readback</strong></p>
<p>When using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// Stores the raw model output on the GPU when using useAsyncGPUReadback</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;">private</span> RenderTexture outputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">// Stores the raw model output on the CPU when using useAsyncGPUReadback</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> Texture2D outputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking class labels</strong></p>
<p>We need to create a little class that indicates the structure of the JSON content. Our JSON file only contains a single array of strings. We can store this array in a dedicated variable.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// A class for reading in class labels from a JSON file</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> classes<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">// The ordered list of class names</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> classes<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">// Stores the predicted class index</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>Lastly, we need to define a couple of variables for the custom fps counter.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb17-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb17-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-12"></span>
<span id="cb17-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb17-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb17-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb17-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-19"></span>
<span id="cb17-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb18-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb18-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-10"></span>
<span id="cb18-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb18-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb18-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb18-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb18-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-20"></span>
<span id="cb18-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb18-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb19-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb19-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb19-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb19-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb19-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb19-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb20-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb20-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb20-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb20-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize a Barracuda inference interface</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">/// Initialize an interface to execute the specified model using the specified backend</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target model representation</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"workerType"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target compute backend</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useNCHW"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">EXPERIMENTAL: The channel order for the compute backend</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;">private</span> IWorker <span class="fu" style="color: #4758AB;">InitializeWorker</span><span class="op" style="color: #5E5E5E;">(</span>Model model<span class="op" style="color: #5E5E5E;">,</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span> workerType<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">bool</span> useNCHW <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb21-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-10">    <span class="co" style="color: #5E5E5E;">// Validate the selected worker type</span></span>
<span id="cb21-11">    workerType <span class="op" style="color: #5E5E5E;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ValidateType</span><span class="op" style="color: #5E5E5E;">(</span>workerType<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    <span class="co" style="color: #5E5E5E;">// Set the channel order of the compute backend to channel-first</span></span>
<span id="cb21-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useNCHW<span class="op" style="color: #5E5E5E;">)</span> ComputeInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">channelsOrder</span> <span class="op" style="color: #5E5E5E;">=</span> ComputeInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ChannelsOrder</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">NCHW</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-15"></span>
<span id="cb21-16">    <span class="co" style="color: #5E5E5E;">// Create a worker to execute the model using the selected backend</span></span>
<span id="cb21-17">    <span class="kw" style="color: #003B4F;">return</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CreateWorker</span><span class="op" style="color: #5E5E5E;">(</span>workerType<span class="op" style="color: #5E5E5E;">,</span> model<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb22-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb22-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb22-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb22-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-8"></span>
<span id="cb22-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb22-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb22-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-16"></span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb22-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb22-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-21"></span>
<span id="cb22-22">    <span class="co" style="color: #5E5E5E;">// Get an object oriented representation of the model</span></span>
<span id="cb22-23">    Model m_RunTimeModel <span class="op" style="color: #5E5E5E;">=</span> ModelLoader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Load</span><span class="op" style="color: #5E5E5E;">(</span>modelAsset<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-24">    <span class="co" style="color: #5E5E5E;">// Get the name of the target output layer</span></span>
<span id="cb22-25">    <span class="dt" style="color: #AD0000;">string</span> outputLayer <span class="op" style="color: #5E5E5E;">=</span> m_RunTimeModel<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">outputs</span><span class="op" style="color: #5E5E5E;">[</span>outputLayerIndex<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb22-26"></span>
<span id="cb22-27">    <span class="co" style="color: #5E5E5E;">// Create a model builder to modify the m_RunTimeModel</span></span>
<span id="cb22-28">    ModelBuilder modelBuilder <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelBuilder</span><span class="op" style="color: #5E5E5E;">(</span>m_RunTimeModel<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-29"></span>
<span id="cb22-30">    <span class="co" style="color: #5E5E5E;">// Add a new Softmax layer</span></span>
<span id="cb22-31">    modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Softmax</span><span class="op" style="color: #5E5E5E;">(</span>softmaxLayer<span class="op" style="color: #5E5E5E;">,</span> outputLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-32">    <span class="co" style="color: #5E5E5E;">// Add a new Argmax layer</span></span>
<span id="cb22-33">    modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Reduce</span><span class="op" style="color: #5E5E5E;">(</span>Layer<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ArgMax</span><span class="op" style="color: #5E5E5E;">,</span> argmaxLayer<span class="op" style="color: #5E5E5E;">,</span> softmaxLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-34">    <span class="co" style="color: #5E5E5E;">// Initialize the interface for executing the model</span></span>
<span id="cb22-35">    engine <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">InitializeWorker</span><span class="op" style="color: #5E5E5E;">(</span>modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">model</span><span class="op" style="color: #5E5E5E;">,</span> workerType<span class="op" style="color: #5E5E5E;">,</span> useNCHW<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-36"></span>
<span id="cb22-37">    <span class="co" style="color: #5E5E5E;">// Initialize the GPU output texture</span></span>
<span id="cb22-38">    outputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-39">    <span class="co" style="color: #5E5E5E;">// Initialize the CPU output texture</span></span>
<span id="cb22-40">    outputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBAHalf</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-41"></span>
<span id="cb22-42">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb22-43">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-44"></span>
<span id="cb22-45">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb22-46">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-47"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define methods to process images using the Compute Shader, calculate the input resolution, handle asynchronous GPU readback, and process raw model output.</p>
<p><strong>Define method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb23-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb23-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb23-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb23-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb23-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb23-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb23-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb23-20"></span>
<span id="cb23-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb23-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb23-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-25"></span>
<span id="cb23-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb23-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-28"></span>
<span id="cb23-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb23-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-31"></span>
<span id="cb23-32">    <span class="co" style="color: #5E5E5E;">// Release the temporary RenderTexture</span></span>
<span id="cb23-33">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;">private</span> Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb24-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-10">    <span class="co" style="color: #5E5E5E;">// Clamp the minimum dimension value to 64px</span></span>
<span id="cb24-11">    targetDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>targetDim<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-12"></span>
<span id="cb24-13">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb24-14"></span>
<span id="cb24-15">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb24-16">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb24-17">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-18">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-19">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-21">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb24-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-23">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-24">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-26"></span>
<span id="cb24-27">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-28"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb25-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb25-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb25-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb25-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-12"></span>
<span id="cb25-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb25-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>outputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb25-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb25-17">        outputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb25-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb25-19">        outputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to process raw model output</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Process the raw model output to get the predicted class index</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"engine"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The interface for executing the model</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb26-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">ProcessOutput</span><span class="op" style="color: #5E5E5E;">(</span>IWorker engine<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-8">    <span class="dt" style="color: #AD0000;">int</span> classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;">// Get raw model output</span></span>
<span id="cb26-11">    Tensor output <span class="op" style="color: #5E5E5E;">=</span> engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PeekOutput</span><span class="op" style="color: #5E5E5E;">(</span>argmaxLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-12"></span>
<span id="cb26-13">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-15">        <span class="co" style="color: #5E5E5E;">// Copy model output to a RenderTexture</span></span>
<span id="cb26-16">        output<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-17">        <span class="co" style="color: #5E5E5E;">// Asynchronously download model output from the GPU to the CPU</span></span>
<span id="cb26-18">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBAHalf</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-19">        <span class="co" style="color: #5E5E5E;">// Get the predicted class index</span></span>
<span id="cb26-20">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>outputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">r</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-21"></span>
<span id="cb26-22">        <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb26-23">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">||</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output texture not initialized"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb26-25">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb26-26">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-27">        <span class="co" style="color: #5E5E5E;">// Get the predicted class index</span></span>
<span id="cb26-28">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>output<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb26-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb26-30"></span>
<span id="cb26-31">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Class Index: {classIndex}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-32"></span>
<span id="cb26-33">    <span class="co" style="color: #5E5E5E;">// Dispose Tensor and associated memories.</span></span>
<span id="cb26-34">    output<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-35"></span>
<span id="cb26-36">    <span class="kw" style="color: #003B4F;">return</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-37"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb27-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb27-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb27-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-9"></span>
<span id="cb27-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb27-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-12"></span>
<span id="cb27-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb27-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb27-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb27-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb27-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-26"></span>
<span id="cb27-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb27-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb27-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-32"></span>
<span id="cb27-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb27-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-36"></span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb27-38">    inputTexture <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-39">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTexture.width}x{inputTexture.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-40"></span>
<span id="cb27-41">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb27-42">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTexture<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-43"></span>
<span id="cb27-44">    <span class="co" style="color: #5E5E5E;">// Disable asynchronous GPU readback when not using a Compute Shader backend</span></span>
<span id="cb27-45">    useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Summary</span><span class="op" style="color: #5E5E5E;">().</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Unity.Barracuda.ComputeVarsWithSharedModel"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">?</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-46"></span>
<span id="cb27-47">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>SystemInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">supportsComputeShaders</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-48">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-49">        <span class="co" style="color: #5E5E5E;">// Normalize the input pixel data</span></span>
<span id="cb27-50">        <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"NormalizeImageNet"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-51"></span>
<span id="cb27-52">        <span class="co" style="color: #5E5E5E;">// Initialize a Tensor using the inputTexture</span></span>
<span id="cb27-53">        input <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> channels<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-54">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-55">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb27-56">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-57">        <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb27-58">        RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-59">                                                          inputTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-61"></span>
<span id="cb27-62">        <span class="co" style="color: #5E5E5E;">// Apply preprocessing steps</span></span>
<span id="cb27-63">        Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">,</span> processingMaterial<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-64"></span>
<span id="cb27-65">        <span class="co" style="color: #5E5E5E;">// Initialize a Tensor using the inputTexture</span></span>
<span id="cb27-66">        input <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> channels<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-67">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-68">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-69"></span>
<span id="cb27-70">    <span class="co" style="color: #5E5E5E;">// Execute the model with the input Tensor</span></span>
<span id="cb27-71">    engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Execute</span><span class="op" style="color: #5E5E5E;">(</span>input<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-72">    <span class="co" style="color: #5E5E5E;">// Dispose Tensor and associated memories.</span></span>
<span id="cb27-73">    input<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-74"></span>
<span id="cb27-75">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb27-76">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-77">    <span class="co" style="color: #5E5E5E;">// Get the predicted class index</span></span>
<span id="cb27-78">    classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">ProcessOutput</span><span class="op" style="color: #5E5E5E;">(</span>engine<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-79">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb27-80">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-81">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>validIndex <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[classIndex]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Invalid index"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-82"></span>
<span id="cb27-83">    <span class="co" style="color: #5E5E5E;">// Unload assets when running in a web browser</span></span>
<span id="cb27-84">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">platform</span> <span class="op" style="color: #5E5E5E;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;">)</span> Resources<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-85"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the predicted class and current framerate.</p>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb28-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb28-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb29-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb29-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb29-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-10"></span>
<span id="cb29-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb29-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb29-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted class and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">// OnGUI is called for rendering and handling GUI events.</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb30-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-4">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb30-5">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb30-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-7">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb30-8">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb30-9">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-10"></span>
<span id="cb30-11">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb30-12">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-13">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-14"></span>
<span id="cb30-15">    <span class="co" style="color: #5E5E5E;">// Verify predicted class index is valid</span></span>
<span id="cb30-16">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-17">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Predicted Class: {(validIndex ? classes[classIndex] : "</span>Invalid index<span class="st" style="color: #20794D;">")}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-18">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayPredictedClass<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-19"></span>
<span id="cb30-20">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb30-21">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-23">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-24">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-26"></span>
<span id="cb30-27">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb30-28">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-29">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-ondisable-method" class="level3">
<h3 class="anchored" data-anchor-id="define-ondisable-method">Define OnDisable Method</h3>
<p>We’ll perform any clean-up steps in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDisable.html">OnDisable</a>method.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">// OnDisable is called when the MonoBehavior becomes disabled</span></span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnDisable</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb31-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-4">    <span class="co" style="color: #5E5E5E;">// Release the resources allocated for the outputTextureGPU</span></span>
<span id="cb31-5">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-6"></span>
<span id="cb31-7">    <span class="co" style="color: #5E5E5E;">// Release the resources allocated for the inference engine</span></span>
<span id="cb31-8">    engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="create-processing-shaders" class="level2">
<h2 class="anchored" data-anchor-id="create-processing-shaders">Create Processing Shaders</h2>
<p>Now we need to create the Shaders for normalizing input images. We’ll store the shaders in a new Shaders folder.</p>
<section id="create-compute-shader" class="level3">
<h3 class="anchored" data-anchor-id="create-compute-shader">Create Compute Shader</h3>
<p>Right-click a space in the Shaders folder and select <code>Create → Shader → Compute Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-compute-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the Compute Shader <code>ProcessingShader</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-processing-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Default Compute Shader Code</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb32-2">#pragma kernel CSMain</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">// Create a RenderTexture with enableRandomWrite flag and set it</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">// with cs.SetTexture</span></span>
<span id="cb32-6">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb32-9"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">CSMain</span> <span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-10"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-11">    <span class="co" style="color: #5E5E5E;">// </span><span class="al" style="color: #AD0000;">TODO</span><span class="co" style="color: #5E5E5E;">: insert actual code here!</span></span>
<span id="cb32-12"></span>
<span id="cb32-13">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need to add a new Texture2D variable to store the pixel data for the input image. We’ll remove the default method and create a new one called <code>NormalizeImageNet</code>. We need to replace the default method name in the #pragma kernel line at the top.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb33-2">#pragma kernel NormalizeImageNet</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb33-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb33-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb33-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb33-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-13">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb33-14">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb33-15">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb33-16">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb33-17">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb33-18">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb33-19">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb33-20">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb33-21">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb33-22">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-image-effect-shader" class="level3">
<h3 class="anchored" data-anchor-id="create-image-effect-shader">Create Image Effect Shader</h3>
<p>Right-click a space in the Shaders folder and select <code>Create → Shader → Image Effect Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-image-effect-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Name the new shader <code>NormalizeImageNet</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-normalize-imagenet-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Default Image Effect Shader Code</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1">Shader <span class="st" style="color: #20794D;">"Hidden/NormalizeImageNet"</span></span>
<span id="cb34-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-3">    Properties</span>
<span id="cb34-4">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-5">        <span class="fu" style="color: #4758AB;">_MainTex</span> <span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Texture"</span><span class="op" style="color: #5E5E5E;">,</span> 2D<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"white"</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb34-6">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-7">    SubShader</span>
<span id="cb34-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-9">        <span class="co" style="color: #5E5E5E;">// No culling or depth</span></span>
<span id="cb34-10">        Cull Off ZWrite Off ZTest Always</span>
<span id="cb34-11"></span>
<span id="cb34-12">        Pass</span>
<span id="cb34-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-14">            CGPROGRAM</span>
<span id="cb34-15">            #pragma vertex vert</span>
<span id="cb34-16">            #pragma fragment frag</span>
<span id="cb34-17"></span>
<span id="cb34-18">            #include <span class="st" style="color: #20794D;">"UnityCG.cginc"</span></span>
<span id="cb34-19"></span>
<span id="cb34-20">            <span class="kw" style="color: #003B4F;">struct</span> appdata</span>
<span id="cb34-21">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-22">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-23">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-24">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb34-25"></span>
<span id="cb34-26">            <span class="kw" style="color: #003B4F;">struct</span> v2f</span>
<span id="cb34-27">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-28">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-29">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> SV_POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-30">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb34-31"></span>
<span id="cb34-32">            v2f <span class="fu" style="color: #4758AB;">vert</span> <span class="op" style="color: #5E5E5E;">(</span>appdata v<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb34-33">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-34">                v2f o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-35">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UnityObjectToClipPos</span><span class="op" style="color: #5E5E5E;">(</span>v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-36">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span> <span class="op" style="color: #5E5E5E;">=</span> v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-37">                <span class="kw" style="color: #003B4F;">return</span> o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-38">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-39"></span>
<span id="cb34-40">            sampler2D _MainTex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-41"></span>
<span id="cb34-42">            fixed4 <span class="fu" style="color: #4758AB;">frag</span> <span class="op" style="color: #5E5E5E;">(</span>v2f i<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> SV_Target</span>
<span id="cb34-43">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-44">                fixed4 col <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">tex2D</span><span class="op" style="color: #5E5E5E;">(</span>_MainTex<span class="op" style="color: #5E5E5E;">,</span> i<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-45">                <span class="co" style="color: #5E5E5E;">// just invert the colors</span></span>
<span id="cb34-46">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rgb</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rgb</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-47">                <span class="kw" style="color: #003B4F;">return</span> col<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-48">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-49">            ENDCG</span>
<span id="cb34-50">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-51">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-52"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>The string at the top of the file indicates the path to access the shader in the Unity Editor. We can replace the Hidden folder name with Processing Shaders to keep things more organized. We’ll replace the fixed4 frag method with the normalization steps.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1">Shader <span class="st" style="color: #20794D;">"Processing Shaders/NormalizeImageNet"</span></span>
<span id="cb35-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-3">    Properties</span>
<span id="cb35-4">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-5">        <span class="fu" style="color: #4758AB;">_MainTex</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Texture"</span><span class="op" style="color: #5E5E5E;">,</span> 2D<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"white"</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb35-6">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-7">    SubShader</span>
<span id="cb35-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-9">        <span class="co" style="color: #5E5E5E;">// No culling or depth</span></span>
<span id="cb35-10">        Cull Off ZWrite Off ZTest Always</span>
<span id="cb35-11"></span>
<span id="cb35-12">        Pass</span>
<span id="cb35-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-14">            CGPROGRAM</span>
<span id="cb35-15">            #pragma vertex vert</span>
<span id="cb35-16">            #pragma fragment frag</span>
<span id="cb35-17"></span>
<span id="cb35-18">            #include <span class="st" style="color: #20794D;">"UnityCG.cginc"</span></span>
<span id="cb35-19"></span>
<span id="cb35-20">            <span class="kw" style="color: #003B4F;">struct</span> appdata</span>
<span id="cb35-21">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-22">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-23">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-24">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb35-25"></span>
<span id="cb35-26">            <span class="kw" style="color: #003B4F;">struct</span> v2f</span>
<span id="cb35-27">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-28">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-29">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> SV_POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-30">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb35-31"></span>
<span id="cb35-32">            v2f <span class="fu" style="color: #4758AB;">vert</span><span class="op" style="color: #5E5E5E;">(</span>appdata v<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-33">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-34">                v2f o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-35">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UnityObjectToClipPos</span><span class="op" style="color: #5E5E5E;">(</span>v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-36">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span> <span class="op" style="color: #5E5E5E;">=</span> v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-37">                <span class="kw" style="color: #003B4F;">return</span> o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-38">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-39"></span>
<span id="cb35-40">            sampler2D _MainTex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-41"></span>
<span id="cb35-42">            <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb35-43">            float4 <span class="fu" style="color: #4758AB;">frag</span><span class="op" style="color: #5E5E5E;">(</span>v2f i<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> SV_Target</span>
<span id="cb35-44">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-45">                float4 col <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">tex2D</span><span class="op" style="color: #5E5E5E;">(</span>_MainTex<span class="op" style="color: #5E5E5E;">,</span> i<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-46">                <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb35-47">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-48">                <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb35-49">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-50">                <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb35-51">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-52">                <span class="kw" style="color: #003B4F;">return</span> col<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-53">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-54">            ENDCG</span>
<span id="cb35-55">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-56">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-57"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Create Normalize ImageNet Material</strong></p>
<p>Next, we need to create a new material to use the NormalizeImageNet shader. Right-click a space in the Shaders folder and select Create → Material.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-material.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can name it <code>NormalizeImageNet</code> as well.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-normalize-imagenet-material.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the new Material selected, open the Shader dropdown menu at the top of the Inspector tab. Type in the Material’s name and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-change-material-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>We can, at last, start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the <code>ImageClassifier</code> script, a dropdown menu for selecting webcam devices, and a toggle to switch between the test image and a webcam feed.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select 3D Object → Quad. We can name the new object Screen.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-quad.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, drag and drop a test image from the Assets → Images folder onto the Screen object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the Shader dropdown menu in the Inspector tab. Type Unlit/Texture into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select Create Empty. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ImageClassifier</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-attach-image-classifier-script.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can assign the Screen, compute shader, Material, ONNX file, and class labels file in the Inspector tab by dragging them into their respective fields.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-assign-image-classifier-script-assets.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI toggle and dropdown menu. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1ZP02X7vkhLzyouHjKNpD9bI6BU8YDjlM?usp=sharing">Canvas Prefab</a></li>
</ul>
<p>Unity provides a free <a href="https://assetstore.unity.com/packages/essentials/ui-samples-25468">UI Sample</a>package for anyone that wants to try creating a custom UI, and there are plenty of <a href="https://assetstore.unity.com/?category=tools%2Fgui\2d%2Fgui\3d%2Fgui&amp;orderBy=1">options</a> on the Asset Store.</p>
<p>Drag and drop the Canvas prefab into a new folder called Prefabs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-import-canvas-prefab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>From there, drag the prefab into the Hierarchy tab. We can see the GUI by switching to the Game view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ImageClassifier</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ImageClassifier → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This time select <code>ImageClassifier → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the <code>WebcamToggle</code> and <code>WebcamDropdown</code> objects to their respective fields for the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-in-editor" class="level2">
<h2 class="anchored" data-anchor-id="test-in-editor">Test in Editor</h2>
<p>We can finally test the project in the editor. Click the play button in the top-middle of the Editor window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-click-play-button.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The predicted class should be <code>Play</code>, the dropdown menu should update with available webcam devices, and the Screen object should fill the preview window while maintaining the source aspect ratio. GPU utilization should hover near 100% when using asynchronous GPU readback.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-test-in-editor.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered implementing an image classification model in a Unity project using the Barracuda library. Part 3 will cover building the Unity project to run in a web browser and hosting it using GitHub Pages.</p>
<p><strong>Previous:</strong> <a href="../part-1/">Fastai to Unity Tutorial Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">Fastai to Unity Tutorial Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/fastai-to-unity-tutorial/part-2/index.html</guid>
  <pubDate>Tue, 07 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fastai to Unity Beginner Tutorial Pt. 1</title>
  <link>christianjmills.com/posts/fastai-to-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Configure Kaggle API</li>
<li>Download Dataset</li>
<li>Inspect Dataset</li>
<li>Define Dataloaders</li>
<li>Define Learner</li>
<li>Inspect Trained Model</li>
<li>Implement Processing Steps</li>
<li>Export the Model</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial series, we will walk through training an image classifier using the <a href="https://docs.fast.ai/">fastai library</a> and implementing it in a <a href="https://unity.com/">Unity</a> game engine project using the <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> inference library. Check out <a href="../../deep-learning-unity-intro/">this post</a> for more information about Barracuda. We will then build the Unity project to run in a web browser and host it using <a href="https://pages.github.com/">GitHub Pages</a>.</p>
<p>The tutorial uses this&nbsp;<a href="https://www.kaggle.com/datasets/belalelwikel/asl-and-some-words">American Sign Language (ASL) dataset</a>&nbsp;from Kaggle but feel free to follow along with a different dataset. The dataset contains sample images for digits 1-9, letters A-Z, and some common words. One could use a model trained on this dataset to map hand gestures to user input or make an ASL education game.</p>
<p><strong>In-Browser Demo:</strong> <a href="https://cj-mills.github.io/Fastai-ASL-Classification-WebGL-Demo/">ASL Classifier</a></p>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Part 1 covers how to finetune a ResNet model for image classification using the fastai library and export it to ONNX format. The training code is available in the Jupyter notebook linked below, and links for running the notebook on Google Colab and Kaggle are below as well.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-to-unity-tutorial/blob/main/notebooks/Fastai-to-Unity-Tutorial.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-to-unity-tutorial/blob/main/notebooks/Fastai-to-Unity-Tutorial.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-to-unity-tutorial/blob/main/notebooks/Fastai-to-Unity-Tutorial.ipynb">Open in Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The training code requires <a href="https://pytorch.org/">PyTorch</a> for the fastai library, the fastai library itself for training, and the <a href="https://github.com/Kaggle/kaggle-api">Kaggle API Python package</a> for downloading the dataset. Google Colab uses an older version of <a href="https://pillow.readthedocs.io/en/stable/">Pillow</a>, so update that package when training there.</p>
<p><strong>Uncomment the cell below if running on Google Colab or Kaggle</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip3 install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip3 install -U fastai</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip3 install -U kaggle</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip3 install -U Pillow</span></span></code></pre></div>
<p><strong>Note for Colab:</strong> You must restart the runtime in order to use newly installed version of Pillow.</p>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</section>
<section id="configure-kaggle-api" class="level2">
<h2 class="anchored" data-anchor-id="configure-kaggle-api">Configure Kaggle API</h2>
<p>The Kaggle API tool requires an API Key for a Kaggle account. Sign in or create a Kaggle account using the link below, then click the Create New API Token button.</p>
<ul>
<li><strong>Kaggle Account Settings:</strong> <a href="https://www.kaggle.com/me/account">https://www.kaggle.com/me/account</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/kaggle-create-new-api-token.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Kaggle will generate and download a <code>kaggle.json</code> file containing your username and new API token. Paste the values for each in the code cell below.</p>
<p><strong>Enter Kaggle username and API token</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">creds <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'{"username":"","key":""}'</span></span></code></pre></div>
<p><strong>Save Kaggle credentials if none are present</strong> * <strong>Source:</strong> <a href="https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb">https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb</a></p>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">cred_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Save API key to a json file if it does not already exist</span></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> cred_path.exists():</span>
<span id="cb4-4">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-5">    cred_path.write_text(creds)</span>
<span id="cb4-6">    cred_path.chmod(<span class="bn" style="color: #AD0000;">0o600</span>)</span></code></pre></div>
<p><strong>Import Kaggle API</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span></code></pre></div>
<p><strong>(Optional) Define method to display default function arguments</strong></p>
<p>The code cell below defines a method to display the default arguments for a specified function. It’s not required, but I find it convenient for creating quick references in notebooks.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> inspect</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-3">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-5">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">def</span> inspect_default_args(target, annotations: <span class="bu" style="color: null;">bool</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;"># Get the argument names</span></span>
<span id="cb6-9">    args <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(target).args</span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;"># Get the default values</span></span>
<span id="cb6-11">    defaults <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(target).defaults</span>
<span id="cb6-12"></span>
<span id="cb6-13">    index <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Default Value"</span>]</span>
<span id="cb6-14"></span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># Pad defaults</span></span>
<span id="cb6-16">    defaults <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span>(<span class="bu" style="color: null;">len</span>(args)<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">len</span>(defaults)) <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(defaults)</span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;">if</span> annotations:</span>
<span id="cb6-18">        index.append(<span class="st" style="color: #20794D;">"Annotation"</span>)</span>
<span id="cb6-19">        annotations <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(target).annotations.values()</span>
<span id="cb6-20">        <span class="co" style="color: #5E5E5E;"># Pad annotations</span></span>
<span id="cb6-21">        annotations <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span>(<span class="bu" style="color: null;">len</span>(args)<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">len</span>(annotations)) <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(annotations)</span>
<span id="cb6-22">        default_args <span class="op" style="color: #5E5E5E;">=</span> {arg:[df, annot] <span class="cf" style="color: #003B4F;">for</span> arg,df,annot <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(args, defaults, annotations)}</span>
<span id="cb6-23">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-24">        default_args <span class="op" style="color: #5E5E5E;">=</span> {arg:[default] <span class="cf" style="color: #003B4F;">for</span> arg,default <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(args, defaults)}</span>
<span id="cb6-25">        </span>
<span id="cb6-26">    <span class="cf" style="color: #003B4F;">return</span> pd.DataFrame(default_args, index<span class="op" style="color: #5E5E5E;">=</span>index).T</span></code></pre></div>
</section>
<section id="download-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-dataset">Download Dataset</h2>
<p>Now that we have our Kaggle credentials set, we need to define the dataset and where to store it.</p>
<p><strong>Define path to dataset</strong></p>
<p>We’ll use the default archive and data folders for the fastai library to store the compressed and uncompressed datasets.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">kaggle_dataset <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'belalelwikel/asl-and-some-words'</span></span>
<span id="cb7-2">archive_dir <span class="op" style="color: #5E5E5E;">=</span> URLs.path()</span>
<span id="cb7-3">dataset_dir <span class="op" style="color: #5E5E5E;">=</span> archive_dir<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'../data'</span></span>
<span id="cb7-4">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'asl-and-some-words'</span></span>
<span id="cb7-5">archive_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.zip'</span>)</span>
<span id="cb7-6">dataset_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Define method to extract the dataset from an archive file</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> file_extract(fname, dest<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;">"Extract `fname` to `dest` using `tarfile` or `zipfile`."</span></span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;">if</span> dest <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: dest <span class="op" style="color: #5E5E5E;">=</span> Path(fname).parent</span>
<span id="cb8-4">    fname <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(fname)</span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;">if</span>   fname.endswith(<span class="st" style="color: #20794D;">'gz'</span>):  tarfile.<span class="bu" style="color: null;">open</span>(fname, <span class="st" style="color: #20794D;">'r:gz'</span>).extractall(dest)</span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;">elif</span> fname.endswith(<span class="st" style="color: #20794D;">'zip'</span>): zipfile.ZipFile(fname     ).extractall(dest)</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;">else</span>: <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="ss" style="color: #20794D;">f'Unrecognized archive: </span><span class="sc" style="color: #5E5E5E;">{</span>fname<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Download the dataset if it is not present</strong></p>
<p>The archive file is over 2GB, so we don’t want to download it more than necessary.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> archive_path.exists():</span>
<span id="cb9-2">    api.dataset_download_cli(kaggle_dataset, path<span class="op" style="color: #5E5E5E;">=</span>archive_dir)</span>
<span id="cb9-3">    file_extract(fname<span class="op" style="color: #5E5E5E;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;">=</span>dataset_path)</span></code></pre></div>
</section>
<section id="inspect-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-dataset">Inspect Dataset</h2>
<p>We can start inspecting the dataset once it finishes downloading.</p>
<p><strong>Inspect the dataset path</strong></p>
<p>The training data is in a subfolder named ASL, and there are over 200,000 samples.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dataset_path.ls()</span></code></pre></div>
<pre class="text"><code>    (#1) [Path('/home/innom-dt/.fastai/archive/../data/asl-and-some-words/ASL')]</code></pre>
<p><strong>Get image file paths</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"ASL"</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>    203000</code></pre>
<p><strong>Inspect files</strong></p>
<p>The dataset indicates the object class in both the folder and file names.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">files[<span class="dv" style="color: #AD0000;">0</span>], files[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<pre class="text"><code>    (Path('/home/innom-dt/.fastai/archive/../data/asl-and-some-words/ASL/J/J1491.jpg'),
     Path('/home/innom-dt/.fastai/archive/../data/asl-and-some-words/ASL/E/E1063.jpg'))</code></pre>
<p><strong>Inspect class folder names</strong></p>
<p>There are 51 class folders, and the dataset does not predefine a training-validation split.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">folder_names <span class="op" style="color: #5E5E5E;">=</span> [path.name <span class="cf" style="color: #003B4F;">for</span> path <span class="kw" style="color: #003B4F;">in</span> Path(dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ASL'</span>).ls()]</span>
<span id="cb16-2">folder_names.sort()</span>
<span id="cb16-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Num classes: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(folder_names)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb16-4">pd.DataFrame(folder_names)</span></code></pre></div>
<pre class="text"><code>    Num classes: 51</code></pre>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3
</td>
</tr>
<tr>
<th>
2
</th>
<td>
4
</td>
</tr>
<tr>
<th>
3
</th>
<td>
5
</td>
</tr>
<tr>
<th>
4
</th>
<td>
7
</td>
</tr>
<tr>
<th>
5
</th>
<td>
8
</td>
</tr>
<tr>
<th>
6
</th>
<td>
9
</td>
</tr>
<tr>
<th>
7
</th>
<td>
A
</td>
</tr>
<tr>
<th>
8
</th>
<td>
B
</td>
</tr>
<tr>
<th>
9
</th>
<td>
Baby
</td>
</tr>
<tr>
<th>
10
</th>
<td>
Brother
</td>
</tr>
<tr>
<th>
11
</th>
<td>
C
</td>
</tr>
<tr>
<th>
12
</th>
<td>
D
</td>
</tr>
<tr>
<th>
13
</th>
<td>
Dont_like
</td>
</tr>
<tr>
<th>
14
</th>
<td>
E
</td>
</tr>
<tr>
<th>
15
</th>
<td>
F
</td>
</tr>
<tr>
<th>
16
</th>
<td>
Friend
</td>
</tr>
<tr>
<th>
17
</th>
<td>
G
</td>
</tr>
<tr>
<th>
18
</th>
<td>
H
</td>
</tr>
<tr>
<th>
19
</th>
<td>
Help
</td>
</tr>
<tr>
<th>
20
</th>
<td>
House
</td>
</tr>
<tr>
<th>
21
</th>
<td>
I
</td>
</tr>
<tr>
<th>
22
</th>
<td>
J
</td>
</tr>
<tr>
<th>
23
</th>
<td>
K
</td>
</tr>
<tr>
<th>
24
</th>
<td>
L
</td>
</tr>
<tr>
<th>
25
</th>
<td>
Like
</td>
</tr>
<tr>
<th>
26
</th>
<td>
Love
</td>
</tr>
<tr>
<th>
27
</th>
<td>
M
</td>
</tr>
<tr>
<th>
28
</th>
<td>
Make
</td>
</tr>
<tr>
<th>
29
</th>
<td>
More
</td>
</tr>
<tr>
<th>
30
</th>
<td>
N
</td>
</tr>
<tr>
<th>
31
</th>
<td>
Name
</td>
</tr>
<tr>
<th>
32
</th>
<td>
No
</td>
</tr>
<tr>
<th>
33
</th>
<td>
O_OR_0
</td>
</tr>
<tr>
<th>
34
</th>
<td>
P
</td>
</tr>
<tr>
<th>
35
</th>
<td>
Pay
</td>
</tr>
<tr>
<th>
36
</th>
<td>
Play
</td>
</tr>
<tr>
<th>
37
</th>
<td>
Q
</td>
</tr>
<tr>
<th>
38
</th>
<td>
R
</td>
</tr>
<tr>
<th>
39
</th>
<td>
S
</td>
</tr>
<tr>
<th>
40
</th>
<td>
Stop
</td>
</tr>
<tr>
<th>
41
</th>
<td>
T
</td>
</tr>
<tr>
<th>
42
</th>
<td>
U
</td>
</tr>
<tr>
<th>
43
</th>
<td>
V_OR_2
</td>
</tr>
<tr>
<th>
44
</th>
<td>
W_OR_6
</td>
</tr>
<tr>
<th>
45
</th>
<td>
With
</td>
</tr>
<tr>
<th>
46
</th>
<td>
X
</td>
</tr>
<tr>
<th>
47
</th>
<td>
Y
</td>
</tr>
<tr>
<th>
48
</th>
<td>
Yes
</td>
</tr>
<tr>
<th>
49
</th>
<td>
Z
</td>
</tr>
<tr>
<th>
50
</th>
<td>
nothing
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect one of the training images</strong></p>
<p>The sample images all have a resolution of 200x200.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> PIL</span>
<span id="cb18-2">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(files[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb18-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;">{</span>img<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb18-4">img</span></code></pre></div>
<pre class="text"><code>    Image Dims: (200, 200)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_28_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="define-dataloaders" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloaders">Define Dataloaders</h2>
<p>Next, we need to define the <a href="https://docs.fast.ai/vision.augment.html">Transforms</a> for the <a href="https://docs.fast.ai/vision.data.html#ImageDataLoaders">DataLoaders</a> object.</p>
<p><strong>Define target input dimensions</strong></p>
<p>The Unity project will take input from a webcam, and most webcams don’t have a square aspect ratio like the training samples. We will need to account for this to get more accurate predictions.</p>
<p>We can train with a square aspect ratio and crop the webcam input in Unity, but that might make users feel cramped when using the application.</p>
<p>Alternatively, we can expand the training images to a more typical aspect ratio like 4:3 or 16:9. This approach will allow us to use the entire webcam input, so we’ll go with this one.</p>
<p>I have a <a href="../../crop-images-on-gpu-tutorial/">separate tutorial</a> for cropping images on the GPU in Unity for anyone that wants to try the other approach.</p>
<p>Below are some sample input dimensions in different aspect ratios.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># size_1_1 = (224, 224)</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;"># size_3_2 = (224, 336)</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;"># size_4_3 = (216, 288)</span></span>
<span id="cb20-4">size_16_9 <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">216</span>, <span class="dv" style="color: #AD0000;">384</span>)</span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;"># size_16_9_l = (288, 512)</span></span></code></pre></div>
<p><strong>Define Transforms</strong></p>
<p>Something else to consider is that the webcam input in Unity mirrors the actual image. Mirrored input would likely not be an issue for something like a pet classifier, but hand orientation matters for ASL. We either need to flip the input image each time in Unity, or we can train the model with pre-flipped images. It is easier to mirror the training images, so we’ll use the <a href="https://docs.fast.ai/vision.augment.html#FlipItem">FlipItem</a> transform with a probability of 1.0 to flip every training sample.</p>
<p>I have a <a href="../../flip-image-compute-shader-tutorial/">separate tutorial</a> covering how to flip images on the GPU in Unity for anyone that wants to try that approach.</p>
<p>Since we are resizing to a different aspect ratio, we need to choose a padding method. The default reflection padding might add more fingers, changing an image’s meaning. The zeros padding option might work, but most user backgrounds will not be pure black. Therefore, we’ll go with border padding.</p>
<p>We can add some batch transforms like tweaking the contrast, saturation, hue, zoom, brightness, and warping to help crappify the images. However, we need to disable the <code>do_flip</code> and <code>max_rotate</code> options in <code>aug_transforms</code>.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">inspect_default_args(aug_transforms)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
mult
</th>
<td>
1.0
</td>
</tr>
<tr>
<th>
do_flip
</th>
<td>
True
</td>
</tr>
<tr>
<th>
flip_vert
</th>
<td>
False
</td>
</tr>
<tr>
<th>
max_rotate
</th>
<td>
10.0
</td>
</tr>
<tr>
<th>
min_zoom
</th>
<td>
1.0
</td>
</tr>
<tr>
<th>
max_zoom
</th>
<td>
1.1
</td>
</tr>
<tr>
<th>
max_lighting
</th>
<td>
0.2
</td>
</tr>
<tr>
<th>
max_warp
</th>
<td>
0.2
</td>
</tr>
<tr>
<th>
p_affine
</th>
<td>
0.75
</td>
</tr>
<tr>
<th>
p_lighting
</th>
<td>
0.75
</td>
</tr>
<tr>
<th>
xtra_tfms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
size
</th>
<td>
None
</td>
</tr>
<tr>
<th>
mode
</th>
<td>
bilinear
</td>
</tr>
<tr>
<th>
pad_mode
</th>
<td>
reflection
</td>
</tr>
<tr>
<th>
align_corners
</th>
<td>
True
</td>
</tr>
<tr>
<th>
batch
</th>
<td>
False
</td>
</tr>
<tr>
<th>
min_scale
</th>
<td>
1.0
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [FlipItem(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>), Resize(size_16_9, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb22-2"></span>
<span id="cb22-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb22-4">    Contrast(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb22-5">    Saturation(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb22-6">    Hue(max_hue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb22-7">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb22-8">        size<span class="op" style="color: #5E5E5E;">=</span>size_16_9, </span>
<span id="cb22-9">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb22-10">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb22-11">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb22-12">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb22-13">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb22-14">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb22-15">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb22-16">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb22-17">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb22-18">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)</span>
<span id="cb22-19">]</span></code></pre></div>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">128</span></span></code></pre></div>
<p><strong>Define DataLoaders object</strong></p>
<p>We can use the <a href="https://docs.fast.ai/vision.data.html#ImageDataLoaders.from_folder">from_folder</a> method to instantiate the DataLoaders object.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">inspect_default_args(ImageDataLoaders.from_folder)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
cls
</th>
<td>
None
</td>
</tr>
<tr>
<th>
path
</th>
<td>
None
</td>
</tr>
<tr>
<th>
train
</th>
<td>
train
</td>
</tr>
<tr>
<th>
valid
</th>
<td>
valid
</td>
</tr>
<tr>
<th>
valid_pct
</th>
<td>
None
</td>
</tr>
<tr>
<th>
seed
</th>
<td>
None
</td>
</tr>
<tr>
<th>
vocab
</th>
<td>
None
</td>
</tr>
<tr>
<th>
item_tfms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
batch_tfms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
bs
</th>
<td>
64
</td>
</tr>
<tr>
<th>
val_bs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
shuffle
</th>
<td>
True
</td>
</tr>
<tr>
<th>
device
</th>
<td>
None
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(</span>
<span id="cb25-2">    path<span class="op" style="color: #5E5E5E;">=</span>dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ASL'</span>, </span>
<span id="cb25-3">    valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb25-4">    bs<span class="op" style="color: #5E5E5E;">=</span>bs, </span>
<span id="cb25-5">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>item_tfms, </span>
<span id="cb25-6">    batch_tfms<span class="op" style="color: #5E5E5E;">=</span>batch_tfms</span>
<span id="cb25-7">)</span></code></pre></div>
<p><strong>Verify DataLoaders object</strong></p>
<p>Let’s verify the DataLoaders object works as expected before training a model.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">dls.train.show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_40_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can see that the DataLoaders object applies the transforms to the training split, including mirroring the image. However, it does not appear to mirror images from the validation split.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">dls.valid.show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_41_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can get around this by using a solution provided on the <a href="https://forums.fast.ai/t/how-to-apply-aug-transforms-to-validation-set-while-training/79417/10?u=cjmills">fastai forums</a> to apply the training split transforms to the validation split. It is not strictly necessary to mirror the validation split, but the accuracy metrics would be confusing during training without it.</p>
<p><strong>Apply training split transforms to validation split</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): dls[<span class="dv" style="color: #AD0000;">1</span>].show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_43_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="define-learner" class="level2">
<h2 class="anchored" data-anchor-id="define-learner">Define Learner</h2>
<p>Now we need to define the Learner object for training the model.</p>
<p><strong>Inspect Learner parameters</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">inspect_default_args(vision_learner)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
dls
</th>
<td>
None
</td>
</tr>
<tr>
<th>
arch
</th>
<td>
None
</td>
</tr>
<tr>
<th>
normalize
</th>
<td>
True
</td>
</tr>
<tr>
<th>
n_out
</th>
<td>
None
</td>
</tr>
<tr>
<th>
pretrained
</th>
<td>
True
</td>
</tr>
<tr>
<th>
loss_func
</th>
<td>
None
</td>
</tr>
<tr>
<th>
opt_func
</th>
<td>
&lt;function Adam at 0x7fa5e274a560&gt;
</td>
</tr>
<tr>
<th>
lr
</th>
<td>
0.001
</td>
</tr>
<tr>
<th>
splitter
</th>
<td>
None
</td>
</tr>
<tr>
<th>
cbs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
metrics
</th>
<td>
None
</td>
</tr>
<tr>
<th>
path
</th>
<td>
None
</td>
</tr>
<tr>
<th>
model_dir
</th>
<td>
models
</td>
</tr>
<tr>
<th>
wd
</th>
<td>
None
</td>
</tr>
<tr>
<th>
wd_bn_bias
</th>
<td>
False
</td>
</tr>
<tr>
<th>
train_bn
</th>
<td>
True
</td>
</tr>
<tr>
<th>
moms
</th>
<td>
(0.95, 0.85, 0.95)
</td>
</tr>
<tr>
<th>
cut
</th>
<td>
None
</td>
</tr>
<tr>
<th>
n_in
</th>
<td>
3
</td>
</tr>
<tr>
<th>
init
</th>
<td>
&lt;function kaiming_normal_ at 0x7fa60b397be0&gt;
</td>
</tr>
<tr>
<th>
custom_head
</th>
<td>
None
</td>
</tr>
<tr>
<th>
concat_pool
</th>
<td>
True
</td>
</tr>
<tr>
<th>
lin_ftrs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
ps
</th>
<td>
0.5
</td>
</tr>
<tr>
<th>
pool
</th>
<td>
True
</td>
</tr>
<tr>
<th>
first_bn
</th>
<td>
True
</td>
</tr>
<tr>
<th>
bn_final
</th>
<td>
False
</td>
</tr>
<tr>
<th>
lin_first
</th>
<td>
False
</td>
</tr>
<tr>
<th>
y_range
</th>
<td>
None
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define model</strong></p>
<p>I recommend sticking with a ResNet18 or ResNet34 model, as the larger models can significantly lower frame rates.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">model <span class="op" style="color: #5E5E5E;">=</span> resnet18</span></code></pre></div>
<p><strong>Define <a href="https://docs.fast.ai/metrics.html">metrics</a></strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">metrics <span class="op" style="color: #5E5E5E;">=</span> [error_rate, accuracy]</span></code></pre></div>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics).to_fp16()</span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">inspect_default_args(learn.lr_find)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
self
</th>
<td>
None
</td>
</tr>
<tr>
<th>
start_lr
</th>
<td>
0.0
</td>
</tr>
<tr>
<th>
end_lr
</th>
<td>
10
</td>
</tr>
<tr>
<th>
num_it
</th>
<td>
100
</td>
</tr>
<tr>
<th>
stop_div
</th>
<td>
True
</td>
</tr>
<tr>
<th>
show_plot
</th>
<td>
True
</td>
</tr>
<tr>
<th>
suggest_funcs
</th>
<td>
&lt;function valley at 0x7fa5e24996c0&gt;
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define <a href="https://docs.fast.ai/callback.schedule.html#Suggestion-Methods">suggestion methods</a></strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">suggest_funcs <span class="op" style="color: #5E5E5E;">=</span> [valley, minimum, steep]</span></code></pre></div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;">=</span>suggest_funcs)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_56_2.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">2e-3</span></span>
<span id="cb36-2">lr</span></code></pre></div>
<pre class="text"><code>    0.002</code></pre>
<p><strong>Define number of epochs</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<p><strong>Fine tune model</strong></p>
<p>After picking a learning rate, we can train the model for a few epochs. Training can take a while on Google Colab and Kaggle.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">inspect_default_args(learn.fine_tune)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
self
</th>
<td>
None
</td>
</tr>
<tr>
<th>
epochs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
base_lr
</th>
<td>
0.002
</td>
</tr>
<tr>
<th>
freeze_epochs
</th>
<td>
1
</td>
</tr>
<tr>
<th>
lr_mult
</th>
<td>
100
</td>
</tr>
<tr>
<th>
pct_start
</th>
<td>
0.3
</td>
</tr>
<tr>
<th>
div
</th>
<td>
5.0
</td>
</tr>
<tr>
<th>
lr_max
</th>
<td>
None
</td>
</tr>
<tr>
<th>
div_final
</th>
<td>
100000.0
</td>
</tr>
<tr>
<th>
wd
</th>
<td>
None
</td>
</tr>
<tr>
<th>
moms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
cbs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
reset_opt
</th>
<td>
False
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): learn.fine_tune(epochs, base_lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
accuracy
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.365705
</td>
<td>
0.175888
</td>
<td>
0.056305
</td>
<td>
0.943695
</td>
<td>
04:52
</td>
</tr>
</tbody>

</table>
</div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
accuracy
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.038334
</td>
<td>
0.021014
</td>
<td>
0.008103
</td>
<td>
0.991897
</td>
<td>
04:56
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.012614
</td>
<td>
0.011383
</td>
<td>
0.004236
</td>
<td>
0.995764
</td>
<td>
04:59
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.006508
</td>
<td>
0.006591
</td>
<td>
0.003325
</td>
<td>
0.996675
</td>
<td>
04:55
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="inspect-trained-model" class="level2">
<h2 class="anchored" data-anchor-id="inspect-trained-model">Inspect Trained Model</h2>
<p>Once the model finishes training, we can test it on a sample image and see where it struggles.</p>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;">import</span> PIL</span></code></pre></div>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">test_file <span class="op" style="color: #5E5E5E;">=</span> files[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb42-2">test_file.name</span></code></pre></div>
<pre class="text"><code>    'J1491.jpg'</code></pre>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file)</span>
<span id="cb44-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_67_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Make a prediction on a single image using a <a href="https://docs.fast.ai/vision.core.html#PILImage">fastai.vision.core.PILImage</a></strong></p>
<p>Remember that we need to flip the test image before feeding it to the model.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">learn.predict(PILImage(test_img.transpose(Image.Transpose.FLIP_LEFT_RIGHT)))</span></code></pre></div>
<pre class="text"><code>    ('J',
     TensorBase(22),
     TensorBase([9.6170e-14, 7.7060e-13, 2.5787e-13, 1.1222e-13, 1.5709e-10, 3.6805e-11,
             1.7642e-11, 2.3571e-13, 3.5861e-15, 9.8273e-13, 4.1524e-14, 1.3218e-12,
             7.3592e-14, 3.8404e-14, 4.9230e-12, 8.4399e-12, 2.0167e-11, 3.2757e-13,
             4.0114e-10, 2.3624e-11, 8.3717e-14, 1.9143e-07, 1.0000e+00, 9.7685e-14,
             9.4480e-15, 3.3952e-15, 9.4246e-12, 2.3079e-12, 1.6612e-15, 6.6745e-14,
             3.9778e-14, 2.2675e-11, 1.7859e-14, 1.7659e-11, 5.1701e-11, 8.4209e-14,
             4.6891e-11, 1.3487e-11, 1.0827e-11, 1.0881e-10, 2.6260e-09, 4.2682e-13,
             3.1842e-13, 7.4326e-13, 4.8983e-13, 2.0801e-13, 9.1052e-14, 1.0467e-08,
             2.3752e-14, 1.0124e-09, 6.7431e-11]))</code></pre>
<p><strong>Make predictions for a group of images</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): learn.show_results()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_71_2.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define an Interpretation object</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): interp <span class="op" style="color: #5E5E5E;">=</span> Interpretation.from_learner(learn)</span></code></pre></div>
<p><strong>Plot top losses</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): interp.plot_top_losses(k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">15</span>,<span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_75_2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="implement-processing-steps" class="level2">
<h2 class="anchored" data-anchor-id="implement-processing-steps">Implement Processing Steps</h2>
<p>When we are satisfied with the model, we can start preparing for implementing it in Unity. We will need to apply the same preprocessing and post-processing in Unity that fastai applies automatically. We will verify we understand the processing steps by implementing them in Python first.</p>
<p><strong>Inspect the <code>after_item</code> pipeline</strong></p>
<p>We don’t need to worry about flipping or padding the image in Unity with the current training approach.</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">learn.dls.after_item</span></code></pre></div>
<pre class="text"><code>    Pipeline: FlipItem -- {'p': 1.0} -&gt; Resize -- {'size': (384, 216), 'method': 'pad', 'pad_mode': 'border', 'resamples': (&lt;Resampling.BILINEAR: 2&gt;, 0), 'p': 1.0} -&gt; ToTensor</code></pre>
<p><strong>Inspect the <code>after_batch</code> pipeline</strong></p>
<p>The <code>after_batch</code> pipeline first scales the image color channel values from <img src="https://latex.codecogs.com/png.latex?%5B0,255%5D"> to <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">. Unity already uses the range <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">, so we don’t need to implement this step. We also don’t need to implement any of the image augmentations. However, we do need to normalize the image using the ImageNet stats.</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">learn.dls.after_batch</span></code></pre></div>
<pre class="text"><code>    Pipeline: IntToFloatTensor -- {'div': 255.0, 'div_mask': 1} -&gt; Warp -- {'magnitude': 0.2, 'p': 1.0, 'draw_x': None, 'draw_y': None, 'size': (216, 384), 'mode': 'bilinear', 'pad_mode': 'border', 'batch': False, 'align_corners': True, 'mode_mask': 'nearest'} -&gt; Contrast -- {'max_lighting': 0.25, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Saturation -- {'max_lighting': 0.25, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Hue -- {'p': 1.0} -&gt; Brightness -- {'max_lighting': 0.5, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Normalize -- {'mean': tensor([[[[0.4850]],
    
             [[0.4560]],
    
             [[0.4060]]]], device='cuda:0'), 'std': tensor([[[[0.2290]],
    
             [[0.2240]],
    
             [[0.2250]]]], device='cuda:0'), 'axes': (0, 2, 3)}</code></pre>
<p><strong>Reset test image</strong></p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file)</span>
<span id="cb54-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_81_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">test_img <span class="op" style="color: #5E5E5E;">=</span> test_img.transpose(Image.Transpose.FLIP_LEFT_RIGHT)</span>
<span id="cb55-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_82_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">test_img.size</span></code></pre></div>
<pre class="text"><code>    (200, 200)</code></pre>
<hr>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="bu" style="color: null;">min</span>(test_img.size)</span></code></pre></div>
<pre class="text"><code>    200</code></pre>
<hr>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">min_dim <span class="op" style="color: #5E5E5E;">=</span> test_img.size.index(<span class="bu" style="color: null;">min</span>(test_img.size))</span>
<span id="cb60-2">max_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> min_dim</span></code></pre></div>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">target_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span></span></code></pre></div>
<p><strong>Set input dims</strong></p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">inp_dims <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb62-2">inp_dims[min_dim] <span class="op" style="color: #5E5E5E;">=</span> target_dim</span>
<span id="cb62-3">inp_dims[max_dim] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(test_img.size[max_dim] <span class="op" style="color: #5E5E5E;">/</span> (test_img.size[min_dim]<span class="op" style="color: #5E5E5E;">/</span>target_dim))</span>
<span id="cb62-4">inp_dims</span></code></pre></div>
<pre class="text"><code>    [224, 224]</code></pre>
<hr>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">resized_img <span class="op" style="color: #5E5E5E;">=</span> test_img.resize(inp_dims)</span>
<span id="cb64-2">resized_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_89_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Convert image to tensor</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">img_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(resized_img).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb65-2">img_tensor.shape, img_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([3, 224, 224]),
     tensor([[[  0,   0,   0,  ...,   1,   0,   0],
              [  0,   4,   2,  ...,   9,   2,   0],
              [  5,  82,  99,  ...,  74,   8,   0],
              ...,
              [  3, 127, 154,  ..., 141,   0,   3],
              [  3, 102, 125,  ..., 120,   0,   0],
              [  0,   0,   4,  ...,   0,   1,   0]],
     
             [[  4,   1,   2,  ...,   0,   2,   5],
              [  2,   1,   0,  ...,   0,   0,   5],
              [  0,  75,  91,  ...,  63,   1,   1],
              ...,
              [  3, 126, 150,  ..., 151,   0,   0],
              [  7, 105, 122,  ..., 127,   1,   0],
              [  8,   5,   3,  ...,   4,   6,   2]],
     
             [[253, 254, 255,  ..., 253, 255, 254],
              [244, 220, 199,  ..., 209, 237, 255],
              [212, 222, 180,  ..., 188, 211, 251],
              ...,
              [196, 225, 171,  ..., 238, 204, 255],
              [207, 247, 222,  ..., 242, 218, 255],
              [223, 203, 193,  ..., 219, 247, 254]]], dtype=torch.uint8))</code></pre>
<p><strong>Scale tensor values</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span></code></pre></div>
<p><strong>Prepare imagenet mean values</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">mean_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(imagenet_stats[<span class="dv" style="color: #AD0000;">0</span>]).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb68-2">mean_tensor.shape, mean_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([3, 1, 1]),
     tensor([[[0.4850]],
     
             [[0.4560]],
     
             [[0.4060]]]))</code></pre>
<p><strong>Prepare imagenet std values</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">std_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(imagenet_stats[<span class="dv" style="color: #AD0000;">1</span>]).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb70-2">std_tensor.shape, std_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([3, 1, 1]),
     tensor([[[0.2290]],
     
             [[0.2240]],
     
             [[0.2250]]]))</code></pre>
<p><strong>Normalize and batch image tensor</strong></p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">normalized_tensor <span class="op" style="color: #5E5E5E;">=</span> (scaled_tensor <span class="op" style="color: #5E5E5E;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;">/</span> std_tensor</span>
<span id="cb72-2">batched_tensor <span class="op" style="color: #5E5E5E;">=</span> normalized_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb72-3">batched_tensor.shape, batched_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([1, 3, 224, 224]),
     tensor([[[[-2.1179, -2.1179, -2.1179,  ..., -2.1008, -2.1179, -2.1179],
               [-2.1179, -2.0494, -2.0837,  ..., -1.9638, -2.0837, -2.1179],
               [-2.0323, -0.7137, -0.4226,  ..., -0.8507, -1.9809, -2.1179],
               ...,
               [-2.0665,  0.0569,  0.5193,  ...,  0.2967, -2.1179, -2.0665],
               [-2.0665, -0.3712,  0.0227,  ..., -0.0629, -2.1179, -2.1179],
               [-2.1179, -2.1179, -2.0494,  ..., -2.1179, -2.1008, -2.1179]],
     
              [[-1.9657, -2.0182, -2.0007,  ..., -2.0357, -2.0007, -1.9482],
               [-2.0007, -2.0182, -2.0357,  ..., -2.0357, -2.0357, -1.9482],
               [-2.0357, -0.7227, -0.4426,  ..., -0.9328, -2.0182, -2.0182],
               ...,
               [-1.9832,  0.1702,  0.5903,  ...,  0.6078, -2.0357, -2.0357],
               [-1.9132, -0.1975,  0.1001,  ...,  0.1877, -2.0182, -2.0357],
               [-1.8957, -1.9482, -1.9832,  ..., -1.9657, -1.9307, -2.0007]],
     
              [[ 2.6051,  2.6226,  2.6400,  ...,  2.6051,  2.6400,  2.6226],
               [ 2.4483,  2.0300,  1.6640,  ...,  1.8383,  2.3263,  2.6400],
               [ 1.8905,  2.0648,  1.3328,  ...,  1.4722,  1.8731,  2.5703],
               ...,
               [ 1.6117,  2.1171,  1.1759,  ...,  2.3437,  1.7511,  2.6400],
               [ 1.8034,  2.5006,  2.0648,  ...,  2.4134,  1.9951,  2.6400],
               [ 2.0823,  1.7337,  1.5594,  ...,  2.0125,  2.5006,  2.6226]]]]))</code></pre>
<p><strong>Pass tensor to model</strong></p>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb74-2">    preds <span class="op" style="color: #5E5E5E;">=</span> learn.model(batched_tensor.cuda())</span>
<span id="cb74-3">preds</span></code></pre></div>
<pre class="text"><code>    TensorBase([[-4.9931e+00, -1.9711e+00, -3.3677e+00, -3.0452e+00,  3.9567e+00,
              3.9293e+00,  3.1657e+00, -5.3549e+00, -7.9026e+00, -1.5491e+00,
             -2.4086e+00, -2.6251e+00, -4.0321e+00, -7.3666e+00, -1.0557e+00,
             -3.2344e-01,  4.7887e+00, -4.8819e+00,  6.5188e+00,  1.1152e+00,
             -5.9519e-01,  1.1730e+01,  3.0779e+01, -4.4505e+00, -1.0000e+01,
             -9.1124e+00, -3.7176e-01, -4.2437e+00, -8.6924e+00, -1.5119e+00,
             -8.4118e+00,  9.1559e-01, -7.6669e+00,  1.7187e+00,  2.0639e+00,
             -4.0788e+00,  9.0079e+00, -2.8547e-02,  1.1223e+00, -3.2541e-02,
              8.9209e+00, -4.2307e+00, -3.6343e+00, -9.8461e-01, -4.2557e+00,
             -2.2238e+00, -5.9167e+00,  7.0386e+00, -7.7322e+00,  4.3321e+00,
             -3.1247e-01]], device='cuda:0')</code></pre>
<p><strong>Process model output</strong></p>
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<pre class="text"><code>    TensorBase([[2.9133e-16, 5.9815e-15, 1.4800e-15, 2.0433e-15, 2.2450e-12, 2.1844e-12,
             1.0179e-12, 2.0287e-16, 1.5878e-17, 9.1219e-15, 3.8617e-15, 3.1101e-15,
             7.6160e-16, 2.7138e-17, 1.4940e-14, 3.1072e-14, 5.1585e-12, 3.2557e-16,
             2.9103e-11, 1.3097e-13, 2.3678e-14, 5.3343e-09, 1.0000e+00, 5.0120e-16,
             1.9486e-18, 4.7354e-18, 2.9607e-14, 6.1632e-16, 7.2077e-18, 9.4674e-15,
             9.5424e-18, 1.0727e-13, 2.0099e-17, 2.3949e-13, 3.3822e-13, 7.2685e-16,
             3.5069e-10, 4.1729e-14, 1.3190e-13, 4.1563e-14, 3.2148e-10, 6.2438e-16,
             1.1337e-15, 1.6041e-14, 6.0902e-16, 4.6457e-15, 1.1568e-16, 4.8942e-11,
             1.8828e-17, 3.2679e-12, 3.1415e-14]], device='cuda:0')</code></pre>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">preds.argmax()</span></code></pre></div>
<pre class="text"><code>    TensorBase(22, device='cuda:0')</code></pre>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>][preds.argmax()]</span></code></pre></div>
<pre class="text"><code>    TensorBase(1., device='cuda:0')</code></pre>
<p><strong>Get the class labels</strong></p>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">learn.dls.vocab</span></code></pre></div>
<pre class="text"><code>    ['1', '3', '4', '5', '7', '8', '9', 'A', 'B', 'Baby', 'Brother', 'C', 'D', 'Dont_like', 'E', 'F', 'Friend', 'G', 'H', 'Help', 'House', 'I', 'J', 'K', 'L', 'Like', 'Love', 'M', 'Make', 'More', 'N', 'Name', 'No', 'O_OR_0', 'P', 'Pay', 'Play', 'Q', 'R', 'S', 'Stop', 'T', 'U', 'V_OR_2', 'W_OR_6', 'With', 'X', 'Y', 'Yes', 'Z', 'nothing']</code></pre>
<p><strong>Get the predicted class label</strong></p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">learn.dls.vocab[torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).argmax()]</span></code></pre></div>
<pre class="text"><code>    'J'</code></pre>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>The last step is to export the trained model to ONNX format.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb86-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>    'asl-and-some-words-resnet18.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<p>We’ll use an older <a href="https://github.com/onnx/onnx/blob/main/docs/Versioning.md#operator-sets">opset_version</a> to ensure the model is compatible with the Barracuda library. We will also unlock the input dimensions for the model to give ourselves more flexibility in Unity. Although, we’ll want to stick close to the training resolution for the best accuracy.</p>
<div class="sourceCode" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">torch.onnx.export(learn.model.cpu(),</span>
<span id="cb88-2">                  batched_tensor,</span>
<span id="cb88-3">                  onnx_file_name,</span>
<span id="cb88-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb88-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb88-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb88-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb88-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb88-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb88-10">                 )</span></code></pre></div>
<p><strong>Export class labels</strong></p>
<p>We can export the list of class labels to a JSON file and import it into the Unity project. That way, we don’t have to hardcode them, and we can easily swap in models trained on different datasets.</p>
<div class="sourceCode" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb89-2"></span>
<span id="cb89-3">class_labels <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"classes"</span>: <span class="bu" style="color: null;">list</span>(learn.dls.vocab)}</span>
<span id="cb89-4">class_labels_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-classes.json"</span></span>
<span id="cb89-5"></span>
<span id="cb89-6"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb89-7">    json.dump(class_labels, write_file)</span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post, we walked through how to finetune a ResNet model for image classification using the fastai library and export it to ONNX format. Part 2 will cover implementing the trained model in a Unity project using the Barracuda library.</p>
<p><strong>Previous:</strong> <a href="../../deep-learning-unity-intro/">Getting Started With Deep Learning in Unity</a></p>
<p><strong>Next:</strong> <a href="../part-2/">Fastai to Unity Tutorial Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/fastai-to-unity-tutorial/part-1/index.html</guid>
  <pubDate>Mon, 06 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
