<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Christian Mills</title>
<link>christianjmills.com/index.html</link>
<atom:link href="christianjmills.com/index.xml" rel="self" type="application/rss+xml"/>
<description>My personal blog</description>
<image>
<url>christianjmills.com/images/logo.png</url>
<title>Christian Mills</title>
<link>christianjmills.com/index.html</link>
<height>142</height>
<width>144</width>
</image>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Fri, 19 Aug 2022 07:00:00 GMT</lastBuildDate>
<item>
  <title>Object Detection for Unity With ONNX Runtime and DirectML Pt. 2</title>
  <link>christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create New Project</li>
<li>Import Assets</li>
<li>Allow Unsafe Code</li>
<li>Create Processing Shader</li>
<li>Create Object Detector Script</li>
<li>Set up Unity Scene</li>
<li>Test in Editor</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform object detection using ONNX Runtime and DirectML. This post covers building a project in Unity that leverages the DLL.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes you already have <a href="https://unity3d.com/get-unity/download">Unity Hub</a> on your system. Check out <a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">this section</a> from a previous tutorial if this is not the case (<a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">link</a>).</p>
</blockquote>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Open the Unity Hub and click New Project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project</figcaption><p></p>
</figure>
</div>
<p>Select the target editor version from the Editor Version dropdown menu. We’ll use Unity 2022 for this post, but the current LTS release should also work fine.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-select-unity-version</figcaption><p></p>
</figure>
</div>
<p>Select the <code>2D Core</code> template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-select-2D-template</figcaption><p></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder before clicking <code>Create Project</code> in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-name-project</figcaption><p></p>
</figure>
</div>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Once the project loads, we’ll store the DLL files from part 2 in a new folder called <code>Plugins</code>. Right-click a space in the Assets section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-folder</figcaption><p></p>
</figure>
</div>
<p>The DLL targets 64-bit x86 architectures, so we need to place the DLL files in a subfolder named <code>x86_64</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1DnSJDOUbAMH4nONJ0Nh__xEmlqqsSAKy?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-plugins-folder</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> You can place the <code>Plugins</code> folder inside another folder if needed.</p>
</blockquote>
<p>Copy all the DLL files into the <code>Assets/Plugins/x86_64</code> folder. We then need to close and reopen the Unity Editor to load the plugin files.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-onnx-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-onnx-plugins-folder</figcaption><p></p>
</figure>
</div>
<p>After restarting the Unity Editor, create a new folder called <code>Colormaps</code> to store the JSON file from the <a href="../../icevision-openvino-unity-tutorial/part-1/#generate-colormap">training tutorial</a>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1rs2eD9_3Tyg4ADLbF6CNqwRdnhpsiHgk?usp=sharing">Colormaps Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-colormaps-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-colormaps-folder</figcaption><p></p>
</figure>
</div>
<p>We’ll place any test images into a new folder called <code>Images</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1jHp3nTw8bRhk9es-osSfCx-B9ga4pt1G?usp=sharing">Images Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-image-assets</figcaption><p></p>
</figure>
</div>
<p>Next, we’ll create a folder to store the ONNX models. We need to place the <code>.onnx</code> files in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in project builds. Create a new folder named <code>StreamingAssets</code>. We’ll place each model file in a separate folder and put those in a new subfolder called <code>ONNXModels</code> to keep things organized.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1r543Rs85Qs78_iaP5_npY0Oi2cC5BLdc?usp=sharing">ONNXModels Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-onnx-models-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-onnx-models-folder</figcaption><p></p>
</figure>
</div>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-open-project-settings</figcaption><p></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-allow-unsafe-code</figcaption><p></p>
</figure>
</div>
<p>Now we can start coding.</p>
</section>
<section id="create-processing-shader" class="level2">
<h2 class="anchored" data-anchor-id="create-processing-shader">Create Processing Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in a <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute Shader</a>. We’ll add the Compute Shader in a new folder called <code>Shaders</code>. Right-click a space in the <code>Shaders</code> folder and select <code>Create → Shader → Compute Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-compute-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-compute-shader</figcaption><p></p>
</figure>
</div>
<p>Name the Compute Shader <code>ProcessingShader</code> and open it in the code editor.</p>
<p><strong>Default Compute Shader Code</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb1-2">#pragma kernel CSMain</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// Create a RenderTexture with enableRandomWrite flag and set it</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// with cs.SetTexture</span></span>
<span id="cb1-6">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb1-9"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">CSMain</span> <span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;">// </span><span class="al" style="color: #AD0000;">TODO</span><span class="co" style="color: #5E5E5E;">: insert actual code here!</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need to add a new <code>Texture2D</code> variable to store the pixel data for the input image. We’ll remove the default method and create a new one called <code>FlipXAxis</code>. Replace the default method name in the <code>#pragma kernel</code> line at the top.</p>
<p>We need the input image height for the flip operation, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb2-2">#pragma kernel FlipXAxis</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb2-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb2-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb2-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb2-14">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-15">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb2-16">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb2-18">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb2-21">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-22">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-object-detector-script" class="level2">
<h2 class="anchored" data-anchor-id="create-object-detector-script">Create Object Detector Script</h2>
<p>We’ll store the C# script that interacts with the plugin in a new <code>Scripts</code> folder. Right-click a space inside it and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-c-sharp-script</figcaption><p></p>
</figure>
</div>
<p>Name the script <code>ObjectDetector</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-object-detector-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-object-detector-script</figcaption><p></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ObjectDetector <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb3-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb3-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-10">        </span>
<span id="cb3-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb3-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb3-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-16">        </span>
<span id="cb3-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-6.0">System.Runtime.InteropServices</a>: Provides a wide variety of members that support COM interop and platform invoke services.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.io?view=net-6.0">System.IO</a>: Allows reading and writing to files and data streams.</li>
</ul>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Add code to copy <code>DirectML.dll</code> file to editor folder</strong></p>
<p>We must copy the <code>DirectML.dll</code> file from the Plugins folder to the parent folder for the Unity Editor application to use DirectML in the Editor. We’ll also need to copy that file to the build folder when building the Unity project. We can handle both steps automatically in code.</p>
<p>We can obtain the path to the current Unity Editor from the <a href="https://docs.unity3d.com/ScriptReference/EditorApplication-applicationPath.html"><code>EditorApplication.applicationpath</code></a> variable.</p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html"><code>InitializeOnLoad</code></a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html"><code>UnityEditor</code></a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives. We’ll place this code right below the namespaces.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;">// Get all files named "DirectML.dll" in the Assets directory</span></span>
<span id="cb5-10">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> files <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"./Assets/"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"DirectML.dll"</span><span class="op" style="color: #5E5E5E;">,</span> SearchOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AllDirectories</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-11">        <span class="co" style="color: #5E5E5E;">// Iterate through each found file</span></span>
<span id="cb5-12">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> files<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-14">            <span class="co" style="color: #5E5E5E;">// Check if the file is in the "x86_64" folder</span></span>
<span id="cb5-15">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"x86_64"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb5-16">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;">// Get the file path for the Editor application</span></span>
<span id="cb5-18">                <span class="dt" style="color: #AD0000;">string</span> editorPath <span class="op" style="color: #5E5E5E;">=</span> EditorApplication<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">applicationPath</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-19">                <span class="co" style="color: #5E5E5E;">// Extract the parent folder for the Editor application</span></span>
<span id="cb5-20">                <span class="dt" style="color: #AD0000;">string</span> editorDir <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetParent</span><span class="op" style="color: #5E5E5E;">(</span>editorPath<span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">ToString</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb5-21">                <span class="co" style="color: #5E5E5E;">// Define target file path</span></span>
<span id="cb5-22">                <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{editorDir}/DirectML.dll"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-23">                <span class="co" style="color: #5E5E5E;">// Only copy the file to the Editor application folder if it is not already present</span></span>
<span id="cb5-24">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-25">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-26">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-27">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-28"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-29"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. We are in the Editor, so it returns true, and the code executes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity_scripting_symbol_in_editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity_scripting_symbol_in_editor</figcaption><p></p>
</figure>
</div>
<p>If we check if we are not in the Unity Editor, it returns false, and the code block does not execute.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity_scripting_symbol_not_in_editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity_scripting_symbol_not_in_editor</figcaption><p></p>
</figure>
</div>
<p>We can verify the code works by saving the script and going to the parent folder for Editor application. The <code>DirectML.dll</code> file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-verify-initializeonload</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> I install Unity editors to a location that does not require Administrator access. You might need to manually copy the file if this is not the case for you.</p>
</blockquote>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input. We may or may not want to mirror the screen based on whether a webcam is facing the user.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Mirror the in-game screen."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>Next, we’ll define the variables for processing model input. We can set the default target input resolution to <code>224</code> and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<p>We’ll also add a public <code>ComputeShader</code> variable to access the <code>ProcessingShader</code> we made earlier.</p>
<p>We need to download the pixel data for the input image from the GPU to the CPU before passing it to the plugin. This step can cause a significant performance bottleneck, so we’ll add the option to read the model output asynchronously at the cost of a few frames of latency. This latency might cause the bounding box to trail slightly behind a fast-moving object on the screen. The effect should be minimal, provided the frame rate is high enough.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the colormaps for object classes"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Minimum confidence score for keeping detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span>1f<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> minConfidence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices, models, and execution providers.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayBoundingBoxes <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display number of detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayProposalCount <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-12"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-17"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available ONNX models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available ONNX execution providers"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-23"><span class="kw" style="color: #003B4F;">public</span> Dropdown executionProviderDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the ONNX plugin</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"ONNX"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the ONNX models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> onnxModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ONNXModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<p>When using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb14-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variable for tracking the current number of detected objects</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// Stores the number of detected objects</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for storing colormaps</strong></p>
<p>We need to create a couple of classes to parse the JSON content.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// A class for parsing in colormaps from a JSON file</span></span>
<span id="cb16-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;">class</span> ColorMap <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> label<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> color<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;">// A class for reading in a list of colormaps from a JSON file</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb16-6"><span class="kw" style="color: #003B4F;">class</span> ColorMapList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ColorMap<span class="op" style="color: #5E5E5E;">&gt;</span> items<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;">// Stores a list of colormaps from a JSON file</span></span>
<span id="cb16-8"><span class="kw" style="color: #003B4F;">private</span> ColorMapList colormapList<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;">// A list of colors that map to class labels</span></span>
<span id="cb16-10"><span class="kw" style="color: #003B4F;">private</span> Color<span class="op" style="color: #5E5E5E;">[]</span> colors<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;">// A list of single pixel textures that map to class labels</span></span>
<span id="cb16-12"><span class="kw" style="color: #003B4F;">private</span> Texture2D<span class="op" style="color: #5E5E5E;">[]</span> colorTextures<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>We’ll define some variables to track the frame rate.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the plugin</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">// File paths for the available ONNX models</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">// Names of the available ONNX models</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;">// Names of the available ONNX execution providers</span></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> onnxExecutionProviders <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span></code></pre></div>
<p><strong>Define a struct for reading object information from the plugin</strong></p>
<p>We need to create an <code>Object</code> struct for Unity to match the one we defined for the ONNX Runtime code, along with an array of <code>Object</code> structs that we’ll update with the <code>PopulateObjectsArray()</code> function.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">// Indicate that the members of the struct are laid out sequentially</span></span>
<span id="cb19-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">StructLayout</span><span class="op" style="color: #5E5E5E;">(</span>LayoutKind<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Sequential</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;">/// Stores the information for a single object</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span><span class="co" style="color: #5E5E5E;"> </span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb19-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-8">    <span class="co" style="color: #5E5E5E;">// The X coordinate for the top left bounding box corner</span></span>
<span id="cb19-9">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;">// The Y coordinate for the top left bounding box cornder</span></span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;">// The width of the bounding box</span></span>
<span id="cb19-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-14">    <span class="co" style="color: #5E5E5E;">// The height of the bounding box</span></span>
<span id="cb19-15">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-16">    <span class="co" style="color: #5E5E5E;">// The object class index for the detected object</span></span>
<span id="cb19-17">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-18">    <span class="co" style="color: #5E5E5E;">// The model confidence score for the object</span></span>
<span id="cb19-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-20"></span>
<span id="cb19-21">    <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">Object</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb19-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-23">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-24">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-25">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-26">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-27">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">=</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-28">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">=</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb19-30"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb19-31"></span>
<span id="cb19-32"><span class="co" style="color: #5E5E5E;">// Stores information for the current list of detected objects</span></span>
<span id="cb19-33"><span class="kw" style="color: #003B4F;">private</span> Object<span class="op" style="color: #5E5E5E;">[]</span> objectInfoArray<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Import functions from the plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb20-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ONNX_YOLOX_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">InitOrtAPI</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">GetProviderCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-11"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> IntPtr <span class="fu" style="color: #4758AB;">GetProviderName</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-14"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-17"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">RefreshMemory</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-18"></span>
<span id="cb20-19"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-20"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> execution_provider<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-23"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-24"></span>
<span id="cb20-25"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-26"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr objects<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-27"></span>
<span id="cb20-28"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-29"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb21-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb21-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-9"></span>
<span id="cb21-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb21-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb21-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb21-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb21-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-19"></span>
<span id="cb21-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb22-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb22-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb22-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb22-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-10"></span>
<span id="cb22-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb22-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb22-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-15"></span>
<span id="cb22-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb22-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb22-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-20"></span>
<span id="cb22-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb22-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the available ONNX models</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available ONNX models</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetONNXModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb23-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for each model folder</span></span>
<span id="cb23-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> dir <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDirectories</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{onnxModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb23-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-9">        <span class="co" style="color: #5E5E5E;">// Extract the model folder name</span></span>
<span id="cb23-10">        <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> dir<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb23-11">        <span class="co" style="color: #5E5E5E;">// Add name to list of model names</span></span>
<span id="cb23-12">        modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-13"></span>
<span id="cb23-14">        <span class="co" style="color: #5E5E5E;">// Get the paths for the ONNX file for each model</span></span>
<span id="cb23-15">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>dir<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb23-16">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-17">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".onnx"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb23-18">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-19">                modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-20">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb23-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the names of available execution providers</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">/// Get the names of the available ONNX execution providers</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb24-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetONNXExecutionProviders</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb24-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-6">    <span class="co" style="color: #5E5E5E;">// Get the number of available ONNX execution providers</span></span>
<span id="cb24-7">    <span class="dt" style="color: #AD0000;">int</span> providerCount <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GetProviderCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb24-8">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Provider Count: {providerCount}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-9"></span>
<span id="cb24-10">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> providerCount<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb24-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-12">        <span class="dt" style="color: #AD0000;">string</span> providerName <span class="op" style="color: #5E5E5E;">=</span> Marshal<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PtrToStringAnsi</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetProviderName</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-13">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>providerName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-14">        providerName <span class="op" style="color: #5E5E5E;">=</span> providerName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Replace</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"ExecutionProvider"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-15">        onnxExecutionProviders<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>providerName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-17">    onnxExecutionProviders<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Reverse</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb24-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb25-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb25-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb25-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-9"></span>
<span id="cb25-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb25-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb25-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb25-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb25-16"></span>
<span id="cb25-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb25-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-19">    <span class="co" style="color: #5E5E5E;">// Add ONNX model names to menu</span></span>
<span id="cb25-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb25-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-23"></span>
<span id="cb25-24">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb25-25">    executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-26">    <span class="co" style="color: #5E5E5E;">// Add ONNX provider names to menu</span></span>
<span id="cb25-27">    executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>onnxExecutionProviders<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-28">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb25-29">    executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb26-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb26-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb26-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb26-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the selected ONNX model</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;">/// Update the selected ONNX model</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateONNXModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb27-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-6">    <span class="co" style="color: #5E5E5E;">// Reset objectInfoArray</span></span>
<span id="cb27-7">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb27-8"></span>
<span id="cb27-9">    <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-10">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-11">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span></span>
<span id="cb27-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Source input dims: {inputDims[0]} x {inputDims[1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-15"></span>
<span id="cb27-16">    <span class="co" style="color: #5E5E5E;">// Load the specified ONNX model</span></span>
<span id="cb27-17">    <span class="dt" style="color: #AD0000;">int</span> return_msg <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb27-18">        modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> </span>
<span id="cb27-19">        onnxExecutionProviders<span class="op" style="color: #5E5E5E;">[</span>executionProviderDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> </span>
<span id="cb27-20">        inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-21"></span>
<span id="cb27-22">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-23"></span>
<span id="cb27-24">    <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> return_messages <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-25">        <span class="st" style="color: #20794D;">"Using DirectML"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-26">        <span class="st" style="color: #20794D;">"Using CPU"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-27">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb27-28"></span>
<span id="cb27-29">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Updated input dims: {inputDims[0]} x {inputDims[1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-30">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Return message: {return_messages[return_msg]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-31"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-awake-method" class="level3">
<h3 class="anchored" data-anchor-id="define-awake-method">Define Awake Method</h3>
<p>We’ll implement the code to copy the <code>DirectML.dll</code> file from the <code>Plugins/x86_64</code> folder to the root of the build folder in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method. The code should be inactive since we are in the Editor.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">// Awake runs when the script instance is being loaded</span></span>
<span id="cb28-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb28-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-4">    <span class="kw" style="color: #003B4F;">#if</span> <span class="op" style="color: #5E5E5E;">!</span>UNITY_EDITOR</span>
<span id="cb28-5">        <span class="co" style="color: #5E5E5E;">// Define the path for the DirectML.dll file in the StreamingAssets folder</span></span>
<span id="cb28-6">        <span class="dt" style="color: #AD0000;">string</span> sourcePath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.dataPath}/Plugins/x86_64/DirectML.dll"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-7"></span>
<span id="cb28-8">    <span class="dt" style="color: #AD0000;">string</span> dataPath <span class="op" style="color: #5E5E5E;">=</span> Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">dataPath</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-9">    <span class="dt" style="color: #AD0000;">string</span> buildDir <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetParent</span><span class="op" style="color: #5E5E5E;">(</span>dataPath<span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">ToString</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb28-10"></span>
<span id="cb28-11">    <span class="co" style="color: #5E5E5E;">// Define the destination path for the DirectML.dll file</span></span>
<span id="cb28-12">    <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{buildDir}/DirectML.dll"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-13">    <span class="co" style="color: #5E5E5E;">// Only copy the file if it is not already present at the destination</span></span>
<span id="cb28-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>sourcePath<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-15">    <span class="kw" style="color: #003B4F;">#endif</span></span>
<span id="cb28-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start Method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">// Start runs before the first frame update</span></span>
<span id="cb29-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb29-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb29-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb29-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-8"></span>
<span id="cb29-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb29-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb29-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-16"></span>
<span id="cb29-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb29-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb29-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-21"></span>
<span id="cb29-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of color maps from JSON file</span></span>
<span id="cb29-23">    colormapList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ColorMapList<span class="op" style="color: #5E5E5E;">&gt;(</span>colormapFile<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-24">    <span class="co" style="color: #5E5E5E;">// Initialize the list of colors</span></span>
<span id="cb29-25">    colors <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Color<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb29-26">    <span class="co" style="color: #5E5E5E;">// Initialize the list of color textures</span></span>
<span id="cb29-27">    colorTextures <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Texture2D<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb29-28"></span>
<span id="cb29-29">    <span class="co" style="color: #5E5E5E;">// Populate the color and color texture arrays</span></span>
<span id="cb29-30">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb29-31">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-32">        <span class="co" style="color: #5E5E5E;">// Create a new color object</span></span>
<span id="cb29-33">        colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Color</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb29-34">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb29-35">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb29-36">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb29-37">        <span class="co" style="color: #5E5E5E;">// Create a single-pixel texture</span></span>
<span id="cb29-38">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-39">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">SetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb29-40">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-41"></span>
<span id="cb29-42">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb29-43"></span>
<span id="cb29-44">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available ONNX models</span></span>
<span id="cb29-45">    <span class="fu" style="color: #4758AB;">GetONNXModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-46">    <span class="co" style="color: #5E5E5E;">// Initialize the ONNX Runtime API</span></span>
<span id="cb29-47">    <span class="fu" style="color: #4758AB;">InitOrtAPI</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-48">    <span class="co" style="color: #5E5E5E;">// Get the names of available ONNX execution providers</span></span>
<span id="cb29-49">    <span class="fu" style="color: #4758AB;">GetONNXExecutionProviders</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-50"></span>
<span id="cb29-51">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb29-52">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-53"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define methods to process images using the Compute Shader, calculate the input resolution, handle asynchronous GPU readback, and scale the bounding box information.</p>
<p><strong>Define method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb30-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb30-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb30-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb30-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb30-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb30-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-20"></span>
<span id="cb30-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb30-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb30-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-25"></span>
<span id="cb30-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb30-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-28"></span>
<span id="cb30-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb30-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-31"></span>
<span id="cb30-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb30-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb31-8"><span class="kw" style="color: #003B4F;">private</span> Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb31-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-10">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-11"></span>
<span id="cb31-12">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb31-13">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb31-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-15">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-16">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb31-18">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb31-19">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-20">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-21">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb31-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb31-23"></span>
<span id="cb31-24">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-25"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb32-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-12"></span>
<span id="cb32-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb32-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb32-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb32-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb32-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb32-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb33-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-8">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb33-9">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb33-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-11">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the number of detected objects</span></span>
<span id="cb33-12">        numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-14"></span>
<span id="cb33-15">    <span class="co" style="color: #5E5E5E;">// Initialize the array</span></span>
<span id="cb33-16">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span>numObjects<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb33-17"></span>
<span id="cb33-18">    <span class="co" style="color: #5E5E5E;">// Pin memory</span></span>
<span id="cb33-19">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> o <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-21">        <span class="co" style="color: #5E5E5E;">// Get the detected objects</span></span>
<span id="cb33-22">        <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>o<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-24"></span>
<span id="cb33-25">    <span class="kw" style="color: #003B4F;">return</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-26"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to scale bounding boxes to the display resolution</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;">/// Scale the latest bounding boxes to the display resolution</span></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb34-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb34-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;">// Process new detected objects</span></span>
<span id="cb34-7">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> objectInfoArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb34-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-9">        <span class="co" style="color: #5E5E5E;">// The smallest dimension of the screen</span></span>
<span id="cb34-10">        <span class="dt" style="color: #AD0000;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-11">        <span class="co" style="color: #5E5E5E;">// The smallest input dimension</span></span>
<span id="cb34-12">        <span class="dt" style="color: #AD0000;">int</span> minInputDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-13">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb34-14">        <span class="dt" style="color: #AD0000;">float</span> minImgScale <span class="op" style="color: #5E5E5E;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;">/</span> minInputDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-15">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb34-16">        <span class="dt" style="color: #AD0000;">float</span> displayScale <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-17"></span>
<span id="cb34-18">        <span class="co" style="color: #5E5E5E;">// Scale bounding box to in-game screen resolution and flip the bbox coordinates vertically</span></span>
<span id="cb34-19">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-20">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-21">        <span class="dt" style="color: #AD0000;">float</span> width <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-22">        <span class="dt" style="color: #AD0000;">float</span> height <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-23"></span>
<span id="cb34-24">        <span class="co" style="color: #5E5E5E;">// Mirror bounding box across screen</span></span>
<span id="cb34-25">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mirrorScreen <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span> x0 <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">-</span> x0 <span class="op" style="color: #5E5E5E;">-</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-26"></span>
<span id="cb34-27">        <span class="co" style="color: #5E5E5E;">// Scale bounding boxes to display resolution</span></span>
<span id="cb34-28">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-29">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-30">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-31">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-32"></span>
<span id="cb34-33">        <span class="co" style="color: #5E5E5E;">// Offset the bounding box coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb34-34">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">-</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-35">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">// Update runs once per frame</span></span>
<span id="cb35-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb35-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb35-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-9"></span>
<span id="cb35-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb35-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-12"></span>
<span id="cb35-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb35-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb35-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb35-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb35-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb35-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb35-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-32"></span>
<span id="cb35-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb35-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-36"></span>
<span id="cb35-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb35-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-39"></span>
<span id="cb35-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-43">        <span class="co" style="color: #5E5E5E;">// Update the selected ONNX model</span></span>
<span id="cb35-44">        <span class="fu" style="color: #4758AB;">UpdateONNXModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-46"></span>
<span id="cb35-47">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb35-48">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-49"></span>
<span id="cb35-50">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb35-51">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-52"></span>
<span id="cb35-53">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb35-54">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-55">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-56">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-58">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb35-59">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-61">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-62">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-63">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-64"></span>
<span id="cb35-65">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb35-66">    numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-67">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Detected {numObjects} objects"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-68">    <span class="co" style="color: #5E5E5E;">// Scale bounding boxes</span></span>
<span id="cb35-69">    <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb35-70"></span>
<span id="cb35-71">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb35-72">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-73"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the bounding boxes and current framerate.</p>
<p><strong>Define method that to handle switching ONNX models and execution providers</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;">/// This method runs when the value for an ONNX dropdown changes</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb36-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ONNXDropdownUpdate</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb36-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-6">    <span class="co" style="color: #5E5E5E;">// Only call plugin methods after initializing the input texture</span></span>
<span id="cb36-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-9">        <span class="fu" style="color: #4758AB;">RefreshMemory</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-10">        <span class="fu" style="color: #4758AB;">UpdateONNXModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-12"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb37-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb38-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb38-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-10"></span>
<span id="cb38-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb38-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb38-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb38-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the minimum confidence value</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;">/// Update the minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"slider"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb39-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>Slider slider<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb39-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb39-7">    minConfidence <span class="op" style="color: #5E5E5E;">=</span> slider<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-8">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb39-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted bounding boxes and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">// OnGUI handles and renders GUI events.</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb40-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-4">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for label text</span></span>
<span id="cb40-5">    Rect labelRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-6">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for bounding boxes</span></span>
<span id="cb40-7">    Rect boxRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-8"></span>
<span id="cb40-9">    GUIStyle labelStyle <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-11">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">11e-3</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-13">    labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">alignment</span> <span class="op" style="color: #5E5E5E;">=</span> TextAnchor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">MiddleLeft</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-14"></span>
<span id="cb40-15">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>Object objectInfo <span class="kw" style="color: #003B4F;">in</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-16">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-17">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>displayBoundingBoxes<span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-18"></span>
<span id="cb40-19">        <span class="co" style="color: #5E5E5E;">// Skip object if label index is out of bounds</span></span>
<span id="cb40-20">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">&gt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-21"></span>
<span id="cb40-22">        <span class="co" style="color: #5E5E5E;">// Get color for current class index</span></span>
<span id="cb40-23">        Color color <span class="op" style="color: #5E5E5E;">=</span> colors<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-24">        <span class="co" style="color: #5E5E5E;">// Get label for current class index</span></span>
<span id="cb40-25">        <span class="dt" style="color: #AD0000;">string</span> name <span class="op" style="color: #5E5E5E;">=</span> colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-26"></span>
<span id="cb40-27">        <span class="co" style="color: #5E5E5E;">// Set bounding box coordinates</span></span>
<span id="cb40-28">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-29">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-30">        <span class="co" style="color: #5E5E5E;">// Set bounding box dimensions</span></span>
<span id="cb40-31">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-32">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-33"></span>
<span id="cb40-34">        <span class="co" style="color: #5E5E5E;">// Scale bounding box line width based on display resolution</span></span>
<span id="cb40-35">        <span class="dt" style="color: #AD0000;">int</span> lineWidth <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.75e-3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-36">        <span class="co" style="color: #5E5E5E;">// Render bounding box</span></span>
<span id="cb40-37">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-38">            position<span class="op" style="color: #5E5E5E;">:</span> boxRect<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-39">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-40">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-41">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-42">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-43">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-44">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> lineWidth<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-45">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-46"></span>
<span id="cb40-47">        <span class="co" style="color: #5E5E5E;">// Include class label and confidence score in label text</span></span>
<span id="cb40-48">        <span class="dt" style="color: #AD0000;">string</span> labelText <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">" {name}: {(objectInfo.prob * 100).ToString("</span><span class="fl" style="color: #AD0000;">0.</span>##<span class="st" style="color: #20794D;">")}%"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-49"></span>
<span id="cb40-50">        <span class="co" style="color: #5E5E5E;">// Initialize label GUI content</span></span>
<span id="cb40-51">        GUIContent labelContent <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>labelText<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-52"></span>
<span id="cb40-53">        <span class="co" style="color: #5E5E5E;">// Calculate the text size.</span></span>
<span id="cb40-54">        Vector2 textSize <span class="op" style="color: #5E5E5E;">=</span> labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CalcSize</span><span class="op" style="color: #5E5E5E;">(</span>labelContent<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-55"></span>
<span id="cb40-56">        <span class="co" style="color: #5E5E5E;">// Set label text coordinates</span></span>
<span id="cb40-57">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-58">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">-</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> lineWidth<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-59"></span>
<span id="cb40-60">        <span class="co" style="color: #5E5E5E;">// Set label text dimensions</span></span>
<span id="cb40-61">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-62">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-63">        <span class="co" style="color: #5E5E5E;">// Set label text and backgound color</span></span>
<span id="cb40-64">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grayscale</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">?</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">black</span> <span class="op" style="color: #5E5E5E;">:</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">white</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-65">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span> <span class="op" style="color: #5E5E5E;">=</span> colorTextures<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-66">        <span class="co" style="color: #5E5E5E;">// Render label</span></span>
<span id="cb40-67">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>labelRect<span class="op" style="color: #5E5E5E;">,</span> labelContent<span class="op" style="color: #5E5E5E;">,</span> labelStyle<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-68"></span>
<span id="cb40-69">        Rect objectDot <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-70">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-71">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-72">        <span class="dt" style="color: #AD0000;">float</span> radius <span class="op" style="color: #5E5E5E;">=</span> objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-73">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-74">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-75"></span>
<span id="cb40-76"></span>
<span id="cb40-77">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-78">            position<span class="op" style="color: #5E5E5E;">:</span> objectDot<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-79">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-80">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-81">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-82">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-83">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-84">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-85">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-86"></span>
<span id="cb40-87">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-88"></span>
<span id="cb40-89">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb40-90">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-91">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-92">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb40-93">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-94">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-95"></span>
<span id="cb40-96">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb40-97">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-98">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-99"></span>
<span id="cb40-100">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Objects Detected: {numObjects}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-101">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayProposalCount<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-102"></span>
<span id="cb40-103">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb40-104">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-105">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-106">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-107">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-108">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-109"></span>
<span id="cb40-110">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb40-111">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayProposalCount <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-112">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-113"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to exit the application using the GUI</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb41-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;">/// This method runs when the user clicks the GUI Quit button</span></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb41-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Quit</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb41-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-6">    Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Quit</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb41-7"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-onapplicationquit-method" class="level3">
<h3 class="anchored" data-anchor-id="define-onapplicationquit-method">Define OnApplicationQuit Method</h3>
<p>We’ll perform any clean-up steps in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnApplicationQuit.html">OnApplicationQuit</a>method.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb42-1"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnApplicationQuit</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb42-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb42-3">    <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb42-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>Now we can start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the object detector script, dropdown menus for selecting webcams, models, and execution providers, a toggle to activate a webcam feed, and a slider to update the confidence threshold.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>3D Object → Quad</code>. We can name the new object Screen.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-quad.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-quad</figcaption><p></p>
</figure>
</div>
<p>Next, drag and drop a test image from the <code>Assets → Images</code> folder onto the Screen object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-attach-image-to-screen</figcaption><p></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the <code>Shader</code> dropdown menu in the Inspector tab. Type <code>Unlit/Texture</code> into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-screen-material-shader</figcaption><p></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>Create Empty</code>. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-empty-gameobject</figcaption><p></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ObjectDetector</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-attach-object-detector-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-attach-object-detector-script</figcaption><p></p>
</figure>
</div>
<p>Now we can assign the screen object, compute shader, and colormap file in the Inspector tab by dragging them into their respective fields.</p>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI controls. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/file/d/14134IOAlvrQpIx0t0uayr4igJa9Pk4OK/view?usp=sharing">Canvas Prefab</a></li>
</ul>
<p>Drag and drop the Canvas prefab into a new folder called Prefabs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-import-canvas-prefab.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-canvas-prefab</figcaption><p></p>
</figure>
</div>
<p>From there, drag the prefab into the Hierarchy tab. We can see the GUI by switching to the <code>Game</code> view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-canvas-to-hierarchy-tab</figcaption><p></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ObjectDetector</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-select-webcamtoggle</figcaption><p></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamtoggle-assign-inference-manager</figcaption><p></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ObjectDetector → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamtoggle-assign-inference-manager-function</figcaption><p></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamdropdown-assign-inference-manager</figcaption><p></p>
</figure>
</div>
<p>This time select <code>ObjectDetector → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamdropdown-assign-inference-manager-function</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>ONNXModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-onnx-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-onnx-model-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>ONNXExecutionProviderDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-onnx-provider-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-onnx-provider-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>ConfidenceThresholdSlider</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-update-confidence-threshold-slider-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-confidence-threshold-slider-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>QuitButton</code> On Click Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-quit-button-on-click.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-quit-button-on-click</figcaption><p></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the GUI objects to their respective fields for the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-inference-manager-assign-gui-objects</figcaption><p></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-eventsystem</figcaption><p></p>
</figure>
</div>
</section>
<section id="test-in-editor" class="level2">
<h2 class="anchored" data-anchor-id="test-in-editor">Test in Editor</h2>
<p>Click the play button in the top-middle of the Editor window to test the project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-click-play-button.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-click-play-button</figcaption><p></p>
</figure>
</div>
<p>There should be a bounding box for the call sign and one for the idle hand.</p>
<p><strong>CPU Execution Provider</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-test-in-editor-cpu.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-test-in-editor-cpu</figcaption><p></p>
</figure>
</div>
<p><strong>DirectML Execution Provider</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/images/unity-test-in-editor-dml.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-test-in-editor-dml</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this tutorial series, we created a DLL to perform object detection using ONNX Runtime and DirectML, and built a simple Unity project that leveraged this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-1/">Object Detection for Unity With ONNX Runtime and DirectML Pt. 1</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/onnx-directml-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>onnx</category>
  <category>directml</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/onnx-directml-unity-tutorial/part-2/index.html</guid>
  <pubDate>Fri, 19 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/onnx-directml-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Object Detection for Unity With ONNX Runtime and DirectML Pt. 1</title>
  <link>christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Download OpenCV</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Install ONNX Runtime</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A <a href="../../icevision-openvino-unity-tutorial/part-1/">previous tutorial series</a> covered training an object detection model using <a href="https://airctic.com/0.12.0/">IceVision</a> and creating an <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a> plugin for the <a href="https://unity.com/">Unity</a> game engine to perform inference with the trained model. OpenVINO can provide fast inference speeds but only targets Intel hardware. Not everyone has an Intel CPU, and discrete Intel GPUs are not yet widely available.</p>
<p>This follow-up tutorial covers building a plugin using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a> and <a href="https://docs.microsoft.com/en-us/windows/ai/directml/dml">DirectML</a> to enable inference on non-Intel CPUs and GPUs. ONNX Runtime is a cross-platform model accelerator that works with several hardware acceleration libraries. DirectML is a hardware-accelerated DirectX 12 library for machine learning on Windows.</p>
<p>We’ll use the ONNX model <a href="../../icevision-openvino-unity-tutorial/part-1/#export-the-model">exported</a> in the original tutorial, so no modifications to the training code are required.</p>
<ul>
<li><strong>Model Training Tutorial:</strong> <a href="../../icevision-openvino-unity-tutorial/part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></li>
</ul>
<section id="unity-demo" class="level4">
<h4 class="anchored" data-anchor-id="unity-demo">Unity Demo</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/unity-onnx-directml-demo.mp4" class="img-fluid" controls=""><a href="./videos/unity-onnx-directml-demo.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">unity-onnx-directml-demo</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Part 1 covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with the object detection model.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes <a href="https://visualstudio.microsoft.com/downloads/">Visual Studio</a> is present on your system.</p>
</blockquote>
</section>
<section id="download-opencv" class="level2">
<h2 class="anchored" data-anchor-id="download-opencv">Download OpenCV</h2>
<p>We’ll use the <a href="https://github.com/opencv/opencv">OpenCV</a> library to process image data from Unity. The tutorial uses OpenCV <code>4.6.0</code>, which is available at the link below.</p>
<ul>
<li><a href="https://github.com/opencv/opencv/releases/tag/4.6.0">OpenCV 4.6.0 GitHub</a></li>
</ul>
<p>Select the <code>opencv-4.6.0-vc14_vc15.exe</code> option from the Assets list.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/opencv_github_download_executable.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">opencv_github_download_executable</figcaption><p></p>
</figure>
</div>
<p>Run the executable once it finishes downloading. You might get a warning from Windows that the executable is an unrecognized app. We can bypass this by clicking the <code>More info</code> text, then the Run anyway button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/windows-defender-smartscreen-warning.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">windows-defender-smartscreen-warning</figcaption><p></p>
</figure>
</div>
<p>Then, click the <code>Run anyway</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/windows-defender-smartscreen-warning-run-anyway.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">windows-defender-smartscreen-warning-run-anyway</figcaption><p></p>
</figure>
</div>
<p>The executable will prompt us to select a location to extract the <code>opencv</code> folder. We’ll need to give Visual Studio this location to access the library’s functionality. I tend to place my C++ dependencies in a dedicated folder for consistency.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/opencv-select-extraction-location.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">opencv-select-extraction-location</figcaption><p></p>
</figure>
</div>
<p>If we open the <code>opencv</code> folder, we can see a build folder and a source folder. Everything we need is in the build folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/opencv-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">opencv-folder</figcaption><p></p>
</figure>
</div>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-create-new-project</figcaption><p></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-new-dll-project</figcaption><p></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-choose-project-name-and-location</figcaption><p></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-release</figcaption><p></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-64-bit</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where OpenCV is so we can access its APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-solution-explorer-select-project-name</figcaption><p></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-properties</figcaption><p></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-additional-include-directories</figcaption><p></p>
</figure>
</div>
<p>Add the path for the following folder, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenCV library, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\opencv\build\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-add-additional-include-directories</figcaption><p></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-additional-dependencies</figcaption><p></p>
</figure>
</div>
<p>Add the following path, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenCV library, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\opencv\build\x64\vc15\lib\*</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-add-additional-dependencies</figcaption><p></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL file included with OpenCV.</p>
<p><strong>OpenCV DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/get-opencv-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-opencv-dll-files</figcaption><p></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-edit-command-line-events</figcaption><p></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenCV library, and click <code>OK</code>.</p>
<ul>
<li><code>xcopy &lt;parent-folder-path&gt;\opencv\build\x64\vc15\bin\opencv_world452.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-add-xcopy-commands</figcaption><p></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-properties-apply-changes</figcaption><p></p>
</figure>
</div>
</section>
<section id="install-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="install-onnx-runtime">Install ONNX Runtime</h2>
<p>We can install ONNX Runtime with DirectML directly into our project via the <a href="https://www.nuget.org/">NuGet</a> package manager integrated with Visual Studio. Open the <code>Project</code> menu and select <code>Manage NuGet Packages...</code> from the dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-nuget-package-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-nuget-package-manager</figcaption><p></p>
</figure>
</div>
<p>Select the <code>Browse</code> option and enter <code>Microsoft.ML.OnnxRuntime.DirectML</code> into the search box.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-nuget-package-manager-search-for-package.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-nuget-package-manager-search-for-package</figcaption><p></p>
</figure>
</div>
<p>With the package selected, click the <code>Install</code> button. The project uses version <code>1.12.1</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-nuget-package-manager-install-package.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-nuget-package-manager-install-package</figcaption><p></p>
</figure>
</div>
<p>Click <code>OK</code> in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-approve-nuget-package-install.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-approve-nuget-package-install</figcaption><p></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We’ll first update the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> with the required header files. We can open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-pch-header-file</figcaption><p></p>
</figure>
</div>
<p>Comment or remove the <code>#include</code> line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for ONNX Runtime and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;onnxruntime_cxx_api.h&gt;</span></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"dml_provider_factory.h"</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<ul>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html">OrtApi</a>: ONNX Runtime API interface</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_env.html">OrtEnv</a>: Holds the logging state for the ONNX Runtime objects</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_session_options.html">OrtSessionOptions</a>: Holds the options used when creating a new ONNX Runtime session</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_session.html">OrtSession</a>: The ONNX Runtime session</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// The current source image width</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;">int</span> img_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">// The current source image height</span></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;">int</span> img_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">// The current model input width</span></span>
<span id="cb6-6"><span class="dt" style="color: #AD0000;">int</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">// The current model input height</span></span>
<span id="cb6-8"><span class="dt" style="color: #AD0000;">int</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">// The total number pixels in the input image</span></span>
<span id="cb6-10"><span class="dt" style="color: #AD0000;">int</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;">// The number of color channels </span></span>
<span id="cb6-12"><span class="dt" style="color: #AD0000;">int</span> n_channels <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">// Stores information about a single object prediction</span></span>
<span id="cb6-15"><span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb6-16"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-17">    <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-18">    <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19">    <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-20">    <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21">    <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-22">    <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-23"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;">// Store grid offset and stride values to decode a section of the model output</span></span>
<span id="cb6-26"><span class="kw" style="color: #003B4F;">struct</span> GridAndStride</span>
<span id="cb6-27"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-28">    <span class="dt" style="color: #AD0000;">int</span> grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-29">    <span class="dt" style="color: #AD0000;">int</span> grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-30">    <span class="dt" style="color: #AD0000;">int</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-31"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-32"></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;">// The scale values used to adjust the model output to the source image resolution</span></span>
<span id="cb6-34"><span class="dt" style="color: #AD0000;">float</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-35"><span class="dt" style="color: #AD0000;">float</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-36"></span>
<span id="cb6-37"><span class="co" style="color: #5E5E5E;">// The minimum confidence score to consider an object proposal</span></span>
<span id="cb6-38"><span class="dt" style="color: #AD0000;">float</span> bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-39"><span class="co" style="color: #5E5E5E;">// The maximum intersection over union value before an object proposal will be ignored</span></span>
<span id="cb6-40"><span class="dt" style="color: #AD0000;">float</span> nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-41"></span>
<span id="cb6-42"><span class="co" style="color: #5E5E5E;">// Stores the grid and stride values to navigate the raw model output</span></span>
<span id="cb6-43"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> grid_strides<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-44"><span class="co" style="color: #5E5E5E;">// Stores the object proposals with confidence scores above bbox_conf_thresh</span></span>
<span id="cb6-45"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-46"><span class="co" style="color: #5E5E5E;">// Stores the indices for the object proposals selected using non-maximum suppression</span></span>
<span id="cb6-47"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-48"></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;">// The stride values used to generate the gride_strides vector</span></span>
<span id="cb6-50"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> strides <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">32</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-51"></span>
<span id="cb6-52"><span class="co" style="color: #5E5E5E;">// The mean of the ImageNet dataset used to train the model</span></span>
<span id="cb6-53"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">float</span> mean<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="fl" style="color: #AD0000;">0.485</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.456</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.406</span><span class="bu" style="color: null;">f</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;">// The standard deviation of the ImageNet dataset used to train the model</span></span>
<span id="cb6-55"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">float</span> std_dev<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="fl" style="color: #AD0000;">0.229</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.224</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.225</span><span class="bu" style="color: null;">f</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb6-56"></span>
<span id="cb6-57"><span class="co" style="color: #5E5E5E;">// ONNX Runtime API interface</span></span>
<span id="cb6-58"><span class="at" style="color: #657422;">const</span> OrtApi<span class="op" style="color: #5E5E5E;">*</span> ort <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-59"></span>
<span id="cb6-60"><span class="co" style="color: #5E5E5E;">// List of available execution providers</span></span>
<span id="cb6-61"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**</span> provider_names<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-62"><span class="dt" style="color: #AD0000;">int</span> provider_count<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-63"></span>
<span id="cb6-64"><span class="co" style="color: #5E5E5E;">// Holds the logging state for the ONNX Runtime objects</span></span>
<span id="cb6-65">OrtEnv<span class="op" style="color: #5E5E5E;">*</span> env<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-66"><span class="co" style="color: #5E5E5E;">// Holds the options used when creating a new ONNX Runtime session</span></span>
<span id="cb6-67">OrtSessionOptions<span class="op" style="color: #5E5E5E;">*</span> session_options<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-68"><span class="co" style="color: #5E5E5E;">// The ONNX Runtime session</span></span>
<span id="cb6-69">OrtSession<span class="op" style="color: #5E5E5E;">*</span> session<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-70"></span>
<span id="cb6-71"><span class="co" style="color: #5E5E5E;">// The name of the model input</span></span>
<span id="cb6-72"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> input_name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-73"><span class="co" style="color: #5E5E5E;">// The name of the model output</span></span>
<span id="cb6-74"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> output_name<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-75"></span>
<span id="cb6-76"><span class="co" style="color: #5E5E5E;">// A pointer to the raw input data</span></span>
<span id="cb6-77"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> input_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-78"><span class="co" style="color: #5E5E5E;">// The memory size of the raw input data</span></span>
<span id="cb6-79"><span class="dt" style="color: #AD0000;">int</span> input_size<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define a function to convert <code>char</code> data to <code>wchar_t</code></strong></p>
<p>ONNX Runtime expects paths to ONNX model files to be in <code>wchar_t</code> format. We receive the file paths in <code>char</code> format, so we’ll make a function to convert them.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">/// Convert char data to wchar_t</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"text"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;">static</span> <span class="dt" style="color: #AD0000;">wchar_t</span><span class="op" style="color: #5E5E5E;">*</span> charToWChar<span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> text<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-8">    <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">size_t</span> size <span class="op" style="color: #5E5E5E;">=</span> strlen<span class="op" style="color: #5E5E5E;">(</span>text<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-9">    <span class="dt" style="color: #AD0000;">wchar_t</span><span class="op" style="color: #5E5E5E;">*</span> wText <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">wchar_t</span><span class="op" style="color: #5E5E5E;">[</span>size<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb7-10">    <span class="dt" style="color: #AD0000;">size_t</span> converted_chars<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-11">    mbstowcs_s<span class="op" style="color: #5E5E5E;">(&amp;</span>converted_chars<span class="op" style="color: #5E5E5E;">,</span> wText<span class="op" style="color: #5E5E5E;">,</span> size<span class="op" style="color: #5E5E5E;">,</span> text<span class="op" style="color: #5E5E5E;">,</span> _TRUNCATE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;">return</span> wText<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to initialize the interface to the ONNX Runtime API</strong></p>
<ul>
<li><p><a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaff6ff297798b9337d4c0f89a35b76aa6">OrtGetApiBase</a>: The Onnxruntime library’s entry point to access the C API.</p></li>
<li><p><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#aaacd4a9540eb5044291addd2ebd9bc5f">GetAvailableProviders</a>: Get the names of all available providers.</p></li>
</ul>
<hr>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">/// Initialize the ONNX Runtime API interface and get the available execution providers</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb8-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> InitOrtAPI<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">    ort <span class="op" style="color: #5E5E5E;">=</span> OrtGetApiBase<span class="op" style="color: #5E5E5E;">()-&gt;</span>GetApi<span class="op" style="color: #5E5E5E;">(</span>ORT_API_VERSION<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetAvailableProviders<span class="op" style="color: #5E5E5E;">(&amp;</span>provider_names<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>provider_count<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the number of execution providers</strong></p>
<p>The next function we’ll define will create a list of available execution providers and return the number of providers accessible by ONNX Runtime. We’ll use this information to select which device to use to perform inference from the Unity application.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">/// Get the number of available execution providers</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The number of available devices</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb9-5">DLLExport <span class="dt" style="color: #AD0000;">int</span> GetProviderCount<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;">// Return the number of available execution providers</span></span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;">return</span> provider_count<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the name of an execution provider</strong></p>
<p>Next, we’ll define a function to return the name at a specified index in the list of available execution providers.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Get the name of the execution provider at the specified index</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The name of the execution provider at the specified index</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb10-6">DLLExport <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> GetProviderName<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7">    <span class="cf" style="color: #003B4F;">return</span> provider_names<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate stride values to navigate the raw model output</strong></p>
<p>The method for generating the offset values used to traverse the output array is almost identical to the Python implementation from the <a href="../../icevision-openvino-unity-tutorial/part-1/#define-post-processing-steps">training tutorial</a>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">/// Generate offset values to navigate the raw model output</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"height"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input height</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"width"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input width</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-6"><span class="dt" style="color: #AD0000;">void</span> GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;">// Remove the values for the previous input resolution</span></span>
<span id="cb11-9">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;">// Iterate through each stride value</span></span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span> stride <span class="op" style="color: #5E5E5E;">:</span> strides<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb11-13">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-14">        <span class="co" style="color: #5E5E5E;">// Calculate the grid dimensions</span></span>
<span id="cb11-15">        <span class="dt" style="color: #AD0000;">int</span> grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-16">        <span class="dt" style="color: #AD0000;">int</span> grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-17"></span>
<span id="cb11-18">        <span class="co" style="color: #5E5E5E;">// Store each combination of grid coordinates</span></span>
<span id="cb11-19">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g1 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_height<span class="op" style="color: #5E5E5E;">;</span> g1<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb11-20">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-21">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g0 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_width<span class="op" style="color: #5E5E5E;">;</span> g0<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb11-22">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-23">                grid_strides<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>GridAndStride<span class="op" style="color: #5E5E5E;">{</span> g0<span class="op" style="color: #5E5E5E;">,</span> g1<span class="op" style="color: #5E5E5E;">,</span> stride <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb11-24">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-25">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-27"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to set the minimum confidence score from Unity</strong></p>
<p>We might want to try different confidence thresholds for keeping object proposals from the Unity application, so we’ll add a function to enable this.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">/// Set minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"min_confidence"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The minimum confidence score for keeping bounding box proposals</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb12-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> SetConfidenceThreshold<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> min_confidence<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-7">    bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> min_confidence<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to refresh memory when switching models or execution providers</strong></p>
<ul>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ae311be14b0e35ce3ad3bc1418a79d7bb">ReleaseSession</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a5edc51815e9aeba83516e4fe55ef836a">ReleaseEnv</a></li>
</ul>
<hr>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Refresh memory when switching models or execution providers</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4">DLLExport <span class="dt" style="color: #AD0000;">void</span> RefreshMemory<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-5">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">)</span> free<span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">)</span> ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseSession<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">)</span> ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseEnv<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to load an ONNX model</strong></p>
<ul>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a22085f699a2d1adb52f809383f475ed1">CreateEnv</a>: Create an OrtEnv.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a74a22efe6571fe538e60f677654ae01f">DisableTelemetryEvents</a>: Disable telemetry.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a033b8a4a9de072bcc9dda3a8434922c5">CreateSessionOptions</a>: Create an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaa6c56bcb36e39611481a17065d3ce620">OrtSessionOptions</a> object.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ab090eb2a54f5dfaf0377a8cc72d65c5f">DisableMemPattern</a>: Disable the memory pattern optimization.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a8113f817428f87ef4926d97809291155">SetSessionExecutionMode</a>: Controls whether you want to execute operators in your graph sequentially or in parallel.</li>
<li>OrtSessionOptionsAppendExecutionProvider_DML: Add a DirectML execution provider.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a8e8529eb336bbe2334307c9197891838">CreateSession</a>: Create an OrtSession from a model file.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a2fa11d21f36cbd068a82682ea175d774">ReleaseSessionOptions</a>: Free an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaa6c56bcb36e39611481a17065d3ce620">OrtSessionOptions</a> object.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_allocator_with_default_options.html">AllocatorWithDefaultOptions</a>: Create the default allocator.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a811b1773c7d713750716a36b432e2102">SessionGetInputName</a>: Get input name.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a130f69dae071631abd50cae5a26d5d9d">SessionGetOutputName</a>: Get output name.</li>
</ul>
<hr>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Load a model from the specified file path</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model_path"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The full model path to the ONNX model</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"execution_provider"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name for the desired execution_provider</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_dims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image dimensions</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">A status value indicating success or failure to load and reshape the model</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb14-8">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> model_path<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> execution_provider<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span></span>
<span id="cb14-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-10">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;">// Initialize the ONNX runtime environment</span></span>
<span id="cb14-13">    <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>instance_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"yolox-inference"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-14">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateEnv<span class="op" style="color: #5E5E5E;">(</span>ORT_LOGGING_LEVEL_WARNING<span class="op" style="color: #5E5E5E;">,</span> instance_name<span class="op" style="color: #5E5E5E;">.</span>c_str<span class="op" style="color: #5E5E5E;">(),</span> <span class="op" style="color: #5E5E5E;">&amp;</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-15"></span>
<span id="cb14-16">    <span class="co" style="color: #5E5E5E;">// Disable telemetry</span></span>
<span id="cb14-17">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>DisableTelemetryEvents<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;">// Add the selected execution provider</span></span>
<span id="cb14-20">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateSessionOptions<span class="op" style="color: #5E5E5E;">(&amp;</span>session_options<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-21">    <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>provider_name <span class="op" style="color: #5E5E5E;">=</span> execution_provider<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-22">    </span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;">// Add the specified execution provider</span></span>
<span id="cb14-24">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>provider_name<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"CPU"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-25">        return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-27">    <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>provider_name<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Dml"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-28">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>DisableMemPattern<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-29">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>SetSessionExecutionMode<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">,</span> ExecutionMode<span class="op" style="color: #5E5E5E;">::</span>ORT_SEQUENTIAL<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-30">        OrtSessionOptionsAppendExecutionProvider_DML<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-32">    <span class="cf" style="color: #003B4F;">else</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-33"></span>
<span id="cb14-34">    <span class="co" style="color: #5E5E5E;">// Create a new inference session</span></span>
<span id="cb14-35">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateSession<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">,</span> charToWChar<span class="op" style="color: #5E5E5E;">(</span>model_path<span class="op" style="color: #5E5E5E;">),</span> session_options<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>session<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-36">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseSessionOptions<span class="op" style="color: #5E5E5E;">(</span>session_options<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-37"></span>
<span id="cb14-38">    Ort<span class="op" style="color: #5E5E5E;">::</span>AllocatorWithDefaultOptions allocator<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-39"></span>
<span id="cb14-40">    <span class="co" style="color: #5E5E5E;">// Get input and output names</span></span>
<span id="cb14-41">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>SessionGetInputName<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> allocator<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>input_name<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-42">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>SessionGetOutputName<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> allocator<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>output_name<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-43"></span>
<span id="cb14-44">    <span class="co" style="color: #5E5E5E;">// The dimensions of the source input image</span></span>
<span id="cb14-45">    img_w <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb14-46">    img_h <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb14-47">    <span class="co" style="color: #5E5E5E;">// Calculate new input dimensions based on the max stride value</span></span>
<span id="cb14-48">    input_w <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb14-49">    input_h <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb14-50">    n_pixels <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">*</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-51"></span>
<span id="cb14-52">    <span class="co" style="color: #5E5E5E;">// Calculate the value used to adjust the model output to the source image resolution</span></span>
<span id="cb14-53">    scale_x <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-54">    scale_y <span class="op" style="color: #5E5E5E;">=</span> input_h <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-55"></span>
<span id="cb14-56">    <span class="co" style="color: #5E5E5E;">// Generate the grid and stride values based on input resolution</span></span>
<span id="cb14-57">    GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span>input_h<span class="op" style="color: #5E5E5E;">,</span> input_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-58"></span>
<span id="cb14-59">    <span class="co" style="color: #5E5E5E;">// Replace the initial input dims with the updated values</span></span>
<span id="cb14-60">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-61">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-62"></span>
<span id="cb14-63">    <span class="co" style="color: #5E5E5E;">// Allocate memory for the raw input data</span></span>
<span id="cb14-64">    input_size <span class="op" style="color: #5E5E5E;">=</span> n_pixels <span class="op" style="color: #5E5E5E;">*</span> n_channels <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-65">    input_data <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*)</span>malloc<span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">size_t</span><span class="op" style="color: #5E5E5E;">)</span>input_size <span class="op" style="color: #5E5E5E;">*</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*));</span></span>
<span id="cb14-66">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>input_data <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> memset<span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> input_size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-67"></span>
<span id="cb14-68">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb14-69">    <span class="cf" style="color: #003B4F;">return</span> return_val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-70"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>The method to generate object proposals is nearly identical to the Python implementation from the training tutorial.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">/// Generate object detection proposals from the raw model output</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"out_ptr"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to the output tensor data</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="dt" style="color: #AD0000;">void</span> GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_ptr<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> proposal_length<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb15-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;">// Remove the proposals for the previous model output</span></span>
<span id="cb15-8">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb15-9"></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;">// Obtain the number of classes the model was trained to detect</span></span>
<span id="cb15-11">    <span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-12"></span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> anchor_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> anchor_idx <span class="op" style="color: #5E5E5E;">&lt;</span> grid_strides<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> anchor_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb15-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-15">        <span class="co" style="color: #5E5E5E;">// Get the current grid and stride values</span></span>
<span id="cb15-16">        <span class="dt" style="color: #AD0000;">int</span> grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-17">        <span class="dt" style="color: #AD0000;">int</span> grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-18">        <span class="dt" style="color: #AD0000;">int</span> stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-19"></span>
<span id="cb15-20">        <span class="co" style="color: #5E5E5E;">// Get the starting index for the current proposal</span></span>
<span id="cb15-21">        <span class="dt" style="color: #AD0000;">int</span> start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-22"></span>
<span id="cb15-23">        <span class="co" style="color: #5E5E5E;">// Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb15-24">        <span class="dt" style="color: #AD0000;">float</span> x_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid0<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-25">        <span class="dt" style="color: #AD0000;">float</span> y_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid1<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-26"></span>
<span id="cb15-27">        <span class="co" style="color: #5E5E5E;">// Get the dimensions for the predicted bounding box</span></span>
<span id="cb15-28">        <span class="dt" style="color: #AD0000;">float</span> w <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-29">        <span class="dt" style="color: #AD0000;">float</span> h <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-30"></span>
<span id="cb15-31">        <span class="co" style="color: #5E5E5E;">// Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb15-32">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-33">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-34"></span>
<span id="cb15-35">        <span class="co" style="color: #5E5E5E;">// Get the confidence score that an object is present</span></span>
<span id="cb15-36">        <span class="dt" style="color: #AD0000;">float</span> box_objectness <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb15-37"></span>
<span id="cb15-38">        <span class="co" style="color: #5E5E5E;">// Initialize object struct with bounding box information</span></span>
<span id="cb15-39">        Object obj <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> x0<span class="op" style="color: #5E5E5E;">,</span> y0<span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb15-40"></span>
<span id="cb15-41">        <span class="co" style="color: #5E5E5E;">// Find the object class with the highest confidence score</span></span>
<span id="cb15-42">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> class_idx <span class="op" style="color: #5E5E5E;">&lt;</span> num_classes<span class="op" style="color: #5E5E5E;">;</span> class_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb15-43">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-44">            <span class="co" style="color: #5E5E5E;">// Get the confidence score for the current object class</span></span>
<span id="cb15-45">            <span class="dt" style="color: #AD0000;">float</span> box_cls_score <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb15-46">            <span class="co" style="color: #5E5E5E;">// Calculate the final confidence score for the object proposal</span></span>
<span id="cb15-47">            <span class="dt" style="color: #AD0000;">float</span> box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-48"></span>
<span id="cb15-49">            <span class="co" style="color: #5E5E5E;">// Check for the highest confidence score</span></span>
<span id="cb15-50">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb15-51">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-52">                obj<span class="op" style="color: #5E5E5E;">.</span>label <span class="op" style="color: #5E5E5E;">=</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-53">                obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">=</span> box_prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-54">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-55">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-56"></span>
<span id="cb15-57">        <span class="co" style="color: #5E5E5E;">// Only add object proposals with high enough confidence scores</span></span>
<span id="cb15-58">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> bbox_conf_thresh<span class="op" style="color: #5E5E5E;">)</span> proposals<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-59">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-60"></span>
<span id="cb15-61">    <span class="co" style="color: #5E5E5E;">// Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb15-62">    <span class="bu" style="color: null;">std::</span>sort<span class="op" style="color: #5E5E5E;">(</span>proposals<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> proposals<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">(),</span> <span class="op" style="color: #5E5E5E;">[](</span>Object<span class="op" style="color: #5E5E5E;">&amp;</span> a<span class="op" style="color: #5E5E5E;">,</span> Object<span class="op" style="color: #5E5E5E;">&amp;</span> b<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">bool</span></span>
<span id="cb15-63">              <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> a<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> b<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb15-64"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<p>The C++ API for OpenCV has built-in functionality to perform comparison operations between rectangles. Therefore, we don’t need to define helper functions to calculate the intersection and union areas of two bounding boxes. Otherwise, the method to sort bounding box proposals using Non-Maximum Suppression is almost identical to the Python implementation from part 1.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;">/// Filter through a sorted list of object proposals using Non-maximum suppression</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="dt" style="color: #AD0000;">void</span> NmsSortedBboxes<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;">// Remove the picked proposals for the previous model outptut</span></span>
<span id="cb16-7">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;">// Iterate through the object proposals</span></span>
<span id="cb16-10">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposals<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb16-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-12">        Object<span class="op" style="color: #5E5E5E;">&amp;</span> a <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb16-13"></span>
<span id="cb16-14">        <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb16-15">        cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_a <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>a<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-16"></span>
<span id="cb16-17">        <span class="dt" style="color: #AD0000;">bool</span> keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-18"></span>
<span id="cb16-19">        <span class="co" style="color: #5E5E5E;">// Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb16-20">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">:</span> proposal_indices<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-21">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-22">            Object<span class="op" style="color: #5E5E5E;">&amp;</span> b <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb16-23"></span>
<span id="cb16-24">            <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb16-25">            cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_b <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>b<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-26"></span>
<span id="cb16-27">            <span class="co" style="color: #5E5E5E;">// Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb16-28">            <span class="dt" style="color: #AD0000;">float</span> inter_area <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>rect_a <span class="op" style="color: #5E5E5E;">&amp;</span> rect_b<span class="op" style="color: #5E5E5E;">).</span>area<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-29">            <span class="co" style="color: #5E5E5E;">// Calculate the union area of both bounding boxes</span></span>
<span id="cb16-30">            <span class="dt" style="color: #AD0000;">float</span> union_area <span class="op" style="color: #5E5E5E;">=</span> rect_a<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">+</span> rect_b<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> inter_area<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-31">            <span class="co" style="color: #5E5E5E;">// Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb16-32">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-33">                keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-34">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-35"></span>
<span id="cb16-36">        <span class="co" style="color: #5E5E5E;">// Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb16-37">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>keep<span class="op" style="color: #5E5E5E;">)</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-38">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-39"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1-byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>After processing the model output, we’ll return the final number of detected objects to Unity so we can initialize an array of objects.</p>
<ul>
<li><a href="https://docs.opencv.org/3.4/d3/d63/classcv_1_1Mat.html">cv::Mat</a>: n-dimensional dense array class<br>
</li>
<li><a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv::cvtColor()</a>: Converts an image from one color space to another</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_memory_info.html">OrtMemoryInfo</a>:</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a6a64ee931925577fd40f5f3f7472cfed">CreateCpuMemoryInfo</a>: Create an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga088f45e429651ac29b4a9efb4d88571a">OrtMemoryInfo</a> for CPU memory.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_value.html">OrtValue</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a2aad3ccd68c66d0b38bdb966467d9324">CreateTensorWithDataAsOrtValue</a>: Create a tensor backed by a user supplied buffer.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a62f73350760cf7cc483216ac44222d0b">ReleaseMemoryInfo</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ad8b12cad4160d43da92f49191cd91895">Run</a>: Run the model in an <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga5220ca3b3f0a31a01a3f15057c35cac6">OrtSession</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_1_1_tensor_type_and_shape_info.html">OrtTensorTypeAndShapeInfo</a></li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a97f8d1f1dbcd39214f50f1dc9e8aef7b">GetTensorTypeAndShape</a>: Get type and shape information from a tensor <a href="https://onnxruntime.ai/docs/api/c/group___global.html#gaab167acf3fe9dabc0195b993fbe7ee7d">OrtValue</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a4b4e5b170de480987d23d350ccc55349">GetDimensionsCount</a>: Get dimension count in <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga6af32c548904330b6bd7e8cba6e186c1">OrtTensorTypeAndShapeInfo</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#ae06620ce959abdb68f982a200fb003cd">GetDimensions</a>: Get dimensions in <a href="https://onnxruntime.ai/docs/api/c/group___global.html#ga6af32c548904330b6bd7e8cba6e186c1">OrtTensorTypeAndShapeInfo</a>.</li>
<li><a href="https://onnxruntime.ai/docs/api/c/struct_ort_api.html#a24486475cc05b9228a57b814b2024d77">GetTensorMutableData</a>: Get a pointer to the raw data inside a tensor.</li>
</ul>
<hr>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Perform inference with the provided texture data</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_data"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image data from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The final number of detected objects</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb17-6">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> image_data<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb17-9">    cv<span class="op" style="color: #5E5E5E;">::</span>Mat input_image <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>img_h<span class="op" style="color: #5E5E5E;">,</span> img_w<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> image_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb17-11">    cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;">// Resize the image to the model input dimensions</span></span>
<span id="cb17-13">    cv<span class="op" style="color: #5E5E5E;">::</span>resize<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>Size<span class="op" style="color: #5E5E5E;">(</span>input_w<span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb17-14"></span>
<span id="cb17-15">    <span class="co" style="color: #5E5E5E;">// Iterate over each pixel in image</span></span>
<span id="cb17-16">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">&lt;</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb17-17">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-18">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> ch <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> ch <span class="op" style="color: #5E5E5E;">&lt;</span> n_channels<span class="op" style="color: #5E5E5E;">;</span> ch<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-19">            <span class="co" style="color: #5E5E5E;">// Scale and normalize each value</span></span>
<span id="cb17-20">            input_data<span class="op" style="color: #5E5E5E;">[</span>ch <span class="op" style="color: #5E5E5E;">*</span> n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">((</span>input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p <span class="op" style="color: #5E5E5E;">*</span> n_channels <span class="op" style="color: #5E5E5E;">+</span> ch<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> mean<span class="op" style="color: #5E5E5E;">[</span>ch<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">/</span> std_dev<span class="op" style="color: #5E5E5E;">[</span>ch<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb17-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-23"></span>
<span id="cb17-24">    <span class="co" style="color: #5E5E5E;">// Initialize list of input and output names</span></span>
<span id="cb17-25">    <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> input_names<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> input_name <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-26">    <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> output_names<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> output_name <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-27">    <span class="co" style="color: #5E5E5E;">// Initialize the list of model input dimension</span></span>
<span id="cb17-28">    <span class="dt" style="color: #AD0000;">int64_t</span> input_shape<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">,</span> input_w <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-29">    <span class="dt" style="color: #AD0000;">int</span> input_shape_len <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>input_shape<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>input_shape<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb17-30"></span>
<span id="cb17-31">    <span class="co" style="color: #5E5E5E;">// Initialize an input tensor object with the input_data</span></span>
<span id="cb17-32">    OrtMemoryInfo<span class="op" style="color: #5E5E5E;">*</span> memory_info<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-33">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateCpuMemoryInfo<span class="op" style="color: #5E5E5E;">(</span>OrtArenaAllocator<span class="op" style="color: #5E5E5E;">,</span> OrtMemTypeDefault<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>memory_info<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-34"></span>
<span id="cb17-35">    OrtValue<span class="op" style="color: #5E5E5E;">*</span> input_tensor <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-36">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>CreateTensorWithDataAsOrtValue<span class="op" style="color: #5E5E5E;">(</span>memory_info<span class="op" style="color: #5E5E5E;">,</span> input_data<span class="op" style="color: #5E5E5E;">,</span> input_size<span class="op" style="color: #5E5E5E;">,</span> input_shape<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb17-37">                                        input_shape_len<span class="op" style="color: #5E5E5E;">,</span> ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb17-38">                                        <span class="op" style="color: #5E5E5E;">&amp;</span>input_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-39"></span>
<span id="cb17-40">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseMemoryInfo<span class="op" style="color: #5E5E5E;">(</span>memory_info<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-41"></span>
<span id="cb17-42"></span>
<span id="cb17-43">    OrtValue<span class="op" style="color: #5E5E5E;">*</span> output_tensor <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-44">    <span class="co" style="color: #5E5E5E;">// Perform inference</span></span>
<span id="cb17-45">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>Run<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">,</span> NULL<span class="op" style="color: #5E5E5E;">,</span> input_names<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> OrtValue<span class="op" style="color: #5E5E5E;">*</span> <span class="at" style="color: #657422;">const</span><span class="op" style="color: #5E5E5E;">*)&amp;</span>input_tensor<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> output_names<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb17-46">             <span class="op" style="color: #5E5E5E;">&amp;</span>output_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-47"></span>
<span id="cb17-48">    <span class="co" style="color: #5E5E5E;">// Make sure the output tensor is not NULL to avoid potential crashes</span></span>
<span id="cb17-49">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>output_tensor <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-50">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>input_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-51">        ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-52">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-53">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-54"></span>
<span id="cb17-55">    <span class="co" style="color: #5E5E5E;">// Get the length of a single object proposal (i.e., number of object classes + 5)</span></span>
<span id="cb17-56">    OrtTensorTypeAndShapeInfo<span class="op" style="color: #5E5E5E;">*</span> output_tensor_info<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-57">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetTensorTypeAndShape<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>output_tensor_info<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-58">    <span class="dt" style="color: #AD0000;">size_t</span> output_length<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{};</span></span>
<span id="cb17-59">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetDimensionsCount<span class="op" style="color: #5E5E5E;">(</span>output_tensor_info<span class="op" style="color: #5E5E5E;">,</span> output_length<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-60">    <span class="dt" style="color: #AD0000;">int64_t</span> output_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{};</span></span>
<span id="cb17-61">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetDimensions<span class="op" style="color: #5E5E5E;">(</span>output_tensor_info<span class="op" style="color: #5E5E5E;">,</span> output_dims<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">*</span>output_length<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-62"></span>
<span id="cb17-63">    <span class="co" style="color: #5E5E5E;">// Access model output</span></span>
<span id="cb17-64">    <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-65">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>GetTensorMutableData<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">**)&amp;</span>out_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-66"></span>
<span id="cb17-67">    <span class="co" style="color: #5E5E5E;">// Generate new proposals for the current model output</span></span>
<span id="cb17-68">    GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> output_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb17-69"></span>
<span id="cb17-70">    <span class="co" style="color: #5E5E5E;">// Pick detected objects to keep using Non-maximum Suppression</span></span>
<span id="cb17-71">    NmsSortedBboxes<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-72"></span>
<span id="cb17-73">    <span class="co" style="color: #5E5E5E;">// Free memory for input and output tensors</span></span>
<span id="cb17-74">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>input_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-75">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseValue<span class="op" style="color: #5E5E5E;">(</span>output_tensor<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-76"></span>
<span id="cb17-77">    <span class="co" style="color: #5E5E5E;">// return the final number of detected objects</span></span>
<span id="cb17-78">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-79"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to populate an array of objects from Unity</strong></p>
<p>Next, we’ll define a function to populate an array of objects from Unity. We call this function after initializing the list based on the current number of detected objects. We’ll also scale the bounding box information from the input dimensions to the source image resolution.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;">/// Fill the provided array with the detected objects</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"objects"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to a list of objects from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb18-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> PopulateObjectsArray<span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> objects<span class="op" style="color: #5E5E5E;">)</span> </span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-7"></span>
<span id="cb18-8">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb18-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-10">        Object obj <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>proposal_indices<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb18-11"></span>
<span id="cb18-12">        <span class="co" style="color: #5E5E5E;">// Adjust offset to source image resolution and clamp the bounding box</span></span>
<span id="cb18-13">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>x0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>x0 <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-14">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>y0 <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-15">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>width <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>width <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-16">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>height <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>height <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>label <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-19">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>prob <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb18-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to clear memory when the Unity application exits</strong></p>
<p>This last function will free the memory allocated by the plugin. We’ll call it when the Unity application shuts down.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">/// Free memory</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb19-4">DLLExport <span class="dt" style="color: #AD0000;">void</span> FreeResources<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-6">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-7">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-8">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    free<span class="op" style="color: #5E5E5E;">(</span>input_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-11">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseSession<span class="op" style="color: #5E5E5E;">(</span>session<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-12">    ort<span class="op" style="color: #5E5E5E;">-&gt;</span>ReleaseEnv<span class="op" style="color: #5E5E5E;">(</span>env<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click <code>Build Solution</code>. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-build-solution</figcaption><p></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-folder-in-explorer</figcaption><p></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder</figcaption><p></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder-x64-folder</figcaption><p></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">file-explorer-select-dll-files</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference with a YOLOX model using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a> and <a href="https://docs.microsoft.com/en-us/windows/ai/directml/dml">DirectML</a>. In part 2, we’ll build a project in <a href="https://unity.com/">Unity</a> that uses this DLL.</p>
<p><strong>Training Tutorial:</strong> <a href="../../icevision-openvino-unity-tutorial/part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-2/">Object Detection for Unity With ONNX Runtime and DirectML Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/onnx-directml-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>onnx</category>
  <category>directml</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/onnx-directml-unity-tutorial/part-1/index.html</guid>
  <pubDate>Thu, 18 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/onnx-directml-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 3</title>
  <link>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create New Project</li>
<li>Import Assets</li>
<li>Allow Unsafe Code</li>
<li>Create Processing Shader</li>
<li>Create Object Detector Script</li>
<li>Set up Unity Scene</li>
<li>Test in Editor</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform object detection using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. This post covers building a project in Unity that leverages this DLL.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes you already have <a href="https://unity3d.com/get-unity/download">Unity Hub</a> on your system. Check out <a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">this section</a> from a previous tutorial if this is not the case (<a href="../../fastai-to-unity-tutorial/part-2/#set-up-unity-hub">link</a>).</p>
</blockquote>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Open the Unity Hub and click New Project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project</figcaption><p></p>
</figure>
</div>
<p>Select the target editor version from the Editor Version dropdown menu. We’ll use Unity 2022 for this post, but the current LTS release should also work fine.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-select-unity-version</figcaption><p></p>
</figure>
</div>
<p>Select the <code>2D Core</code> template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-select-2D-template</figcaption><p></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-name-project</figcaption><p></p>
</figure>
</div>
<p>Finally, click <code>Create Project</code> in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-hub-new-project-click-create-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-click-create-project</figcaption><p></p>
</figure>
</div>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Once the project loads, we’ll store the <a href="../part-2/#gather-dependencies">DLL files</a> from part 2 in a new folder called <code>Plugins</code>. Right-click a space in the Assets section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-folder</figcaption><p></p>
</figure>
</div>
<p>The DLL targets 64-bit x86 architectures, so we need to place the DLL files in a subfolder named <code>x86_64</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1lNsaNuoF2DVcKRN3lpvi716XWfXGWiuN?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-plugins-folder</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Note:</strong> You can place the <code>Plugins</code> folder inside another folder if needed.</p>
</blockquote>
<p>Copy all the DLL files and the <code>plugins.xml</code> file into the <code>Assets/Plugins/x86_64</code> folder. We then need to close and reopen the project for Unity to load the plugin files.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-openvino-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-openvino-plugins-folder</figcaption><p></p>
</figure>
</div>
<p>Back in the Unity Editor, create a new folder called <code>Colormaps</code> to store the JSON file from <a href="../part-1/#generate-colormap">part 1</a>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1rs2eD9_3Tyg4ADLbF6CNqwRdnhpsiHgk?usp=sharing">Colormaps Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-colormaps-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-colormaps-folder</figcaption><p></p>
</figure>
</div>
<p>We place any test images into a new folder called <code>Images</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1jHp3nTw8bRhk9es-osSfCx-B9ga4pt1G?usp=sharing">Images Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-image-assets</figcaption><p></p>
</figure>
</div>
<p>Next, we’ll create a folder to store the OpenVINO IR models. We need to place the XML and BIN files for the IR models in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in project builds. Create a new folder named <code>StreamingAssets</code>. We’ll place files for each model in a separate folder and put those in a new subfolder called <code>OpenVINOModels</code> to keep things organized.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1cgcrHTdwrUhqsmYThaaB9zoO-6hBp-xM?usp=sharing">OpenVINOModels Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-openvino-models-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-openvino-models-folder</figcaption><p></p>
</figure>
</div>
<p>The plugins.xml file included with the DLL files contains locations for the DLL files needed for using different types of devices.</p>
<p><strong><code>plugins.xml</code> content:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb1-1">&lt;<span class="kw" style="color: #003B4F;">ie</span>&gt;</span>
<span id="cb1-2">    &lt;<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-3">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"AUTO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-4">            &lt;<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-5">                &lt;<span class="kw" style="color: #003B4F;">property</span><span class="ot" style="color: #003B4F;"> key=</span><span class="st" style="color: #20794D;">"MULTI_WORK_MODE_AS_AUTO"</span><span class="ot" style="color: #003B4F;"> value=</span><span class="st" style="color: #20794D;">"YES"</span>/&gt;</span>
<span id="cb1-6">            &lt;/<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-7">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-8">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"BATCH"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_batch_plugin.dll"</span>&gt;</span>
<span id="cb1-9">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-10">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"CPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_cpu_plugin.dll"</span>&gt;</span>
<span id="cb1-11">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-12">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GNA"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gna_plugin.dll"</span>&gt;</span>
<span id="cb1-13">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-14">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gpu_plugin.dll"</span>&gt;</span>
<span id="cb1-15">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-16">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HETERO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_hetero_plugin.dll"</span>&gt;</span>
<span id="cb1-17">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-18">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MULTI"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-19">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-20">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MYRIAD"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_myriad_plugin.dll"</span>&gt;</span>
<span id="cb1-21">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-22">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HDDL"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_hddl_plugin.dll"</span>&gt;</span>
<span id="cb1-23">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-24">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"VPUX"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_vpux_plugin.dll"</span>&gt;</span>
<span id="cb1-25">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-26">    &lt;/<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-27">&lt;/<span class="kw" style="color: #003B4F;">ie</span>&gt;</span></code></pre></div>
<p>It needs to be in the same folder as the DLL files for the plugin to work. However, Unity does not include XML files in the Plugins folder when building the project. We need to store a copy of the plugins.xml file in the <code>StreamingAssets</code> folder and then copy it back to the <code>Plugins/x86_64</code> folder when first running the built project. We can handle both steps automatically in code.</p>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the OpenVINO plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-open-project-settings</figcaption><p></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-allow-unsafe-code</figcaption><p></p>
</figure>
</div>
<p>Now we can start coding.</p>
</section>
<section id="create-processing-shader" class="level2">
<h2 class="anchored" data-anchor-id="create-processing-shader">Create Processing Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in a <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute Shader</a>. We’ll add the Compute Shader in a new folder called <code>Shaders</code>. Right-click a space in the <code>Shaders</code> folder and select <code>Create → Shader → Compute Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-compute-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-compute-shader</figcaption><p></p>
</figure>
</div>
<p>Name the Compute Shader <code>ProcessingShader</code> and open it in the code editor.</p>
<p><strong>Default Compute Shader Code</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb2-2">#pragma kernel CSMain</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// Create a RenderTexture with enableRandomWrite flag and set it</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// with cs.SetTexture</span></span>
<span id="cb2-6">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">CSMain</span> <span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-10"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;">// </span><span class="al" style="color: #AD0000;">TODO</span><span class="co" style="color: #5E5E5E;">: insert actual code here!</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need to add a new <code>Texture2D</code> variable to store the pixel data for the input image. We’ll remove the default method and create a new one called <code>FlipXAxis</code>. Replace the default method name in the <code>#pragma kernel</code> line at the top.</p>
<p>We need the input image height for the flip operation, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb3-2">#pragma kernel FlipXAxis</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb3-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb3-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb3-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb3-14">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb3-16">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb3-18">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-19"></span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb3-21">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-22">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-object-detector-script" class="level2">
<h2 class="anchored" data-anchor-id="create-object-detector-script">Create Object Detector Script</h2>
<p>We’ll store the C# script that interacts with the OpenVINO plugin in a new <code>Scripts</code> folder. Right-click a space inside it and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-c-sharp-script</figcaption><p></p>
</figure>
</div>
<p>Name the script <code>ObjectDetector</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-object-detector-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-object-detector-script</figcaption><p></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ObjectDetector <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb4-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb4-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb4-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-10">        </span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb4-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-16">        </span>
<span id="cb4-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-6.0">System.Runtime.InteropServices</a>: Provides a wide variety of members that support COM interop and platform invoke services.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.io?view=net-6.0">System.IO</a>: Allows reading and writing to files and data streams.</li>
</ul>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Add code to copy <code>plugins.xml</code> file to <code>StreamingAssets</code> folder</strong></p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html"><code>InitializeOnLoad</code></a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html"><code>UnityEditor</code></a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives. We’ll place this code right below the namespaces.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb6-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-9">        <span class="co" style="color: #5E5E5E;">// Get all files named "plugins.xml"</span></span>
<span id="cb6-10">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> files <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"./Assets/"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"plugins.xml"</span><span class="op" style="color: #5E5E5E;">,</span> SearchOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AllDirectories</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-11">        <span class="co" style="color: #5E5E5E;">// Iterate through each found file</span></span>
<span id="cb6-12">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> files<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb6-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-14">            <span class="co" style="color: #5E5E5E;">// Check if the file is in the "x86_64" folder</span></span>
<span id="cb6-15">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"x86_64"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb6-16">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-17">                <span class="co" style="color: #5E5E5E;">// Define file path for StreamingAssets folder</span></span>
<span id="cb6-18">                <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19">                <span class="co" style="color: #5E5E5E;">// Print the source file path</span></span>
<span id="cb6-20">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-21">                <span class="co" style="color: #5E5E5E;">// Only copy the file to the StreamingAssets folder if it is not already present</span></span>
<span id="cb6-22">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-26"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-27"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. We are in the Editor, so it returns true, and the code executes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_in_editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity_scripting_symbol_in_editor</figcaption><p></p>
</figure>
</div>
<p>If we check if we are not in the Unity Editor, it returns false, and the code block does not execute.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_not_in_editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity_scripting_symbol_not_in_editor</figcaption><p></p>
</figure>
</div>
<p>We can verify the code works by saving the script and going to the <code>StreamingAssets</code> folder in the Editor. The plugins.xml file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-verify-initializeonload</figcaption><p></p>
</figure>
</div>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input. We may or may not want to mirror the screen based on whether a webcam is facing the user.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Mirror the in-game screen."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>Next, we’ll define the variables for processing model input. We can set the default target input resolution to <code>224</code> and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<p>We’ll also add a public <code>ComputeShader</code> variable to access the <code>ProcessingShader</code> we made earlier.</p>
<p>We need to download the pixel data for the input image from the GPU to the CPU before passing it to the plugin. This step can cause a significant performance bottleneck, so we’ll add the option to read the model output asynchronously at the cost of a few frames of latency. This latency might cause the bounding box to trail slightly behind a fast-moving object on the screen. The effect should be minimal, provided the frame rate is high enough.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the colormaps for object classes"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Minimum confidence score for keeping detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span>1f<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> minConfidence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5f</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices, models, and compute devices.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayBoundingBoxes <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display number of detected objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayProposalCount <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-9"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-12"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-15"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-17"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-23"><span class="kw" style="color: #003B4F;">public</span> Dropdown deviceDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"OpenVINO"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the openvino models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> openvinoModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINOModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<p>When using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb15-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb15-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variable for tracking the current number of detected objects</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// Stores the number of detected objects</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for storing colormaps</strong></p>
<p>We need to create a couple of classes to parse the JSON content.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">// A class for parsing in colormaps from a JSON file</span></span>
<span id="cb17-2"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">class</span> ColorMap <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> label<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> color<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">// A class for reading in a list of colormaps from a JSON file</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;">[</span>System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Serializable</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;">class</span> ColorMapList <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> List<span class="op" style="color: #5E5E5E;">&lt;</span>ColorMap<span class="op" style="color: #5E5E5E;">&gt;</span> items<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;">// Stores a list of colormaps from a JSON file</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;">private</span> ColorMapList colormapList<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;">// A list of colors that map to class labels</span></span>
<span id="cb17-10"><span class="kw" style="color: #003B4F;">private</span> Color<span class="op" style="color: #5E5E5E;">[]</span> colors<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;">// A list of single pixel textures that map to class labels</span></span>
<span id="cb17-12"><span class="kw" style="color: #003B4F;">private</span> Texture2D<span class="op" style="color: #5E5E5E;">[]</span> colorTextures<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>We’ll define some variables to track the frame rate.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">// File paths for the available OpenVINO models</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO models</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO devices</span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> openvinoDevices <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span></code></pre></div>
<p><strong>Define a struct for reading object information from the OpenVINO plugin</strong></p>
<p>We need to create an <code>Object</code> struct for Unity to match the one we defined for the OpenVINO code, along with an array of <code>Object</code> structs that we’ll update with the <code>PopulateObjectsArray()</code> function.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// Indicate that the members of the struct are laid out sequentially</span></span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">StructLayout</span><span class="op" style="color: #5E5E5E;">(</span>LayoutKind<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Sequential</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;">/// Stores the information for a single object</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span><span class="co" style="color: #5E5E5E;"> </span></span>
<span id="cb20-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;">// The X coordinate for the top left bounding box corner</span></span>
<span id="cb20-9">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-10">    <span class="co" style="color: #5E5E5E;">// The Y coordinate for the top left bounding box cornder</span></span>
<span id="cb20-11">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-12">    <span class="co" style="color: #5E5E5E;">// The width of the bounding box</span></span>
<span id="cb20-13">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-14">    <span class="co" style="color: #5E5E5E;">// The height of the bounding box</span></span>
<span id="cb20-15">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-16">    <span class="co" style="color: #5E5E5E;">// The object class index for the detected object</span></span>
<span id="cb20-17">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-18">    <span class="co" style="color: #5E5E5E;">// The model confidence score for the object</span></span>
<span id="cb20-19">    <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-20"></span>
<span id="cb20-21">    <span class="kw" style="color: #003B4F;">public</span> <span class="fu" style="color: #4758AB;">Object</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-23">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-24">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-25">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-26">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-27">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">=</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-28">        <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">prob</span> <span class="op" style="color: #5E5E5E;">=</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-30"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-31"></span>
<span id="cb20-32"><span class="co" style="color: #5E5E5E;">// Stores information for the current list of detected objects</span></span>
<span id="cb20-33"><span class="kw" style="color: #003B4F;">private</span> Object<span class="op" style="color: #5E5E5E;">[]</span> objectInfoArray<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Import functions from the OpenVINO plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb21-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINO_YOLOX_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> IntPtr <span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-14"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-17"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-18"></span>
<span id="cb21-19"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-20"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr objects<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-21"></span>
<span id="cb21-22"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb21-23"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb22-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb22-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb22-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-9"></span>
<span id="cb22-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb22-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-12"></span>
<span id="cb22-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb22-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb22-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb22-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-19"></span>
<span id="cb22-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb23-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb23-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb23-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-10"></span>
<span id="cb23-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb23-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb23-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> mirrorScreen <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-15"></span>
<span id="cb23-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb23-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb23-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-20"></span>
<span id="cb23-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb23-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the available OpenVINO models</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available OpenVION models</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb24-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb24-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for each model folder</span></span>
<span id="cb24-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> dir <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDirectories</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{openvinoModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb24-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-9">        <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> dir<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb24-10"></span>
<span id="cb24-11">        modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Substring</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-12"></span>
<span id="cb24-13">        <span class="co" style="color: #5E5E5E;">// Get the paths for the XML file for each model</span></span>
<span id="cb24-14">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>dir<span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb24-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-16">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".xml"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb24-17">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-18">                modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-19">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-22"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the names of available OpenVINO devices</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;">/// Get the names of the available OpenVINO devices</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb25-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;">// Get the number of available OpenVINO devices</span></span>
<span id="cb25-7">    <span class="dt" style="color: #AD0000;">int</span> deviceCount <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> deviceCount<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb25-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-11">        openvinoDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>Marshal<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PtrToStringAnsi</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">)));</span></span>
<span id="cb25-12">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb26-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb26-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb26-8">    <span class="kw" style="color: #003B4F;">foreach</span><span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb26-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb26-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb26-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb26-16"></span>
<span id="cb26-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb26-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-19">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO model names to menu</span></span>
<span id="cb26-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb26-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-23"></span>
<span id="cb26-24">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb26-25">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-26">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO device names to menu</span></span>
<span id="cb26-27">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>openvinoDevices<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-28">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb26-29">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb27-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb27-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb27-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb27-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb27-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the selected OpenVINO model</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;">/// Update the selected OpenVINO model</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb28-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;">// Reset objectInfoArray</span></span>
<span id="cb28-7">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb28-8"></span>
<span id="cb28-9">    <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-10">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb28-11">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span></span>
<span id="cb28-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb28-13"></span>
<span id="cb28-14">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Device: {openvinoDevices[deviceDropdown.value]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-15"></span>
<span id="cb28-16">    <span class="co" style="color: #5E5E5E;">// Load the specified OpenVINO model</span></span>
<span id="cb28-17">    <span class="dt" style="color: #AD0000;">int</span> return_msg <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-18"></span>
<span id="cb28-19">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-20"></span>
<span id="cb28-21">    <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> return_messages <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-22">        <span class="st" style="color: #20794D;">"Model loaded and reshaped successfully"</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb28-23">        <span class="st" style="color: #20794D;">"Failed to load model"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb28-24">        <span class="st" style="color: #20794D;">"Failed to reshape model input"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb28-25">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb28-26"></span>
<span id="cb28-27">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Updated input dims: {inputDims[0]} x {inputDims[1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-28">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Return message: {return_messages[return_msg]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb28-29"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-awake-method" class="level3">
<h3 class="anchored" data-anchor-id="define-awake-method">Define Awake Method</h3>
<p>We’ll implement the code to copy the plugins.xml file from the <code>StreamingAssets</code> folder to the <code>Plugins/x86_64</code> folder in the build folder in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method. The code should be inactive since we are in the Editor.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">// Awake is called when the script instance is being loaded</span></span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb29-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-4">    <span class="kw" style="color: #003B4F;">#if</span> <span class="op" style="color: #5E5E5E;">!</span>UNITY_EDITOR</span>
<span id="cb29-5">    <span class="co" style="color: #5E5E5E;">// Define the path for the plugins.xml file in the StreamingAssets folder</span></span>
<span id="cb29-6">    <span class="dt" style="color: #AD0000;">string</span> sourcePath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-7">    <span class="co" style="color: #5E5E5E;">// Define the destination path for the plugins.xml file</span></span>
<span id="cb29-8">    <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.dataPath}/Plugins/x86_64/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-9">    <span class="co" style="color: #5E5E5E;">// Only copy the file if it is not already present at the destination</span></span>
<span id="cb29-10">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>sourcePath<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-11">    <span class="kw" style="color: #003B4F;">#endif</span></span>
<span id="cb29-12"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start Method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb30-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb30-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb30-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb30-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-8"></span>
<span id="cb30-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb30-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb30-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-16"></span>
<span id="cb30-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb30-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb30-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-21"></span>
<span id="cb30-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of color maps from JSON file</span></span>
<span id="cb30-23">    colormapList <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ColorMapList<span class="op" style="color: #5E5E5E;">&gt;(</span>colormapFile<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-24">    <span class="co" style="color: #5E5E5E;">// Initialize the list of colors</span></span>
<span id="cb30-25">    colors <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Color<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb30-26">    <span class="co" style="color: #5E5E5E;">// Initialize the list of color textures</span></span>
<span id="cb30-27">    colorTextures <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Texture2D<span class="op" style="color: #5E5E5E;">[</span>colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Count</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb30-28"></span>
<span id="cb30-29">    <span class="co" style="color: #5E5E5E;">// Populate the color and color texture arrays</span></span>
<span id="cb30-30">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb30-31">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-32">        <span class="co" style="color: #5E5E5E;">// Create a new color object</span></span>
<span id="cb30-33">        colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Color</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb30-34">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb30-35">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span></span>
<span id="cb30-36">            colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">color</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb30-37">        <span class="co" style="color: #5E5E5E;">// Create a single-pixel texture</span></span>
<span id="cb30-38">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-39">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">SetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> colors<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb30-40">        colorTextures<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-41"></span>
<span id="cb30-42">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-43"></span>
<span id="cb30-44">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available OpenVINO models</span></span>
<span id="cb30-45">    <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-46">    <span class="co" style="color: #5E5E5E;">// Get the names of available OpenVINO devices</span></span>
<span id="cb30-47">    <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-48"></span>
<span id="cb30-49">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb30-50">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb30-51"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define methods to process images using the Compute Shader, calculate the input resolution, handle asynchronous GPU readback, and scale the bounding box information.</p>
<p><strong>Define method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb31-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb31-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb31-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb31-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb31-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb31-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb31-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-20"></span>
<span id="cb31-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb31-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb31-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-25"></span>
<span id="cb31-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb31-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-28"></span>
<span id="cb31-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb31-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-31"></span>
<span id="cb31-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb31-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb32-8"><span class="kw" style="color: #003B4F;">private</span> Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-10">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb32-11"></span>
<span id="cb32-12">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb32-13">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-15">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb32-16">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-18">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb32-19">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-20">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-21">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb32-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb32-23"></span>
<span id="cb32-24">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-25"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb33-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-12"></span>
<span id="cb33-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb33-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb33-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb33-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb33-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb33-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb33-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb34-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb34-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-8">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb34-9">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb34-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-11">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the number of detected objects</span></span>
<span id="cb34-12">        numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-14"></span>
<span id="cb34-15">    <span class="co" style="color: #5E5E5E;">// Initialize the array</span></span>
<span id="cb34-16">    objectInfoArray <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> Object<span class="op" style="color: #5E5E5E;">[</span>numObjects<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb34-17"></span>
<span id="cb34-18">    <span class="co" style="color: #5E5E5E;">// Pin memory</span></span>
<span id="cb34-19">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> o <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb34-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-21">        <span class="co" style="color: #5E5E5E;">// Get the detected objects</span></span>
<span id="cb34-22">        <span class="fu" style="color: #4758AB;">PopulateObjectsArray</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>o<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-24"></span>
<span id="cb34-25">    <span class="kw" style="color: #003B4F;">return</span> numObjects<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-26"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to scale bounding boxes to the display resolution</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;">/// Scale the latest bounding boxes to the display resolution</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb35-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb35-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-6">    <span class="co" style="color: #5E5E5E;">// Process new detected objects</span></span>
<span id="cb35-7">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> objectInfoArray<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb35-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-9">        <span class="co" style="color: #5E5E5E;">// The smallest dimension of the screen</span></span>
<span id="cb35-10">        <span class="dt" style="color: #AD0000;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-11">        <span class="co" style="color: #5E5E5E;">// The smallest input dimension</span></span>
<span id="cb35-12">        <span class="dt" style="color: #AD0000;">int</span> minInputDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Min</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-13">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb35-14">        <span class="dt" style="color: #AD0000;">float</span> minImgScale <span class="op" style="color: #5E5E5E;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;">/</span> minInputDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-15">        <span class="co" style="color: #5E5E5E;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb35-16">        <span class="dt" style="color: #AD0000;">float</span> displayScale <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-17"></span>
<span id="cb35-18">        <span class="co" style="color: #5E5E5E;">// Scale bounding box to in-game screen resolution and flip the bbox coordinates vertically</span></span>
<span id="cb35-19">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-20">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-21">        <span class="dt" style="color: #AD0000;">float</span> width <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-22">        <span class="dt" style="color: #AD0000;">float</span> height <span class="op" style="color: #5E5E5E;">=</span> objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">*</span> minImgScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-23"></span>
<span id="cb35-24">        <span class="co" style="color: #5E5E5E;">// Mirror bounding box across screen</span></span>
<span id="cb35-25">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mirrorScreen <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span> x0 <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">-</span> x0 <span class="op" style="color: #5E5E5E;">-</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">        <span class="co" style="color: #5E5E5E;">// Scale bounding boxes to display resolution</span></span>
<span id="cb35-28">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">=</span> x0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-29">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">=</span> y0 <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-30">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-31">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-32"></span>
<span id="cb35-33">        <span class="co" style="color: #5E5E5E;">// Offset the bounding box coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb35-34">        objectInfoArray<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x0</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">-</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">*</span> displayScale<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-35">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb36-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb36-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-9"></span>
<span id="cb36-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb36-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-12"></span>
<span id="cb36-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb36-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb36-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb36-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb36-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-26"></span>
<span id="cb36-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb36-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb36-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-32"></span>
<span id="cb36-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb36-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-36"></span>
<span id="cb36-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb36-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-39"></span>
<span id="cb36-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-43">        <span class="co" style="color: #5E5E5E;">// Update the selected OpenVINO model</span></span>
<span id="cb36-44">        <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-46"></span>
<span id="cb36-47">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb36-48">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-49"></span>
<span id="cb36-50">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb36-51">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-52"></span>
<span id="cb36-53">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb36-54">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb36-55">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-56">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-58">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb36-59">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb36-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb36-61">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-62">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-63">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb36-64"></span>
<span id="cb36-65">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb36-66">    numObjects <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-67">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Detected {numObjects} objects"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-68">    <span class="co" style="color: #5E5E5E;">// Scale bounding boxes</span></span>
<span id="cb36-69">    <span class="fu" style="color: #4758AB;">ScaleBoundingBoxes</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb36-70"></span>
<span id="cb36-71">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb36-72">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb36-73"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the bounding boxes and current framerate.</p>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb37-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb37-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb37-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb37-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb38-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb38-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb38-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb38-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-10"></span>
<span id="cb38-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb38-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb38-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb38-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb38-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update the minimum confidence value</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;">/// Update the minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"slider"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb39-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>Slider slider<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb39-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb39-7">    minConfidence <span class="op" style="color: #5E5E5E;">=</span> slider<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb39-8">    <span class="fu" style="color: #4758AB;">SetConfidenceThreshold</span><span class="op" style="color: #5E5E5E;">(</span>minConfidence<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb39-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted bounding boxes and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">// OnGUI is called for rendering and handling GUI events.</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb40-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-4">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for label text</span></span>
<span id="cb40-5">    Rect labelRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-6">    <span class="co" style="color: #5E5E5E;">// Initialize a rectangle for bounding boxes</span></span>
<span id="cb40-7">    Rect boxRect <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-8"></span>
<span id="cb40-9">    GUIStyle labelStyle <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-11">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">11e-3</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-12">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-13">    labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">alignment</span> <span class="op" style="color: #5E5E5E;">=</span> TextAnchor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">MiddleLeft</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-14"></span>
<span id="cb40-15">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>Object objectInfo <span class="kw" style="color: #003B4F;">in</span> objectInfoArray<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-16">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-17">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>displayBoundingBoxes<span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-18"></span>
<span id="cb40-19">        <span class="co" style="color: #5E5E5E;">// Skip object if label index is out of bounds</span></span>
<span id="cb40-20">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span> <span class="op" style="color: #5E5E5E;">&gt;</span> colors<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-21"></span>
<span id="cb40-22">        <span class="co" style="color: #5E5E5E;">// Get color for current class index</span></span>
<span id="cb40-23">        Color color <span class="op" style="color: #5E5E5E;">=</span> colors<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-24">        <span class="co" style="color: #5E5E5E;">// Get label for current class index</span></span>
<span id="cb40-25">        <span class="dt" style="color: #AD0000;">string</span> name <span class="op" style="color: #5E5E5E;">=</span> colormapList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">items</span><span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-26"></span>
<span id="cb40-27">        <span class="co" style="color: #5E5E5E;">// Set bounding box coordinates</span></span>
<span id="cb40-28">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-29">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-30">        <span class="co" style="color: #5E5E5E;">// Set bounding box dimensions</span></span>
<span id="cb40-31">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-32">        boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-33"></span>
<span id="cb40-34">        <span class="co" style="color: #5E5E5E;">// Scale bounding box line width based on display resolution</span></span>
<span id="cb40-35">        <span class="dt" style="color: #AD0000;">int</span> lineWidth <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.75e-3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-36">        <span class="co" style="color: #5E5E5E;">// Render bounding box</span></span>
<span id="cb40-37">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-38">            position<span class="op" style="color: #5E5E5E;">:</span> boxRect<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-39">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-40">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-41">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-42">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-43">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-44">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> lineWidth<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-45">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-46"></span>
<span id="cb40-47">        <span class="co" style="color: #5E5E5E;">// Include class label and confidence score in label text</span></span>
<span id="cb40-48">        <span class="dt" style="color: #AD0000;">string</span> labelText <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">" {name}: {(objectInfo.prob * 100).ToString("</span><span class="fl" style="color: #AD0000;">0.</span>##<span class="st" style="color: #20794D;">")}%"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-49"></span>
<span id="cb40-50">        <span class="co" style="color: #5E5E5E;">// Initialize label GUI content</span></span>
<span id="cb40-51">        GUIContent labelContent <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>labelText<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-52"></span>
<span id="cb40-53">        <span class="co" style="color: #5E5E5E;">// Calculate the text size.</span></span>
<span id="cb40-54">        Vector2 textSize <span class="op" style="color: #5E5E5E;">=</span> labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CalcSize</span><span class="op" style="color: #5E5E5E;">(</span>labelContent<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-55"></span>
<span id="cb40-56">        <span class="co" style="color: #5E5E5E;">// Set label text coordinates</span></span>
<span id="cb40-57">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-58">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">-</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y0</span> <span class="op" style="color: #5E5E5E;">-</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> lineWidth<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-59"></span>
<span id="cb40-60">        <span class="co" style="color: #5E5E5E;">// Set label text dimensions</span></span>
<span id="cb40-61">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-62">        labelRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> textSize<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-63">        <span class="co" style="color: #5E5E5E;">// Set label text and backgound color</span></span>
<span id="cb40-64">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">grayscale</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">?</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">black</span> <span class="op" style="color: #5E5E5E;">:</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">white</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-65">        labelStyle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span> <span class="op" style="color: #5E5E5E;">=</span> colorTextures<span class="op" style="color: #5E5E5E;">[</span>objectInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">label</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb40-66">        <span class="co" style="color: #5E5E5E;">// Render label</span></span>
<span id="cb40-67">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>labelRect<span class="op" style="color: #5E5E5E;">,</span> labelContent<span class="op" style="color: #5E5E5E;">,</span> labelStyle<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-68"></span>
<span id="cb40-69">        Rect objectDot <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb40-70">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-71">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">=</span> lineWidth <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-72">        <span class="dt" style="color: #AD0000;">float</span> radius <span class="op" style="color: #5E5E5E;">=</span> objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-73">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-74">        objectDot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">+</span> boxRect<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> radius<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-75"></span>
<span id="cb40-76"></span>
<span id="cb40-77">        GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">DrawTexture</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb40-78">            position<span class="op" style="color: #5E5E5E;">:</span> objectDot<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-79">            image<span class="op" style="color: #5E5E5E;">:</span> Texture2D<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">whiteTexture</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-80">            scaleMode<span class="op" style="color: #5E5E5E;">:</span> ScaleMode<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">StretchToFill</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-81">            alphaBlend<span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-82">            imageAspect<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-83">            color<span class="op" style="color: #5E5E5E;">:</span> color<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-84">            borderWidth<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb40-85">            borderRadius<span class="op" style="color: #5E5E5E;">:</span> radius<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-86"></span>
<span id="cb40-87">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-88"></span>
<span id="cb40-89">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb40-90">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb40-91">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-92">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb40-93">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb40-94">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-95"></span>
<span id="cb40-96">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb40-97">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-98">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-99"></span>
<span id="cb40-100">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Objects Detected: {numObjects}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-101">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayProposalCount<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-102"></span>
<span id="cb40-103">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb40-104">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb40-105">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb40-106">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-107">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-108">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb40-109"></span>
<span id="cb40-110">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb40-111">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayProposalCount <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb40-112">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb40-113"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-ondisable-method" class="level3">
<h3 class="anchored" data-anchor-id="define-ondisable-method">Define OnDisable Method</h3>
<p>We’ll perform any clean-up steps in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDisable.html">OnDisable</a>method.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb41-1"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnDisable</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb41-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb41-3">    <span class="fu" style="color: #4758AB;">FreeResources</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb41-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>Now we can start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the object detector script, dropdown menus for selecting webcams, models, and compute devices, a toggle to activate a webcam feed, and a slider to update the confidence threshold.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>3D Object → Quad</code>. We can name the new object Screen.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-quad.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-quad</figcaption><p></p>
</figure>
</div>
<p>Next, drag and drop a test image from the <code>Assets → Images</code> folder onto the Screen object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-attach-image-to-screen</figcaption><p></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the <code>Shader</code> dropdown menu in the Inspector tab. Type <code>Unlit/Texture</code> into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-screen-material-shader</figcaption><p></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select <code>Create Empty</code>. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-empty-gameobject</figcaption><p></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ObjectDetector</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-attach-object-detector-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-attach-object-detector-script</figcaption><p></p>
</figure>
</div>
<p>Now we can assign the screen object, compute shader, and colormap file in the Inspector tab by dragging them into their respective fields.</p>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI controls. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/file/d/1RbL7qaIQNzWCI4z-WUArHgDFY8pUZtoE/view?usp=sharing">Canvas Prefab</a></li>
</ul>
<p>Drag and drop the Canvas prefab into a new folder called Prefabs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-import-canvas-prefab.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-canvas-prefab</figcaption><p></p>
</figure>
</div>
<p>From there, drag the prefab into the Hierarchy tab. We can see the GUI by switching to the Game view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-canvas-to-hierarchy-tab</figcaption><p></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ObjectDetector</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-select-webcamtoggle</figcaption><p></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamtoggle-assign-inference-manager</figcaption><p></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ObjectDetector → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamtoggle-assign-inference-manager-function</figcaption><p></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamdropdown-assign-inference-manager</figcaption><p></p>
</figure>
</div>
<p>This time select <code>ObjectDetector → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamdropdown-assign-inference-manager-function</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>OpenVINOModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-openvino-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvino-model-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>OpenVINODeviceDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-openvino-device-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvino-device-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Configure <code>ConfidenceThresholdSlider</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-update-confidence-threshold-slider-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-confidence-threshold-slider-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the GUI objects to their respective fields for the <code>ObjectDetector</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-inference-manager-assign-gui-objects</figcaption><p></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-eventsystem</figcaption><p></p>
</figure>
</div>
</section>
<section id="test-in-editor" class="level2">
<h2 class="anchored" data-anchor-id="test-in-editor">Test in Editor</h2>
<p>Click the play button in the top-middle of the Editor window to test the project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-click-play-button.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-click-play-button</figcaption><p></p>
</figure>
</div>
<p>There should be a bounding box for the call sign and one for the idle hand.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/images/unity-test-in-editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-test-in-editor</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this tutorial series, we covered how to train a YOLOX model with the IceVision library, created a DLL to perform inference with the model using OpenVINO, and built a simple Unity project that leveraged this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-2/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>openvino</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-3/index.html</guid>
  <pubDate>Wed, 10 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-openvino-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 2</title>
  <link>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Install OpenVINO</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered finetuning an object detection model using the IceVision library and exporting it as an OpenVINO IR model. This post covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with this model using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> This post assumes <a href="https://visualstudio.microsoft.com/downloads/">Visual Studio</a> is present on your system.</p>
</blockquote>
</section>
<section id="install-openvino" class="level2">
<h2 class="anchored" data-anchor-id="install-openvino">Install OpenVINO</h2>
<p>We need to download the OpenVINO Toolkit before creating our Visual Studio project. Go to the OpenVINO download page linked below.</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">OpenVINO Download page</a></li>
</ul>
<p><strong>Download OpenVINO Toolkit</strong></p>
<p>Select the options outlined in the image below and click the Download button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_download_page.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_download_page</figcaption><p></p>
</figure>
</div>
<p>Double-click the file once it finishes downloading and click the Extract button in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_extract_files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_extract_files</figcaption><p></p>
</figure>
</div>
<p>The installer will then verify the computer meets the system requirements. The toolkit includes the Python scripts for converting models, which require Python 3.6, 3.7, 3.8, or 3.9 to run. We will only use the files for C++ development in this post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_check_system_requirements.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_check_system_requirements</figcaption><p></p>
</figure>
</div>
<p>We can stick with the default <code>Recommended Installation</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_recommended_installation.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_recommended_installation</figcaption><p></p>
</figure>
</div>
<p>The installer will then ask whether Intel can collect some information before starting the installation process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_software_improvement_program.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_software_improvement_program</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_installation_in_progress.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_installation_in_progress</figcaption><p></p>
</figure>
</div>
<p>Click Finish once the installation process completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_installer_finish.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_finish</figcaption><p></p>
</figure>
</div>
<p><strong>Inspect OpenVINO Folder</strong></p>
<p>If we look at the installation folder for the toolkit, we can see it also includes a version of OpenCV. We’ll use OpenCV to prepare image data from Unity before feeding it to the model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_install_folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_install_folder</figcaption><p></p>
</figure>
</div>
<p>I like to copy the OpenVINO folder to a separate directory with other dependencies for my C++ projects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/openvino_move_folder_to_dependencies_directory.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_move_folder_to_dependencies_directory</figcaption><p></p>
</figure>
</div>
<p>Now we can create our Visual Studio DLL project.</p>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-create-new-project</figcaption><p></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-new-dll-project</figcaption><p></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-choose-project-name-and-location</figcaption><p></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-release</figcaption><p></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-64-bit</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where OpenVINO and OpenCV are so we can access their APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-solution-explorer-select-project-name</figcaption><p></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-properties</figcaption><p></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-additional-include-directories</figcaption><p></p>
</figure>
</div>
<p>Add the paths for the following folders, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include\ie</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-add-additional-include-directories</figcaption><p></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-additional-dependencies</figcaption><p></p>
</figure>
</div>
<p>Add the paths to the following files, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\lib\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\lib\intel64\Release\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\lib\*.lib</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-add-additional-dependencies</figcaption><p></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL files included with the OpenVINO and OpenCV libraries.</p>
<p><strong>OpenCV DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/get-opencv-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-opencv-dll-files</figcaption><p></p>
</figure>
</div>
<p><strong>OpenVINO DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/get-openvino-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-openvino-dll-files</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/get-openvino-tbb-dll-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-openvino-tbb-dll-file</figcaption><p></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-edit-command-line-events</figcaption><p></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_core453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgproc453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgcodecs453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\bin\intel64\Release\* $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\bin\tbb.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-add-xcopy-commands</figcaption><p></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-properties-apply-changes</figcaption><p></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We’ll first update the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> with the required header files. We can open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-pch-header-file</figcaption><p></p>
</figure>
</div>
<p>Comment or remove the <code>#include</code> line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for OpenVINO and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"openvino/openvino.hpp"</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;">**</span>Wrap the code in <span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> to prevent name<span class="op" style="color: #5E5E5E;">-</span>mangling issues with the compiler<span class="op" style="color: #5E5E5E;">**</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">The rest of our code will go inside here<span class="op" style="color: #5E5E5E;">.</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="er" style="color: #AD0000;">```</span>c<span class="op" style="color: #5E5E5E;">++</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb4-17"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html">ov::Core</a>: represents an OpenVINO runtime Core entity</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Model.html#doxid-classov-1-1-model">ov::Model</a>: A user-defined model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html">ov::CompiledModel</a>: represents a compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request">ov::InferRequest</a>: an infer request that can be run in asynchronous or synchronous manners</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Tensor.html">ov::Tensor</a>: API holding host memory</li>
</ul>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Inference engine instance</span></span>
<span id="cb5-2">ov<span class="op" style="color: #5E5E5E;">::</span>Core core<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">// The user define model representation</span></span>
<span id="cb5-4"><span class="bu" style="color: null;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;">&lt;</span>ov<span class="op" style="color: #5E5E5E;">::</span>Model<span class="op" style="color: #5E5E5E;">&gt;</span> model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">// A device-specific compiled model</span></span>
<span id="cb5-6">ov<span class="op" style="color: #5E5E5E;">::</span>CompiledModel compiled_model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">// List of available compute devices</span></span>
<span id="cb5-9"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> available_devices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;">// An inference request for a compiled model</span></span>
<span id="cb5-11">ov<span class="op" style="color: #5E5E5E;">::</span>InferRequest infer_request<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">// Stores the model input data</span></span>
<span id="cb5-13">ov<span class="op" style="color: #5E5E5E;">::</span>Tensor input_tensor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;">// A pointer for accessing the input tensor data</span></span>
<span id="cb5-15"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> input_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;">// model has only one output</span></span>
<span id="cb5-18">ov<span class="op" style="color: #5E5E5E;">::</span>Tensor output_tensor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;">// A pointer for accessing the output tensor data</span></span>
<span id="cb5-20"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;">// The current source image width</span></span>
<span id="cb5-23"><span class="dt" style="color: #AD0000;">int</span> img_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;">// The current source image height</span></span>
<span id="cb5-25"><span class="dt" style="color: #AD0000;">int</span> img_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;">// The current model input width</span></span>
<span id="cb5-27"><span class="dt" style="color: #AD0000;">int</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;">// The current model input height</span></span>
<span id="cb5-29"><span class="dt" style="color: #AD0000;">int</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;">// The total number pixels in the input image</span></span>
<span id="cb5-31"><span class="dt" style="color: #AD0000;">int</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-32"><span class="co" style="color: #5E5E5E;">// The number of color channels </span></span>
<span id="cb5-33"><span class="dt" style="color: #AD0000;">int</span> n_channels <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="co" style="color: #5E5E5E;">// Stores information about a single object prediction</span></span>
<span id="cb5-36"><span class="kw" style="color: #003B4F;">struct</span> Object</span>
<span id="cb5-37"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-38">    <span class="dt" style="color: #AD0000;">float</span> x0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-39">    <span class="dt" style="color: #AD0000;">float</span> y0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-40">    <span class="dt" style="color: #AD0000;">float</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-41">    <span class="dt" style="color: #AD0000;">float</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-42">    <span class="dt" style="color: #AD0000;">int</span> label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-43">    <span class="dt" style="color: #AD0000;">float</span> prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-44"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb5-45"></span>
<span id="cb5-46"><span class="co" style="color: #5E5E5E;">// Store grid offset and stride values to decode a section of the model output</span></span>
<span id="cb5-47"><span class="kw" style="color: #003B4F;">struct</span> GridAndStride</span>
<span id="cb5-48"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-49">    <span class="dt" style="color: #AD0000;">int</span> grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-50">    <span class="dt" style="color: #AD0000;">int</span> grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-51">    <span class="dt" style="color: #AD0000;">int</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-52"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb5-53"></span>
<span id="cb5-54"><span class="co" style="color: #5E5E5E;">// The scale values used to adjust the model output to the source image resolution</span></span>
<span id="cb5-55"><span class="dt" style="color: #AD0000;">float</span> scale_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-56"><span class="dt" style="color: #AD0000;">float</span> scale_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-57"></span>
<span id="cb5-58"><span class="co" style="color: #5E5E5E;">// The minimum confidence score to consider an object proposal</span></span>
<span id="cb5-59"><span class="dt" style="color: #AD0000;">float</span> bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.3</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-60"><span class="co" style="color: #5E5E5E;">// The maximum intersection over union value before an object proposal will be ignored</span></span>
<span id="cb5-61"><span class="dt" style="color: #AD0000;">float</span> nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-62"></span>
<span id="cb5-63"><span class="co" style="color: #5E5E5E;">// Stores the grid and stride values to navigate the raw model output</span></span>
<span id="cb5-64"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>GridAndStride<span class="op" style="color: #5E5E5E;">&gt;</span> grid_strides<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-65"><span class="co" style="color: #5E5E5E;">// Stores the object proposals with confidence scores above bbox_conf_thresh</span></span>
<span id="cb5-66"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>Object<span class="op" style="color: #5E5E5E;">&gt;</span> proposals<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-67"><span class="co" style="color: #5E5E5E;">// Stores the indices for the object proposals selected using non-maximum suppression</span></span>
<span id="cb5-68"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-69"></span>
<span id="cb5-70"><span class="co" style="color: #5E5E5E;">// The stride values used to generate the gride_strides vector</span></span>
<span id="cb5-71"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> strides <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">32</span> <span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
<p><strong>Define a function to get the number of compute devices</strong></p>
<p>The first function we’ll define will create a list of available device names and return the number of devices accessible by OpenVINO. We’ll use this information to select which device to use to perform inference from the Unity application. There might be an option named GNA (Gaussian &amp; Neural Accelerator). GNA is a highly specialized neural coprocessor for tasks like noise cancellation. We’ll exclude it from the list of devices presented to the end user.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1aabd82bca4826ee53893f7b5fc9bce813">ov::Core::get_available_devices()</a>: Returns devices available for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;">/// Get the number of available compute devices</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The number of available devices</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb6-5">DLLExport <span class="dt" style="color: #AD0000;">int</span> GetDeviceCount<span class="op" style="color: #5E5E5E;">()</span> </span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;">// Reset list of available compute devices</span></span>
<span id="cb6-8">    available_devices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;">// Populate list of available compute devices</span></span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>device <span class="op" style="color: #5E5E5E;">:</span> core<span class="op" style="color: #5E5E5E;">.</span>get_available_devices<span class="op" style="color: #5E5E5E;">())</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-12">        <span class="co" style="color: #5E5E5E;">// Skip GNA device</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GNA"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-14">            available_devices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;">// Return the number of available compute devices</span></span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;">return</span> available_devices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb6-19"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the name of a compute device</strong></p>
<p>Next, we’ll define a function to return the name of a device at a specified index for the list of available devices.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">/// Get the name of the compute device name at the specified index</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The name of the device at the specified index</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb7-6">DLLExport <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">*</span> GetDeviceName<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">&amp;</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb7-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate stride values to navigate the raw model output</strong></p>
<p>The method for generating the offset values used to traverse the output array is almost identical to the Python implementation from <a href="../part-1/#define-post-processing-steps">part 1</a>.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">/// Generate offset values to navigate the raw model output</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"height"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input height</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"width"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The model input width</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb8-6"><span class="dt" style="color: #AD0000;">void</span> GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;">// Remove the values for the previous input resolution</span></span>
<span id="cb8-9">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;">// Iterate through each stride value</span></span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span> stride <span class="op" style="color: #5E5E5E;">:</span> strides<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb8-13">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-14">        <span class="co" style="color: #5E5E5E;">// Calculate the grid dimensions</span></span>
<span id="cb8-15">        <span class="dt" style="color: #AD0000;">int</span> grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-16">        <span class="dt" style="color: #AD0000;">int</span> grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">/</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">        <span class="co" style="color: #5E5E5E;">// Store each combination of grid coordinates</span></span>
<span id="cb8-19">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g1 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_height<span class="op" style="color: #5E5E5E;">;</span> g1<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb8-20">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-21">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> g0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> g0 <span class="op" style="color: #5E5E5E;">&lt;</span> grid_width<span class="op" style="color: #5E5E5E;">;</span> g0<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb8-22">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-23">                grid_strides<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>GridAndStride<span class="op" style="color: #5E5E5E;">{</span> g0<span class="op" style="color: #5E5E5E;">,</span> g1<span class="op" style="color: #5E5E5E;">,</span> stride <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb8-24">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-25">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-27"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to set the minimum confidence score from Unity</strong></p>
<p>We might want to try different confidence thresholds for keeping object proposals from the Unity application, so we’ll add a function to enable this.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">/// Set minimum confidence score for keeping bounding box proposals</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"min_confidence"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The minimum confidence score for keeping bounding box proposals</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> SetConfidenceThreshold<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> min_confidence<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-7">    bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> min_confidence<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to load an OpenVINO model</strong></p>
<p>OpenVINO needs to compile models for the target device. This process can take several seconds when using GPU inference. We can create a cache directory, so we only need to compile models for a specific resolution-device pair once.</p>
<p>We’ll place the code for loading an OpenVINO model inside a try-catch block to avoid crashing the application if we pass an incorrect file path.</p>
<p>If the model loads successfully, we’ll attempt to reshape the model input to the desired input dimensions. After reshaping the model input, we can compile the model for the target device.</p>
<p>We can get pointers to the model input tensor and create an inference request using the compiled model.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a14cba2136b972ee34478dd11633293a2">ov::Core::set_property()</a>: Sets properties for a device</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1ae0576a95f841c3a6f5e46e4802716981">ov::Core::read_model()</a>: Reads models from IR/ONNX/PDPD formats</li>
<li><a href="https://docs.openvino.ai/latest/openvino_docs_OV_UG_ShapeInference.html">ov::Model::reshape()</a>: Updates input shapes and propagates them down to the outputs of the model through all intermediate layers</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a46555f0803e8c29524626be08e7f5c5a">ov::Core::compile_model()</a>: Creates a compiled model from a source model object</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html#doxid-classov-1-1-compiled-model-1ae3633c0eb5173ed776446fba32b95953">ov::CompiledModel::create_infer_request()</a>: Creates an inference request object used to infer the compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a5f0bc1ab40de6a7a12136b4a4e6a8b54">ov::InferRequest::get_input_tensor()</a>: Gets an input tensor for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Load a model from the specified file path</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model_path"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The full model path to the OpenVINO IR model</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The index for the available_devices vector</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_dims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image dimensions</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">A status value indicating success or failure to load and reshape the model</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb10-8">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> model_path<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> </span>
<span id="cb10-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-10"></span>
<span id="cb10-11">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-12">    <span class="co" style="color: #5E5E5E;">// Set the cache directory for compiled GPU models</span></span>
<span id="cb10-13">    core<span class="op" style="color: #5E5E5E;">.</span>set_property<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU"</span><span class="op" style="color: #5E5E5E;">,</span> ov<span class="op" style="color: #5E5E5E;">::</span>cache_dir<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"cache"</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-14"></span>
<span id="cb10-15">    <span class="co" style="color: #5E5E5E;">// Try loading the specified model</span></span>
<span id="cb10-16">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>read_model<span class="op" style="color: #5E5E5E;">(</span>model_path<span class="op" style="color: #5E5E5E;">);</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-17">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-18"></span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;">// The dimensions of the source input image</span></span>
<span id="cb10-20">    img_w <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-21">    img_h <span class="op" style="color: #5E5E5E;">=</span> image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-22">    <span class="co" style="color: #5E5E5E;">// Calculate new input dimensions based on the max stride value</span></span>
<span id="cb10-23">    input_w <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb10-24">    input_h <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">std::</span>roundf<span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">/</span> strides<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()));</span></span>
<span id="cb10-25">    n_pixels <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">*</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-26"></span>
<span id="cb10-27">    <span class="co" style="color: #5E5E5E;">// Calculate the value used to adjust the model output to the source image resolution</span></span>
<span id="cb10-28">    scale_x <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-29">    scale_y <span class="op" style="color: #5E5E5E;">=</span> input_h <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>img_h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-30"></span>
<span id="cb10-31">    <span class="co" style="color: #5E5E5E;">// Generate the grid and stride values based on input resolution</span></span>
<span id="cb10-32">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-33">    GenerateGridsAndStride<span class="op" style="color: #5E5E5E;">(</span>input_h<span class="op" style="color: #5E5E5E;">,</span> input_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-34"></span>
<span id="cb10-35">    <span class="co" style="color: #5E5E5E;">// Try updating the model input dimensions</span></span>
<span id="cb10-36">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model<span class="op" style="color: #5E5E5E;">-&gt;</span>reshape<span class="op" style="color: #5E5E5E;">({</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">,</span> input_w <span class="op" style="color: #5E5E5E;">});</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-37">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-38"></span>
<span id="cb10-39">    <span class="co" style="color: #5E5E5E;">// Create a compiled model for the taret compute device</span></span>
<span id="cb10-40">    <span class="kw" style="color: #003B4F;">auto</span> compiled_model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>compile_model<span class="op" style="color: #5E5E5E;">(</span>model<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"MULTI"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-41">                                             ov<span class="op" style="color: #5E5E5E;">::</span>device<span class="op" style="color: #5E5E5E;">::</span>priorities<span class="op" style="color: #5E5E5E;">(</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">]),</span></span>
<span id="cb10-42">                                             ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>performance_mode<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>PerformanceMode<span class="op" style="color: #5E5E5E;">::</span>LATENCY<span class="op" style="color: #5E5E5E;">),</span></span>
<span id="cb10-43">                                             ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>inference_precision<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>element<span class="op" style="color: #5E5E5E;">::</span>f32<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-44"></span>
<span id="cb10-45">    <span class="co" style="color: #5E5E5E;">// Create an inference request</span></span>
<span id="cb10-46">    infer_request <span class="op" style="color: #5E5E5E;">=</span> compiled_model<span class="op" style="color: #5E5E5E;">.</span>create_infer_request<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-47"></span>
<span id="cb10-48">    <span class="co" style="color: #5E5E5E;">// Get input tensor by index</span></span>
<span id="cb10-49">    input_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_input_tensor<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-50">    <span class="co" style="color: #5E5E5E;">// Get a pointer to the input tensor data</span></span>
<span id="cb10-51">    input_data <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-52"></span>
<span id="cb10-53">    <span class="co" style="color: #5E5E5E;">// Get output tensor</span></span>
<span id="cb10-54">    output_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_output_tensor<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-55">    <span class="co" style="color: #5E5E5E;">// Get a pointer to the output tensor data</span></span>
<span id="cb10-56">    out_data <span class="op" style="color: #5E5E5E;">=</span> output_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-57"></span>
<span id="cb10-58">    <span class="co" style="color: #5E5E5E;">// Replace the initial input dims with the updated values</span></span>
<span id="cb10-59">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-60">    image_dims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-61"></span>
<span id="cb10-62">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb10-63">    <span class="cf" style="color: #003B4F;">return</span> return_val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-64"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>The method to generate object proposals is nearly identical to the Python implementation from part 1.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">/// Generate object detection proposals from the raw model output</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"out_ptr"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to the output tensor data</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="dt" style="color: #AD0000;">void</span> GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> out_ptr<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> proposal_length<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-7">    <span class="co" style="color: #5E5E5E;">// Remove the proposals for the previous model output</span></span>
<span id="cb11-8">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;">// Obtain the number of classes the model was trained to detect</span></span>
<span id="cb11-11">    <span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-12"></span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> anchor_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> anchor_idx <span class="op" style="color: #5E5E5E;">&lt;</span> grid_strides<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> anchor_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb11-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-15">        <span class="co" style="color: #5E5E5E;">// Get the current grid and stride values</span></span>
<span id="cb11-16">        <span class="dt" style="color: #AD0000;">int</span> grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-17">        <span class="dt" style="color: #AD0000;">int</span> grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>grid1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-18">        <span class="dt" style="color: #AD0000;">int</span> stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides<span class="op" style="color: #5E5E5E;">[</span>anchor_idx<span class="op" style="color: #5E5E5E;">].</span>stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-19"></span>
<span id="cb11-20">        <span class="co" style="color: #5E5E5E;">// Get the starting index for the current proposal</span></span>
<span id="cb11-21">        <span class="dt" style="color: #AD0000;">int</span> start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-22"></span>
<span id="cb11-23">        <span class="co" style="color: #5E5E5E;">// Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb11-24">        <span class="dt" style="color: #AD0000;">float</span> x_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid0<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-25">        <span class="dt" style="color: #AD0000;">float</span> y_center <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> grid1<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-26"></span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;">// Get the dimensions for the predicted bounding box</span></span>
<span id="cb11-28">        <span class="dt" style="color: #AD0000;">float</span> w <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-29">        <span class="dt" style="color: #AD0000;">float</span> h <span class="op" style="color: #5E5E5E;">=</span> exp<span class="op" style="color: #5E5E5E;">(</span>out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> stride<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-30"></span>
<span id="cb11-31">        <span class="co" style="color: #5E5E5E;">// Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb11-32">        <span class="dt" style="color: #AD0000;">float</span> x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-33">        <span class="dt" style="color: #AD0000;">float</span> y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-34"></span>
<span id="cb11-35">        <span class="co" style="color: #5E5E5E;">// Get the confidence score that an object is present</span></span>
<span id="cb11-36">        <span class="dt" style="color: #AD0000;">float</span> box_objectness <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb11-37"></span>
<span id="cb11-38">        <span class="co" style="color: #5E5E5E;">// Initialize object struct with bounding box information</span></span>
<span id="cb11-39">        Object obj <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span> x0<span class="op" style="color: #5E5E5E;">,</span> y0<span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb11-40"></span>
<span id="cb11-41">        <span class="co" style="color: #5E5E5E;">// Find the object class with the highest confidence score</span></span>
<span id="cb11-42">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> class_idx <span class="op" style="color: #5E5E5E;">&lt;</span> num_classes<span class="op" style="color: #5E5E5E;">;</span> class_idx<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb11-43">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-44">            <span class="co" style="color: #5E5E5E;">// Get the confidence score for the current object class</span></span>
<span id="cb11-45">            <span class="dt" style="color: #AD0000;">float</span> box_cls_score <span class="op" style="color: #5E5E5E;">=</span> out_ptr<span class="op" style="color: #5E5E5E;">[</span>start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb11-46">            <span class="co" style="color: #5E5E5E;">// Calculate the final confidence score for the object proposal</span></span>
<span id="cb11-47">            <span class="dt" style="color: #AD0000;">float</span> box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-48"></span>
<span id="cb11-49">            <span class="co" style="color: #5E5E5E;">// Check for the highest confidence score</span></span>
<span id="cb11-50">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb11-51">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-52">                obj<span class="op" style="color: #5E5E5E;">.</span>label <span class="op" style="color: #5E5E5E;">=</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-53">                obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">=</span> box_prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-54">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-55">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-56"></span>
<span id="cb11-57">        <span class="co" style="color: #5E5E5E;">// Only add object proposals with high enough confidence scores</span></span>
<span id="cb11-58">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> bbox_conf_thresh<span class="op" style="color: #5E5E5E;">)</span> proposals<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-59">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-60"></span>
<span id="cb11-61">    <span class="co" style="color: #5E5E5E;">// Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb11-62">    <span class="bu" style="color: null;">std::</span>sort<span class="op" style="color: #5E5E5E;">(</span>proposals<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> proposals<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">(),</span> <span class="op" style="color: #5E5E5E;">[](</span>Object<span class="op" style="color: #5E5E5E;">&amp;</span> a<span class="op" style="color: #5E5E5E;">,</span> Object<span class="op" style="color: #5E5E5E;">&amp;</span> b<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">bool</span></span>
<span id="cb11-63">              <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> a<span class="op" style="color: #5E5E5E;">.</span>prob <span class="op" style="color: #5E5E5E;">&gt;</span> b<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb11-64"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<p>The C++ API for OpenCV has built-in functionality to perform comparison operations between rectangles. Therefore, we don’t need to define helper functions to calculate the intersection and union areas of two bounding boxes. Otherwise, the method to sort bounding box proposals using Non-Maximum Suppression is almost identical to the Python implementation from part 1.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">/// Filter through a sorted list of object proposals using Non-maximum suppression</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="dt" style="color: #AD0000;">void</span> NmsSortedBboxes<span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;">// Remove the picked proposals for the previous model outptut</span></span>
<span id="cb12-7">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;">// Iterate through the object proposals</span></span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposals<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb12-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-12">        Object<span class="op" style="color: #5E5E5E;">&amp;</span> a <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb12-13"></span>
<span id="cb12-14">        <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb12-15">        cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_a <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>a<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> a<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">        <span class="dt" style="color: #AD0000;">bool</span> keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-18"></span>
<span id="cb12-19">        <span class="co" style="color: #5E5E5E;">// Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb12-20">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">:</span> proposal_indices<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-21">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-22">            Object<span class="op" style="color: #5E5E5E;">&amp;</span> b <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb12-23"></span>
<span id="cb12-24">            <span class="co" style="color: #5E5E5E;">// Create OpenCV rectangle for the Object bounding box</span></span>
<span id="cb12-25">            cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> rect_b <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Rect_<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;(</span>b<span class="op" style="color: #5E5E5E;">.</span>x0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>y0<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>width<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">.</span>height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-26"></span>
<span id="cb12-27">            <span class="co" style="color: #5E5E5E;">// Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb12-28">            <span class="dt" style="color: #AD0000;">float</span> inter_area <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>rect_a <span class="op" style="color: #5E5E5E;">&amp;</span> rect_b<span class="op" style="color: #5E5E5E;">).</span>area<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-29">            <span class="co" style="color: #5E5E5E;">// Calculate the union area of both bounding boxes</span></span>
<span id="cb12-30">            <span class="dt" style="color: #AD0000;">float</span> union_area <span class="op" style="color: #5E5E5E;">=</span> rect_a<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">+</span> rect_b<span class="op" style="color: #5E5E5E;">.</span>area<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> inter_area<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-31">            <span class="co" style="color: #5E5E5E;">// Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb12-32">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-33">                keep <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-34">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-35"></span>
<span id="cb12-36">        <span class="co" style="color: #5E5E5E;">// Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb12-37">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>keep<span class="op" style="color: #5E5E5E;">)</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-38">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-39"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1-byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>We don’t need to normalize the input image since the IR model does it internally.</p>
<p>After processing the model output, we’ll return the final number of detected objects to Unity so we can initialize an array of objects.</p>
<ul>
<li><a href="https://docs.opencv.org/3.4/d3/d63/classcv_1_1Mat.html">cv::Mat</a>: n-dimensional dense array class<br>
</li>
<li><a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv::cvtColor()</a>: Converts an image from one color space to another</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1abcb7facc9f7c4b9226a1fd343e56958d">ov::InferRequest::infer()</a>: Infers specified input in synchronous mode</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a9bf7bf67c58858bda86ae01e83cd14c1">ov::InferRequest::get_output_tensor()</a>: Gets an output tensor for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Perform inference with the provided texture data</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image_data"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image data from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;">The final number of detected objects</span><span class="kw" style="color: #003B4F;">&lt;/returns&gt;</span></span>
<span id="cb13-6">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> image_data<span class="op" style="color: #5E5E5E;">)</span> </span>
<span id="cb13-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-8"></span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb13-10">    cv<span class="op" style="color: #5E5E5E;">::</span>Mat input_image <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>img_h<span class="op" style="color: #5E5E5E;">,</span> img_w<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> image_data<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-11"></span>
<span id="cb13-12">    <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb13-13">    cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-14"></span>
<span id="cb13-15">    <span class="co" style="color: #5E5E5E;">// Resize the input image</span></span>
<span id="cb13-16">    cv<span class="op" style="color: #5E5E5E;">::</span>resize<span class="op" style="color: #5E5E5E;">(</span>input_image<span class="op" style="color: #5E5E5E;">,</span> input_image<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>Size<span class="op" style="color: #5E5E5E;">(</span>input_w<span class="op" style="color: #5E5E5E;">,</span> input_h<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb13-17"></span>
<span id="cb13-18">    <span class="co" style="color: #5E5E5E;">// Iterate over each pixel in image</span></span>
<span id="cb13-19">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">&lt;</span> n_pixels<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb13-20">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-21">        input_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">*</span>n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p<span class="op" style="color: #5E5E5E;">*</span>n_channels <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-22">        input_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">*</span>n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p<span class="op" style="color: #5E5E5E;">*</span>n_channels <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-23">        input_data<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>n_pixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> input_image<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p<span class="op" style="color: #5E5E5E;">*</span>n_channels <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb13-25"></span>
<span id="cb13-26">    <span class="co" style="color: #5E5E5E;">// Perform inference</span></span>
<span id="cb13-27">    infer_request<span class="op" style="color: #5E5E5E;">.</span>infer<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-28"></span>
<span id="cb13-29">    <span class="co" style="color: #5E5E5E;">// Generate new proposals for the current model output</span></span>
<span id="cb13-30">    GenerateYoloxProposals<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> output_tensor<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb13-31"></span>
<span id="cb13-32">    <span class="co" style="color: #5E5E5E;">// Pick detected objects to keep using Non-maximum Suppression</span></span>
<span id="cb13-33">    NmsSortedBboxes<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-34"></span>
<span id="cb13-35">    <span class="co" style="color: #5E5E5E;">// return the final number of detected objects</span></span>
<span id="cb13-36">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-37"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to populate an array of objects from Unity</strong></p>
<p>Next, we’ll define a function to populate an array of objects from Unity. We call this function after initializing the list based on the current number of detected objects. We’ll also scale the bounding box information from the input dimensions to the source image resolution.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Fill the provided array with the detected objects</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"objects"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">A pointer to a list of objects from Unity</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb14-5">DLLExport <span class="dt" style="color: #AD0000;">void</span> PopulateObjectsArray<span class="op" style="color: #5E5E5E;">(</span>Object<span class="op" style="color: #5E5E5E;">*</span> objects<span class="op" style="color: #5E5E5E;">)</span> </span>
<span id="cb14-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-7"></span>
<span id="cb14-8">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> proposal_indices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb14-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-10">        Object obj <span class="op" style="color: #5E5E5E;">=</span> proposals<span class="op" style="color: #5E5E5E;">[</span>proposal_indices<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">        <span class="co" style="color: #5E5E5E;">// Adjust offset to source image resolution and clamp the bounding box</span></span>
<span id="cb14-13">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>x0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>x0 <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-14">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>y0 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>y0 <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-15">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>width <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>width <span class="op" style="color: #5E5E5E;">/</span> scale_x<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_w<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-16">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>height <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>min<span class="op" style="color: #5E5E5E;">(</span>obj<span class="op" style="color: #5E5E5E;">.</span>height <span class="op" style="color: #5E5E5E;">/</span> scale_y<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>img_h<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-17"></span>
<span id="cb14-18">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>label <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>label<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-19">        objects<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">].</span>prob <span class="op" style="color: #5E5E5E;">=</span> obj<span class="op" style="color: #5E5E5E;">.</span>prob<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to reset the vectors when the Unity application exits</strong></p>
<p>This last function will free the memory allocated by the vectors. We’ll call it when the Unity application shuts down.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">/// Reset vectors</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb15-4">DLLExport <span class="dt" style="color: #AD0000;">void</span> FreeResources<span class="op" style="color: #5E5E5E;">()</span> </span>
<span id="cb15-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-6">    available_devices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb15-7">    grid_strides<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb15-8">    proposals<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb15-9">    proposal_indices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb15-10"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click <code>Build Solution</code>. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-build-solution</figcaption><p></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-folder-in-explorer</figcaption><p></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder</figcaption><p></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder-x64-folder</figcaption><p></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder and the plugins.xml file to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">file-explorer-select-dll-files</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference with a YOLOX model using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. In part 3, we build a project in <a href="https://unity.com/">Unity</a> that uses this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>openvino</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-2/index.html</guid>
  <pubDate>Tue, 09 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-openvino-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</title>
  <link>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Setup Conda Environment</li>
<li>Import Dependencies</li>
<li>Configure Kaggle API</li>
<li>Download the Dataset</li>
<li>Inspect the Dataset</li>
<li>Create Dataset Parser</li>
<li>Define DataLoader Objects</li>
<li>Finetune the Model</li>
<li>Prepare Model for Export</li>
<li>Export the Model</li>
<li>Verify OpenVINO Inference</li>
<li>Define Post-processing Steps</li>
<li>Generate Colormap</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial series, we will walk through training an object detector using the <a href="https://airctic.com/0.12.0/">IceVision</a> library. We will then implement the trained model in a <a href="https://unity.com/">Unity</a> game engine project using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>, an open-source toolkit for optimizing model inference.</p>
<p>The tutorial uses a downscaled subsample of <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset). The dataset contains annotated sample images for 18 distinct hand gestures and an additional <code>no_gesture</code> class to account for idle hands.</p>
<div>
<details>
<summary style="font-size: 1.25rem;">
Reference Images
</summary>
<br>

<table>
<thead>
<tr>
<th>
Class
</th>
<th>
Image
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
call
</td>
<td>
<img alt="call" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/call.jpg">
</td>
</tr>
<tr>
<td>
dislike
</td>
<td>
<img alt="dislike" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/dislike.jpg">
</td>
</tr>
<tr>
<td>
fist
</td>
<td>
<img alt=" fist" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/fist.jpg">
</td>
</tr>
<tr>
<td>
four
</td>
<td>
<img alt="four" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/four.jpg">
</td>
</tr>
<tr>
<td>
like
</td>
<td>
<img alt=" like" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/like.jpg">
</td>
</tr>
<tr>
<td>
mute
</td>
<td>
<img alt=" mute" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/mute.jpg">
</td>
</tr>
<tr>
<td>
ok
</td>
<td>
<img alt=" ok" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/ok.jpg">
</td>
</tr>
<tr>
<td>
one
</td>
<td>
<img alt=" one" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/one.jpg">
</td>
</tr>
<tr>
<td>
palm
</td>
<td>
<img alt=" palm" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/palm.jpg">
</td>
</tr>
<tr>
<td>
peace
</td>
<td>
<img alt="peace" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/peace.jpg">
</td>
</tr>
<tr>
<td>
peace_inverted
</td>
<td>
<img alt="peace_inverted" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/peace_inverted.jpg">
</td>
</tr>
<tr>
<td>
rock
</td>
<td>
<img alt="rock" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/rock.jpg">
</td>
</tr>
<tr>
<td>
stop
</td>
<td>
<img alt="stop" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stop.jpg">
</td>
</tr>
<tr>
<td>
stop_inverted
</td>
<td>
<img alt="stop_inverted" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stop_inverted.jpg">
</td>
</tr>
<tr>
<td>
three
</td>
<td>
<img alt="three" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/three.jpg">
</td>
</tr>
<tr>
<td>
three2
</td>
<td>
<img alt="three2" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/three2.jpg">
</td>
</tr>
<tr>
<td>
two_up
</td>
<td>
<img alt=" two_up" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/two_up.jpg">
</td>
</tr>
<tr>
<td>
two_up_inverted
</td>
<td>
<img alt="two_up_inverted" src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/two_up_inverted.jpg">
</td>
</tr>
</tbody>

</table>
</details>
</div>
<p>One could use a model trained on this dataset to map hand gestures and locations to user input in Unity.</p>
<section id="unity-demo" class="level4">
<h4 class="anchored" data-anchor-id="unity-demo">Unity Demo</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/HaGRID-demo.mp4" class="img-fluid" controls=""><a href="./videos/HaGRID-demo.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">HaGRID-demo</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Part 1 covers finetuning a <a href="https://github.com/Megvii-BaseDetection/YOLOX">YOLOX</a> Tiny model using the IceVision library and exporting it to OpenVINO’s <a href="https://docs.openvino.ai/latest/openvino_docs_MO_DG_IR_and_opsets.html">Intermediate Representation</a> (IR) format. The training code is available in the Jupyter notebook linked below, and links for training on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a> are also available below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial/blob/main/notebooks/Icevision-YOLOX-to-OpenVINO-Tutorial-HaGRID.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/icevision-openvino-unity-tutorial/blob/main/notebooks/Icevision-YOLOX-to-OpenVINO-Tutorial-HaGRID-Colab.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/icevision-openvino-unity-tutorial/blob/main/notebooks/Icevision-YOLOX-to-OpenVINO-Tutorial-HaGRID-Kaggle.ipynb"><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/https:/kaggle.com/static/images/open-in-kaggle.svg" class="img-fluid" alt="Kaggle"></a></td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Note:</strong> The free GPU tier for Google Colab takes approximately 11 minutes per epoch, while the free GPU tier for Kaggle Notebooks takes around 15 minutes per epoch.</p>
</blockquote>
</section>
<section id="setup-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="setup-conda-environment">Setup Conda Environment</h2>
<p>The IceVision library builds upon specific versions of libraries like <a href="https://docs.fast.ai/">fastai</a> and <a href="https://mmdetection.readthedocs.io/en/latest/">mmdetection</a>, and the cumulative dependency requirements mean it is best to use a dedicated <a href="https://docs.python.org/3/tutorial/venv.html">virtual environment</a>. Below are the steps to create a virtual environment using <a href="https://docs.conda.io/en/latest/">Conda</a>. Be sure to execute each command in the provided order.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> IceVision currently only supports Linux/macOS. Try using <a href="https://docs.microsoft.com/en-us/windows/wsl/install">WSL</a> (Windows Subsystem for Linux) if training locally on Windows.</p>
</blockquote>
<p><strong>Install CUDA Toolkit</strong></p>
<p>You might need to install the CUDA Toolkit on your system if you plan to run the training code locally. CUDA requires an Nvidia GPU. Version 11.1.0 of the toolkit is available at the link below. Both Google Colab and Kaggle Notebooks already have CUDA installed.</p>
<ul>
<li><a href="https://developer.nvidia.com/cuda-11.1.0-download-archive">CUDA Toolkit 11.1.0</a></li>
<li><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a></li>
</ul>
<p><strong>Conda environment setup steps</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">--name</span> icevision python==3.8</span>
<span id="cb1-2"><span class="ex" style="color: null;">conda</span> activate icevision</span>
<span id="cb1-3"><span class="ex" style="color: null;">pip</span> install torch==1.10.0+cu111 torchvision==0.11.1+cu111 <span class="at" style="color: #657422;">-f</span> https://download.pytorch.org/whl/torch_stable.html</span>
<span id="cb1-4"><span class="ex" style="color: null;">pip</span> install mmcv-full==1.3.17 <span class="at" style="color: #657422;">-f</span> https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html</span>
<span id="cb1-5"><span class="ex" style="color: null;">pip</span> install mmdet==2.17.0</span>
<span id="cb1-6"><span class="ex" style="color: null;">pip</span> install icevision==0.11.0</span>
<span id="cb1-7"><span class="ex" style="color: null;">pip</span> install icedata==0.5.1</span>
<span id="cb1-8"><span class="ex" style="color: null;">pip</span> install setuptools==59.5.0</span>
<span id="cb1-9"><span class="ex" style="color: null;">pip</span> install openvino-dev</span>
<span id="cb1-10"><span class="ex" style="color: null;">pip</span> install distinctipy</span>
<span id="cb1-11"><span class="ex" style="color: null;">pip</span> install jupyter</span>
<span id="cb1-12"><span class="ex" style="color: null;">pip</span> install onnxruntime</span>
<span id="cb1-13"><span class="ex" style="color: null;">pip</span> install onnx-simplifier</span>
<span id="cb1-14"><span class="ex" style="color: null;">pip</span> install kaggle</span></code></pre></div>
<p>The <a href="https://pypi.org/project/mmdet/"><code>mmdet</code></a> package contains the pretrained YOLOX Tiny model we will finetune with IceVision. The package depends on the <a href="https://mmcv.readthedocs.io/en/latest/"><code>mmcv-full</code></a> library, which is picky about the CUDA version used by <a href="https://pytorch.org/">PyTorch</a>. We need to install the PyTorch version with the exact CUDA version expected by <code>mmcv-full</code>.</p>
<p>The <a href="https://pypi.org/project/icevision/"><code>icevision</code></a> package provides the functionality for data curation, data transforms, and training loops we’ll use to train the model. The <a href="https://airctic.github.io/icedata/"><code>icedata</code></a> package provides the functionality we’ll use to create a custom parser to read the dataset.</p>
<p>The <a href="https://pypi.org/project/openvino-dev/"><code>openvino-dev</code></a> pip package contains the model-conversion script to convert trained models from <a href="https://onnx.ai/">ONNX</a> to OpenVINO’s IR format.</p>
<p>We’ll use the <a href="https://pypi.org/project/distinctipy/"><code>distinctipy</code></a> pip package to generate a visually distinct colormap for drawing bounding boxes on images.</p>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/">onnx-simplifier</a> package to tidy up the exported model. This step is entirely optional.</p>
<p><strong>Original ONNX model (<a href="https://netron.app/">Netron</a>)</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/onnx-model.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">onnx-model</figcaption><p></p>
</figure>
</div>
<p><strong>Simplified ONNX model (<a href="https://netron.app/">Netron</a>)</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/onnx-model-simplified.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">onnx-model-simplified</figcaption><p></p>
</figure>
</div>
<p><strong>Colab and Kaggle Setup Requirements</strong></p>
<p>When running the training code on Google Colab and Kaggle Notebooks, we need to uninstall several packages before installing IceVision and its dependencies to avoid conflicts. The platform-specific setup steps are at the top of the notebooks linked above.</p>
</section>
<section id="import-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="import-dependencies">Import Dependencies</h2>
<p>IceVision will download some additional resources the first time we import the library.</p>
<p><strong>Import IceVision library</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> icevision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p><strong>Import and configure Pandas</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb3-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="configure-kaggle-api" class="level2">
<h2 class="anchored" data-anchor-id="configure-kaggle-api">Configure Kaggle API</h2>
<p>The Kaggle API tool requires an API Key for a Kaggle account. Sign in or create a Kaggle account using the link below, then click the <code>Create New API Token</code> button.</p>
<ul>
<li><strong>Kaggle Account Settings:</strong> <a href="https://www.kaggle.com/me/account">https://www.kaggle.com/me/account</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/kaggle-create-new-api-token.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">kaggle-create-new-api-token</figcaption><p></p>
</figure>
</div>
<p><strong>Enter Kaggle username and API token</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">creds <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'{"username":"","key":""}'</span></span></code></pre></div>
<p><strong>Save Kaggle credentials if none are present</strong> * <strong>Source:</strong> <a href="https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb">https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb</a></p>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">cred_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># Save API key to a json file if it does not already exist</span></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> cred_path.exists():</span>
<span id="cb5-4">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-5">    cred_path.write_text(creds)</span>
<span id="cb5-6">    cred_path.chmod(<span class="bn" style="color: #AD0000;">0o600</span>)</span></code></pre></div>
<p><strong>Import Kaggle API</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span></code></pre></div>
</section>
<section id="download-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-the-dataset">Download the Dataset</h2>
<p>Now that we have our Kaggle credentials set, we need to define the dataset and where to store it. I made two versions of the dataset available on Kaggle. One contains approximately thirty thousand training samples, and the other has over one hundred and twenty thousand.</p>
<ul>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-sample-30k-384p">HaGRID Sample 30k 384p</a></li>
<li><a href="https://www.kaggle.com/datasets/innominate817/hagrid-sample-120k-384p">HaGRID Sample 120k 384p</a></li>
</ul>
<p><strong>Define path to dataset</strong></p>
<p>We’ll use the default archive and data folders for the fastai library (installed with IceVision) to store the compressed and uncompressed datasets.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> fastai.data.external <span class="im" style="color: #00769E;">import</span> URLs</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'hagrid-sample-30k-384p'</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># dataset_name = 'hagrid-sample-120k-384p'</span></span>
<span id="cb8-3">kaggle_dataset <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'innominate817/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb8-4">archive_dir <span class="op" style="color: #5E5E5E;">=</span> URLs.path()</span>
<span id="cb8-5">dataset_dir <span class="op" style="color: #5E5E5E;">=</span> archive_dir<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'../data'</span></span>
<span id="cb8-6">archive_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.zip'</span>)</span>
<span id="cb8-7">dataset_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Define method to extract the dataset from an archive file</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> file_extract(fname, dest<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;">"Extract `fname` to `dest` using `tarfile` or `zipfile`."</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;">if</span> dest <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: dest <span class="op" style="color: #5E5E5E;">=</span> Path(fname).parent</span>
<span id="cb9-4">    fname <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(fname)</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;">if</span>   fname.endswith(<span class="st" style="color: #20794D;">'gz'</span>):  tarfile.<span class="bu" style="color: null;">open</span>(fname, <span class="st" style="color: #20794D;">'r:gz'</span>).extractall(dest)</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;">elif</span> fname.endswith(<span class="st" style="color: #20794D;">'zip'</span>): zipfile.ZipFile(fname     ).extractall(dest)</span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;">else</span>: <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="ss" style="color: #20794D;">f'Unrecognized archive: </span><span class="sc" style="color: #5E5E5E;">{</span>fname<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Download the dataset if it is not present</strong></p>
<p>The archive file for the 30K dataset is 4GB, so we don’t want to download it more than necessary.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> archive_path.exists():</span>
<span id="cb10-2">    api.dataset_download_cli(kaggle_dataset, path<span class="op" style="color: #5E5E5E;">=</span>archive_dir)</span>
<span id="cb10-3">    file_extract(fname<span class="op" style="color: #5E5E5E;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;">=</span>dataset_dir)</span></code></pre></div>
</section>
<section id="inspect-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-the-dataset">Inspect the Dataset</h2>
<p>We can start inspecting the dataset once it finishes downloading.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dir_content <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(dataset_path.ls())</span>
<span id="cb11-2">annotation_dir <span class="op" style="color: #5E5E5E;">=</span> dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ann_train_val'</span></span>
<span id="cb11-3">dir_content.remove(annotation_dir)</span>
<span id="cb11-4">img_dir <span class="op" style="color: #5E5E5E;">=</span> dir_content[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb11-5">annotation_dir, img_dir</span></code></pre></div>
<pre class="text"><code>(Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val'),
 Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k'))</code></pre>
<p><strong>Inspect the annotation folder</strong></p>
<p>The bounding box annotations for each image are stored in JSON files organized by object class. The files contain annotations for all 552,992 images from the full HaGRID dataset.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pd.DataFrame([<span class="bu" style="color: null;">file</span>.name <span class="cf" style="color: #003B4F;">for</span> <span class="bu" style="color: null;">file</span> <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(annotation_dir.ls())])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like.json
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute.json
</td>
</tr>
<tr>
<th>
6
</th>
<td>
ok.json
</td>
</tr>
<tr>
<th>
7
</th>
<td>
one.json
</td>
</tr>
<tr>
<th>
8
</th>
<td>
palm.json
</td>
</tr>
<tr>
<th>
9
</th>
<td>
peace.json
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace_inverted.json
</td>
</tr>
<tr>
<th>
11
</th>
<td>
rock.json
</td>
</tr>
<tr>
<th>
12
</th>
<td>
stop.json
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop_inverted.json
</td>
</tr>
<tr>
<th>
14
</th>
<td>
three.json
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three2.json
</td>
</tr>
<tr>
<th>
16
</th>
<td>
two_up.json
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up_inverted.json
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the image folder</strong></p>
<p>The sample images are stored in folders separated by object class.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pd.DataFrame([folder.name <span class="cf" style="color: #003B4F;">for</span> folder <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(img_dir.ls())])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
train_val_call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
train_val_dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
train_val_fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
train_val_four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
train_val_like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
train_val_mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
train_val_ok
</td>
</tr>
<tr>
<th>
7
</th>
<td>
train_val_one
</td>
</tr>
<tr>
<th>
8
</th>
<td>
train_val_palm
</td>
</tr>
<tr>
<th>
9
</th>
<td>
train_val_peace
</td>
</tr>
<tr>
<th>
10
</th>
<td>
train_val_peace_inverted
</td>
</tr>
<tr>
<th>
11
</th>
<td>
train_val_rock
</td>
</tr>
<tr>
<th>
12
</th>
<td>
train_val_stop
</td>
</tr>
<tr>
<th>
13
</th>
<td>
train_val_stop_inverted
</td>
</tr>
<tr>
<th>
14
</th>
<td>
train_val_three
</td>
</tr>
<tr>
<th>
15
</th>
<td>
train_val_three2
</td>
</tr>
<tr>
<th>
16
</th>
<td>
train_val_two_up
</td>
</tr>
<tr>
<th>
17
</th>
<td>
train_val_two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get image file paths</strong></p>
<p>We can use the <code>get_image_file</code> method to get the full paths for every image file in the image directory.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(img_dir)</span>
<span id="cb15-2"><span class="bu" style="color: null;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>31833</code></pre>
<p><strong>Inspect files</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pd.DataFrame([files[<span class="dv" style="color: #AD0000;">0</span>], files[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00005c9c-3548-4a8f-9d0b-2dd4aff37fc9.jpg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_two_up_inverted/fff4d2f6-9890-4225-8d9c-73a02ba8f9ac.jpg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect one of the training images</strong></p>
<p>The sample images are all downscaled to 384p.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> PIL</span>
<span id="cb18-2">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(files[<span class="dv" style="color: #AD0000;">0</span>]).convert(<span class="st" style="color: #20794D;">'RGB'</span>)</span>
<span id="cb18-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;">{</span>img<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb18-4">img</span></code></pre></div>
<pre class="text"><code>Image Dims: (512, 384)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_28_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Create a dictionary that maps image names to file paths</strong></p>
<p>Let’s create a dictionary to quickly obtain full image file paths, given a file name. We’ll need this later.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">img_dict <span class="op" style="color: #5E5E5E;">=</span> {<span class="bu" style="color: null;">file</span>.name.split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>] : <span class="bu" style="color: null;">file</span> <span class="cf" style="color: #003B4F;">for</span> <span class="bu" style="color: null;">file</span> <span class="kw" style="color: #003B4F;">in</span> files}</span>
<span id="cb20-2"><span class="bu" style="color: null;">list</span>(img_dict.items())[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>('00005c9c-3548-4a8f-9d0b-2dd4aff37fc9',
 Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00005c9c-3548-4a8f-9d0b-2dd4aff37fc9.jpg'))</code></pre>
<p><strong>Get list of annotation file paths</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb22-2"><span class="im" style="color: #00769E;">from</span> glob <span class="im" style="color: #00769E;">import</span> glob</span></code></pre></div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">annotation_paths <span class="op" style="color: #5E5E5E;">=</span> glob(os.path.join(annotation_dir, <span class="st" style="color: #20794D;">"*.json"</span>))</span>
<span id="cb23-2">annotation_paths</span></code></pre></div>
<pre class="text"><code>['/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/fist.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/one.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/rock.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/stop_inverted.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/like.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/two_up.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/two_up_inverted.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/peace.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/stop.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/four.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/dislike.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/palm.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/call.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/three2.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/ok.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/mute.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/three.json',
 '/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/ann_train_val/peace_inverted.json']</code></pre>
<p><strong>Create annotations dataframe</strong></p>
<p>Next, we’ll read all the image annotations into a single Pandas DataFrame and filter out annotations for images not present in the current subsample.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">cls_dataframes <span class="op" style="color: #5E5E5E;">=</span> (pd.read_json(f).transpose() <span class="cf" style="color: #003B4F;">for</span> f <span class="kw" style="color: #003B4F;">in</span> annotation_paths)</span>
<span id="cb25-2">annotation_df <span class="op" style="color: #5E5E5E;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb25-3">annotation_df <span class="op" style="color: #5E5E5E;">=</span> annotation_df.loc[<span class="bu" style="color: null;">list</span>(img_dict.keys())]</span>
<span id="cb25-4">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
bboxes
</th>
<th>
labels
</th>
<th>
leading_hand
</th>
<th>
leading_conf
</th>
<th>
user_id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
<td>
[[0.23925175, 0.28595301, 0.25055143, 0.20777627]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
5a389ffe1bed6660a59f4586c7d8fe2770785e5bf79b09334aa951f6f119c024
</td>
</tr>
<tr>
<th>
0020a3db-82d8-47aa-8642-2715d4744db5
</th>
<td>
[[0.5801012999999999, 0.53265105, 0.14562138, 0.12286348]]
</td>
<td>
[call]
</td>
<td>
left
</td>
<td>
1
</td>
<td>
0d6da2c87ef8eabeda2dcfee2dc5b5035e878137a91b149c754a59804f3dce32
</td>
</tr>
<tr>
<th>
004ac93f-0f7c-49a4-aadc-737e0ad4273c
</th>
<td>
[[0.46294793, 0.26419774, 0.13834939000000002, 0.10784189]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
d50f05d9d6ca9771938cec766c3d621ff863612f9665b0e4d991c086ec04acc9
</td>
</tr>
<tr>
<th>
006cac69-d3f0-47f9-aac9-38702d038ef1
</th>
<td>
[[0.38799208, 0.44643898, 0.27068787, 0.18277858]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
998f6ad69140b3a59cb9823ba680cce62bf2ba678058c2fc497dbbb8b22b29fe
</td>
</tr>
<tr>
<th>
00973fac-440e-4a56-b60c-2a06d5fb155d
</th>
<td>
[[0.40980118, 0.38144198, 0.08338464, 0.06229785], [0.6122035100000001, 0.6780825500000001, 0.04700606, 0.07640522]]
</td>
<td>
[call, no_gesture]
</td>
<td>
right
</td>
<td>
1
</td>
<td>
4bb3ee1748be58e05bd1193939735e57bb3c0ca59a7ee38901744d6b9e94632e
</td>
</tr>
</tbody>

</table>
</div>
<p>Notice that one of the samples contains a <code>no_gesture</code> label to identify an idle hand in the image.</p>
<p><strong>Inspect annotation data for sample image</strong></p>
<p>We can retrieve the annotation data for a specific image file using its name.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">file_id <span class="op" style="color: #5E5E5E;">=</span> files[<span class="dv" style="color: #AD0000;">0</span>].name.split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb26-2">file_id</span></code></pre></div>
<pre class="text"><code>'00005c9c-3548-4a8f-9d0b-2dd4aff37fc9'</code></pre>
<p>The image file names are the index values for the annotation DataFrame.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
bboxes
</th>
<td>
[[0.23925175, 0.28595301, 0.25055143, 0.20777627]]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[call]
</td>
</tr>
<tr>
<th>
leading_hand
</th>
<td>
right
</td>
</tr>
<tr>
<th>
leading_conf
</th>
<td>
1
</td>
</tr>
<tr>
<th>
user_id
</th>
<td>
5a389ffe1bed6660a59f4586c7d8fe2770785e5bf79b09334aa951f6f119c024
</td>
</tr>
</tbody>

</table>
</div>
<p>The <code>bboxes</code> entry contains the <code>[top-left-X-position, top-left-Y-position, width, height]</code> information for any bounding boxes. The values are scaled based on the image dimensions. We multiply <code>top-left-X-position</code> and <code>width</code> values by the image width and multiply <code>top-left-Y-position</code> and <code>height</code> values by the image height to obtain the actual values.</p>
<p><strong>Download font file</strong></p>
<p>We need a font file to annotate the images with class labels. We can download one from <a href="https://fonts.google.com/">Google Fonts</a>.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">font_file <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb29-2"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> os.path.exists(font_file): </span>
<span id="cb29-3">    <span class="op" style="color: #5E5E5E;">!</span>wget https:<span class="op" style="color: #5E5E5E;">//</span>fonts.gstatic.com<span class="op" style="color: #5E5E5E;">/</span>s<span class="op" style="color: #5E5E5E;">/</span>roboto<span class="op" style="color: #5E5E5E;">/</span>v30<span class="op" style="color: #5E5E5E;">/</span>$font_file</span></code></pre></div>
<p><strong>Annotate sample image</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> ImageDraw</span></code></pre></div>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">width, height <span class="op" style="color: #5E5E5E;">=</span> img.size</span>
<span id="cb31-2">annotated_img <span class="op" style="color: #5E5E5E;">=</span> img.copy()</span>
<span id="cb31-3">draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb31-4">fnt_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb31-5">annotation <span class="op" style="color: #5E5E5E;">=</span> annotation_df.loc[file_id]</span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(annotation[<span class="st" style="color: #20794D;">'labels'</span>])):</span>
<span id="cb31-8">    x, y, w, h <span class="op" style="color: #5E5E5E;">=</span> annotation[<span class="st" style="color: #20794D;">'bboxes'</span>][i]</span>
<span id="cb31-9">    x <span class="op" style="color: #5E5E5E;">*=</span> width</span>
<span id="cb31-10">    y <span class="op" style="color: #5E5E5E;">*=</span> height</span>
<span id="cb31-11">    w <span class="op" style="color: #5E5E5E;">*=</span> width</span>
<span id="cb31-12">    h <span class="op" style="color: #5E5E5E;">*=</span> height</span>
<span id="cb31-13">    shape <span class="op" style="color: #5E5E5E;">=</span> (x, y, x<span class="op" style="color: #5E5E5E;">+</span>w, y<span class="op" style="color: #5E5E5E;">+</span>h)</span>
<span id="cb31-14">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb31-15">    fnt <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageFont.truetype(font_file, fnt_size)</span>
<span id="cb31-16">    draw.multiline_text((x, y<span class="op" style="color: #5E5E5E;">-</span>fnt_size<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>), <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>annotation[<span class="st" style="color: #20794D;">'labels'</span>][i]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, font<span class="op" style="color: #5E5E5E;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb31-17"><span class="bu" style="color: null;">print</span>(annotated_img.size) </span>
<span id="cb31-18">annotated_img</span></code></pre></div>
<pre class="text"><code>(384, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_43_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Create a class map</strong></p>
<p>We need to provide IceVision with a class map that maps index values to unique class names.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">labels <span class="op" style="color: #5E5E5E;">=</span> annotation_df[<span class="st" style="color: #20794D;">'labels'</span>].explode().unique().tolist()</span>
<span id="cb33-2">labels</span></code></pre></div>
<pre class="text"><code>['call',
 'no_gesture',
 'dislike',
 'fist',
 'four',
 'like',
 'mute',
 'ok',
 'one',
 'palm',
 'peace',
 'peace_inverted',
 'rock',
 'stop',
 'stop_inverted',
 'three',
 'three2',
 'two_up',
 'two_up_inverted']</code></pre>
<p>IceVision adds an additional <code>background</code> class at index <code>0</code>.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">class_map <span class="op" style="color: #5E5E5E;">=</span> ClassMap(labels)</span>
<span id="cb35-2">class_map</span></code></pre></div>
<pre class="text"><code>&lt;ClassMap: {'background': 0, 'call': 1, 'no_gesture': 2, 'dislike': 3, 'fist': 4, 'four': 5, 'like': 6, 'mute': 7, 'ok': 8, 'one': 9, 'palm': 10, 'peace': 11, 'peace_inverted': 12, 'rock': 13, 'stop': 14, 'stop_inverted': 15, 'three': 16, 'three2': 17, 'two_up': 18, 'two_up_inverted': 19}&gt;</code></pre>
<blockquote class="blockquote">
<p><strong>Note:</strong> The <code>background</code> class is not included in the final model.</p>
</blockquote>
</section>
<section id="create-dataset-parser" class="level2">
<h2 class="anchored" data-anchor-id="create-dataset-parser">Create Dataset Parser</h2>
<p>Now we can create a custom <code>Parser</code> class that tells IceVision how to read the dataset.</p>
<p><strong>View template for an object detection record</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">template_record <span class="op" style="color: #5E5E5E;">=</span> ObjectDetectionRecord()</span>
<span id="cb37-2">template_record</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Image size None
    - Record ID: None
    - Filepath: None
    - Img: None
detection: 
    - Class Map: None
    - Labels: []
    - BBoxes: []</code></pre>
<p><strong>View template for an object detection parser</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">Parser.generate_template(template_record)</span></code></pre></div>
<pre class="text"><code>class MyParser(Parser):
    def __init__(self, template_record):
        super().__init__(template_record=template_record)
    def __iter__(self) -&gt; Any:
    def __len__(self) -&gt; int:
    def record_id(self, o: Any) -&gt; Hashable:
    def parse_fields(self, o: Any, record: BaseRecord, is_new: bool):
        record.set_img_size(&lt;ImgSize&gt;)
        record.set_filepath(&lt;Union[str, Path]&gt;)
        record.detection.set_class_map(&lt;ClassMap&gt;)
        record.detection.add_labels(&lt;Sequence[Hashable]&gt;)
        record.detection.add_bboxes(&lt;Sequence[BBox]&gt;)</code></pre>
<p><strong>Define custom parser class</strong></p>
<p>As mentioned earlier, we need the dimensions for an image to scale the corresponding bounding box information. The dataset contains images with different resolutions, so we need to check for each image.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">class</span> HagridParser(Parser):</span>
<span id="cb41-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, template_record, annotations_df, img_dict, class_map):</span>
<span id="cb41-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(template_record<span class="op" style="color: #5E5E5E;">=</span>template_record)</span>
<span id="cb41-4">        <span class="va" style="color: #111111;">self</span>.img_dict <span class="op" style="color: #5E5E5E;">=</span> img_dict</span>
<span id="cb41-5">        <span class="va" style="color: #111111;">self</span>.df <span class="op" style="color: #5E5E5E;">=</span> annotations_df</span>
<span id="cb41-6">        <span class="va" style="color: #111111;">self</span>.class_map <span class="op" style="color: #5E5E5E;">=</span> class_map</span>
<span id="cb41-7">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__iter__</span>(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> Any:</span>
<span id="cb41-8">        <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.df.itertuples(): <span class="cf" style="color: #003B4F;">yield</span> o</span>
<span id="cb41-9">    </span>
<span id="cb41-10">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__len__</span>(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>: </span>
<span id="cb41-11">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.df)</span>
<span id="cb41-12">    </span>
<span id="cb41-13">    <span class="kw" style="color: #003B4F;">def</span> record_id(<span class="va" style="color: #111111;">self</span>, o: Any) <span class="op" style="color: #5E5E5E;">-&gt;</span> Hashable:</span>
<span id="cb41-14">        <span class="cf" style="color: #003B4F;">return</span> o.Index</span>
<span id="cb41-15">    </span>
<span id="cb41-16">    <span class="kw" style="color: #003B4F;">def</span> parse_fields(<span class="va" style="color: #111111;">self</span>, o: Any, record: BaseRecord, is_new: <span class="bu" style="color: null;">bool</span>):</span>
<span id="cb41-17">        </span>
<span id="cb41-18">        filepath <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img_dict[o.Index]</span>
<span id="cb41-19">        </span>
<span id="cb41-20">        width, height <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(filepath).convert(<span class="st" style="color: #20794D;">'RGB'</span>).size</span>
<span id="cb41-21">        </span>
<span id="cb41-22">        record.set_img_size(ImgSize(width<span class="op" style="color: #5E5E5E;">=</span>width, height<span class="op" style="color: #5E5E5E;">=</span>height))</span>
<span id="cb41-23">        record.set_filepath(filepath)</span>
<span id="cb41-24">        record.detection.set_class_map(<span class="va" style="color: #111111;">self</span>.class_map)</span>
<span id="cb41-25">        </span>
<span id="cb41-26">        record.detection.add_labels(o.labels)</span>
<span id="cb41-27">        bbox_list <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb41-28">        </span>
<span id="cb41-29">        <span class="cf" style="color: #003B4F;">for</span> i, label <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(o.labels):</span>
<span id="cb41-30">            x <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span>width</span>
<span id="cb41-31">            y <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span>height</span>
<span id="cb41-32">            w <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">2</span>]<span class="op" style="color: #5E5E5E;">*</span>width</span>
<span id="cb41-33">            h <span class="op" style="color: #5E5E5E;">=</span> o.bboxes[i][<span class="dv" style="color: #AD0000;">3</span>]<span class="op" style="color: #5E5E5E;">*</span>height</span>
<span id="cb41-34">            bbox_list.append( BBox.from_xywh(x, y, w, h))</span>
<span id="cb41-35">        record.detection.add_bboxes(bbox_list)</span>
<span id="cb41-36">            </span></code></pre></div>
<p><strong>Create a custom parser object</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">parser <span class="op" style="color: #5E5E5E;">=</span> HagridParser(template_record, annotation_df, img_dict, class_map)</span>
<span id="cb42-2"><span class="bu" style="color: null;">len</span>(parser)</span></code></pre></div>
<pre class="text"><code>31833</code></pre>
<p><strong>Parse annotations to create records</strong></p>
<p>We’ll randomly split the samples into training and validation sets.</p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;"># Randomly split our data into train/valid</span></span>
<span id="cb44-2">data_splitter <span class="op" style="color: #5E5E5E;">=</span> RandomSplitter([<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.2</span>])</span>
<span id="cb44-3"></span>
<span id="cb44-4">train_records, valid_records <span class="op" style="color: #5E5E5E;">=</span> parser.parse(data_splitter, cache_filepath<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-cache.pkl'</span>)</span></code></pre></div>
<p><strong>Inspect training records</strong></p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">train_records[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Filepath: /mnt/980SSD_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_one/2507aacb-43d2-4114-91f1-008e3c7a181c.jpg
    - Img: None
    - Record ID: 2507aacb-43d2-4114-91f1-008e3c7a181c
    - Image size ImgSize(width=640, height=853)
detection: 
    - BBoxes: [&lt;BBox (xmin:153.0572608, ymin:197.40873228, xmax:213.5684992, ymax:320.45228481000004)&gt;, &lt;BBox (xmin:474.20276479999995, ymin:563.67557885, xmax:520.8937472, ymax:657.61167499)&gt;]
    - Class Map: &lt;ClassMap: {'background': 0, 'call': 1, 'no_gesture': 2, 'dislike': 3, 'fist': 4, 'four': 5, 'like': 6, 'mute': 7, 'ok': 8, 'one': 9, 'palm': 10, 'peace': 11, 'peace_inverted': 12, 'rock': 13, 'stop': 14, 'stop_inverted': 15, 'three': 16, 'three2': 17, 'two_up': 18, 'two_up_inverted': 19}&gt;
    - Labels: [9, 2]</code></pre>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">show_record(train_records[<span class="dv" style="color: #AD0000;">0</span>], figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>), display_label<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> )</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_59_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">show_records(train_records[<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">4</span>], ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>,display_label<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_60_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
</section>
<section id="define-dataloader-objects" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloader-objects">Define DataLoader Objects</h2>
<p>The YOLOX model examines an input image using the stride values <code>[8, 16, 32]</code> to detect objects of various sizes.</p>
<p>The max number of detections depends on the input resolution and these stride values. Given a <code>384x512</code> image, the model will make <code>(384/8)*(512/8) + (384/16)*(512/16) + (384/32)*(512/32) = 4032</code> predictions. Although, many of those predictions get filtered out during post-processing.</p>
<p>Here, we can see the difference in results when using a single stride value in isolation with a YOLOX model trained on the <a href="https://cocodataset.org/#home">COCO</a> dataset.</p>
<p><strong>Stride 8</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stride_8_demo.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stride_8_demo</figcaption><p></p>
</figure>
</div>
<p><strong>Stride 16</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stride_16_demo.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stride_16_demo</figcaption><p></p>
</figure>
</div>
<p><strong>Stride 32</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/stride_32_demo.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stride_32_demo</figcaption><p></p>
</figure>
</div>
<p><strong>Define stride values</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">strides <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">32</span>]</span>
<span id="cb49-2">max_stride <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(strides)</span></code></pre></div>
<p><strong>Select a multiple of the max stride value as the input resolution</strong></p>
<p>We need to set the input height and width to multiples of the highest stride value (i.e., 32).</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">[max_stride<span class="op" style="color: #5E5E5E;">*</span>i <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">21</span>)]</span></code></pre></div>
<pre class="text"><code>[224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640] </code></pre>
<p><strong>Define input resolution</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">image_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">384</span></span>
<span id="cb52-2">presize <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> You can lower the image_size to reduce training time at the cost of a potential decrease in accuracy.</p>
</blockquote>
<p><strong>Define Transforms</strong></p>
<p>IceVision provides several default methods for data augmentation to help the model generalize. It automatically updates the bounding box information for an image based on the applied augmentations.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">pd.DataFrame(tfms.A.aug_tfms(size<span class="op" style="color: #5E5E5E;">=</span>image_size, presize<span class="op" style="color: #5E5E5E;">=</span>presize))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
SmallestMaxSize(always_apply=False, p=1, max_size=512, interpolation=1)
</td>
</tr>
<tr>
<th>
1
</th>
<td>
HorizontalFlip(always_apply=False, p=0.5)
</td>
</tr>
<tr>
<th>
2
</th>
<td>
ShiftScaleRotate(always_apply=False, p=0.5, shift_limit_x=(-0.0625, 0.0625), shift_limit_y=(-0.0625, 0.0625), scale_limit=(-0.09999999999999998, 0.10000000000000009), rotate_limit=(-15, 15), interpolation=1, border_mode=4, value=None, mask_value=None)
</td>
</tr>
<tr>
<th>
3
</th>
<td>
RGBShift(always_apply=False, p=0.5, r_shift_limit=(-10, 10), g_shift_limit=(-10, 10), b_shift_limit=(-10, 10))
</td>
</tr>
<tr>
<th>
4
</th>
<td>
RandomBrightnessContrast(always_apply=False, p=0.5, brightness_limit=(-0.2, 0.2), contrast_limit=(-0.2, 0.2), brightness_by_max=True)
</td>
</tr>
<tr>
<th>
5
</th>
<td>
Blur(always_apply=False, p=0.5, blur_limit=(1, 3))
</td>
</tr>
<tr>
<th>
6
</th>
<td>
OneOrOther([RandomSizedBBoxSafeCrop(always_apply=False, p=0.5, height=384, width=384, erosion_rate=0.0, interpolation=1),LongestMaxSize(always_apply=False, p=1, max_size=384, interpolation=1),], p=0.5)
</td>
</tr>
<tr>
<th>
7
</th>
<td>
PadIfNeeded(always_apply=False, p=1.0, min_height=384, min_width=384, pad_height_divisor=None, pad_width_divisor=None, border_mode=0, value=[124, 116, 104], mask_value=None)
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">pd.DataFrame(tfms.A.resize_and_pad(size<span class="op" style="color: #5E5E5E;">=</span>image_size))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
LongestMaxSize(always_apply=False, p=1, max_size=384, interpolation=1)
</td>
</tr>
<tr>
<th>
1
</th>
<td>
PadIfNeeded(always_apply=False, p=1.0, min_height=384, min_width=384, pad_height_divisor=None, pad_width_divisor=None, border_mode=0, value=[124, 116, 104], mask_value=None)
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">train_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.aug_tfms(size<span class="op" style="color: #5E5E5E;">=</span>image_size, presize<span class="op" style="color: #5E5E5E;">=</span>presize), tfms.A.Normalize()])</span>
<span id="cb55-2">valid_tfms <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;">*</span>tfms.A.resize_and_pad(image_size), tfms.A.Normalize()])</span></code></pre></div>
<p><strong>Get normalization stats</strong></p>
<p>We can extract the normalization stats from the <code>tfms.A.Normalize()</code> method for future use. We’ll use these same stats when performing inference with the trained model.</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">mean <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Normalize().mean</span>
<span id="cb56-2">std <span class="op" style="color: #5E5E5E;">=</span> tfms.A.Normalize().std</span>
<span id="cb56-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p><strong>Define Datasets</strong></p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">train_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset(train_records, train_tfms)</span>
<span id="cb58-2">valid_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset(valid_records, valid_tfms)</span>
<span id="cb58-3">train_ds, valid_ds</span></code></pre></div>
<pre class="text"><code>(&lt;Dataset with 25466 items&gt;, &lt;Dataset with 6367 items&gt;)</code></pre>
<p><strong>Apply augmentations to a training sample</strong></p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">samples <span class="op" style="color: #5E5E5E;">=</span> [train_ds[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">3</span>)]</span>
<span id="cb60-2">show_samples(samples, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_76_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Define model type</strong></p>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">model_type <span class="op" style="color: #5E5E5E;">=</span> models.mmdet.yolox</span></code></pre></div>
<p><strong>Define backbone</strong></p>
<p>We’ll use a model pretrained on the COCO dataset rather than train a new model from scratch.</p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">backbone <span class="op" style="color: #5E5E5E;">=</span> model_type.backbones.yolox_tiny_8x8(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb62-2">pd.DataFrame.from_dict(backbone.__dict__, orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
model_name
</th>
<td>
yolox
</td>
</tr>
<tr>
<th>
config_path
</th>
<td>
/home/innom-dt/.icevision/mmdetection_configs/mmdetection_configs-2.16.0/configs/yolox/yolox_tiny_8x8_300e_coco.py
</td>
</tr>
<tr>
<th>
weights_url
</th>
<td>
https://download.openmmlab.com/mmdetection/v2.0/yolox/yolox_tiny_8x8_300e_coco/yolox_tiny_8x8_300e_coco_20210806_234250-4ff3b67e.pth
</td>
</tr>
<tr>
<th>
pretrained
</th>
<td>
True
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">32</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Adjust the batch size based on the available GPU memory.</p>
</blockquote>
<p><strong>Define DataLoaders</strong></p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">train_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.train_dl(train_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb64-2">valid_dl <span class="op" style="color: #5E5E5E;">=</span> model_type.valid_dl(valid_ds, batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Be careful when increasing the number of workers. There is a bug that significantly increases system memory usage with more workers.</p>
</blockquote>
</section>
<section id="finetune-the-model" class="level2">
<h2 class="anchored" data-anchor-id="finetune-the-model">Finetune the Model</h2>
<p>Now, we can move on to training the model.</p>
<p><strong>Instantiate the model</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">model <span class="op" style="color: #5E5E5E;">=</span> model_type.model(backbone<span class="op" style="color: #5E5E5E;">=</span>backbone(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>), num_classes<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(parser.class_map)) </span></code></pre></div>
<p><strong>Define metrics</strong></p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">metrics <span class="op" style="color: #5E5E5E;">=</span> [COCOMetric(metric_type<span class="op" style="color: #5E5E5E;">=</span>COCOMetricType.bbox)]</span></code></pre></div>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">learn <span class="op" style="color: #5E5E5E;">=</span> model_type.fastai.learner(dls<span class="op" style="color: #5E5E5E;">=</span>[train_dl, valid_dl], model<span class="op" style="color: #5E5E5E;">=</span>model, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics)</span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">learn.lr_find()</span></code></pre></div>
<pre class="text"><code>SuggestedLRs(valley=0.0012022644514217973)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_92_3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1e-3</span></span></code></pre></div>
<p><strong>Define number of epochs</strong></p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span></code></pre></div>
<p><strong>Finetune model</strong></p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">learn.fine_tune(epochs, lr, freeze_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
5.965206
</td>
<td>
5.449240
</td>
<td>
0.343486
</td>
<td>
03:31
</td>
</tr>
</tbody>

</table>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
3.767774
</td>
<td>
3.712888
</td>
<td>
0.572857
</td>
<td>
03:53
</td>
</tr>
<tr>
<td>
1
</td>
<td>
3.241024
</td>
<td>
3.204471
</td>
<td>
0.615708
</td>
<td>
03:50
</td>
</tr>
<tr>
<td>
2
</td>
<td>
2.993548
</td>
<td>
3.306303
</td>
<td>
0.578024
</td>
<td>
03:48
</td>
</tr>
<tr>
<td>
3
</td>
<td>
2.837985
</td>
<td>
3.157353
</td>
<td>
0.607766
</td>
<td>
03:51
</td>
</tr>
<tr>
<td>
4
</td>
<td>
2.714989
</td>
<td>
2.684248
</td>
<td>
0.687850
</td>
<td>
03:52
</td>
</tr>
<tr>
<td>
5
</td>
<td>
2.614549
</td>
<td>
2.545124
</td>
<td>
0.708479
</td>
<td>
03:49
</td>
</tr>
<tr>
<td>
6
</td>
<td>
2.466678
</td>
<td>
2.597708
</td>
<td>
0.677954
</td>
<td>
03:54
</td>
</tr>
<tr>
<td>
7
</td>
<td>
2.395620
</td>
<td>
2.459959
</td>
<td>
0.707709
</td>
<td>
03:53
</td>
</tr>
<tr>
<td>
8
</td>
<td>
2.295367
</td>
<td>
2.621239
</td>
<td>
0.679657
</td>
<td>
03:48
</td>
</tr>
<tr>
<td>
9
</td>
<td>
2.201542
</td>
<td>
2.636252
</td>
<td>
0.681469
</td>
<td>
03:47
</td>
</tr>
<tr>
<td>
10
</td>
<td>
2.177531
</td>
<td>
2.352600
</td>
<td>
0.723354
</td>
<td>
03:48
</td>
</tr>
<tr>
<td>
11
</td>
<td>
2.086292
</td>
<td>
2.376842
</td>
<td>
0.726306
</td>
<td>
03:47
</td>
</tr>
<tr>
<td>
12
</td>
<td>
2.009476
</td>
<td>
2.424167
</td>
<td>
0.712507
</td>
<td>
03:46
</td>
</tr>
<tr>
<td>
13
</td>
<td>
1.951761
</td>
<td>
2.324901
</td>
<td>
0.730893
</td>
<td>
03:49
</td>
</tr>
<tr>
<td>
14
</td>
<td>
1.916571
</td>
<td>
2.243153
</td>
<td>
0.739224
</td>
<td>
03:45
</td>
</tr>
<tr>
<td>
15
</td>
<td>
1.834777
</td>
<td>
2.208674
</td>
<td>
0.747359
</td>
<td>
03:52
</td>
</tr>
<tr>
<td>
16
</td>
<td>
1.802138
</td>
<td>
2.120061
</td>
<td>
0.757734
</td>
<td>
04:00
</td>
</tr>
<tr>
<td>
17
</td>
<td>
1.764611
</td>
<td>
2.187056
</td>
<td>
0.746236
</td>
<td>
03:53
</td>
</tr>
<tr>
<td>
18
</td>
<td>
1.753366
</td>
<td>
2.143199
</td>
<td>
0.754093
</td>
<td>
04:03
</td>
</tr>
<tr>
<td>
19
</td>
<td>
1.735740
</td>
<td>
2.154315
</td>
<td>
0.751422
</td>
<td>
03:55
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-model-for-export" class="level2">
<h2 class="anchored" data-anchor-id="prepare-model-for-export">Prepare Model for Export</h2>
<p>Once the model finishes training, we need to modify it before exporting it. First, we’ll prepare an input image to feed to the model.</p>
<p><strong>Define method to convert a PIL Image to a Pytorch Tensor</strong></p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;">def</span> img_to_tensor(img:PIL.Image, mean<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.485</span>, <span class="fl" style="color: #AD0000;">0.456</span>, <span class="fl" style="color: #AD0000;">0.406</span>], std<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.229</span>, <span class="fl" style="color: #AD0000;">0.224</span>, <span class="fl" style="color: #AD0000;">0.225</span>]):</span>
<span id="cb73-2">    <span class="co" style="color: #5E5E5E;"># Convert image to tensor</span></span>
<span id="cb73-3">    img_tensor <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor(np.array(img)).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb73-4">    <span class="co" style="color: #5E5E5E;"># Scale pixels values from [0,255] to [0,1]</span></span>
<span id="cb73-5">    scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb73-6">    <span class="co" style="color: #5E5E5E;"># Prepare normalization tensors</span></span>
<span id="cb73-7">    mean_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(mean).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb73-8">    std_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(std).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb73-9">    <span class="co" style="color: #5E5E5E;"># Normalize tensor    </span></span>
<span id="cb73-10">    normalized_tensor <span class="op" style="color: #5E5E5E;">=</span> (scaled_tensor <span class="op" style="color: #5E5E5E;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;">/</span> std_tensor</span>
<span id="cb73-11">    <span class="co" style="color: #5E5E5E;"># Batch tensor</span></span>
<span id="cb73-12">    <span class="cf" style="color: #003B4F;">return</span> normalized_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">annotation_df.iloc[<span class="dv" style="color: #AD0000;">4</span>].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
00973fac-440e-4a56-b60c-2a06d5fb155d
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
bboxes
</th>
<td>
[[0.40980118, 0.38144198, 0.08338464, 0.06229785], [0.6122035100000001, 0.6780825500000001, 0.04700606, 0.07640522]]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[call, no_gesture]
</td>
</tr>
<tr>
<th>
leading_hand
</th>
<td>
right
</td>
</tr>
<tr>
<th>
leading_conf
</th>
<td>
1
</td>
</tr>
<tr>
<th>
user_id
</th>
<td>
4bb3ee1748be58e05bd1193939735e57bb3c0ca59a7ee38901744d6b9e94632e
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get the test image file path</strong></p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">test_file <span class="op" style="color: #5E5E5E;">=</span> img_dict[annotation_df.iloc[<span class="dv" style="color: #AD0000;">4</span>].name]</span>
<span id="cb75-2">test_file</span></code></pre></div>
<pre class="text"><code>Path('/home/innom-dt/.fastai/archive/../data/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00973fac-440e-4a56-b60c-2a06d5fb155d.jpg')</code></pre>
<p><strong>Load the test image</strong></p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file).convert(<span class="st" style="color: #20794D;">'RGB'</span>)</span>
<span id="cb77-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_108_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Calculate valid input dimensions</strong></p>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">input_h <span class="op" style="color: #5E5E5E;">=</span> test_img.height <span class="op" style="color: #5E5E5E;">-</span> (test_img.height <span class="op" style="color: #5E5E5E;">%</span> max_stride)</span>
<span id="cb78-2">input_w <span class="op" style="color: #5E5E5E;">=</span> test_img.width <span class="op" style="color: #5E5E5E;">-</span> (test_img.width <span class="op" style="color: #5E5E5E;">%</span> max_stride)</span>
<span id="cb78-3">input_h, input_w</span></code></pre></div>
<pre class="text"><code>(512, 384)</code></pre>
<p><strong>Crop image to supported resolution</strong></p>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">test_img <span class="op" style="color: #5E5E5E;">=</span> test_img.crop_pad((input_w, input_h))</span>
<span id="cb80-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_112_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Convert image to a normalized tensor</strong></p>
<div class="sourceCode" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">test_tensor <span class="op" style="color: #5E5E5E;">=</span> img_to_tensor(test_img, mean<span class="op" style="color: #5E5E5E;">=</span>mean, std<span class="op" style="color: #5E5E5E;">=</span>std)</span>
<span id="cb81-2">test_tensor.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 384])</code></pre>
<p><strong>Inspect raw model output</strong></p>
<p>Before making any changes, let’s inspect the current model output.</p>
<div class="sourceCode" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">model_output <span class="op" style="color: #5E5E5E;">=</span> model.cpu().forward_dummy(test_tensor.cpu())</span></code></pre></div>
<p>The model currently organizes the output into three tuples. The first tuple contains three tensors storing the object class predictions using the three stride values. Recall that there are 19 object classes, excluding the background class added by IceVision.</p>
<p>The second tuple contains three tensors with the predicted bounding box coordinates and dimensions using the three stride values.</p>
<p>The third tuple contains three tensors with the confidence score for whether an object is present in a given section of the input image using the three stride values.</p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="cf" style="color: #003B4F;">for</span> raw_out <span class="kw" style="color: #003B4F;">in</span> model_output:</span>
<span id="cb84-2">    <span class="cf" style="color: #003B4F;">for</span> out <span class="kw" style="color: #003B4F;">in</span> raw_out:</span>
<span id="cb84-3">        <span class="bu" style="color: null;">print</span>(out.shape)</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 19, 64, 48])
torch.Size([1, 19, 32, 24])
torch.Size([1, 19, 16, 12])
torch.Size([1, 4, 64, 48])
torch.Size([1, 4, 32, 24])
torch.Size([1, 4, 16, 12])
torch.Size([1, 1, 64, 48])
torch.Size([1, 1, 32, 24])
torch.Size([1, 1, 16, 12])</code></pre>
<ul>
<li><p><code>512/8 = 64</code>, <code>512/16 = 32</code>, <code>512/32 = 16</code></p></li>
<li><p><code>384/8 = 48</code>, <code>384/16 = 24</code>, <code>384/32 = 12</code></p></li>
</ul>
<p>If we examine the end of a model from the official <a href="https://github.com/Megvii-BaseDetection/YOLOX/tree/main/demo/ONNXRuntime">YOLOX repo</a>, we can see the output looks a bit different.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/yolox_official_model.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">yolox_official_model</figcaption><p></p>
</figure>
</div>
<p>The official model first passes the tensors with the object class and “objectness” scores through sigmoid functions. It then combines the three tensors for each stride value into a single tensor before combining the resulting three tensors into a single flat array.</p>
<p>We can apply these same steps to our model by adding a new forward function using <a href="https://machinelearningmastery.com/monkey-patching-python-code/">monkey patching</a>.</p>
<p><strong>Define custom forward function for exporting the model</strong></p>
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="kw" style="color: #003B4F;">def</span> forward_export(<span class="va" style="color: #111111;">self</span>, input_tensor):</span>
<span id="cb86-2">    <span class="co" style="color: #5E5E5E;"># Get raw model output</span></span>
<span id="cb86-3">    model_output <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.forward_dummy(input_tensor.cpu())</span>
<span id="cb86-4">    <span class="co" style="color: #5E5E5E;"># Extract class scores</span></span>
<span id="cb86-5">    cls_scores <span class="op" style="color: #5E5E5E;">=</span> model_output[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb86-6">    <span class="co" style="color: #5E5E5E;"># Extract bounding box predictions</span></span>
<span id="cb86-7">    bbox_preds <span class="op" style="color: #5E5E5E;">=</span> model_output[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb86-8">    <span class="co" style="color: #5E5E5E;"># Extract objectness scores</span></span>
<span id="cb86-9">    objectness <span class="op" style="color: #5E5E5E;">=</span> model_output[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb86-10">    </span>
<span id="cb86-11">    stride_8_cls <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(cls_scores[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb86-12">    stride_8_bbox <span class="op" style="color: #5E5E5E;">=</span> bbox_preds[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb86-13">    stride_8_objectness <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(objectness[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb86-14">    stride_8_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_8_bbox, stride_8_objectness, stride_8_cls), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb86-15">    stride_8_flat <span class="op" style="color: #5E5E5E;">=</span> torch.flatten(stride_8_cat, start_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-16"></span>
<span id="cb86-17">    stride_16_cls <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(cls_scores[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb86-18">    stride_16_bbox <span class="op" style="color: #5E5E5E;">=</span> bbox_preds[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb86-19">    stride_16_objectness <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(objectness[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb86-20">    stride_16_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_16_bbox, stride_16_objectness, stride_16_cls), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb86-21">    stride_16_flat <span class="op" style="color: #5E5E5E;">=</span> torch.flatten(stride_16_cat, start_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-22"></span>
<span id="cb86-23">    stride_32_cls <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(cls_scores[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb86-24">    stride_32_bbox <span class="op" style="color: #5E5E5E;">=</span> bbox_preds[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb86-25">    stride_32_objectness <span class="op" style="color: #5E5E5E;">=</span> torch.sigmoid(objectness[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb86-26">    stride_32_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_32_bbox, stride_32_objectness, stride_32_cls), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb86-27">    stride_32_flat <span class="op" style="color: #5E5E5E;">=</span> torch.flatten(stride_32_cat, start_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-28"></span>
<span id="cb86-29">    full_cat <span class="op" style="color: #5E5E5E;">=</span> torch.cat((stride_8_flat, stride_16_flat, stride_32_flat), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb86-30"></span>
<span id="cb86-31">    <span class="cf" style="color: #003B4F;">return</span> full_cat.permute(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<p><strong>Add custom forward function to model</strong></p>
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">model.forward_export <span class="op" style="color: #5E5E5E;">=</span> forward_export.<span class="fu" style="color: #4758AB;">__get__</span>(model)</span></code></pre></div>
<p><strong>Verify output shape</strong></p>
<p>Let’s verify the new forward function works as intended. The output should have a batch size of 1 and contain 4032 elements, given the input dimensions (calculated earlier), each with 24 values (19 classes + 1 objectness score + 4 bounding box values).</p>
<div class="sourceCode" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">model.forward_export(test_tensor).shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 4032, 24])</code></pre>
<p>We need to replace the current forward function before exporting the model.</p>
<p><strong>Create a backup of the default model forward function</strong></p>
<p>We can create a backup of the original forward function just in case.</p>
<div class="sourceCode" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">origin_forward <span class="op" style="color: #5E5E5E;">=</span> model.forward</span></code></pre></div>
<p><strong>Replace model forward function with custom function</strong></p>
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">model.forward <span class="op" style="color: #5E5E5E;">=</span> model.forward_export</span></code></pre></div>
<p><strong>Verify output shape</strong></p>
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">model(test_tensor).shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 4032, 24])</code></pre>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>The OpenVINO model conversion script does not support PyTorch models, so we need to export the trained model to ONNX. We can then convert the ONNX model to OpenVINO’s IR format.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(model)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb94-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>'hagrid-sample-30k-384p-YOLOX.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<div class="sourceCode" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">torch.onnx.export(model,</span>
<span id="cb96-2">                  test_tensor,</span>
<span id="cb96-3">                  onnx_file_name,</span>
<span id="cb96-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb96-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>,</span>
<span id="cb96-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb96-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb96-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb96-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb96-10">                 )</span></code></pre></div>
<p><strong>Simplify ONNX model</strong></p>
<p>As mentioned earlier, this step is entirely optional.</p>
<div class="sourceCode" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="im" style="color: #00769E;">import</span> onnx</span>
<span id="cb97-2"><span class="im" style="color: #00769E;">from</span> onnxsim <span class="im" style="color: #00769E;">import</span> simplify</span></code></pre></div>
<div class="sourceCode" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="co" style="color: #5E5E5E;"># load model</span></span>
<span id="cb98-2">onnx_model <span class="op" style="color: #5E5E5E;">=</span> onnx.load(onnx_file_name)</span>
<span id="cb98-3"></span>
<span id="cb98-4"><span class="co" style="color: #5E5E5E;"># convert model</span></span>
<span id="cb98-5">model_simp, check <span class="op" style="color: #5E5E5E;">=</span> simplify(onnx_model)</span>
<span id="cb98-6"></span>
<span id="cb98-7"><span class="co" style="color: #5E5E5E;"># save model</span></span>
<span id="cb98-8">onnx.save(model_simp, onnx_file_name)</span></code></pre></div>
<p>Now we can export the ONNX model to OpenVINO’s IR format.</p>
<p><strong>Import OpenVINO Dependencies</strong></p>
<div class="sourceCode" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1"><span class="im" style="color: #00769E;">from</span> openvino.runtime <span class="im" style="color: #00769E;">import</span> Core</span></code></pre></div>
<div class="sourceCode" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Markdown, display</span></code></pre></div>
<p><strong>Define export directory</strong></p>
<div class="sourceCode" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">output_dir <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'./'</span>)</span>
<span id="cb101-2">output_dir</span></code></pre></div>
<pre class="text"><code>Path('.')</code></pre>
<p><strong>Define path for OpenVINO IR xml model file</strong></p>
<p>The conversion script generates an XML file containing information about the model architecture and a BIN file that stores the trained weights. We need both files to perform inference. OpenVINO uses the same name for the BIN file as provided for the XML file.</p>
<div class="sourceCode" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">ir_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">.</span>split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.xml"</span>)</span>
<span id="cb103-2">ir_path</span></code></pre></div>
<pre class="text"><code>Path('hagrid-sample-30k-384p-YOLOX.xml')</code></pre>
<p><strong>Define arguments for model conversion script</strong></p>
<p>OpenVINO provides the option to include the normalization stats in the IR model. That way, we don’t need to account for different normalization stats when performing inference with multiple models. We can also convert the model to FP16 precision to reduce file size and improve inference speed.</p>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;"># Construct the command for Model Optimizer</span></span>
<span id="cb105-2">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""mo</span></span>
<span id="cb105-3"><span class="ss" style="color: #20794D;">                 --input_model "</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-4"><span class="ss" style="color: #20794D;">                 --input_shape "[1,3, </span><span class="sc" style="color: #5E5E5E;">{</span>image_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span>image_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span></span>
<span id="cb105-5"><span class="ss" style="color: #20794D;">                 --mean_values="</span><span class="sc" style="color: #5E5E5E;">{</span>mean<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-6"><span class="ss" style="color: #20794D;">                 --scale_values="</span><span class="sc" style="color: #5E5E5E;">{</span>std<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-7"><span class="ss" style="color: #20794D;">                 --data_type FP16</span></span>
<span id="cb105-8"><span class="ss" style="color: #20794D;">                 --output_dir "</span><span class="sc" style="color: #5E5E5E;">{</span>output_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb105-9"><span class="ss" style="color: #20794D;">                 """</span></span>
<span id="cb105-10">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span>.join(mo_command.split())</span>
<span id="cb105-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model Optimizer command to convert the ONNX model to OpenVINO:"</span>)</span>
<span id="cb105-12">display(Markdown(<span class="ss" style="color: #20794D;">f"`</span><span class="sc" style="color: #5E5E5E;">{</span>mo_command<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`"</span>))</span></code></pre></div>
<pre class="text"><code>Model Optimizer command to convert the ONNX model to OpenVINO:</code></pre>
<div class="sourceCode" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb107-1"><span class="ex" style="color: null;">mo</span> <span class="at" style="color: #657422;">--input_model</span> <span class="st" style="color: #20794D;">"hagrid-sample-30k-384p-YOLOX.onnx"</span> <span class="at" style="color: #657422;">--input_shape</span> <span class="st" style="color: #20794D;">"[1,3, 384, 384]"</span> <span class="at" style="color: #657422;">--mean_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.485, 0.456, 0.406)"</span> <span class="at" style="color: #657422;">--scale_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.229, 0.224, 0.225)"</span> <span class="at" style="color: #657422;">--data_type</span> FP16 <span class="at" style="color: #657422;">--output_dir</span> <span class="st" style="color: #20794D;">"."</span></span></code></pre></div>
<p><strong>Convert ONNX model to OpenVINO IR</strong></p>
<div class="sourceCode" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> ir_path.exists():</span>
<span id="cb108-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Exporting ONNX model to IR... This may take a few minutes."</span>)</span>
<span id="cb108-3">    mo_result <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sx $mo_command</span>
<span id="cb108-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>.join(mo_result))</span>
<span id="cb108-5"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb108-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"IR model </span><span class="sc" style="color: #5E5E5E;">{</span>ir_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> already exists."</span>)</span></code></pre></div>
<pre class="text"><code>Exporting ONNX model to IR... This may take a few minutes.
Model Optimizer arguments:
Common parameters:
    - Path to the Input Model:  /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/hagrid-sample-30k-384p-YOLOX.onnx
    - Path for generated IR:    /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/.
    - IR output name:   hagrid-sample-30k-384p-YOLOX
    - Log level:    ERROR
    - Batch:    Not specified, inherited from the model
    - Input layers:     Not specified, inherited from the model
    - Output layers:    Not specified, inherited from the model
    - Input shapes:     [1,3, 384, 384]
    - Source layout:    Not specified
    - Target layout:    Not specified
    - Layout:   Not specified
    - Mean values:  (0.485, 0.456, 0.406)
    - Scale values:     (0.229, 0.224, 0.225)
    - Scale factor:     Not specified
    - Precision of IR:  FP16
    - Enable fusing:    True
    - User transformations:     Not specified
    - Reverse input channels:   False
    - Enable IR generation for fixed input shape:   False
    - Use the transformations config file:  None
Advanced parameters:
    - Force the usage of legacy Frontend of Model Optimizer for model conversion into IR:   False
    - Force the usage of new Frontend of Model Optimizer for model conversion into IR:  False
OpenVINO runtime found in:  /home/innom-dt/mambaforge/envs/icevision/lib/python3.8/site-packages/openvino
OpenVINO runtime version:   2022.1.0-7019-cdb9bec7210-releases/2022/1
Model Optimizer version:    2022.1.0-7019-cdb9bec7210-releases/2022/1
[ WARNING ]  
Detected not satisfied dependencies:
    numpy: installed: 1.23.1, required: &lt; 1.20

Please install required versions of components or run pip installation
pip install openvino-dev
[ SUCCESS ] Generated IR version 11 model.
[ SUCCESS ] XML file: /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/hagrid-sample-30k-384p-YOLOX.xml
[ SUCCESS ] BIN file: /media/innom-dt/Samsung_T3/Projects/GitHub/icevision-openvino-unity-tutorial/notebooks/hagrid-sample-30k-384p-YOLOX.bin
[ SUCCESS ] Total execution time: 0.47 seconds. 
[ SUCCESS ] Memory consumed: 115 MB. 
It's been a while, check for a new version of Intel(R) Distribution of OpenVINO(TM) toolkit here https://software.intel.com/content/www/us/en/develop/tools/openvino-toolkit/download.html?cid=other&amp;source=prod&amp;campid=ww_2022_bu_IOTG_OpenVINO-2022-1&amp;content=upg_all&amp;medium=organic or on the GitHub*
[ INFO ] The model was converted to IR v11, the latest model format that corresponds to the source DL framework input/output format. While IR v11 is backwards compatible with OpenVINO Inference Engine API v1.0, please use API v2.0 (as of 2022.1) to take advantage of the latest improvements in IR v11.
Find more information about API v2.0 and IR v11 at https://docs.openvino.ai</code></pre>
</section>
<section id="verify-openvino-inference" class="level2">
<h2 class="anchored" data-anchor-id="verify-openvino-inference">Verify OpenVINO Inference</h2>
<p>Now, we can verify the OpenVINO model works as desired using the test image.</p>
<p><strong>Get available OpenVINO compute devices</strong></p>
<div class="sourceCode" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb110-2">devices <span class="op" style="color: #5E5E5E;">=</span> ie.available_devices</span>
<span id="cb110-3"><span class="cf" style="color: #003B4F;">for</span> device <span class="kw" style="color: #003B4F;">in</span> devices:</span>
<span id="cb110-4">    device_name <span class="op" style="color: #5E5E5E;">=</span> ie.get_property(device_name<span class="op" style="color: #5E5E5E;">=</span>device, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FULL_DEVICE_NAME"</span>)</span>
<span id="cb110-5">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>device<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>device_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>CPU: 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz</code></pre>
<p><strong>Prepare input image for OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="co" style="color: #5E5E5E;"># Convert image to tensor</span></span>
<span id="cb112-2">img_tensor <span class="op" style="color: #5E5E5E;">=</span> torch.Tensor(np.array(test_img)).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb112-3"><span class="co" style="color: #5E5E5E;"># Scale pixels values from [0,255] to [0,1]</span></span>
<span id="cb112-4">scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span></code></pre></div>
<div class="sourceCode" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">input_image <span class="op" style="color: #5E5E5E;">=</span> scaled_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb113-2">input_image.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 384])</code></pre>
<p><strong>Test OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="co" style="color: #5E5E5E;"># Load the network in Inference Engine</span></span>
<span id="cb115-2">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb115-3">model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.read_model(model<span class="op" style="color: #5E5E5E;">=</span>ir_path)</span>
<span id="cb115-4">model_ir.reshape(input_image.shape)</span>
<span id="cb115-5">compiled_model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.compile_model(model<span class="op" style="color: #5E5E5E;">=</span>model_ir, device_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPU"</span>)</span>
<span id="cb115-6"></span>
<span id="cb115-7"><span class="co" style="color: #5E5E5E;"># Get input and output layers</span></span>
<span id="cb115-8">input_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.inputs))</span>
<span id="cb115-9">output_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.outputs))</span>
<span id="cb115-10"></span>
<span id="cb115-11"><span class="co" style="color: #5E5E5E;"># Run inference on the input image</span></span>
<span id="cb115-12">res_ir <span class="op" style="color: #5E5E5E;">=</span> compiled_model_ir([input_image])[output_layer_ir]</span></code></pre></div>
<div class="sourceCode" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">res_ir.shape</span></code></pre></div>
<pre class="text"><code>(1, 4032, 24)</code></pre>
<p>The output shape is correct, meaning we can move on to the post-processing steps.</p>
</section>
<section id="define-post-processing-steps" class="level2">
<h2 class="anchored" data-anchor-id="define-post-processing-steps">Define Post-processing Steps</h2>
<p>To process the model output, we need to iterate through each of the 4032 object proposals and save the ones that meet a user-defined confidence threshold (e.g., 50%). We then filter out the redundant proposals (i.e., detecting the same object multiple times) from that subset using <a href="https://learnopencv.com/non-maximum-suppression-theory-and-implementation-in-pytorch/">Non-Maximum Suppression (NMS)</a>.</p>
<p><strong>Define method to generate offset values to navigate the raw model output</strong></p>
<p>We’ll first define a method that generates offset values based on the input dimensions and stride values, which we can use to traverse the output array.</p>
<div class="sourceCode" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1"><span class="kw" style="color: #003B4F;">def</span> generate_grid_strides(height, width, strides<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">32</span>]):</span>
<span id="cb118-2">    </span>
<span id="cb118-3">    grid_strides <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb118-4"></span>
<span id="cb118-5">    <span class="co" style="color: #5E5E5E;"># Iterate through each stride value</span></span>
<span id="cb118-6">    <span class="cf" style="color: #003B4F;">for</span> stride <span class="kw" style="color: #003B4F;">in</span> strides:</span>
<span id="cb118-7">        <span class="co" style="color: #5E5E5E;"># Calculate the grid dimensions</span></span>
<span id="cb118-8">        grid_height <span class="op" style="color: #5E5E5E;">=</span> height <span class="op" style="color: #5E5E5E;">//</span> stride</span>
<span id="cb118-9">        grid_width <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">//</span> stride</span>
<span id="cb118-10"></span>
<span id="cb118-11">        <span class="co" style="color: #5E5E5E;"># Store each combination of grid coordinates</span></span>
<span id="cb118-12">        <span class="cf" style="color: #003B4F;">for</span> g1 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(grid_height):</span>
<span id="cb118-13">            </span>
<span id="cb118-14">            <span class="cf" style="color: #003B4F;">for</span> g0 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(grid_width):</span>
<span id="cb118-15">                grid_strides.append({<span class="st" style="color: #20794D;">'grid0'</span>:g0, <span class="st" style="color: #20794D;">'grid1'</span>:g1, <span class="st" style="color: #20794D;">'stride'</span>:stride })</span>
<span id="cb118-16">    </span>
<span id="cb118-17">    <span class="cf" style="color: #003B4F;">return</span> grid_strides</span></code></pre></div>
<p><strong>Generate offset values to navigate model output</strong></p>
<div class="sourceCode" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1">grid_strides <span class="op" style="color: #5E5E5E;">=</span> generate_grid_strides(test_img.height, test_img.width, strides)</span>
<span id="cb119-2"><span class="bu" style="color: null;">len</span>(grid_strides)</span></code></pre></div>
<pre class="text"><code>4032</code></pre>
<div class="sourceCode" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">pd.DataFrame(grid_strides).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
grid0
</th>
<th>
grid1
</th>
<th>
stride
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
<tr>
<th>
4
</th>
<td>
4
</td>
<td>
0
</td>
<td>
8
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define method to generate object detection proposals from the raw model output</strong></p>
<p>Next, we’ll define a method to iterate through the output array and decode the bounding box information for each object proposal. As mentioned earlier, we’ll only keep the ones with a high enough confidence score. The model predicts the center coordinates of a bounding box, but we’ll store the coordinates for the top-left corner as that is what the <code>ImageDraw.Draw.rectangle()</code> method expects as input.</p>
<div class="sourceCode" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1"><span class="kw" style="color: #003B4F;">def</span> generate_yolox_proposals(model_output, proposal_length, grid_strides, bbox_conf_thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.3</span>):</span>
<span id="cb122-2">    </span>
<span id="cb122-3">    proposals <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb122-4">    </span>
<span id="cb122-5">    <span class="co" style="color: #5E5E5E;"># Obtain the number of classes the model was trained to detect</span></span>
<span id="cb122-6">    num_classes <span class="op" style="color: #5E5E5E;">=</span> proposal_length <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb122-7"></span>
<span id="cb122-8">    <span class="cf" style="color: #003B4F;">for</span> anchor_idx <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(grid_strides)):</span>
<span id="cb122-9">        </span>
<span id="cb122-10">        <span class="co" style="color: #5E5E5E;"># Get the current grid and stride values</span></span>
<span id="cb122-11">        grid0 <span class="op" style="color: #5E5E5E;">=</span> grid_strides[anchor_idx][<span class="st" style="color: #20794D;">'grid0'</span>]</span>
<span id="cb122-12">        grid1 <span class="op" style="color: #5E5E5E;">=</span> grid_strides[anchor_idx][<span class="st" style="color: #20794D;">'grid1'</span>]</span>
<span id="cb122-13">        stride <span class="op" style="color: #5E5E5E;">=</span> grid_strides[anchor_idx][<span class="st" style="color: #20794D;">'stride'</span>]</span>
<span id="cb122-14"></span>
<span id="cb122-15">        <span class="co" style="color: #5E5E5E;"># Get the starting index for the current proposal</span></span>
<span id="cb122-16">        start_idx <span class="op" style="color: #5E5E5E;">=</span> anchor_idx <span class="op" style="color: #5E5E5E;">*</span> proposal_length</span>
<span id="cb122-17"></span>
<span id="cb122-18">        <span class="co" style="color: #5E5E5E;"># Get the coordinates for the center of the predicted bounding box</span></span>
<span id="cb122-19">        x_center <span class="op" style="color: #5E5E5E;">=</span> (model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> grid0) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-20">        y_center <span class="op" style="color: #5E5E5E;">=</span> (model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> grid1) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-21"></span>
<span id="cb122-22">        <span class="co" style="color: #5E5E5E;"># Get the dimensions for the predicted bounding box</span></span>
<span id="cb122-23">        w <span class="op" style="color: #5E5E5E;">=</span> np.exp(model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>]) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-24">        h <span class="op" style="color: #5E5E5E;">=</span> np.exp(model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>]) <span class="op" style="color: #5E5E5E;">*</span> stride</span>
<span id="cb122-25"></span>
<span id="cb122-26">        <span class="co" style="color: #5E5E5E;"># Calculate the coordinates for the upper left corner of the bounding box</span></span>
<span id="cb122-27">        x0 <span class="op" style="color: #5E5E5E;">=</span> x_center <span class="op" style="color: #5E5E5E;">-</span> w <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb122-28">        y0 <span class="op" style="color: #5E5E5E;">=</span> y_center <span class="op" style="color: #5E5E5E;">-</span> h <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb122-29"></span>
<span id="cb122-30">        <span class="co" style="color: #5E5E5E;"># Get the confidence score that an object is present</span></span>
<span id="cb122-31">        box_objectness <span class="op" style="color: #5E5E5E;">=</span> model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span>]</span>
<span id="cb122-32"></span>
<span id="cb122-33">        <span class="co" style="color: #5E5E5E;"># Initialize object struct with bounding box information</span></span>
<span id="cb122-34">        obj <span class="op" style="color: #5E5E5E;">=</span> { <span class="st" style="color: #20794D;">'x0'</span>:x0, <span class="st" style="color: #20794D;">'y0'</span>:y0, <span class="st" style="color: #20794D;">'width'</span>:w, <span class="st" style="color: #20794D;">'height'</span>:h, <span class="st" style="color: #20794D;">'label'</span>:<span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'prob'</span>:<span class="dv" style="color: #AD0000;">0</span> }</span>
<span id="cb122-35"></span>
<span id="cb122-36">        <span class="co" style="color: #5E5E5E;"># Find the object class with the highest confidence score</span></span>
<span id="cb122-37">        <span class="cf" style="color: #003B4F;">for</span> class_idx <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(num_classes):</span>
<span id="cb122-38">            </span>
<span id="cb122-39">            <span class="co" style="color: #5E5E5E;"># Get the confidence score for the current object class</span></span>
<span id="cb122-40">            box_cls_score <span class="op" style="color: #5E5E5E;">=</span> model_output[start_idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">5</span> <span class="op" style="color: #5E5E5E;">+</span> class_idx]</span>
<span id="cb122-41">            <span class="co" style="color: #5E5E5E;"># Calculate the final confidence score for the object proposal</span></span>
<span id="cb122-42">            box_prob <span class="op" style="color: #5E5E5E;">=</span> box_objectness <span class="op" style="color: #5E5E5E;">*</span> box_cls_score</span>
<span id="cb122-43">            </span>
<span id="cb122-44">            <span class="co" style="color: #5E5E5E;"># Check for the highest confidence score</span></span>
<span id="cb122-45">            <span class="cf" style="color: #003B4F;">if</span> (box_prob <span class="op" style="color: #5E5E5E;">&gt;</span> obj[<span class="st" style="color: #20794D;">'prob'</span>]):</span>
<span id="cb122-46">                obj[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> class_idx</span>
<span id="cb122-47">                obj[<span class="st" style="color: #20794D;">'prob'</span>] <span class="op" style="color: #5E5E5E;">=</span> box_prob</span>
<span id="cb122-48"></span>
<span id="cb122-49">        <span class="co" style="color: #5E5E5E;"># Only add object proposals with high enough confidence scores</span></span>
<span id="cb122-50">        <span class="cf" style="color: #003B4F;">if</span> obj[<span class="st" style="color: #20794D;">'prob'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> bbox_conf_thresh: proposals.append(obj)</span>
<span id="cb122-51">    </span>
<span id="cb122-52">    <span class="co" style="color: #5E5E5E;"># Sort the proposals based on the confidence score in descending order</span></span>
<span id="cb122-53">    proposals.sort(key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x:x[<span class="st" style="color: #20794D;">'prob'</span>], reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb122-54">    <span class="cf" style="color: #003B4F;">return</span> proposals</span></code></pre></div>
<p><strong>Define minimum confidence score for keeping bounding box proposals</strong></p>
<div class="sourceCode" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">bbox_conf_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span></code></pre></div>
<p><strong>Process raw model output</strong></p>
<div class="sourceCode" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">proposals <span class="op" style="color: #5E5E5E;">=</span> generate_yolox_proposals(res_ir.flatten(), res_ir.shape[<span class="dv" style="color: #AD0000;">2</span>], grid_strides, bbox_conf_thresh)</span>
<span id="cb124-2">proposals_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(proposals)</span>
<span id="cb124-3">proposals_df[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> proposals_df[<span class="st" style="color: #20794D;">'label'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: labels[x])</span>
<span id="cb124-4">proposals_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
x0
</th>
<th>
y0
</th>
<th>
width
</th>
<th>
height
</th>
<th>
label
</th>
<th>
prob
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
233.453819
</td>
<td>
345.319857
</td>
<td>
20.237036
</td>
<td>
39.237568
</td>
<td>
no_gesture
</td>
<td>
0.892190
</td>
</tr>
<tr>
<th>
1
</th>
<td>
233.411983
</td>
<td>
345.079270
</td>
<td>
20.298084
</td>
<td>
39.369030
</td>
<td>
no_gesture
</td>
<td>
0.883036
</td>
</tr>
<tr>
<th>
2
</th>
<td>
233.482836
</td>
<td>
345.070212
</td>
<td>
20.273870
</td>
<td>
39.556046
</td>
<td>
no_gesture
</td>
<td>
0.881625
</td>
</tr>
<tr>
<th>
3
</th>
<td>
233.226050
</td>
<td>
345.559044
</td>
<td>
20.653538
</td>
<td>
38.985397
</td>
<td>
no_gesture
</td>
<td>
0.876668
</td>
</tr>
<tr>
<th>
4
</th>
<td>
233.354270
</td>
<td>
345.466457
</td>
<td>
20.351070
</td>
<td>
38.968014
</td>
<td>
no_gesture
</td>
<td>
0.872296
</td>
</tr>
<tr>
<th>
5
</th>
<td>
153.331284
</td>
<td>
193.410838
</td>
<td>
38.274513
</td>
<td>
35.176327
</td>
<td>
call
</td>
<td>
0.870502
</td>
</tr>
<tr>
<th>
6
</th>
<td>
233.583658
</td>
<td>
345.261926
</td>
<td>
20.347435
</td>
<td>
39.517403
</td>
<td>
no_gesture
</td>
<td>
0.868382
</td>
</tr>
<tr>
<th>
7
</th>
<td>
153.666840
</td>
<td>
193.238544
</td>
<td>
38.145180
</td>
<td>
35.976635
</td>
<td>
call
</td>
<td>
0.866106
</td>
</tr>
<tr>
<th>
8
</th>
<td>
154.866353
</td>
<td>
194.021563
</td>
<td>
35.857136
</td>
<td>
34.749817
</td>
<td>
call
</td>
<td>
0.862080
</td>
</tr>
<tr>
<th>
9
</th>
<td>
155.096351
</td>
<td>
193.696654
</td>
<td>
35.662899
</td>
<td>
35.185398
</td>
<td>
call
</td>
<td>
0.861144
</td>
</tr>
<tr>
<th>
10
</th>
<td>
154.931746
</td>
<td>
193.533106
</td>
<td>
35.849140
</td>
<td>
35.373035
</td>
<td>
call
</td>
<td>
0.859096
</td>
</tr>
<tr>
<th>
11
</th>
<td>
154.988088
</td>
<td>
193.921200
</td>
<td>
35.850899
</td>
<td>
34.878162
</td>
<td>
call
</td>
<td>
0.856778
</td>
</tr>
<tr>
<th>
12
</th>
<td>
153.371142
</td>
<td>
193.670131
</td>
<td>
37.459030
</td>
<td>
35.085506
</td>
<td>
call
</td>
<td>
0.832275
</td>
</tr>
<tr>
<th>
13
</th>
<td>
154.885031
</td>
<td>
193.393148
</td>
<td>
37.161541
</td>
<td>
35.756050
</td>
<td>
call
</td>
<td>
0.814937
</td>
</tr>
<tr>
<th>
14
</th>
<td>
154.807318
</td>
<td>
193.586627
</td>
<td>
37.247711
</td>
<td>
34.852604
</td>
<td>
call
</td>
<td>
0.803999
</td>
</tr>
<tr>
<th>
15
</th>
<td>
233.458529
</td>
<td>
345.055026
</td>
<td>
20.226809
</td>
<td>
39.549839
</td>
<td>
no_gesture
</td>
<td>
0.797995
</td>
</tr>
<tr>
<th>
16
</th>
<td>
233.216641
</td>
<td>
346.149529
</td>
<td>
20.414558
</td>
<td>
38.401203
</td>
<td>
no_gesture
</td>
<td>
0.794114
</td>
</tr>
<tr>
<th>
17
</th>
<td>
233.675367
</td>
<td>
345.060542
</td>
<td>
20.194427
</td>
<td>
39.166901
</td>
<td>
no_gesture
</td>
<td>
0.612079
</td>
</tr>
</tbody>

</table>
</div>
<p>We know the test image contains one call gesture and one idle hand. The model seems pretty confident about the locations of those two hands as the bounding box values are nearly identical across the <code>no_gesture</code> predictions and among the <code>call</code> predictions.</p>
<p>We can filter out the redundant predictions by checking how much the bounding boxes overlap. When two bounding boxes overlap beyond a user-defined threshold, we keep the one with a higher confidence score.</p>
<p><strong>Define function to calculate the union area of two bounding boxes</strong></p>
<div class="sourceCode" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="kw" style="color: #003B4F;">def</span> calc_union_area(a, b):</span>
<span id="cb125-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'x0'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>])</span>
<span id="cb125-3">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'y0'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>])</span>
<span id="cb125-4">    w <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'width'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'width'</span>]) <span class="op" style="color: #5E5E5E;">-</span> x</span>
<span id="cb125-5">    h <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'height'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'height'</span>]) <span class="op" style="color: #5E5E5E;">-</span> y</span>
<span id="cb125-6">    <span class="cf" style="color: #003B4F;">return</span> w<span class="op" style="color: #5E5E5E;">*</span>h</span></code></pre></div>
<p><strong>Define function to calculate the intersection area of two bounding boxes</strong></p>
<div class="sourceCode" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1"><span class="kw" style="color: #003B4F;">def</span> calc_inter_area(a, b):</span>
<span id="cb126-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'x0'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>])</span>
<span id="cb126-3">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(a[<span class="st" style="color: #20794D;">'y0'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>])</span>
<span id="cb126-4">    w <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'width'</span>], b[<span class="st" style="color: #20794D;">'x0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'width'</span>]) <span class="op" style="color: #5E5E5E;">-</span> x</span>
<span id="cb126-5">    h <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(a[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>a[<span class="st" style="color: #20794D;">'height'</span>], b[<span class="st" style="color: #20794D;">'y0'</span>]<span class="op" style="color: #5E5E5E;">+</span>b[<span class="st" style="color: #20794D;">'height'</span>]) <span class="op" style="color: #5E5E5E;">-</span> y</span>
<span id="cb126-6">    <span class="cf" style="color: #003B4F;">return</span> w<span class="op" style="color: #5E5E5E;">*</span>h</span></code></pre></div>
<p><strong>Define function to sort bounding box proposals using Non-Maximum Suppression</strong></p>
<div class="sourceCode" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1"><span class="kw" style="color: #003B4F;">def</span> nms_sorted_boxes(nms_thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.45</span>):</span>
<span id="cb127-2">    </span>
<span id="cb127-3">    proposal_indices <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb127-4">    </span>
<span id="cb127-5">    <span class="co" style="color: #5E5E5E;"># Iterate through the object proposals</span></span>
<span id="cb127-6">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(proposals)):</span>
<span id="cb127-7">        </span>
<span id="cb127-8">        a <span class="op" style="color: #5E5E5E;">=</span> proposals[i]</span>
<span id="cb127-9">        keep <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb127-10"></span>
<span id="cb127-11">        <span class="co" style="color: #5E5E5E;"># Check if the current object proposal overlaps any selected objects too much</span></span>
<span id="cb127-12">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> proposal_indices:</span>
<span id="cb127-13">            </span>
<span id="cb127-14">            b <span class="op" style="color: #5E5E5E;">=</span> proposals[j]</span>
<span id="cb127-15"></span>
<span id="cb127-16">            <span class="co" style="color: #5E5E5E;"># Calculate the area where the two object bounding boxes overlap</span></span>
<span id="cb127-17">            inter_area <span class="op" style="color: #5E5E5E;">=</span> calc_inter_area(a, b)</span>
<span id="cb127-18"></span>
<span id="cb127-19">            <span class="co" style="color: #5E5E5E;"># Calculate the union area of both bounding boxes</span></span>
<span id="cb127-20">            union_area <span class="op" style="color: #5E5E5E;">=</span> calc_union_area(a, b)</span>
<span id="cb127-21">            </span>
<span id="cb127-22">            <span class="co" style="color: #5E5E5E;"># Ignore object proposals that overlap selected objects too much</span></span>
<span id="cb127-23">            <span class="cf" style="color: #003B4F;">if</span> inter_area <span class="op" style="color: #5E5E5E;">/</span> union_area <span class="op" style="color: #5E5E5E;">&gt;</span> nms_thresh: keep <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb127-24"></span>
<span id="cb127-25">        <span class="co" style="color: #5E5E5E;"># Keep object proposals that do not overlap selected objects too much</span></span>
<span id="cb127-26">        <span class="cf" style="color: #003B4F;">if</span> keep: proposal_indices.append(i)</span>
<span id="cb127-27">    </span>
<span id="cb127-28">    <span class="cf" style="color: #003B4F;">return</span> proposal_indices</span></code></pre></div>
<p><strong>Define threshold for sorting bounding box proposals</strong></p>
<div class="sourceCode" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">nms_thresh <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span></span></code></pre></div>
<p><strong>Sort bouning box proposals using NMS</strong></p>
<div class="sourceCode" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">proposal_indices <span class="op" style="color: #5E5E5E;">=</span> nms_sorted_boxes(nms_thresh)</span>
<span id="cb129-2">proposal_indices</span></code></pre></div>
<pre class="text"><code>[0, 5]</code></pre>
<p><strong>Filter excluded bounding box proposals</strong></p>
<div class="sourceCode" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">proposals_df.iloc[proposal_indices]</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
x0
</th>
<th>
y0
</th>
<th>
width
</th>
<th>
height
</th>
<th>
label
</th>
<th>
prob
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
233.453819
</td>
<td>
345.319857
</td>
<td>
20.237036
</td>
<td>
39.237568
</td>
<td>
no_gesture
</td>
<td>
0.892190
</td>
</tr>
<tr>
<th>
5
</th>
<td>
153.331284
</td>
<td>
193.410838
</td>
<td>
38.274513
</td>
<td>
35.176327
</td>
<td>
call
</td>
<td>
0.870502
</td>
</tr>
</tbody>

</table>
</div>
<p>Now we have a single prediction for an idle hand and a single prediction for a call sign.</p>
</section>
<section id="generate-colormap" class="level2">
<h2 class="anchored" data-anchor-id="generate-colormap">Generate Colormap</h2>
<p>Before we annotate the input image with the predicted bounding boxes, let’s generate a colormap for the object classes.</p>
<p><strong>Import library for generating color palette</strong></p>
<div class="sourceCode" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1"><span class="im" style="color: #00769E;">from</span> distinctipy <span class="im" style="color: #00769E;">import</span> distinctipy</span></code></pre></div>
<p><strong>Generate a visually distinct color for each label</strong></p>
<div class="sourceCode" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">colors <span class="op" style="color: #5E5E5E;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;">len</span>(labels))</span></code></pre></div>
<p><strong>Display the generated color palette</strong></p>
<div class="sourceCode" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_184_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Set precision for color values</strong></p>
<div class="sourceCode" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">precision <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<p><strong>Round color values to specified precision</strong></p>
<div class="sourceCode" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1">colors <span class="op" style="color: #5E5E5E;">=</span> [[np.<span class="bu" style="color: null;">round</span>(ch, precision) <span class="cf" style="color: #003B4F;">for</span> ch <span class="kw" style="color: #003B4F;">in</span> color] <span class="cf" style="color: #003B4F;">for</span> color <span class="kw" style="color: #003B4F;">in</span> colors]</span>
<span id="cb136-2">colors</span></code></pre></div>
<pre class="text"><code>[[0.0, 1.0, 0.0],
 [1.0, 0.0, 1.0],
 [0.0, 0.5, 1.0],
 [1.0, 0.5, 0.0],
 [0.5, 0.75, 0.5],
 [0.30555, 0.01317, 0.67298],
 [0.87746, 0.03327, 0.29524],
 [0.05583, 0.48618, 0.15823],
 [0.95094, 0.48649, 0.83322],
 [0.0884, 0.99616, 0.95391],
 [1.0, 1.0, 0.0],
 [0.52176, 0.27352, 0.0506],
 [0.55398, 0.36059, 0.57915],
 [0.08094, 0.99247, 0.4813],
 [0.49779, 0.8861, 0.03131],
 [0.49106, 0.6118, 0.97323],
 [0.98122, 0.81784, 0.51752],
 [0.02143, 0.61905, 0.59307],
 [0.0, 0.0, 1.0]]</code></pre>
<p><strong>Annotate image using bounding box proposals</strong></p>
<div class="sourceCode" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1">annotated_img <span class="op" style="color: #5E5E5E;">=</span> test_img.copy()</span>
<span id="cb138-2">draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb138-3">fnt_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb138-4"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> proposal_indices:</span>
<span id="cb138-5">    x, y, w, h, l, p <span class="op" style="color: #5E5E5E;">=</span> proposals[i].values()</span>
<span id="cb138-6">    shape <span class="op" style="color: #5E5E5E;">=</span> (x, y, x<span class="op" style="color: #5E5E5E;">+</span>w, y<span class="op" style="color: #5E5E5E;">+</span>h)</span>
<span id="cb138-7">    color <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">tuple</span>([<span class="bu" style="color: null;">int</span>(ch<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">255</span>) <span class="cf" style="color: #003B4F;">for</span> ch <span class="kw" style="color: #003B4F;">in</span> colors[proposals[i][<span class="st" style="color: #20794D;">'label'</span>]]])</span>
<span id="cb138-8">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;">=</span>color)</span>
<span id="cb138-9">    fnt <span class="op" style="color: #5E5E5E;">=</span> PIL.ImageFont.truetype(<span class="st" style="color: #20794D;">"KFOlCnqEu92Fr1MmEU9vAw.ttf"</span>, fnt_size)</span>
<span id="cb138-10">    draw.multiline_text((x, y<span class="op" style="color: #5E5E5E;">-</span>fnt_size<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>), <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>labels[l]<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>p<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">%"</span>, font<span class="op" style="color: #5E5E5E;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;">=</span>color)</span>
<span id="cb138-11"><span class="bu" style="color: null;">print</span>(annotated_img.size) </span>
<span id="cb138-12">annotated_img</span></code></pre></div>
<pre class="text"><code>(384, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/images/output_190_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Create JSON colormap</strong></p>
<p>We can export the colormap to a JSON file and import it into the Unity project. That way, we can easily swap colormaps for models trained on different datasets without changing any code.</p>
<div class="sourceCode" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">color_map <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'items'</span>: <span class="bu" style="color: null;">list</span>()}</span>
<span id="cb140-2">color_map[<span class="st" style="color: #20794D;">'items'</span>] <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">'label'</span>: label, <span class="st" style="color: #20794D;">'color'</span>: color} <span class="cf" style="color: #003B4F;">for</span> label, color <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(labels, colors)]</span>
<span id="cb140-3">color_map</span></code></pre></div>
<pre class="text"><code>{'items': [{'label': 'call', 'color': [0.0, 1.0, 0.0]},
  {'label': 'no_gesture', 'color': [1.0, 0.0, 1.0]},
  {'label': 'dislike', 'color': [0.0, 0.5, 1.0]},
  {'label': 'fist', 'color': [1.0, 0.5, 0.0]},
  {'label': 'four', 'color': [0.5, 0.75, 0.5]},
  {'label': 'like', 'color': [0.30555, 0.01317, 0.67298]},
  {'label': 'mute', 'color': [0.87746, 0.03327, 0.29524]},
  {'label': 'ok', 'color': [0.05583, 0.48618, 0.15823]},
  {'label': 'one', 'color': [0.95094, 0.48649, 0.83322]},
  {'label': 'palm', 'color': [0.0884, 0.99616, 0.95391]},
  {'label': 'peace', 'color': [1.0, 1.0, 0.0]},
  {'label': 'peace_inverted', 'color': [0.52176, 0.27352, 0.0506]},
  {'label': 'rock', 'color': [0.55398, 0.36059, 0.57915]},
  {'label': 'stop', 'color': [0.08094, 0.99247, 0.4813]},
  {'label': 'stop_inverted', 'color': [0.49779, 0.8861, 0.03131]},
  {'label': 'three', 'color': [0.49106, 0.6118, 0.97323]},
  {'label': 'three2', 'color': [0.98122, 0.81784, 0.51752]},
  {'label': 'two_up', 'color': [0.02143, 0.61905, 0.59307]},
  {'label': 'two_up_inverted', 'color': [0.0, 0.0, 1.0]}]}</code></pre>
<p><strong>Export colormap</strong></p>
<div class="sourceCode" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb142-2"></span>
<span id="cb142-3">color_map_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-colormap.json"</span></span>
<span id="cb142-4"></span>
<span id="cb142-5"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(color_map_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb142-6">    json.dump(color_map, write_file)</span>
<span id="cb142-7">    </span>
<span id="cb142-8">color_map_file_name</span></code></pre></div>
<pre class="text"><code>'hagrid-sample-30k-384p-colormap.json'</code></pre>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post, we finetuned an object detection model using the IceVision library and exported it as an OpenVINO IR model. Part 2 will cover creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with this model using OpenVINO.</p>
<p><strong>Beginner Tutorial:</strong> <a href="../../fastai-to-unity-tutorial/part-1/">Fastai to Unity Beginner Tutorial Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-2/">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 2</a></p>
<p><strong>Alternative Next:</strong> <a href="../../onnx-directml-unity-tutorial/part-1/">Object Detection for Unity With ONNX Runtime and DirectML Pt. 1</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-openvino-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>icevision</category>
  <category>openvino</category>
  <category>yolox</category>
  <category>object-detection</category>
  <category>unity</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-openvino-unity-tutorial/part-1/index.html</guid>
  <pubDate>Mon, 08 Aug 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-openvino-unity-tutorial/social-media/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to Create an OpenVINO Plugin for Unity on Windows Pt. 3</title>
  <link>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Open Unity Project</li>
<li>Add New Asset Files</li>
<li>Allow Unsafe Code</li>
<li>Modify Compute Shader</li>
<li>Create <code>ImageClassifierOpenVINO</code> Script</li>
<li>Modify GUI</li>
<li>Add <code>ImageClassifierOpenVINO</code> Component</li>
<li>Update On Value Changed Events</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform image classification using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. This post covers the required modifications for the Unity project from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a> to use this DLL.</p>
</section>
<section id="open-unity-project" class="level2">
<h2 class="anchored" data-anchor-id="open-unity-project">Open Unity Project</h2>
<p>Open the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial/tree/main/Fastai-Unity-Tutorial">Fastai-Unity-Tutorial</a> project in the Unity Editor. The project is available in the GitHub repository linked below for anyone who did not follow the original tutorial series.</p>
<ul>
<li><strong><a href="https://github.com/cj-mills/fastai-to-unity-tutorial">fastai-to-unity-tutorial GitHub repository</a></strong></li>
</ul>
</section>
<section id="add-new-asset-files" class="level2">
<h2 class="anchored" data-anchor-id="add-new-asset-files">Add New Asset Files</h2>
<p>We’ll store the <a href="../../fastai-openvino-unity-tutorial/part-2/#gather-dependencies">DLL files</a> from part 2 in a new folder called <code>Plugins</code>. The DLL targets 64-bit x86 architectures, so we need to place the DLL files in a subfolder named <code>x86_64</code>.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1zPHOeYB9jOlPG_KSZyvUVipmBDbV2p76?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-plugins-folder</figcaption><p></p>
</figure>
</div>
<p>Copy all the DLL files and the <code>plugins.xml</code> file into the <code>Assets/Plugins/x86_64</code> folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-openvino-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-openvino-plugins-folder</figcaption><p></p>
</figure>
</div>
<p>We then need to close and reopen the project for Unity to load the plugin files.</p>
<p>Next, we’ll create a folder to store the OpenVINO IR models. We need to place the XML and BIN files for the IR models in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder to include them in project builds. Create a new folder named <code>StreamingAssets</code>. We’ll put the files in a new subfolder called <code>OpenVINOModels</code> to keep things organized.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1QE9d7pADn4THB91_WwwQgD7NsjbBUnE6?usp=sharing">OpenVINOModels Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-openvino-models-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-openvino-models-folder</figcaption><p></p>
</figure>
</div>
<p>The plugins.xml file included with the DLL files contains locations for the DLL files needed for using different types of devices.</p>
<p><strong><code>plugins.xml</code> content:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb1-1">&lt;<span class="kw" style="color: #003B4F;">ie</span>&gt;</span>
<span id="cb1-2">    &lt;<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-3">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"AUTO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-4">            &lt;<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-5">                &lt;<span class="kw" style="color: #003B4F;">property</span><span class="ot" style="color: #003B4F;"> key=</span><span class="st" style="color: #20794D;">"MULTI_WORK_MODE_AS_AUTO"</span><span class="ot" style="color: #003B4F;"> value=</span><span class="st" style="color: #20794D;">"YES"</span>/&gt;</span>
<span id="cb1-6">            &lt;/<span class="kw" style="color: #003B4F;">properties</span>&gt;</span>
<span id="cb1-7">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-8">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"BATCH"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_batch_plugin.dll"</span>&gt;</span>
<span id="cb1-9">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-10">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"CPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_cpu_plugin.dll"</span>&gt;</span>
<span id="cb1-11">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-12">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GNA"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gna_plugin.dll"</span>&gt;</span>
<span id="cb1-13">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-14">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"GPU"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_gpu_plugin.dll"</span>&gt;</span>
<span id="cb1-15">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-16">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HETERO"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_hetero_plugin.dll"</span>&gt;</span>
<span id="cb1-17">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-18">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MULTI"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_auto_plugin.dll"</span>&gt;</span>
<span id="cb1-19">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-20">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"MYRIAD"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_myriad_plugin.dll"</span>&gt;</span>
<span id="cb1-21">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-22">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"HDDL"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_hddl_plugin.dll"</span>&gt;</span>
<span id="cb1-23">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-24">        &lt;<span class="kw" style="color: #003B4F;">plugin</span><span class="ot" style="color: #003B4F;"> name=</span><span class="st" style="color: #20794D;">"VPUX"</span><span class="ot" style="color: #003B4F;"> location=</span><span class="st" style="color: #20794D;">"openvino_intel_vpux_plugin.dll"</span>&gt;</span>
<span id="cb1-25">        &lt;/<span class="kw" style="color: #003B4F;">plugin</span>&gt;</span>
<span id="cb1-26">    &lt;/<span class="kw" style="color: #003B4F;">plugins</span>&gt;</span>
<span id="cb1-27">&lt;/<span class="kw" style="color: #003B4F;">ie</span>&gt;</span></code></pre></div>
<p>It needs to be in the same folder as the DLL files for the plugin to work. However, Unity does not include XML files in the Plugins folder when building the project. We need to store a copy of the plugins.xml file in the StreamingAssets folder and then copy it back to the Plugins/x86_64 folder when first running the built project. We can handle both steps automatically in code.</p>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the OpenVINO plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-open-project-settings</figcaption><p></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-allow-unsafe-code</figcaption><p></p>
</figure>
</div>
<p>Now we can start modifying the code.</p>
</section>
<section id="modify-compute-shader" class="level2">
<h2 class="anchored" data-anchor-id="modify-compute-shader">Modify Compute Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in the <code>ProcessingShader</code> compute shader before sending it to the plugin. We need to know the height of the input image, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb2-2">#pragma kernel NormalizeImageNet</span>
<span id="cb2-3">#pragma kernel FlipXAxis</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb2-6">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb2-8">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-12"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-13"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-14">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb2-15">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb2-17">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb2-19">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb2-22">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-23">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-24"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb2-27"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb2-28"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-29"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-30">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb2-31">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb2-32">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb2-33">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-34">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb2-35">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-36">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb2-37">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-38">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb2-39">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-40"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-imageclassifieropenvino-script" class="level2">
<h2 class="anchored" data-anchor-id="create-imageclassifieropenvino-script">Create <code>ImageClassifierOpenVINO</code> Script</h2>
<p>Duplicate the <code>ImageClassifier</code> script and name the copy <code>ImageClassifierOpenVINO</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-create-image-classifier-openvino-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-image-classifier-openvino-script</figcaption><p></p>
</figure>
</div>
<p><strong>Update class name</strong></p>
<p>Open the new script in the code editor and replace the class name with the new file name.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifierOpenVINO <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span></code></pre></div>
<p><strong>Update required namespaces</strong></p>
<p>We no longer need the Barracuda namespace. Instead, we need the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-5.0">System.Runtime.InteropServices</a> namespace to handle interactions with the OpenVINO plugin.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Remove Barracuda code</strong></p>
<p>We need to delete all the public and private Barracuda variables, along with the <code>InitializeWorker</code> and <code>OnDisable</code> methods.</p>
<p><strong>Add code to copy <code>plugins.xml</code> file to <code>StreamingAssets</code> folder</strong></p>
<p>Unity provides an <a href="https://docs.unity3d.com/Manual/RunningEditorCodeOnLaunch.html"><code>InitializeOnLoad</code></a> attribute to run code in the Unity Editor without requiring action from the user. This attribute requires the <a href="https://docs.unity3d.com/ScriptReference/UnityEditor.html"><code>UnityEditor</code></a> namespace. We can only use this while in the Editor, so we need to wrap the code in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">Conditional compilation</a> preprocessor directives.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="kw" style="color: #003B4F;">#if</span> UNITY_EDITOR</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span>InitializeOnLoad<span class="op" style="color: #5E5E5E;">]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> Startup</span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;">static</span> <span class="fu" style="color: #4758AB;">Startup</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;">// Get all files named "plugins.xml"</span></span>
<span id="cb5-10">        <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> files <span class="op" style="color: #5E5E5E;">=</span> Directory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"./Assets/"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"plugins.xml"</span><span class="op" style="color: #5E5E5E;">,</span> SearchOption<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AllDirectories</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-11">        <span class="co" style="color: #5E5E5E;">// Iterate through each found file</span></span>
<span id="cb5-12">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> files<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb5-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-14">            <span class="co" style="color: #5E5E5E;">// Check if the file is in the "x86_64" folder</span></span>
<span id="cb5-15">            <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"x86_64"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb5-16">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;">// Define file path for StreamingAssets folder</span></span>
<span id="cb5-18">                <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-19">                <span class="co" style="color: #5E5E5E;">// Print the source file path</span></span>
<span id="cb5-20">                Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-21">                <span class="co" style="color: #5E5E5E;">// Only copy the file to the StreamingAssets folder if it is not already present</span></span>
<span id="cb5-22">                <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-26"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-27"><span class="kw" style="color: #003B4F;">#endif</span></span></code></pre></div>
<p>We use the <code>UNITY_EDITOR</code> <a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html">scripting symbol</a> to check whether we are in the Unity Editor. We are in the Editor, so it returns true, and the code executes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_in_editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity_scripting_symbol_in_editor</figcaption><p></p>
</figure>
</div>
<p>If we check if we are not in the Unity Editor, it returns false, and the code block does not execute.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity_scripting_symbol_not_in_editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity_scripting_symbol_not_in_editor</figcaption><p></p>
</figure>
</div>
<p>We can verify the code works by saving the script and going to the <code>StreamingAssets</code> folder in the Editor. The plugins.xml file should be present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-verify-initializeonload.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-verify-initializeonload</figcaption><p></p>
</figure>
</div>
<p><strong>Update data processing variables</strong></p>
<p>Next, we can remove the <code>processingMaterial</code> variable from the Data Processing section. We no longer need to download model output from the GPU to the CPU. However, we now need to download the input image to the CPU before sending it to the plugin. We can do this asynchronously to help reduce the GPU-to-CPU performance bottleneck.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update variables for user interface</strong></p>
<p>We’ll add new dropdown menus so that we can switch between the available OpenVINO models and devices at runtime.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-20"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available OpenVINO devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;">public</span> Dropdown deviceDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"OpenVINO"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the openvino models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> openvinoModelsDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINOModels"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update input variables</strong></p>
<p>Like in the previous tutorial series, when using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the OpenVINO plugin</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">// File paths for the available OpenVINO models</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO models</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">// Names of the available OpenVINO devices</span></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> openvinoDevices <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span></code></pre></div>
<p><strong>Import functions from the OpenVINO plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"OpenVINO_Image_Classifier_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> IntPtr <span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p><strong>Define method to get the available OpenVINO models</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available OpenVION models</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for the XML file for each model</span></span>
<span id="cb12-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{openvinoModelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb12-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-9">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".xml"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb12-10">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-11">            modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-12">            <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'.'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb12-13">            modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Substring</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb12-14">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to get the names of available OpenVINO devices</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Get the names of the available OpenVINO devices</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;">// Get the number of available OpenVINO devices</span></span>
<span id="cb13-7">    <span class="dt" style="color: #AD0000;">int</span> deviceCount <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">GetDeviceCount</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-8"></span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> deviceCount<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb13-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-11">        openvinoDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>Marshal<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PtrToStringAnsi</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">GetDeviceName</span><span class="op" style="color: #5E5E5E;">(</span>i<span class="op" style="color: #5E5E5E;">)));</span></span>
<span id="cb13-12">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb13-13"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb14-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;">foreach</span><span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb14-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb14-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb14-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb14-16"></span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb14-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO model names to menu</span></span>
<span id="cb14-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb14-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-23"></span>
<span id="cb14-24">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb14-25">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-26">    <span class="co" style="color: #5E5E5E;">// Add OpenVINO device names to menu</span></span>
<span id="cb14-27">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>openvinoDevices<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-28">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb14-29">    deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define Awake Method</strong></p>
<p>We’ll implement the code to copy the plugins.xml file from the <code>StreamingAssets</code> folder to the <code>Plugins/x86_64</code> folder in the build folder in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html">Awake()</a> method. The code should be inactive since we are in the Editor.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// Awake is called when the script instance is being loaded</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Awake</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb15-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-4">    <span class="kw" style="color: #003B4F;">#if</span> <span class="op" style="color: #5E5E5E;">!</span>UNITY_EDITOR</span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;">// Define the path for the plugins.xml file in the StreamingAssets folder</span></span>
<span id="cb15-6">        <span class="dt" style="color: #AD0000;">string</span> sourcePath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;">// Define the destination path for the plugins.xml file</span></span>
<span id="cb15-8">    <span class="dt" style="color: #AD0000;">string</span> targetPath <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"{Application.dataPath}/Plugins/x86_64/plugins.xml"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;">// Only copy the file if it is not already present at the destination</span></span>
<span id="cb15-10">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Exists</span><span class="op" style="color: #5E5E5E;">(</span>targetPath<span class="op" style="color: #5E5E5E;">))</span> File<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Copy</span><span class="op" style="color: #5E5E5E;">(</span>sourcePath<span class="op" style="color: #5E5E5E;">,</span> targetPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;">#endif</span></span>
<span id="cb15-12"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update Start method</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb16-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb16-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb16-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb16-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb16-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-16"></span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb16-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb16-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb16-23">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available OpenVINO models</span></span>
<span id="cb16-26">    <span class="fu" style="color: #4758AB;">GetOpenVINOModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-27">    <span class="co" style="color: #5E5E5E;">// Get the names of available OpenVINO devices</span></span>
<span id="cb16-28">    <span class="fu" style="color: #4758AB;">GetOpenVINODevices</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-29"></span>
<span id="cb16-30">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb16-31">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-32"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb17-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb17-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb17-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb17-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb17-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-20"></span>
<span id="cb17-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb17-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb17-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-25"></span>
<span id="cb17-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb17-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb17-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-31"></span>
<span id="cb17-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb17-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb18-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb18-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb18-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb18-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb18-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb18-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb18-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb18-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb19-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-8">    <span class="dt" style="color: #AD0000;">int</span> classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb19-12">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-13">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the predicted class index</span></span>
<span id="cb19-14">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb19-16"></span>
<span id="cb19-17">    <span class="kw" style="color: #003B4F;">return</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb19-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Modify Update method</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb20-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb20-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb20-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-9"></span>
<span id="cb20-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb20-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-12"></span>
<span id="cb20-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb20-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb20-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb20-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb20-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-26"></span>
<span id="cb20-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb20-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb20-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-32"></span>
<span id="cb20-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb20-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-36"></span>
<span id="cb20-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb20-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-39"></span>
<span id="cb20-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-43">        <span class="co" style="color: #5E5E5E;">// Update the selected OpenVINO model</span></span>
<span id="cb20-44">        <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-46"></span>
<span id="cb20-47">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureGPU.width}x{inputTextureGPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-48"></span>
<span id="cb20-49">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb20-50">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-51"></span>
<span id="cb20-52">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb20-53">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-54"></span>
<span id="cb20-55">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb20-56">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-57">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-58">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-59">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-60">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb20-61">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-62">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-63">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-64">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb20-65">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb20-66"></span>
<span id="cb20-67">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb20-68">    classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-69">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Class Index: {classIndex}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-70"></span>
<span id="cb20-71">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb20-72">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-73">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>validIndex <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[classIndex]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Invalid index"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-74"></span>
<span id="cb20-75">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb20-76">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-77"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a method to update the current OpenVINO model and device</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">/// Update the selected OpenVINO model</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateOpenVINOModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb21-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-6">    <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-7">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb21-8">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span></span>
<span id="cb21-9">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb21-10"></span>
<span id="cb21-11">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Device: {openvinoDevices[deviceDropdown.value]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    <span class="co" style="color: #5E5E5E;">// Load the specified OpenVINO model</span></span>
<span id="cb21-14">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> deviceDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-15"></span>
<span id="cb21-16">    <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> return_messages <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-17">        <span class="st" style="color: #20794D;">"Model loaded and reshaped successfully"</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb21-18">        <span class="st" style="color: #20794D;">"Failed to load model"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb21-19">        <span class="st" style="color: #20794D;">"Failed to reshape model input"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb21-20">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb21-21"></span>
<span id="cb21-22">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>return_messages<span class="op" style="color: #5E5E5E;">[</span>return_val<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb21-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That covers the required code changes.</p>
</section>
<section id="modify-gui" class="level2">
<h2 class="anchored" data-anchor-id="modify-gui">Modify GUI</h2>
<p>As mentioned earlier, we’ll add new dropdown menus to the GUI so we can switch between available OpenVINO models and devices at runtime.</p>
<p><strong>Create new GUI objects</strong></p>
<p>Select the <code>WebcamDeviceText</code> and <code>WebcamDropdown</code> objects and press Ctrl-d to duplicate them. Rename the duplicates to <code>OpenVINOModelText</code> and <code>OpenVINOModelDropdown</code>, respectively. Then select <code>OpenVINOModelText</code> and <code>OpenVINOModelDropdown</code> and press Ctrl-d.&nbsp;Rename the copies to <code>OpenVINODevicelText</code> and <code>OpenVINODevicelDropdown</code>, respectively.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-add-openvino-gui-objects.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-openvino-gui-objects</figcaption><p></p>
</figure>
</div>
<p><strong>Update GUI Settings Panel Height</strong></p>
<p>Select the <code>SettingsPanel</code> object and update the <code>Height</code> value to <code>255</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-settings-panel-height.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-settings-panel-height</figcaption><p></p>
</figure>
</div>
<p><strong>Update GUI object positions</strong></p>
<p>Select the <code>OpenVINOModelText</code> object and update the <code>Pos Y</code> value to <code>-145</code> and the Text value to <code>OpenVINO Model:</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinomodeltext-position-and-text.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvinomodeltext-position</figcaption><p></p>
</figure>
</div>
<p>Then, select the <code>OpenVINOModelDropdown</code> object and update the <code>Pos Y</code> value to <code>-165</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinomodeldropdown-position.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvinomodeldropdown-position</figcaption><p></p>
</figure>
</div>
<p>Next, select the <code>OpenVINODevicelText</code> object and update the <code>Pos Y</code> value to <code>-200</code> and the Text value to <code>OpenVINO Device:</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinodevicetext-position-and-text.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvinodevicetext-position</figcaption><p></p>
</figure>
</div>
<p>Last but not least, select the <code>OpenVINODevicelDropdown</code> object and update the <code>Pos Y</code> value to <code>-220</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvinodevicedropdown-position.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvinodevicedropdown-position</figcaption><p></p>
</figure>
</div>
<p>The updated GUI should look like the image below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-view-updated-gui.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-view-updated-gui</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-imageclassifieropenvino-component" class="level2">
<h2 class="anchored" data-anchor-id="add-imageclassifieropenvino-component">Add <code>ImageClassifierOpenVINO</code> Component</h2>
<p>Now we can add the new <code>ImageClassifierOpenVINO</code> script to the <code>InferenceManager</code> object. Make sure to disable the existing <code>ImageClassifier</code> component, as shown below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-add-image-classifier-openvino-component.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-image-classifier-openvino-component</figcaption><p></p>
</figure>
</div>
</section>
<section id="update-on-value-changed-events" class="level2">
<h2 class="anchored" data-anchor-id="update-on-value-changed-events">Update On Value Changed Events</h2>
<p>With the <code>ImageClassifierOpenVINO</code> component added, we can update the On Value Changed events for the <code>WebcamToggle</code>, <code>WebcamDropdown</code>, <code>OpenVINOModelDropdown</code>, and <code>OpenVINODevicelDropdown</code> objects.</p>
<p><strong>Update the <code>WebcamToggle</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-webcam-toggle-update-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-toggle-update-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Update the <code>WebcamDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-webcam-dropdown-update-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-dropdown-update-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Update the <code>OpenVINOModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvino-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvino-model-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Update the <code>OpenVINODeviceDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/images/unity-update-openvino-device-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-openvino-device-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This tutorial series covered creating an OpenVINO plugin to improve inference speed in the Unity game engine.</p>
<p><strong>Previous:</strong> <a href="../part-2/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>openvino</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-3/index.html</guid>
  <pubDate>Mon, 18 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create an OpenVINO Plugin for Unity on Windows Pt. 2</title>
  <link>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Install OpenVINO</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered modifying the training code from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a> to finetune models from the Timm library and exporting them as OpenVINO IR models. This post covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these IR models using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>.</p>
</section>
<section id="install-openvino" class="level2">
<h2 class="anchored" data-anchor-id="install-openvino">Install OpenVINO</h2>
<p>We need to download the OpenVINO Toolkit before creating our Visual Studio project. Go to the OpenVINO download page linked below.</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">OpenVINO Download page</a></li>
</ul>
<p><strong>Download OpenVINO Toolkit</strong></p>
<p>Select the options outlined in the image below and click the Download button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_download_page.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_download_page</figcaption><p></p>
</figure>
</div>
<p>Double-click the file once it finishes downloading and click the Extract button in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_extract_files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_extract_files</figcaption><p></p>
</figure>
</div>
<p>The installer will then verify the computer meets the system requirements. The toolkit includes the Python scripts for converting models, which require Python 3.6, 3.7, 3.8, or 3.9 to run. We will only use the files for C++ development in this post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_check_system_requirements.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_check_system_requirements</figcaption><p></p>
</figure>
</div>
<p>We can stick with the default <code>Recommended Installation</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_recommended_installation.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_recommended_installation</figcaption><p></p>
</figure>
</div>
<p>The installer will then ask whether Intel can collect some information before starting the installation process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_software_improvement_program.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_software_improvement_program</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_installation_in_progress.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_installation_in_progress</figcaption><p></p>
</figure>
</div>
<p>Click Finish once the installation process completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_installer_finish.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_installer_finish</figcaption><p></p>
</figure>
</div>
<p><strong>Inspect OpenVINO Folder</strong></p>
<p>If we look at the installation folder for the toolkit, we can see it also includes a version of OpenCV. We’ll use OpenCV to prepare image data from Unity before feeding it to the model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_install_folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_install_folder</figcaption><p></p>
</figure>
</div>
<p>I like to copy the OpenVINO folder to a separate directory with other dependencies for my C++ projects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/openvino_move_folder_to_dependencies_directory.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">openvino_move_folder_to_dependencies_directory</figcaption><p></p>
</figure>
</div>
<p>Now we can create our Visual Studio DLL project.</p>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-create-new-project</figcaption><p></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-new-dll-project</figcaption><p></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-choose-project-name-and-location</figcaption><p></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-release</figcaption><p></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-64-bit</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where OpenVINO and OpenCV are so we can access their APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-solution-explorer-select-project-name</figcaption><p></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-properties</figcaption><p></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-additional-include-directories</figcaption><p></p>
</figure>
</div>
<p>Add the paths for the following folders, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include\ie</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\include</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-add-additional-include-directories</figcaption><p></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-additional-dependencies</figcaption><p></p>
</figure>
</div>
<p>Add the paths to the following files, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\lib\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\lib\intel64\Release\*</code></li>
<li><code>&lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\lib\*.lib</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-add-additional-dependencies</figcaption><p></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL files included with the OpenVINO and OpenCV libraries.</p>
<p><strong>OpenCV DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/get-opencv-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-opencv-dll-files</figcaption><p></p>
</figure>
</div>
<p><strong>OpenVINO DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/get-openvino-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-openvino-dll-files</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/get-openvino-tbb-dll-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-openvino-tbb-dll-file</figcaption><p></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-edit-command-line-events</figcaption><p></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the full path to the parent folder for the OpenVINO Toolkit, and click <code>OK</code>.</p>
<ul>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_core453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgproc453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\opencv\bin\opencv_imgcodecs453.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\bin\intel64\Release\* $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
<li><code>xcopy &lt;parent-folder-path&gt;\openvino_2022.1.0.643\runtime\3rdparty\tbb\bin\tbb.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-add-xcopy-commands</figcaption><p></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-properties-apply-changes</figcaption><p></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We’ll first update the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> with the required header files. We can open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-pch-header-file</figcaption><p></p>
</figure>
</div>
<p>Comment or remove the “#include” line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for OpenVINO and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"openvino/openvino.hpp"</span></span>
<span id="cb2-14"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html">ov::Core</a>: represents an OpenVINO runtime Core entity</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Model.html#doxid-classov-1-1-model">ov::Model</a>: A user-defined model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html">ov::CompiledModel</a>: represents a compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request">ov::InferRequest</a>: an infer request that can be run in asynchronous or synchronous manners</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1Tensor.html">ov::Tensor</a>: API holding host memory</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// Inference engine instance</span></span>
<span id="cb6-2">ov<span class="op" style="color: #5E5E5E;">::</span>Core core<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">// The user define model representation</span></span>
<span id="cb6-4"><span class="bu" style="color: null;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;">&lt;</span>ov<span class="op" style="color: #5E5E5E;">::</span>Model<span class="op" style="color: #5E5E5E;">&gt;</span> model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">// A device-specific compiled model</span></span>
<span id="cb6-6">ov<span class="op" style="color: #5E5E5E;">::</span>CompiledModel compiled_model<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">// List of available compute devices</span></span>
<span id="cb6-9"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> available_devices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">// An inference request for a compiled model</span></span>
<span id="cb6-11">ov<span class="op" style="color: #5E5E5E;">::</span>InferRequest infer_request<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;">// Stores the model input data</span></span>
<span id="cb6-13">ov<span class="op" style="color: #5E5E5E;">::</span>Tensor input_tensor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">// A pointer for accessing the input tensor data</span></span>
<span id="cb6-15"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">*</span> input_data<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;">// The number of image classes the current model can detect</span></span>
<span id="cb6-18"><span class="dt" style="color: #AD0000;">int</span> num_classes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;">// The current input image width</span></span>
<span id="cb6-20"><span class="dt" style="color: #AD0000;">int</span> input_w<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;">// The current input image height</span></span>
<span id="cb6-22"><span class="dt" style="color: #AD0000;">int</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;">// The total number pixels in the input image</span></span>
<span id="cb6-24"><span class="dt" style="color: #AD0000;">int</span> nPixels<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;">// The number of color channels in the input image</span></span>
<span id="cb6-26"><span class="dt" style="color: #AD0000;">int</span> num_channels <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define a function to get the number of compute devices</strong></p>
<p>The first function we’ll define will create a list of available device names and return the number of devices accessible by OpenVINO. We’ll use this information to select which device to use to perform inference from the Unity application. There might be an option named GNA (Gaussian &amp; Neural Accelerator). GNA is a highly specialized neural coprocessor for tasks like noise cancellation. We’ll exclude it from the list of devices presented to the end user.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1aabd82bca4826ee53893f7b5fc9bce813">ov::Core::get_available_devices()</a>: Returns devices available for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">/// Get the number of available compute devices</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb7-5">DLLExport <span class="dt" style="color: #AD0000;">int</span> GetDeviceCount<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;">// Reset list of available compute devices</span></span>
<span id="cb7-8">    available_devices<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;">// Populate list of available compute devices</span></span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;"> </span>device <span class="op" style="color: #5E5E5E;">:</span> core<span class="op" style="color: #5E5E5E;">.</span>get_available_devices<span class="op" style="color: #5E5E5E;">())</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;">// Skip GNA device</span></span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span>find<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GNA"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">std::</span>string<span class="bu" style="color: null;">::</span>npos<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-14">            available_devices<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;">// Return the number of available compute devices</span></span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;">return</span> available_devices<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-19"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to get the name of a compute device</strong></p>
<p>Next, we’ll define a function to return the name of a device at a specified index for the list of available devices.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">/// Get the name of the compute device name at the specified index</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb8-6">DLLExport <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">*</span> GetDeviceName<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">&amp;</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to load an OpenVINO model</strong></p>
<p>OpenVINO needs to compile models for the target device. This process can take several seconds when using GPU inference. We can create a cache directory, so we only need to compile models for a specific resolution-device pair once.</p>
<p>We’ll place the code for loading an OpenVINO model inside a try-catch block to avoid crashing the application if we pass an incorrect file path.</p>
<p>If the model loads successfully, we’ll attempt to reshape the model input to the desired input dimensions. Note that models like MobileViT will need to use the input dimensions from training.</p>
<p>After reshaping the model input, we can compile the model for the target device.</p>
<p>We can get pointers to the model input tensor and create an inference request using the compiled model.</p>
<ul>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a14cba2136b972ee34478dd11633293a2">ov::Core::set_property()</a>: Sets properties for a device</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1ae0576a95f841c3a6f5e46e4802716981">ov::Core::read_model()</a>: Reads models from IR/ONNX/PDPD formats</li>
<li><a href="https://docs.openvino.ai/latest/openvino_docs_OV_UG_ShapeInference.html">ov::Model::reshape()</a>: Updates input shapes and propagates them down to the outputs of the model through all intermediate layers</li>
<li><a href="https://docs.openvino.ai/nightly/classov_1_1Core.html#doxid-classov-1-1-core-1a46555f0803e8c29524626be08e7f5c5a">ov::Core::compile_model()</a>: Creates a compiled model from a source model object</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1CompiledModel.html#doxid-classov-1-1-compiled-model-1ae3633c0eb5173ed776446fba32b95953">ov::CompiledModel::create_infer_request()</a>: Creates an inference request object used to infer the compiled model</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a5f0bc1ab40de6a7a12136b4a4e6a8b54">ov::InferRequest::get_input_tensor()</a>: Gets an input tensor for inference</li>
</ul>
<hr>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">/// Load a model from the specified file path</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"modelPath"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The path to the OpenVINO IR model file</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"index"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The compute device index</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"inputDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The source image resolution</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb9-8">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> modelPath<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> index<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">    <span class="co" style="color: #5E5E5E;">// Initialize return value</span></span>
<span id="cb9-11">    <span class="dt" style="color: #AD0000;">int</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;">// Specify the cache directory for compiled gpu models</span></span>
<span id="cb9-13">    core<span class="op" style="color: #5E5E5E;">.</span>set_property<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU"</span><span class="op" style="color: #5E5E5E;">,</span> ov<span class="op" style="color: #5E5E5E;">::</span>cache_dir<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"cache"</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="co" style="color: #5E5E5E;">// Try loading the specified model</span></span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>read_model<span class="op" style="color: #5E5E5E;">(</span>modelPath<span class="op" style="color: #5E5E5E;">);</span> <span class="op" style="color: #5E5E5E;">}</span> </span>
<span id="cb9-17">    <span class="co" style="color: #5E5E5E;">// Return 1 if the model fails to load</span></span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-19"></span>
<span id="cb9-20">    <span class="co" style="color: #5E5E5E;">// Try updating the model input dimensions</span></span>
<span id="cb9-21">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span> model<span class="op" style="color: #5E5E5E;">-&gt;</span>reshape<span class="op" style="color: #5E5E5E;">({</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">],</span> inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">});</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-22">    <span class="co" style="color: #5E5E5E;">// Return a value of 2 if we can't update the model input dimensions</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span> return_val <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-24"></span>
<span id="cb9-25">    <span class="co" style="color: #5E5E5E;">// Compile the loaded model for the target compute device</span></span>
<span id="cb9-26">    <span class="kw" style="color: #003B4F;">auto</span> compiled_model <span class="op" style="color: #5E5E5E;">=</span> core<span class="op" style="color: #5E5E5E;">.</span>compile_model<span class="op" style="color: #5E5E5E;">(</span>model<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"MULTI"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb9-27">         ov<span class="op" style="color: #5E5E5E;">::</span>device<span class="op" style="color: #5E5E5E;">::</span>priorities<span class="op" style="color: #5E5E5E;">(</span>available_devices<span class="op" style="color: #5E5E5E;">[</span>index<span class="op" style="color: #5E5E5E;">]),</span></span>
<span id="cb9-28">         ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>performance_mode<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>PerformanceMode<span class="op" style="color: #5E5E5E;">::</span>LATENCY<span class="op" style="color: #5E5E5E;">),</span></span>
<span id="cb9-29">         ov<span class="op" style="color: #5E5E5E;">::</span>hint<span class="op" style="color: #5E5E5E;">::</span>inference_precision<span class="op" style="color: #5E5E5E;">(</span>ov<span class="op" style="color: #5E5E5E;">::</span>element<span class="op" style="color: #5E5E5E;">::</span>f32<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb9-30"></span>
<span id="cb9-31">    <span class="co" style="color: #5E5E5E;">// Get the number of classes the current model can detect</span></span>
<span id="cb9-32">    ov<span class="op" style="color: #5E5E5E;">::</span>Output<span class="op" style="color: #5E5E5E;">&lt;</span><span class="at" style="color: #657422;">const</span> ov<span class="op" style="color: #5E5E5E;">::</span>Node<span class="op" style="color: #5E5E5E;">&gt;</span> output <span class="op" style="color: #5E5E5E;">=</span> compiled_model<span class="op" style="color: #5E5E5E;">.</span>output<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb9-33">    num_classes <span class="op" style="color: #5E5E5E;">=</span> output<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-34">    <span class="co" style="color: #5E5E5E;">// Create an inference request to use the compiled model</span></span>
<span id="cb9-35">    infer_request <span class="op" style="color: #5E5E5E;">=</span> compiled_model<span class="op" style="color: #5E5E5E;">.</span>create_infer_request<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb9-36"></span>
<span id="cb9-37">    <span class="co" style="color: #5E5E5E;">// Get input tensor by index</span></span>
<span id="cb9-38">    input_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_input_tensor<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-39"></span>
<span id="cb9-40">    <span class="co" style="color: #5E5E5E;">// Get model input dimensions</span></span>
<span id="cb9-41">    input_w <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-42">    input_h <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>get_shape<span class="op" style="color: #5E5E5E;">()[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-43">    nPixels <span class="op" style="color: #5E5E5E;">=</span> input_w <span class="op" style="color: #5E5E5E;">*</span> input_h<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-44"></span>
<span id="cb9-45">    <span class="co" style="color: #5E5E5E;">// Get a pointer to the input tensor</span></span>
<span id="cb9-46">    input_data <span class="op" style="color: #5E5E5E;">=</span> input_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb9-47"></span>
<span id="cb9-48">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb9-49">    <span class="cf" style="color: #003B4F;">return</span> return_val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-50"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1-byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>We don’t need to normalize the input image since the IR model does it internally.</p>
<p>Once again, we’ll use a try-catch block to avoid crashing the application if an error occurs during the forward pass. We can use the <code>std::max_element()</code> and <code>std::distance()</code> functions to find the class index with the highest confidence score.</p>
<ul>
<li><a href="https://docs.opencv.org/3.4/d3/d63/classcv_1_1Mat.html">cv::Mat</a>: n-dimensional dense array class<br>
</li>
<li><a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv::cvtColor()</a>: Converts an image from one color space to another</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1abcb7facc9f7c4b9226a1fd343e56958d">ov::InferRequest::infer()</a>: Infers specified input in synchronous mode</li>
<li><a href="https://docs.openvino.ai/latest/classov_1_1InferRequest.html#doxid-classov-1-1-infer-request-1a9bf7bf67c58858bda86ae01e83cd14c1">ov::InferRequest::get_output_tensor()</a>: Gets an output tensor for inference</li>
<li><a href="https://cplusplus.com/reference/iterator/distance/">std::distance()</a>: Calculates the number of elements between first and last</li>
<li><a href="https://cplusplus.com/reference/algorithm/max_element/">std::max_element()</a>: Returns an iterator pointing to the element with the largest value in the range <code>[first,last)</code></li>
</ul>
<hr>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Perform inference with the provided texture data</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"inputData"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb10-6">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> inputData<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">    <span class="co" style="color: #5E5E5E;">// Initialize predicted class index to an invalid value</span></span>
<span id="cb10-9">    <span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-10"></span>
<span id="cb10-11">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-12"></span>
<span id="cb10-13">        <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb10-14">        cv<span class="op" style="color: #5E5E5E;">::</span>Mat texture <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>input_h<span class="op" style="color: #5E5E5E;">,</span> input_w<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-15">        <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb10-16">        cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">        <span class="co" style="color: #5E5E5E;">// Iterate over each pixel in image</span></span>
<span id="cb10-19">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">&lt;</span> nPixels<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-20">            <span class="co" style="color: #5E5E5E;">// Iterate over each color channel for each pixel in image</span></span>
<span id="cb10-21">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> ch <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> ch <span class="op" style="color: #5E5E5E;">&lt;</span> num_channels<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">++</span>ch<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-22">                input_data<span class="op" style="color: #5E5E5E;">[</span>ch <span class="op" style="color: #5E5E5E;">*</span> nPixels <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">[</span>p <span class="op" style="color: #5E5E5E;">*</span> num_channels <span class="op" style="color: #5E5E5E;">+</span> ch<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-25"></span>
<span id="cb10-26">        <span class="co" style="color: #5E5E5E;">// Perform inference</span></span>
<span id="cb10-27">        infer_request<span class="op" style="color: #5E5E5E;">.</span>infer<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-28"></span>
<span id="cb10-29">        <span class="co" style="color: #5E5E5E;">// model has only one output</span></span>
<span id="cb10-30">        ov<span class="op" style="color: #5E5E5E;">::</span>Tensor output_tensor <span class="op" style="color: #5E5E5E;">=</span> infer_request<span class="op" style="color: #5E5E5E;">.</span>get_output_tensor<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-31">        <span class="co" style="color: #5E5E5E;">// IR v10 works with converted precisions (i64 -&gt; i32)</span></span>
<span id="cb10-32">        <span class="kw" style="color: #003B4F;">auto</span> out_data <span class="op" style="color: #5E5E5E;">=</span> output_tensor<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb10-33"></span>
<span id="cb10-34">        <span class="co" style="color: #5E5E5E;">// Get the predicted class index with the highest confidence score</span></span>
<span id="cb10-35">        class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">std::</span>distance<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> <span class="bu" style="color: null;">std::</span>max_element<span class="op" style="color: #5E5E5E;">(</span>out_data<span class="op" style="color: #5E5E5E;">,</span> out_data <span class="op" style="color: #5E5E5E;">+</span> num_classes<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-36">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-37">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-38">        <span class="co" style="color: #5E5E5E;">// Return a value of -2 if an error occurs during the forward pass</span></span>
<span id="cb10-39">        class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-40">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-41"></span>
<span id="cb10-42">    <span class="cf" style="color: #003B4F;">return</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-43"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click Build Solution. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-build-solution</figcaption><p></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-folder-in-explorer</figcaption><p></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder</figcaption><p></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder-x64-folder</figcaption><p></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder and the plugins.xml file to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">file-explorer-select-dll-files</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>. Part 3 will cover the required modifications for the original Unity project to use this DLL.</p>
<p><strong>Previous:</strong> <a href="../../fastai-to-unity-tutorial/part-1/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>openvino</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-2/index.html</guid>
  <pubDate>Sun, 17 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create an OpenVINO Plugin for Unity on Windows Pt. 1</title>
  <link>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Select a Model</li>
<li>Modify Transforms</li>
<li>Define Learner</li>
<li>Export the Model</li>
<li>Benchmark OpenVINO Inference</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This tutorial is a follow-up to the <a href="../../fastai-to-unity-tutorial/part-1">fastai-to-unity</a> tutorial series and covers using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>, an open-source toolkit for optimizing model inference, instead of Unity’s Barracuda library. OpenVINO enables significantly faster CPU inference than Barracuda and supports more model types. It also supports GPU inference for integrated and discrete Intel GPUs and will be able to leverage the AI hardware acceleration available in Intel’s upcoming ARC GPUs.</p>
<p>We’ll modify the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">original tutorial code</a> and create a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to access the OpenVINO functionality in Unity.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/openvino-plugin-demo.mp4" class="img-fluid" controls=""><a href="./videos/openvino-plugin-demo.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">openvino-plugin-demo</figcaption><p></p>
</figure>
</div>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This post covers the required modifications to the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial#training-code">original training code</a>. We’ll finetune models from the <a href="https://github.com/rwightman/pytorch-image-models">Timm library</a> on the same <a href="https://www.kaggle.com/datasets/belalelwikel/asl-and-some-words">ASL dataset</a> as the original tutorial, just like in this <a href="../../fastai-libtorch-unity-tutorial/part-1/">previous follow-up</a>. Below is a link to the complete modified training code, along with links for running the notebook on Google Colab and Kaggle.</p>
<table class="table">
<thead>
<tr class="header">
<th>GitHub Repository</th>
<th>Colab</th>
<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kaggle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-OpenVINO-Tutorial.ipynb">Jupyter Notebook</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-to-openvino-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-OpenVINO-Tutorial.ipynb">Open in Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-OpenVINO-Tutorial.ipynb"><img src="christianjmills.com/posts/fastai-openvino-unity-tutorial/part-1/https:/kaggle.com/static/images/open-in-kaggle.svg" alt="Kaggle"></a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The <a href="https://pypi.org/project/timm/">pip package</a> for the Timm library is generally more stable than the GitHub repository but may have fewer model types and pretrained weights. However, the latest pip version had some issues running the MobileNetV3 models at the time of writing. Downgrade to version <code>0.5.4</code> to use those models.</p>
<p>Recent <a href="https://github.com/fastai/fastai/releases/tag/2.7.0">updates</a> to the fastai library resolve some <a href="https://benjaminwarner.dev/2022/06/14/debugging-pytorch-performance-decrease">performance issues</a> with PyTorch so let’s update that too.</p>
<p>We need to install the <a href="https://pypi.org/project/openvino-dev/"><code>openvino-dev</code></a> pip package to convert trained models to OpenVINO’s <a href="https://docs.openvino.ai/latest/openvino_docs_MO_DG_IR_and_opsets.html">Intermediate Representation</a> (IR) format.</p>
<p><strong>Uncomment the cell below if running on Google Colab or Kaggle</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip3 install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip3 install -U fastai==2.7.6</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip3 install -U kaggle==1.5.12</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip3 install -U Pillow==9.1.0</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># !pip3 install -U timm==0.6.5 # more stable fewer models</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># # !pip3 install -U git+https://github.com/rwightman/pytorch-image-models.git # more models less stable</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># !pip3 install openvino-dev==2022.1.0 </span></span></code></pre></div>
<p><strong>Note for Colab:</strong> You must restart the runtime in order to use newly installed version of Pillow.</p>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> fastai</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">fastai.__version__</span></code></pre></div>
<pre class="text"><code>'2.7.6'</code></pre>
<p><strong>Disable max rows and columns for pandas</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="select-a-model" class="level2">
<h2 class="anchored" data-anchor-id="select-a-model">Select a Model</h2>
<p>Let’s start by selecting a model from the Timm library to finetune. The available pretrained models depend on the version of the Timm library installed.</p>
<p><strong>Import the Timm library</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> timm</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">timm.__version__</span></code></pre></div>
<pre class="text"><code>'0.6.5'</code></pre>
<p><strong>Check available pretrained model types</strong></p>
<p>We can check which model types have pretrained weights using the <code>timm.list_models()</code> function.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model_types <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">set</span>([model.split(<span class="st" style="color: #20794D;">'_'</span>)[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> model <span class="kw" style="color: #003B4F;">in</span> timm.list_models(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)]))</span>
<span id="cb10-2">model_types.sort()</span>
<span id="cb10-3">pd.DataFrame(model_types)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
adv
</td>
</tr>
<tr>
<th>
1
</th>
<td>
bat
</td>
</tr>
<tr>
<th>
2
</th>
<td>
beit
</td>
</tr>
<tr>
<th>
3
</th>
<td>
botnet26t
</td>
</tr>
<tr>
<th>
4
</th>
<td>
cait
</td>
</tr>
<tr>
<th>
5
</th>
<td>
coat
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convit
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convmixer
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext
</td>
</tr>
<tr>
<th>
9
</th>
<td>
crossvit
</td>
</tr>
<tr>
<th>
10
</th>
<td>
cs3darknet
</td>
</tr>
<tr>
<th>
11
</th>
<td>
cspdarknet53
</td>
</tr>
<tr>
<th>
12
</th>
<td>
cspresnet50
</td>
</tr>
<tr>
<th>
13
</th>
<td>
cspresnext50
</td>
</tr>
<tr>
<th>
14
</th>
<td>
darknet53
</td>
</tr>
<tr>
<th>
15
</th>
<td>
deit
</td>
</tr>
<tr>
<th>
16
</th>
<td>
deit3
</td>
</tr>
<tr>
<th>
17
</th>
<td>
densenet121
</td>
</tr>
<tr>
<th>
18
</th>
<td>
densenet161
</td>
</tr>
<tr>
<th>
19
</th>
<td>
densenet169
</td>
</tr>
<tr>
<th>
20
</th>
<td>
densenet201
</td>
</tr>
<tr>
<th>
21
</th>
<td>
densenetblur121d
</td>
</tr>
<tr>
<th>
22
</th>
<td>
dla102
</td>
</tr>
<tr>
<th>
23
</th>
<td>
dla102x
</td>
</tr>
<tr>
<th>
24
</th>
<td>
dla102x2
</td>
</tr>
<tr>
<th>
25
</th>
<td>
dla169
</td>
</tr>
<tr>
<th>
26
</th>
<td>
dla34
</td>
</tr>
<tr>
<th>
27
</th>
<td>
dla46
</td>
</tr>
<tr>
<th>
28
</th>
<td>
dla46x
</td>
</tr>
<tr>
<th>
29
</th>
<td>
dla60
</td>
</tr>
<tr>
<th>
30
</th>
<td>
dla60x
</td>
</tr>
<tr>
<th>
31
</th>
<td>
dm
</td>
</tr>
<tr>
<th>
32
</th>
<td>
dpn107
</td>
</tr>
<tr>
<th>
33
</th>
<td>
dpn131
</td>
</tr>
<tr>
<th>
34
</th>
<td>
dpn68
</td>
</tr>
<tr>
<th>
35
</th>
<td>
dpn68b
</td>
</tr>
<tr>
<th>
36
</th>
<td>
dpn92
</td>
</tr>
<tr>
<th>
37
</th>
<td>
dpn98
</td>
</tr>
<tr>
<th>
38
</th>
<td>
eca
</td>
</tr>
<tr>
<th>
39
</th>
<td>
ecaresnet101d
</td>
</tr>
<tr>
<th>
40
</th>
<td>
ecaresnet269d
</td>
</tr>
<tr>
<th>
41
</th>
<td>
ecaresnet26t
</td>
</tr>
<tr>
<th>
42
</th>
<td>
ecaresnet50d
</td>
</tr>
<tr>
<th>
43
</th>
<td>
ecaresnet50t
</td>
</tr>
<tr>
<th>
44
</th>
<td>
ecaresnetlight
</td>
</tr>
<tr>
<th>
45
</th>
<td>
edgenext
</td>
</tr>
<tr>
<th>
46
</th>
<td>
efficientnet
</td>
</tr>
<tr>
<th>
47
</th>
<td>
efficientnetv2
</td>
</tr>
<tr>
<th>
48
</th>
<td>
ens
</td>
</tr>
<tr>
<th>
49
</th>
<td>
ese
</td>
</tr>
<tr>
<th>
50
</th>
<td>
fbnetc
</td>
</tr>
<tr>
<th>
51
</th>
<td>
fbnetv3
</td>
</tr>
<tr>
<th>
52
</th>
<td>
gc
</td>
</tr>
<tr>
<th>
53
</th>
<td>
gcresnet33ts
</td>
</tr>
<tr>
<th>
54
</th>
<td>
gcresnet50t
</td>
</tr>
<tr>
<th>
55
</th>
<td>
gcresnext26ts
</td>
</tr>
<tr>
<th>
56
</th>
<td>
gcresnext50ts
</td>
</tr>
<tr>
<th>
57
</th>
<td>
gernet
</td>
</tr>
<tr>
<th>
58
</th>
<td>
ghostnet
</td>
</tr>
<tr>
<th>
59
</th>
<td>
gluon
</td>
</tr>
<tr>
<th>
60
</th>
<td>
gmixer
</td>
</tr>
<tr>
<th>
61
</th>
<td>
gmlp
</td>
</tr>
<tr>
<th>
62
</th>
<td>
halo2botnet50ts
</td>
</tr>
<tr>
<th>
63
</th>
<td>
halonet26t
</td>
</tr>
<tr>
<th>
64
</th>
<td>
halonet50ts
</td>
</tr>
<tr>
<th>
65
</th>
<td>
haloregnetz
</td>
</tr>
<tr>
<th>
66
</th>
<td>
hardcorenas
</td>
</tr>
<tr>
<th>
67
</th>
<td>
hrnet
</td>
</tr>
<tr>
<th>
68
</th>
<td>
ig
</td>
</tr>
<tr>
<th>
69
</th>
<td>
inception
</td>
</tr>
<tr>
<th>
70
</th>
<td>
jx
</td>
</tr>
<tr>
<th>
71
</th>
<td>
lambda
</td>
</tr>
<tr>
<th>
72
</th>
<td>
lamhalobotnet50ts
</td>
</tr>
<tr>
<th>
73
</th>
<td>
lcnet
</td>
</tr>
<tr>
<th>
74
</th>
<td>
legacy
</td>
</tr>
<tr>
<th>
75
</th>
<td>
levit
</td>
</tr>
<tr>
<th>
76
</th>
<td>
mixer
</td>
</tr>
<tr>
<th>
77
</th>
<td>
mixnet
</td>
</tr>
<tr>
<th>
78
</th>
<td>
mnasnet
</td>
</tr>
<tr>
<th>
79
</th>
<td>
mobilenetv2
</td>
</tr>
<tr>
<th>
80
</th>
<td>
mobilenetv3
</td>
</tr>
<tr>
<th>
81
</th>
<td>
mobilevit
</td>
</tr>
<tr>
<th>
82
</th>
<td>
mobilevitv2
</td>
</tr>
<tr>
<th>
83
</th>
<td>
nasnetalarge
</td>
</tr>
<tr>
<th>
84
</th>
<td>
nf
</td>
</tr>
<tr>
<th>
85
</th>
<td>
nfnet
</td>
</tr>
<tr>
<th>
86
</th>
<td>
pit
</td>
</tr>
<tr>
<th>
87
</th>
<td>
pnasnet5large
</td>
</tr>
<tr>
<th>
88
</th>
<td>
poolformer
</td>
</tr>
<tr>
<th>
89
</th>
<td>
regnetv
</td>
</tr>
<tr>
<th>
90
</th>
<td>
regnetx
</td>
</tr>
<tr>
<th>
91
</th>
<td>
regnety
</td>
</tr>
<tr>
<th>
92
</th>
<td>
regnetz
</td>
</tr>
<tr>
<th>
93
</th>
<td>
repvgg
</td>
</tr>
<tr>
<th>
94
</th>
<td>
res2net101
</td>
</tr>
<tr>
<th>
95
</th>
<td>
res2net50
</td>
</tr>
<tr>
<th>
96
</th>
<td>
res2next50
</td>
</tr>
<tr>
<th>
97
</th>
<td>
resmlp
</td>
</tr>
<tr>
<th>
98
</th>
<td>
resnest101e
</td>
</tr>
<tr>
<th>
99
</th>
<td>
resnest14d
</td>
</tr>
<tr>
<th>
100
</th>
<td>
resnest200e
</td>
</tr>
<tr>
<th>
101
</th>
<td>
resnest269e
</td>
</tr>
<tr>
<th>
102
</th>
<td>
resnest26d
</td>
</tr>
<tr>
<th>
103
</th>
<td>
resnest50d
</td>
</tr>
<tr>
<th>
104
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
105
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
106
</th>
<td>
resnet10t
</td>
</tr>
<tr>
<th>
107
</th>
<td>
resnet14t
</td>
</tr>
<tr>
<th>
108
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
109
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
110
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
111
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
112
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
113
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
114
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
115
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
116
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
117
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
118
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
119
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
120
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
121
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
122
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
123
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
124
</th>
<td>
resnetaa50
</td>
</tr>
<tr>
<th>
125
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
126
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
127
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
128
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
129
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
130
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
131
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
132
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
133
</th>
<td>
resnetv2
</td>
</tr>
<tr>
<th>
134
</th>
<td>
resnext101
</td>
</tr>
<tr>
<th>
135
</th>
<td>
resnext26ts
</td>
</tr>
<tr>
<th>
136
</th>
<td>
resnext50
</td>
</tr>
<tr>
<th>
137
</th>
<td>
resnext50d
</td>
</tr>
<tr>
<th>
138
</th>
<td>
rexnet
</td>
</tr>
<tr>
<th>
139
</th>
<td>
sebotnet33ts
</td>
</tr>
<tr>
<th>
140
</th>
<td>
sehalonet33ts
</td>
</tr>
<tr>
<th>
141
</th>
<td>
selecsls42b
</td>
</tr>
<tr>
<th>
142
</th>
<td>
selecsls60
</td>
</tr>
<tr>
<th>
143
</th>
<td>
selecsls60b
</td>
</tr>
<tr>
<th>
144
</th>
<td>
semnasnet
</td>
</tr>
<tr>
<th>
145
</th>
<td>
sequencer2d
</td>
</tr>
<tr>
<th>
146
</th>
<td>
seresnet152d
</td>
</tr>
<tr>
<th>
147
</th>
<td>
seresnet33ts
</td>
</tr>
<tr>
<th>
148
</th>
<td>
seresnet50
</td>
</tr>
<tr>
<th>
149
</th>
<td>
seresnext101
</td>
</tr>
<tr>
<th>
150
</th>
<td>
seresnext101d
</td>
</tr>
<tr>
<th>
151
</th>
<td>
seresnext26d
</td>
</tr>
<tr>
<th>
152
</th>
<td>
seresnext26t
</td>
</tr>
<tr>
<th>
153
</th>
<td>
seresnext26ts
</td>
</tr>
<tr>
<th>
154
</th>
<td>
seresnext50
</td>
</tr>
<tr>
<th>
155
</th>
<td>
seresnextaa101d
</td>
</tr>
<tr>
<th>
156
</th>
<td>
skresnet18
</td>
</tr>
<tr>
<th>
157
</th>
<td>
skresnet34
</td>
</tr>
<tr>
<th>
158
</th>
<td>
skresnext50
</td>
</tr>
<tr>
<th>
159
</th>
<td>
spnasnet
</td>
</tr>
<tr>
<th>
160
</th>
<td>
ssl
</td>
</tr>
<tr>
<th>
161
</th>
<td>
swin
</td>
</tr>
<tr>
<th>
162
</th>
<td>
swinv2
</td>
</tr>
<tr>
<th>
163
</th>
<td>
swsl
</td>
</tr>
<tr>
<th>
164
</th>
<td>
tf
</td>
</tr>
<tr>
<th>
165
</th>
<td>
tinynet
</td>
</tr>
<tr>
<th>
166
</th>
<td>
tnt
</td>
</tr>
<tr>
<th>
167
</th>
<td>
tresnet
</td>
</tr>
<tr>
<th>
168
</th>
<td>
tv
</td>
</tr>
<tr>
<th>
169
</th>
<td>
twins
</td>
</tr>
<tr>
<th>
170
</th>
<td>
vgg11
</td>
</tr>
<tr>
<th>
171
</th>
<td>
vgg13
</td>
</tr>
<tr>
<th>
172
</th>
<td>
vgg16
</td>
</tr>
<tr>
<th>
173
</th>
<td>
vgg19
</td>
</tr>
<tr>
<th>
174
</th>
<td>
visformer
</td>
</tr>
<tr>
<th>
175
</th>
<td>
vit
</td>
</tr>
<tr>
<th>
176
</th>
<td>
volo
</td>
</tr>
<tr>
<th>
177
</th>
<td>
wide
</td>
</tr>
<tr>
<th>
178
</th>
<td>
xception
</td>
</tr>
<tr>
<th>
179
</th>
<td>
xception41
</td>
</tr>
<tr>
<th>
180
</th>
<td>
xception41p
</td>
</tr>
<tr>
<th>
181
</th>
<td>
xception65
</td>
</tr>
<tr>
<th>
182
</th>
<td>
xception65p
</td>
</tr>
<tr>
<th>
183
</th>
<td>
xception71
</td>
</tr>
<tr>
<th>
184
</th>
<td>
xcit
</td>
</tr>
</tbody>

</table>
</div>
<p>Timm provides many pretrained models, but not all of them are fast enough for real-time applications. We can filter the results by providing a full or partial model name.</p>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> models</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'convnext*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
convnext_base
</td>
</tr>
<tr>
<th>
1
</th>
<td>
convnext_base_384_in22ft1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
convnext_base_in22ft1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
convnext_base_in22k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
convnext_large
</td>
</tr>
<tr>
<th>
5
</th>
<td>
convnext_large_384_in22ft1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convnext_large_in22ft1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convnext_large_in22k
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext_small
</td>
</tr>
<tr>
<th>
9
</th>
<td>
convnext_small_384_in22ft1k
</td>
</tr>
<tr>
<th>
10
</th>
<td>
convnext_small_in22ft1k
</td>
</tr>
<tr>
<th>
11
</th>
<td>
convnext_small_in22k
</td>
</tr>
<tr>
<th>
12
</th>
<td>
convnext_tiny
</td>
</tr>
<tr>
<th>
13
</th>
<td>
convnext_tiny_384_in22ft1k
</td>
</tr>
<tr>
<th>
14
</th>
<td>
convnext_tiny_hnf
</td>
</tr>
<tr>
<th>
15
</th>
<td>
convnext_tiny_in22ft1k
</td>
</tr>
<tr>
<th>
16
</th>
<td>
convnext_tiny_in22k
</td>
</tr>
<tr>
<th>
17
</th>
<td>
convnext_xlarge_384_in22ft1k
</td>
</tr>
<tr>
<th>
18
</th>
<td>
convnext_xlarge_in22ft1k
</td>
</tr>
<tr>
<th>
19
</th>
<td>
convnext_xlarge_in22k
</td>
</tr>
</tbody>

</table>
</div>
<p>Let’s go with the <code>convnext_tiny</code> model since we want higher framerates. Each model comes with a set of default configuration parameters. We must keep track of the mean and std values used to normalize the model input.</p>
<p><strong>Inspect the default configuration for the <code>convnext_tiny</code> model</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> convnext</span>
<span id="cb12-2">convnext_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_tiny'</span></span>
<span id="cb12-3">pd.DataFrame.from_dict(convnext.default_cfgs[convnext_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://dl.fbaipublicfiles.com/convnext/convnext_tiny_1k_224_ema.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/1801.04381">MobileNetV2</a> models</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilenetv2*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilenetv2_050
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilenetv2_100
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilenetv2_110d
</td>
</tr>
<tr>
<th>
3
</th>
<td>
mobilenetv2_120d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
mobilenetv2_140
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilenetv2_100</code> model</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> efficientnet</span>
<span id="cb14-2">mobilenetv2_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilenetv2_100'</span></span>
<span id="cb14-3">pd.DataFrame.from_dict(efficientnet.default_cfgs[mobilenetv2_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv2_100_ra-b33bc2c4.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv_stem
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
classifier
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="">ResNet</a> models</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'resnet*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
resnet10t
</td>
</tr>
<tr>
<th>
1
</th>
<td>
resnet14t
</td>
</tr>
<tr>
<th>
2
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
3
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
5
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
6
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
7
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
8
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
9
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
10
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
11
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
12
</th>
<td>
resnet50_gn
</td>
</tr>
<tr>
<th>
13
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
14
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
15
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
16
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
17
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
18
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
19
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
20
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
21
</th>
<td>
resnetaa50
</td>
</tr>
<tr>
<th>
22
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
23
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
24
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
25
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
26
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
27
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
28
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
29
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
30
</th>
<td>
resnetv2_50
</td>
</tr>
<tr>
<th>
31
</th>
<td>
resnetv2_50d_evos
</td>
</tr>
<tr>
<th>
32
</th>
<td>
resnetv2_50d_gn
</td>
</tr>
<tr>
<th>
33
</th>
<td>
resnetv2_50x1_bit_distilled
</td>
</tr>
<tr>
<th>
34
</th>
<td>
resnetv2_50x1_bitm
</td>
</tr>
<tr>
<th>
35
</th>
<td>
resnetv2_50x1_bitm_in21k
</td>
</tr>
<tr>
<th>
36
</th>
<td>
resnetv2_50x3_bitm
</td>
</tr>
<tr>
<th>
37
</th>
<td>
resnetv2_50x3_bitm_in21k
</td>
</tr>
<tr>
<th>
38
</th>
<td>
resnetv2_101
</td>
</tr>
<tr>
<th>
39
</th>
<td>
resnetv2_101x1_bitm
</td>
</tr>
<tr>
<th>
40
</th>
<td>
resnetv2_101x1_bitm_in21k
</td>
</tr>
<tr>
<th>
41
</th>
<td>
resnetv2_101x3_bitm
</td>
</tr>
<tr>
<th>
42
</th>
<td>
resnetv2_101x3_bitm_in21k
</td>
</tr>
<tr>
<th>
43
</th>
<td>
resnetv2_152x2_bit_teacher
</td>
</tr>
<tr>
<th>
44
</th>
<td>
resnetv2_152x2_bit_teacher_384
</td>
</tr>
<tr>
<th>
45
</th>
<td>
resnetv2_152x2_bitm
</td>
</tr>
<tr>
<th>
46
</th>
<td>
resnetv2_152x2_bitm_in21k
</td>
</tr>
<tr>
<th>
47
</th>
<td>
resnetv2_152x4_bitm
</td>
</tr>
<tr>
<th>
48
</th>
<td>
resnetv2_152x4_bitm_in21k
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>resnet10t</code> model</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> resnet</span>
<span id="cb16-2">resnet_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'resnet10t'</span></span>
<span id="cb16-3">pd.DataFrame.from_dict(resnet.default_cfgs[resnet_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:600px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-rsb-weights/resnet10t_176_c3-f3215ab1.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 176, 176)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(6, 6)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bilinear
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv1.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
fc
</td>
</tr>
<tr>
<th>
test_crop_pct
</th>
<td>
0.95
</td>
</tr>
<tr>
<th>
test_input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Select a model</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># model_type = convnext</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># model_name = convnext_model</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;"># model_type = efficientnet</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># model_name = mobilenetv2_model</span></span>
<span id="cb17-5">model_type <span class="op" style="color: #5E5E5E;">=</span> resnet</span>
<span id="cb17-6">model_name <span class="op" style="color: #5E5E5E;">=</span> resnet_model</span></code></pre></div>
<p><strong>Store normalization stats</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">mean <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'mean'</span>]</span>
<span id="cb18-2">std <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'std'</span>]</span>
<span id="cb18-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
</section>
<section id="modify-transforms" class="level2">
<h2 class="anchored" data-anchor-id="modify-transforms">Modify Transforms</h2>
<p>We can apply the normalization stats at the end of the batch transforms.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [FlipItem(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>), Resize(input_dims, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb20-2"></span>
<span id="cb20-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb20-4">    Contrast(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb20-5">    Saturation(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb20-6">    Hue(max_hue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb20-7">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb20-8">        size<span class="op" style="color: #5E5E5E;">=</span>input_dims, </span>
<span id="cb20-9">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb20-10">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb20-11">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb20-12">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb20-13">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb20-14">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb20-15">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb20-16">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb20-17">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb20-18">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border),</span>
<span id="cb20-19">    Normalize.from_stats(mean<span class="op" style="color: #5E5E5E;">=</span>mean, std<span class="op" style="color: #5E5E5E;">=</span>std)</span>
<span id="cb20-20">]</span></code></pre></div>
</section>
<section id="define-learner" class="level2">
<h2 class="anchored" data-anchor-id="define-learner">Define Learner</h2>
<p>The training process is identical to the original tutorial, and we only need to pass the name of the Timm model to the <code>vision_learner</code> object.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model_name, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics).to_fp16()</span></code></pre></div>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>The OpenVINO model conversion script does not support PyTorch models, so we need to export the trained model to ONNX. We can then convert the ONNX model to OpenVINO’s IR format.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb22-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>'asl-and-some-words-resnet10t.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">torch.onnx.export(learn.model.cpu(),</span>
<span id="cb24-2">                  batched_tensor,</span>
<span id="cb24-3">                  onnx_file_name,</span>
<span id="cb24-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb24-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>,</span>
<span id="cb24-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb24-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb24-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb24-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb24-10">                 )</span></code></pre></div>
<p>Now we can define the argument for OpenVINO’s model conversion script.</p>
<p><strong>Import OpenVINO Dependencies</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Markdown, display</span></code></pre></div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">from</span> openvino.runtime <span class="im" style="color: #00769E;">import</span> Core</span></code></pre></div>
<p><strong>Define export directory</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">output_dir <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'./'</span>)</span>
<span id="cb27-2">output_dir</span></code></pre></div>
<pre class="text"><code>Path('.')</code></pre>
<p><strong>Define path for OpenVINO IR xml model file</strong></p>
<p>The conversion script generates an XML containing information about the model architecture and a BIN file that stores the trained weights. We need both files to perform inference. OpenVINO uses the same name for the BIN file as provided for the XML file.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">ir_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">.</span>split(<span class="st" style="color: #20794D;">'.'</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.xml"</span>)</span>
<span id="cb29-2">ir_path</span></code></pre></div>
<pre class="text"><code>Path('asl-and-some-words-resnet10t.xml')</code></pre>
<p><strong>Define arguments for model conversion script</strong></p>
<p>OpenVINO provides the option to include the normalization stats in the IR model. That way, we don’t need to account for different normalization stats when performing inference with multiple models. We can also convert the model to FP16 precision to reduce file size and improve inference speed.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Construct the command for Model Optimizer</span></span>
<span id="cb31-2">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""mo</span></span>
<span id="cb31-3"><span class="ss" style="color: #20794D;">                 --input_model "</span><span class="sc" style="color: #5E5E5E;">{</span>onnx_file_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-4"><span class="ss" style="color: #20794D;">                 --input_shape "[1,3, </span><span class="sc" style="color: #5E5E5E;">{</span>input_dims[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span>input_dims[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]"</span></span>
<span id="cb31-5"><span class="ss" style="color: #20794D;">                 --mean_values="</span><span class="sc" style="color: #5E5E5E;">{</span>mean<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-6"><span class="ss" style="color: #20794D;">                 --scale_values="</span><span class="sc" style="color: #5E5E5E;">{</span>std<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-7"><span class="ss" style="color: #20794D;">                 --data_type FP16</span></span>
<span id="cb31-8"><span class="ss" style="color: #20794D;">                 --output_dir "</span><span class="sc" style="color: #5E5E5E;">{</span>output_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb31-9"><span class="ss" style="color: #20794D;">                 """</span></span>
<span id="cb31-10">mo_command <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span>.join(mo_command.split())</span>
<span id="cb31-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model Optimizer command to convert the ONNX model to OpenVINO:"</span>)</span>
<span id="cb31-12">display(Markdown(<span class="ss" style="color: #20794D;">f"`</span><span class="sc" style="color: #5E5E5E;">{</span>mo_command<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`"</span>))</span></code></pre></div>
<pre class="text"><code>Model Optimizer command to convert the ONNX model to OpenVINO:</code></pre>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;">mo</span> <span class="at" style="color: #657422;">--input_model</span> <span class="st" style="color: #20794D;">"asl-and-some-words-resnet10t.onnx"</span> <span class="at" style="color: #657422;">--input_shape</span> <span class="st" style="color: #20794D;">"[1,3, 216, 384]"</span> <span class="at" style="color: #657422;">--mean_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.485, 0.456, 0.406)"</span> <span class="at" style="color: #657422;">--scale_values</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"(0.229, 0.224, 0.225)"</span> <span class="at" style="color: #657422;">--data_type</span> FP16 <span class="at" style="color: #657422;">--output_dir</span> <span class="st" style="color: #20794D;">"."</span></span></code></pre></div>
<p><strong>Convert ONNX model to OpenVINO IR</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> ir_path.exists():</span>
<span id="cb34-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Exporting ONNX model to IR... This may take a few minutes."</span>)</span>
<span id="cb34-3">    mo_result <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sx $mo_command</span>
<span id="cb34-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>.join(mo_result))</span>
<span id="cb34-5"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb34-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"IR model </span><span class="sc" style="color: #5E5E5E;">{</span>ir_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> already exists."</span>)</span></code></pre></div>
<pre class="text"><code>    Exporting ONNX model to IR... This may take a few minutes.
    Model Optimizer arguments:
    Common parameters:
        - Path to the Input Model:  /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/asl-and-some-words-resnet10t.onnx
        - Path for generated IR:    /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/.
        - IR output name:   asl-and-some-words-resnet10t
        - Log level:    ERROR
        - Batch:    Not specified, inherited from the model
        - Input layers:     Not specified, inherited from the model
        - Output layers:    Not specified, inherited from the model
        - Input shapes:     [1,3, 216, 384]
        - Source layout:    Not specified
        - Target layout:    Not specified
        - Layout:   Not specified
        - Mean values:  (0.485, 0.456, 0.406)
        - Scale values:     (0.229, 0.224, 0.225)
        - Scale factor:     Not specified
        - Precision of IR:  FP16
        - Enable fusing:    True
        - User transformations:     Not specified
        - Reverse input channels:   False
        - Enable IR generation for fixed input shape:   False
        - Use the transformations config file:  None
    Advanced parameters:
        - Force the usage of legacy Frontend of Model Optimizer for model conversion into IR:   False
        - Force the usage of new Frontend of Model Optimizer for model conversion into IR:  False
    OpenVINO runtime found in:  /home/innom-dt/mambaforge/envs/fastai-openvino/lib/python3.9/site-packages/openvino
    OpenVINO runtime version:   2022.1.0-7019-cdb9bec7210-releases/2022/1
    Model Optimizer version:    2022.1.0-7019-cdb9bec7210-releases/2022/1
    [ WARNING ]  
    Detected not satisfied dependencies:
        numpy: installed: 1.23.0, required: &lt; 1.20
    
    Please install required versions of components or run pip installation
    pip install openvino-dev
    [ SUCCESS ] Generated IR version 11 model.
    [ SUCCESS ] XML file: /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/asl-and-some-words-resnet10t.xml
    [ SUCCESS ] BIN file: /media/innom-dt/Samsung_T3/My_Environments/jupyter-notebooks/openvino/asl-and-some-words-resnet10t.bin
    [ SUCCESS ] Total execution time: 0.43 seconds. 
    [ SUCCESS ] Memory consumed: 123 MB. 
    It's been a while, check for a new version of Intel(R) Distribution of OpenVINO(TM) toolkit here https://software.intel.com/content/www/us/en/develop/tools/openvino-toolkit/download.html?cid=other&amp;source=prod&amp;campid=ww_2022_bu_IOTG_OpenVINO-2022-1&amp;content=upg_all&amp;medium=organic or on the GitHub*
    [ INFO ] The model was converted to IR v11, the latest model format that corresponds to the source DL framework input/output format. While IR v11 is backwards compatible with OpenVINO Inference Engine API v1.0, please use API v2.0 (as of 2022.1) to take advantage of the latest improvements in IR v11.
    Find more information about API v2.0 and IR v11 at https://docs.openvino.ai</code></pre>
</section>
<section id="benchmark-openvino-inference" class="level2">
<h2 class="anchored" data-anchor-id="benchmark-openvino-inference">Benchmark OpenVINO Inference</h2>
<p>Now we can compare inference speed between OpenVINO and PyTorch. OpenVINO supports inference with ONNX models in addition to its IR format.</p>
<p><strong>Get available OpenVINO compute devices</strong></p>
<p>OpenVINO does not support GPU inference with non-Intel GPUs.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">devices <span class="op" style="color: #5E5E5E;">=</span> ie.available_devices</span>
<span id="cb36-2"><span class="cf" style="color: #003B4F;">for</span> device <span class="kw" style="color: #003B4F;">in</span> devices:</span>
<span id="cb36-3">    device_name <span class="op" style="color: #5E5E5E;">=</span> ie.get_property(device_name<span class="op" style="color: #5E5E5E;">=</span>device, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FULL_DEVICE_NAME"</span>)</span>
<span id="cb36-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>device<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>device_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>CPU: 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz</code></pre>
<p><strong>Create normalized input for ONNX model</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">normalized_input_image <span class="op" style="color: #5E5E5E;">=</span> batched_tensor.cpu().detach().numpy()</span>
<span id="cb38-2">normalized_input_image.shape</span></code></pre></div>
<pre class="text"><code>(1, 3, 224, 224)</code></pre>
<p><strong>Test ONNX model using OpenVINO</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># Load network to Inference Engine</span></span>
<span id="cb40-2">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb40-3">model_onnx <span class="op" style="color: #5E5E5E;">=</span> ie.read_model(model<span class="op" style="color: #5E5E5E;">=</span>onnx_file_name)</span>
<span id="cb40-4">compiled_model_onnx <span class="op" style="color: #5E5E5E;">=</span> ie.compile_model(model<span class="op" style="color: #5E5E5E;">=</span>model_onnx, device_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPU"</span>)</span>
<span id="cb40-5"></span>
<span id="cb40-6">input_layer_onnx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_onnx.inputs))</span>
<span id="cb40-7">output_layer_onnx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_onnx.outputs))</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;"># Run inference on the input image</span></span>
<span id="cb40-10">res_onnx <span class="op" style="color: #5E5E5E;">=</span> compiled_model_onnx(inputs<span class="op" style="color: #5E5E5E;">=</span>[normalized_input_image])[output_layer_onnx]</span>
<span id="cb40-11">learn.dls.vocab[np.argmax(res_onnx)]</span></code></pre></div>
<pre class="text"><code>'J'</code></pre>
<p><strong>Benchmark ONNX model CPU inference speed</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb42-2">compiled_model_onnx(inputs<span class="op" style="color: #5E5E5E;">=</span>[normalized_input_image])[output_layer_onnx]</span></code></pre></div>
<pre class="text"><code>3.62 ms ± 61.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
<p><strong>Prepare input image for OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">input_image <span class="op" style="color: #5E5E5E;">=</span> scaled_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb44-2">input_image.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 224, 224])</code></pre>
<p><strong>Test OpenVINO IR model</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># Load the network in Inference Engine</span></span>
<span id="cb46-2">ie <span class="op" style="color: #5E5E5E;">=</span> Core()</span>
<span id="cb46-3">model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.read_model(model<span class="op" style="color: #5E5E5E;">=</span>ir_path)</span>
<span id="cb46-4">model_ir.reshape(input_image.shape)</span>
<span id="cb46-5">compiled_model_ir <span class="op" style="color: #5E5E5E;">=</span> ie.compile_model(model<span class="op" style="color: #5E5E5E;">=</span>model_ir, device_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPU"</span>)</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;"># Get input and output layers</span></span>
<span id="cb46-8">input_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.inputs))</span>
<span id="cb46-9">output_layer_ir <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(<span class="bu" style="color: null;">iter</span>(compiled_model_ir.outputs))</span>
<span id="cb46-10"></span>
<span id="cb46-11"><span class="co" style="color: #5E5E5E;"># Run inference on the input image</span></span>
<span id="cb46-12">res_ir <span class="op" style="color: #5E5E5E;">=</span> compiled_model_ir([input_image])[output_layer_ir]</span>
<span id="cb46-13">learn.dls.vocab[np.argmax(res_ir)]</span></code></pre></div>
<pre class="text"><code>'J'</code></pre>
<p><strong>Benchmark OpenVINO IR model CPU inference speed</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb48-2">compiled_model_ir([input_image])[output_layer_ir]</span></code></pre></div>
<pre class="text"><code>3.39 ms ± 84.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
<p><strong>Note:</strong> The IR model is slightly faster than the ONNX model and half the file size.</p>
<p><strong>Benchmark PyTorch model GPU inference speed</strong></p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb50-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;">=</span> learn.model.cuda()(batched_tensor.cuda())</span></code></pre></div>
<pre class="text"><code>1.81 ms ± 5.52 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
<p>PyTorch inference with a Titan RTX is still faster than OpenVINO inference with an i7-11700K for a ResNet10 model. However, OpenVINO CPU inference is often faster when using models optimized for mobile devices, like MobileNet.</p>
<p><strong>Benchmark PyTorch model CPU inference speed</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb52-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): preds <span class="op" style="color: #5E5E5E;">=</span> learn.model.cpu()(batched_tensor.cpu())</span></code></pre></div>
<pre class="text"><code>8.94 ms ± 52.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
<p>OpenVINO is easily faster than PyTorch for CPU inference.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered how to modify the training code from the <a href="../../fastai-to-unity-tutorial/part-1">fastai-to-unity tutorial</a>to finetune models from the Timm library and export them as OpenVINO IR models. Part 2 will cover creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these models using <a href="https://docs.openvino.ai/latest/index.html">OpenVINO</a>.</p>
<p><strong>Previous:</strong> <a href="../../fastai-to-unity-tutorial/part-3/">Fastai to Unity Tutorial Pt. 3</a></p>
<p><strong>Next:</strong> <a href="../part-2/">How to Create an OpenVINO Plugin for Unity on Windows Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-openvino-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>openvino</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-openvino-unity-tutorial/part-1/index.html</guid>
  <pubDate>Sun, 17 Jul 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create a LibTorch Plugin for Unity on Windows Pt. 3</title>
  <link>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Open Unity Project</li>
<li>Add New Asset Files</li>
<li>Allow Unsafe Code</li>
<li>Modify Compute Shader</li>
<li>Create <code>ImageClassifierTorch</code> Script</li>
<li>Modify GUI</li>
<li>Add <code>ImageClassifierTorch</code> Component</li>
<li>Update On Value Changed Events</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-2/">Part 2</a> covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform image classification with TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>. This post covers the required modifications for the Unity project from the fastai-to-unity tutorial to use this DLL.</p>
</section>
<section id="open-unity-project" class="level2">
<h2 class="anchored" data-anchor-id="open-unity-project">Open Unity Project</h2>
<p>Open the <a href="../../fastai-to-unity-tutorial/part-1/">Fastai-Unity-Tutorial</a> project in the Unity Editor. The project is available in the GitHub repository linked below for anyone who did not follow the previous tutorial series.</p>
<ul>
<li><strong><a href="https://github.com/cj-mills/fastai-to-unity-tutorial">fastai-to-unity-tutorial GitHub repository</a></strong></li>
</ul>
</section>
<section id="add-new-asset-files" class="level2">
<h2 class="anchored" data-anchor-id="add-new-asset-files">Add New Asset Files</h2>
<p>First, we’ll create a new folder to store the <a href="../part-2/#gather-dependencies">DLL files</a> from part 2. Create a new folder called <code>Plugins</code>, then create a subfolder named <code>x86_64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-plugins-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-plugins-folder</figcaption><p></p>
</figure>
</div>
<p>Copy all the DLL files into the <code>Assets/Plugins/x86_64</code> folder. We then need to close and reopen the project for Unity to load the plugin files.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1eH1JdyFkQQRAK8EA0gsTxXtOylWxZ9Nd?usp=sharing">Plugins Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-dll-files</figcaption><p></p>
</figure>
</div>
<p>Next, we’ll create a folder to store the TorchScript modules. TorchScript modules are not <a href="https://docs.unity3d.com/Manual/AssetTypes.html">supported asset types</a>, so we need to place them in a <a href="https://docs.unity3d.com/Manual/StreamingAssets.html">StreamingAssets</a> folder. Create a new folder named <code>StreamingAssets</code>. We’ll put the files in a new subfolder called <code>TorchScriptModules</code> to keep things organized.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-streaming-assets-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-streaming-assets-folder</figcaption><p></p>
</figure>
</div>
<p>Add any TorchScript files into the <code>Assets/StreamingAssets/TorchScriptModules</code> folder.</p>
<ul>
<li><a href="https://drive.google.com/drive/folders/1J6keeA3w22Lk0s-mSHfPcFbSosalCSyL?usp=sharing">TorchScriptModules Folder Google Drive</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-torchscript-modules.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-torchscript-modules</figcaption><p></p>
</figure>
</div>
<p>Lastly, we’ll store the JSON files with the normalization stats in a new assets folder called <code>NormalizationStats</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-normalization-stats-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-normalization-stats-folder</figcaption><p></p>
</figure>
</div>
</section>
<section id="allow-unsafe-code" class="level2">
<h2 class="anchored" data-anchor-id="allow-unsafe-code">Allow Unsafe Code</h2>
<p>Rather than copying the input image from Unity to the LibTorch plugin, we’ll pass a pointer to the pixel data. First, we need to allow unsafe code for the Unity project. Select <code>Edit → Project Settings...</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-open-project-settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-open-project-settings</figcaption><p></p>
</figure>
</div>
<p>Open the <code>Player → Other Settings</code> dropdown and scroll down to the <code>Allow 'unsafe' Code</code> checkbox. Enable the setting and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-allow-unsafe-code.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-allow-unsafe-code</figcaption><p></p>
</figure>
</div>
<p>Now we can start modifying the code.</p>
</section>
<section id="modify-compute-shader" class="level2">
<h2 class="anchored" data-anchor-id="modify-compute-shader">Modify Compute Shader</h2>
<p>The input image gets flipped upside down when we send it to the plugin. We can pre-flip the image in the <code>ProcessingShader</code> compute shader before sending it to the plugin. We need to know the height of the input image, which we can access with the <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-object-texture2d-getdimensions">Texture2D::GetDimensions</a> function.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb1-2">#pragma kernel NormalizeImageNet</span>
<span id="cb1-3">#pragma kernel FlipXAxis</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb1-6">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb1-8">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// Flip the image around the x-axis</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb1-12"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">FlipXAxis</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage width</span></span>
<span id="cb1-15">    <span class="dt" style="color: #AD0000;">uint</span> width<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-16">    <span class="co" style="color: #5E5E5E;">// Stores the InputImage height</span></span>
<span id="cb1-17">    <span class="dt" style="color: #AD0000;">uint</span> height<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-18">    <span class="co" style="color: #5E5E5E;">// Get the dimensions of the InputImage</span></span>
<span id="cb1-19">    InputImage<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetDimensions</span><span class="op" style="color: #5E5E5E;">(</span>width<span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;">// Update the y value for the pixel coordinates</span></span>
<span id="cb1-22">    int2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">int2</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> height <span class="op" style="color: #5E5E5E;">-</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-23">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> InputImage<span class="op" style="color: #5E5E5E;">[</span>coords<span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">z</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb1-27"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb1-28"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb1-29"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb1-31">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb1-33">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb1-34">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb1-35">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb1-36">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb1-37">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb1-38">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb1-39">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-40"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-imageclassifiertorch-script" class="level2">
<h2 class="anchored" data-anchor-id="create-imageclassifiertorch-script">Create <code>ImageClassifierTorch</code> Script</h2>
<p>Duplicate the <code>ImageClassifier</code> script and name the copy <code>ImageClassifierTorch</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-create-image-classifier-torch-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-image-classifier-torch-script</figcaption><p></p>
</figure>
</div>
<p><strong>Update class name</strong></p>
<p>Open the new script in the code editor and replace the class name with the new file name.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifierTorch <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span></code></pre></div>
<p><strong>Update required namespaces</strong></p>
<p>We no longer need the Barracuda namespace. Instead, we need the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices?view=net-5.0">System.Runtime.InteropServices</a> namespace to handle interactions with the LibTorch plugin.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Runtime</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">InteropServices</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Remove Barracuda code</strong></p>
<p>We need to delete all the public and private Barracuda variables, along with the <code>InitializeWorker</code> and <code>OnDisable</code> methods.</p>
<p><strong>Update data processing variables</strong></p>
<p>We can remove the <code>processingMaterial</code> variable from the Data Processing section. We no longer need to download model output from the GPU to the CPU. However, we now need to download the input image to the CPU before sending it to the plugin. We can do this asynchronously to help reduce the GPU-to-CPU performance bottleneck.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download input image from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update variables for user interface</strong></p>
<p>We’ll add a new dropdown so that we can switch between the available TorchScript modules at runtime.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-18"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available torchscript models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-19"><span class="kw" style="color: #003B4F;">public</span> Dropdown modelDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define public variables for the LibTorch plugin</strong></p>
<p>Next, we’ll create variables to indicate the StreamingAssets subfolder for the TorchScript modules and add the JSON files with the normalization stats.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Libtorch"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name of the libtorch models folder"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> torchscriptModulesDir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"TorchScriptModules"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A list json files containing the normalization stats for available models"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> TextAsset<span class="op" style="color: #5E5E5E;">[]</span> normalizationStatsList<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Update input variables</strong></p>
<p>Like in the previous tutorial series, when using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">// The model GPU input texture</span></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">// The model CPU input texture</span></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;">private</span> Texture2D inputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define private variables for the LibTorch plugin</strong></p>
<p>We’ll store the full paths and names for the Torchscript modules in separate lists. We also need to create another little class that indicates the structure of the JSON content for files with normalization stats.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">// File paths for the available torchscript models</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelPaths <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">// Names of the available torchscript models</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;">private</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> modelNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;">// A class for reading in normalization stats from a JSON file</span></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;">class</span> NormalizationStats <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean<span class="op" style="color: #5E5E5E;">;</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Import functions from the LibTorch plugin</strong></p>
<p>We pass the pointer to the input pixel data as an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=net-6.0">IntPtr</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">// Name of the DLL file</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">string</span> dll <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Libtorch_CPU_Image_Classifier_DLL"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> model<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">DllImport</span><span class="op" style="color: #5E5E5E;">(</span>dll<span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;">private</span> <span class="kw" style="color: #003B4F;">static</span> <span class="kw" style="color: #003B4F;">extern</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">(</span>IntPtr inputData<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p><strong>Define method to get the available TorchScript modules</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">/// Get the file paths for available torchscript models</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">GetTorchModels</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb10-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-6">    <span class="co" style="color: #5E5E5E;">// Get the paths for the .pt file for each model</span></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> file <span class="kw" style="color: #003B4F;">in</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IO</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Directory</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetFiles</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"{Application.streamingAssetsPath}/{modelsDir}"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-9">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">EndsWith</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">".pt"</span><span class="op" style="color: #5E5E5E;">))</span></span>
<span id="cb10-10">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-11">            modelPaths<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>file<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-12">            <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> file<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'\\'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="ch" style="color: #20794D;">'.'</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-13">            modelNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Substring</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-14">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb11-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb11-8">    <span class="kw" style="color: #003B4F;">foreach</span><span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb11-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb11-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb11-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb11-18">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb11-19">    <span class="co" style="color: #5E5E5E;">// Add TorchScript model names to menu</span></span>
<span id="cb11-20">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>modelNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;">// Select the first option in the dropdown</span></span>
<span id="cb11-22">    modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update Start method</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb12-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb12-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb12-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb12-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb12-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb12-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb12-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-21"></span>
<span id="cb12-22">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb12-23">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-24"></span>
<span id="cb12-25">    <span class="co" style="color: #5E5E5E;">// Get the file paths for available torchscript models</span></span>
<span id="cb12-26">    <span class="fu" style="color: #4758AB;">GetTorchModels</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-27"></span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb12-29">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-30"></span>
<span id="cb12-31">    <span class="co" style="color: #5E5E5E;">// Update the selected torchscript model</span></span>
<span id="cb12-32">    <span class="fu" style="color: #4758AB;">UpdateTorchScriptModel</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb12-33"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb13-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb13-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb13-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb13-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb13-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">RenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb13-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb13-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-20"></span>
<span id="cb13-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb13-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb13-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-25"></span>
<span id="cb13-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb13-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-28"></span>
<span id="cb13-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb13-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-31"></span>
<span id="cb13-32">    <span class="co" style="color: #5E5E5E;">// Release RenderTexture</span></span>
<span id="cb13-33">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Release</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb13-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Update method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb14-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb14-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb14-17">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb14-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb14-19">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to send the input texture data to the plugin</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;">/// Pin memory for the input data and pass a reference to the plugin for inference</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"texture"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The input texture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">unsafe</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>Texture2D texture<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb15-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-8">    <span class="dt" style="color: #AD0000;">int</span> classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-9"></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;">//Pin Memory</span></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;">fixed</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">byte</span><span class="op" style="color: #5E5E5E;">*</span> p <span class="op" style="color: #5E5E5E;">=</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetRawTextureData</span><span class="op" style="color: #5E5E5E;">())</span></span>
<span id="cb15-12">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb15-13">        <span class="co" style="color: #5E5E5E;">// Perform inference and get the predicted class index</span></span>
<span id="cb15-14">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">PerformInference</span><span class="op" style="color: #5E5E5E;">((</span>IntPtr<span class="op" style="color: #5E5E5E;">)</span>p<span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb15-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-16"></span>
<span id="cb15-17">    <span class="kw" style="color: #003B4F;">return</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Modify Update method</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb16-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb16-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-9"></span>
<span id="cb16-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb16-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-12"></span>
<span id="cb16-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb16-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb16-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb16-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb16-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-26"></span>
<span id="cb16-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb16-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb16-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-32"></span>
<span id="cb16-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb16-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-36"></span>
<span id="cb16-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb16-38">    inputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-39"></span>
<span id="cb16-40">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>inputTextureCPU <span class="op" style="color: #5E5E5E;">||</span> inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">!=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-41">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-42">        inputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-43">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-44"></span>
<span id="cb16-45">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTextureGPU.width}x{inputTextureGPU.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-46"></span>
<span id="cb16-47">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb16-48">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-49"></span>
<span id="cb16-50">    <span class="co" style="color: #5E5E5E;">// Flip image before sending to DLL</span></span>
<span id="cb16-51">    <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"FlipXAxis"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-52"></span>
<span id="cb16-53">    <span class="co" style="color: #5E5E5E;">// Download pixel data from GPU to CPU</span></span>
<span id="cb16-54">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb16-55">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-56">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBA32</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-57">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-58">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb16-59">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb16-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-61">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReadPixels</span><span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> inputTextureGPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">),</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-62">        inputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb16-63">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb16-64"></span>
<span id="cb16-65">    <span class="co" style="color: #5E5E5E;">// Send reference to inputData to DLL</span></span>
<span id="cb16-66">    classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UploadTexture</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureCPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-67">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Class Index: {classIndex}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-68"></span>
<span id="cb16-69">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb16-70">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-71">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>validIndex <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[classIndex]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Invalid index"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-72"></span>
<span id="cb16-73">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb16-74">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb16-75"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a method to update the current TorchScript model</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Update the selected torchscript model</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateTorchScriptModel</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-6">    <span class="dt" style="color: #AD0000;">string</span> modelName <span class="op" style="color: #5E5E5E;">=</span> modelNames<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb17-7">    <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> mean <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-8">    <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> std <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>TextAsset textAsset <span class="kw" style="color: #003B4F;">in</span> normalizationStatsList<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-11">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-12">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>modelName<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span>textAsset<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Split</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"-"</span><span class="op" style="color: #5E5E5E;">)[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]))</span></span>
<span id="cb17-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-14">            <span class="co" style="color: #5E5E5E;">// Initialize the normalization stats from JSON file</span></span>
<span id="cb17-15">            mean <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>NormalizationStats<span class="op" style="color: #5E5E5E;">&gt;(</span>textAsset<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">mean</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-16">            std <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>NormalizationStats<span class="op" style="color: #5E5E5E;">&gt;(</span>textAsset<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">std</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-17">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-18">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-19"></span>
<span id="cb17-20">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mean<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-21">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-22">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Unable to find normalization stats"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-23">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-25">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-26">        <span class="dt" style="color: #AD0000;">string</span> mean_str <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-27">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> val <span class="kw" style="color: #003B4F;">in</span> mean<span class="op" style="color: #5E5E5E;">)</span> mean_str <span class="op" style="color: #5E5E5E;">+=</span> $<span class="st" style="color: #20794D;">"{val} "</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-28">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Mean Stats: {mean_str}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-29">        <span class="dt" style="color: #AD0000;">string</span> std_str <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-30">        <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span> val <span class="kw" style="color: #003B4F;">in</span> std<span class="op" style="color: #5E5E5E;">)</span> std_str <span class="op" style="color: #5E5E5E;">+=</span> $<span class="st" style="color: #20794D;">"{val} "</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-31">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Std Stats: {std_str}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-32">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb17-33"></span>
<span id="cb17-34">    <span class="co" style="color: #5E5E5E;">// Load the specified torchscript model</span></span>
<span id="cb17-35">    <span class="dt" style="color: #AD0000;">int</span> result <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">LoadModel</span><span class="op" style="color: #5E5E5E;">(</span>modelPaths<span class="op" style="color: #5E5E5E;">[</span>modelDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">],</span> mean<span class="op" style="color: #5E5E5E;">,</span> std<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-36">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>result <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Model loaded successfully"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"error loading the model"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-37"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="modify-gui" class="level2">
<h2 class="anchored" data-anchor-id="modify-gui">Modify GUI</h2>
<p>As mentioned earlier, we’ll add a new dropdown menu to the GUI so we can switch between available TorchScript modules at runtime. Select the <code>WebcamDeviceText</code> and <code>WebcamDropdown</code> objects and press Ctrl-d to duplicate them. Rename the duplicates to <code>TorchScriptModelText</code> and <code>TorchScriptModelDropdown</code> respectively.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-torchscript-model-dropdown.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-torchscript-model-dropdown</figcaption><p></p>
</figure>
</div>
<p>Select the <code>TorchScriptModelText</code> object and update the <code>Pos Y</code> value to <code>-145</code> and the Text value to <code>TorchScript Model:</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-update-torchscript-model-text-position-and-text.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-torchscript-model-text-position</figcaption><p></p>
</figure>
</div>
<p>Then, select the <code>TorchScriptModelDropdown</code> object and update the <code>Pos Y</code> value to <code>-165</code> in the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-update-torchscript-model-dropdown-position.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-torchscript-model-dropdown-position</figcaption><p></p>
</figure>
</div>
<p>The updated GUI should look like the image below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-view-updated-gui.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-view-updated-gui</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-imageclassifiertorch-component" class="level2">
<h2 class="anchored" data-anchor-id="add-imageclassifiertorch-component">Add <code>ImageClassifierTorch</code> Component</h2>
<p>Now we can add the new <code>ImageClassifierTorch</code> script to the <code>InferenceManager</code> object. Make sure to disable the existing <code>ImageClassifier</code> component, as shown below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-add-image-classifier-torch-component.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-image-classifier-torch-component</figcaption><p></p>
</figure>
</div>
</section>
<section id="update-on-value-changed-events" class="level2">
<h2 class="anchored" data-anchor-id="update-on-value-changed-events">Update On Value Changed Events</h2>
<p>With the <code>ImageClassifierTorch</code> component added, we can update the On Value Changed events for the <code>WebcamToggle</code>, <code>WebcamDropdown</code>, and <code>TorchScriptModelDropdown</code> objects.</p>
<p><strong>Update the <code>WebcamToggle</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-webcam-toggle-update-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-toggle-update-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Update the <code>WebcamDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-webcam-dropdown-update-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-dropdown-update-on-value-changed</figcaption><p></p>
</figure>
</div>
<p><strong>Update the <code>TorchScriptModelDropdown</code> On Value Changed Event</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/images/unity-update-torchscript-model-dropdown-on-value-changed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-torchscript-model-dropdown-on-value-changed</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This tutorial series covered creating a LibTorch plugin to perform inference with recent model architectures in the Unity game engine. LibTorch also provides the ability to update the model weights within the Unity application, which we might explore in a future tutorial.</p>
<p><strong>Previous:</strong> <a href="../part-2/">How to Create a LibTorch Plugin for Unity on Windows Pt.2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>libtorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-3/index.html</guid>
  <pubDate>Tue, 28 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create a LibTorch Plugin for Unity on Windows Pt. 2</title>
  <link>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Download Dependencies</li>
<li>Create DLL Project</li>
<li>Configure the Project</li>
<li>Add Include Directories</li>
<li>Link Libraries</li>
<li>Post Build Events</li>
<li>Update Precompiled Header File</li>
<li>Update dllmain File</li>
<li>Build Solution</li>
<li>Gather Dependencies</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1/">Part 1</a> covered modifying the training code from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a> to finetune models from the Timm library and export them as TorchScript modules. This post covers creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>.</p>
</section>
<section id="download-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="download-dependencies">Download Dependencies</h2>
<p>We need to download some dependencies before creating our Visual Studio project.</p>
<section id="download-opencv" class="level3">
<h3 class="anchored" data-anchor-id="download-opencv">Download OpenCV</h3>
<p>Our LibTorch DLL requires the <a href="https://github.com/opencv/opencv">OpenCV</a> library to process image data from Unity. The tutorial uses OpenCV 4.6.0, which is available at the link below.</p>
<ul>
<li><a href="https://github.com/opencv/opencv/releases/tag/4.6.0">OpenCV 4.6.0 GitHub</a></li>
</ul>
<p>Select the <code>opencv-4.6.0-vc14_vc15.exe</code> option from the Assets list.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/opencv_github_download_executable.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">opencv_github_download_executable</figcaption><p></p>
</figure>
</div>
<p>Run the executable once it finishes downloading. You might get a warning from Windows that the executable is an unrecognized app. We can bypass this by clicking the <code>More info</code> text, then the Run anyway button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/windows-defender-smartscreen-warning.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">windows-defender-smartscreen-warning</figcaption><p></p>
</figure>
</div>
<p>Then, click the <code>Run anyway</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/windows-defender-smartscreen-warning-run-anyway.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">windows-defender-smartscreen-warning-run-anyway</figcaption><p></p>
</figure>
</div>
<p>The executable will prompt us to select a location to extract the opencv folder. We’ll need to give Visual Studio this location to access the library’s functionality. I tend to place my C++ dependencies in a dedicated folder for consistency.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/opencv-select-extraction-location.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">opencv-select-extraction-location</figcaption><p></p>
</figure>
</div>
<p>If we open the opencv folder, we can see a build folder and a source folder. Everything we need is in the build folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/opencv-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">opencv-folder</figcaption><p></p>
</figure>
</div>
</section>
<section id="download-libtorch" class="level3">
<h3 class="anchored" data-anchor-id="download-libtorch">Download LibTorch</h3>
<p>PyTorch provides CPU and CUDA versions of LibTorch for Windows, but we’ll only be working with the CPU version for this post.</p>
<p>I encountered significant variance in CUDA performance between the Stable, Preview, and LTS releases. Stable CUDA inference speed was slower than CPU inference for the ConvNext and MobileViT models. The LTS release did not seem to support those models at all.</p>
<p>More importantly, LibTorch requires a “warmup” phase for CUDA inference where the initial model executions take a few seconds instead of a few milliseconds. Unity did not handle this well and kept crashing. There might be a way around this issue, but I’ll leave that for a future post.</p>
<p>The LibTorch releases are available on the PyTorch install page linked below. The tutorial uses the <code>Stable (1.1.0)</code> version.</p>
<ul>
<li><a href="https://pytorch.org/get-started/locally/">PyTorch install page</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/download-libtorch-cpu.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">download-libtorch-cpu</figcaption><p></p>
</figure>
</div>
<p>As with the OpenCV library, we must pick a location to extract the LibTorch library.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/libtorch-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">libtorch-folder</figcaption><p></p>
</figure>
</div>
<p>Now we can create the Visual Studio DLL project.</p>
</section>
</section>
<section id="create-dll-project" class="level2">
<h2 class="anchored" data-anchor-id="create-dll-project">Create DLL Project</h2>
<p>Open Visual Studio and select the <code>Create a new project</code> option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-create-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-create-new-project</figcaption><p></p>
</figure>
</div>
<p>Type <code>DLL</code> into the text box and select the <code>Dynamic-Link Library (DLL)</code> option. This option automatically configures a few parameters for us compared to starting with a standard console application.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-new-dll-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-new-dll-project</figcaption><p></p>
</figure>
</div>
<p>Choose a name and location for the project and click the <code>Create</code> button. By default, the DLL file will use the project name.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-choose-project-name-and-location.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-choose-project-name-and-location</figcaption><p></p>
</figure>
</div>
</section>
<section id="configure-the-project" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-project">Configure the Project</h2>
<p>At the top of the window, open the Solution Configurations dropdown menu, and select <code>Release</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-switch-to-release.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-release</figcaption><p></p>
</figure>
</div>
<p>Then, open the Solution Platform dropdown menu and select <code>x64</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-switch-to-64-bit.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-switch-to-64-bit</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-include-directories" class="level2">
<h2 class="anchored" data-anchor-id="add-include-directories">Add Include Directories</h2>
<p>We need to tell Visual Studio where LibTorch and OpenCV are so we can access their APIs. Right-click the project name in the Solution Explorer panel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-solution-explorer-select-project-name.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-solution-explorer-select-project-name</figcaption><p></p>
</figure>
</div>
<p>Select the <code>Properties</code> option in the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-properties.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-properties</figcaption><p></p>
</figure>
</div>
<p><strong>Note:</strong> We can change the name of the DLL file using the Target Name parameter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-properties-target-name.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-properties-target-name</figcaption><p></p>
</figure>
</div>
<p>In the Properties Window, open on the <code>C/C++</code> dropdown. Select the <code>Additional Include Directories</code> section and click on <code>&lt;Edit..&gt;</code> in the dropdown.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-additional-include-directories</figcaption><p></p>
</figure>
</div>
<p>Add the paths for the following folders and click <code>OK</code>.</p>
<ul>
<li><code>opencv\build\include</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\include</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\include\torch\csrc\api\include</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-add-additional-include-directories.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-add-additional-include-directories</figcaption><p></p>
</figure>
</div>
</section>
<section id="link-libraries" class="level2">
<h2 class="anchored" data-anchor-id="link-libraries">Link Libraries</h2>
<p>Next, open the <code>Linker</code> dropdown in the Properties window and select <code>Input</code>. Select <code>Additional Dependencies</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-linker-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-additional-dependencies</figcaption><p></p>
</figure>
</div>
<p>Add the paths to the following files and click <code>OK</code>.</p>
<ul>
<li><code>opencv\build\x64\vc15\lib\*</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\lib\c10.lib</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\lib\torch.lib</code></li>
<li><code>libtorch-win-shared-with-deps-1.11.0+cpu\libtorch\lib\torch_cpu.lib</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-linker-add-additional-dependencies.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-linker-add-additional-dependencies</figcaption><p></p>
</figure>
</div>
</section>
<section id="post-build-events" class="level2">
<h2 class="anchored" data-anchor-id="post-build-events">Post Build Events</h2>
<p>Our DLL file will depend on the following DLL files included with the LibTorch and OpenCV libraries.</p>
<p><strong>OpenCV DLL file</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/get-opencv-world-dll-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-opencv-world-dll-file</figcaption><p></p>
</figure>
</div>
<p><strong>LibTorch DLL files</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/get-libtorch-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get-libtorch-dll-files</figcaption><p></p>
</figure>
</div>
<p>We can add a post-build event in Visual Studio to automatically copy these DLL files to the build folder for the project at compile time. Open the <code>Build Events</code> dropdown in the Properties window and select <code>Post-Build Event</code>. Select <code>Command Line</code> and click <code>&lt;Edit..&gt;</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-post-build-event-edit-command-line-events.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-edit-command-line-events</figcaption><p></p>
</figure>
</div>
<p>Add the following commands, replacing <code>&lt;parent-folder-path&gt;</code> with the path to the parent folder on your system and click <code>OK</code>.</p>
<ul>
<li><p><code>xcopy &lt;parent-folder-path&gt;\opencv\build\x64\vc15\bin\opencv_world452.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></p></li>
<li><p><code>xcopy &lt;parent-folder-path&gt;\libtorch\lib\*.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></p></li>
<li><p><strong>Example:</strong> <code>xcopy G:\Projects\C++_Projects\Dependencies\opencv\build\x64\vc15\bin\opencv_world452.dll $(SolutionDir)$(Platform)\$(Configuration)\ /c /y</code></p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-post-build-event-add-xcopy-commands.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-post-build-event-add-xcopy-commands</figcaption><p></p>
</figure>
</div>
<p>Finally, click the <code>Apply</code> button and close the Properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-properties-apply-changes.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-properties-apply-changes</figcaption><p></p>
</figure>
</div>
<p>With the dependencies taken care of, we can start modifying the code.</p>
</section>
<section id="update-precompiled-header-file" class="level2">
<h2 class="anchored" data-anchor-id="update-precompiled-header-file">Update Precompiled Header File</h2>
<p>We need to make a small change to the <code>pch.h</code> <a href="https://docs.microsoft.com/en-us/cpp/build/creating-precompiled-header-files?view=msvc-160">Precompiled Header file</a> to avoid some conflicts with LibTorch. Open the <code>pch.h</code> file by selecting it in the Solution Explorer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-pch-header-file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-pch-header-file</figcaption><p></p>
</figure>
</div>
<p>Comment or remove the “#include” line for the <code>framework.h</code> header file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
<p><strong>Add required header files</strong></p>
<p>Next, we’ll add the required header files for LibTorch and OpenCV below <code>//#include "framework.h"</code> line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">// pch.h: This is a precompiled header file.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">// Files listed below are compiled only once, improving build performance for future builds.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">// This also affects IntelliSense performance, including code completion and many code browsing features.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">// However, files listed here are ALL re-compiled if any one of them is updated between builds.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">// Do not add files here that you will be updating frequently as this negates the performance advantage.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;">#ifndef PCH_H</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;">#define PCH_H</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">// add headers that you want to pre-compile here</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">//#include "framework.h"</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;">// One-stop LibTorch header</span></span>
<span id="cb2-13"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;torch/script.h&gt;</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;">// One-stop OpenCV header</span></span>
<span id="cb2-15"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;opencv2/opencv.hpp&gt;</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="pp" style="color: #AD0000;">#endif </span><span class="co" style="color: #5E5E5E;">//PCH_H</span></span></code></pre></div>
</section>
<section id="update-dllmain-file" class="level2">
<h2 class="anchored" data-anchor-id="update-dllmain-file">Update dllmain File</h2>
<p>By default, the <code>dllmain.cpp</code> file contains the following code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">BOOL APIENTRY DllMain<span class="op" style="color: #5E5E5E;">(</span> HMODULE hModule<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">                       DWORD  ul_reason_for_call<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6">                       LPVOID lpReserved</span>
<span id="cb3-7">                     <span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;">switch</span> <span class="op" style="color: #5E5E5E;">(</span>ul_reason_for_call<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_ATTACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">case</span> DLL_THREAD_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">case</span> DLL_PROCESS_DETACH<span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;">return</span> TRUE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can delete everything below the <code>#include "pch.h"</code> line.</p>
<p><strong>Create a macro to mark functions we want to make accessible in Unity</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// dllmain.cpp : Defines the entry point for the DLL application.</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">"pch.h"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">// Create a macro to quickly mark a function for export</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;">#define DLLExport </span><span class="ex" style="color: null;">__declspec (dllexport)</span></span></code></pre></div>
<p><strong>Wrap the code in extern “C” to prevent name-mangling issues with the compiler</strong></p>
<p>The rest of our code will go inside here.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Wrap code to prevent name-mangling issues</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;">extern</span> <span class="st" style="color: #20794D;">"C"</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define variables</strong></p>
<p>Inside the wrapper, we will declare the persistent variables needed for the DLL.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// The current torchscript model</span></span>
<span id="cb6-2">torch<span class="op" style="color: #5E5E5E;">::</span>jit<span class="op" style="color: #5E5E5E;">::</span>Module network<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">// The mean normalization stats for the current model</span></span>
<span id="cb6-5"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> mean_stats<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">// The std normalization stats for the current model</span></span>
<span id="cb6-7"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">&gt;</span> std_stats<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define a function to load a TorchScript module</strong></p>
<p>We’ll place the code for loading a TorchScript module inside a try-catch block to avoid crashing the application if we pass an incorrect file path. We’ll also update the mean and std vectors here since each model might use different normalization stats.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// Load a torchscript model from the specified file path</span></span>
<span id="cb7-2">DLLExport <span class="dt" style="color: #AD0000;">int</span> LoadModel<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> modelPath<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">float</span> mean<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">],</span> <span class="dt" style="color: #AD0000;">float</span> std<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-3"></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-5">        <span class="co" style="color: #5E5E5E;">// Deserialize the ScriptModule from a file using torch::jit::load().</span></span>
<span id="cb7-6">        network <span class="op" style="color: #5E5E5E;">=</span> torch<span class="op" style="color: #5E5E5E;">::</span>jit<span class="op" style="color: #5E5E5E;">::</span>load<span class="op" style="color: #5E5E5E;">(</span>modelPath<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">        <span class="co" style="color: #5E5E5E;">// Empty the normalization vectors</span></span>
<span id="cb7-9">        mean_stats<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-10">        std_stats<span class="op" style="color: #5E5E5E;">.</span>clear<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb7-11"></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;">// Update the normalization vectors</span></span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-14">            mean_stats<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>mean<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb7-15">            std_stats<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>std<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb7-16">        <span class="op" style="color: #5E5E5E;">}</span>           </span>
<span id="cb7-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> c10<span class="op" style="color: #5E5E5E;">::</span>Error<span class="op" style="color: #5E5E5E;">&amp;</span> e<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-19">        <span class="co" style="color: #5E5E5E;">// Return a value of -1 if the model fails to load</span></span>
<span id="cb7-20">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-22"></span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;">// Return a value of 0 if the model loads successfully</span></span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-25"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define a function to perform inference</strong></p>
<p>We will access the pixel data for the input image from Unity with a pointer to a <a href="https://docs.opencv.org/4.5.1/d1/d1b/group__core__hal__interface.html#ga65f85814a8290f9797005d3b28e7e5fc">uchar</a> (unsigned 1 byte integer) array and wrap the data in a <a href="https://docs.opencv.org/master/d3/d63/classcv_1_1Mat.html">cv::Mat</a> variable for processing.</p>
<p>We must first remove the alpha channel and convert the image to a three-channel matrix of 32-bit floats. We can then initialize an input tensor with the pixel data and apply the usual preprocessing steps.</p>
<p>Once again, we’ll use a try-catch block to avoid crashing the application if an error occurs during the forward pass. We can apply the same postprocessing steps as in the training code and return the predicted class index to Unity.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">// Perform inference with the provided texture data</span></span>
<span id="cb8-2">DLLExport <span class="dt" style="color: #AD0000;">int</span> PerformInference<span class="op" style="color: #5E5E5E;">(</span><span class="ex" style="color: null;">uchar</span><span class="op" style="color: #5E5E5E;">*</span> inputData<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> height<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-3"></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;">// Store the pixel data for the source input image in an OpenCV Mat</span></span>
<span id="cb8-5">    cv<span class="op" style="color: #5E5E5E;">::</span>Mat texture <span class="op" style="color: #5E5E5E;">=</span> cv<span class="op" style="color: #5E5E5E;">::</span>Mat<span class="op" style="color: #5E5E5E;">(</span>height<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> CV_8UC4<span class="op" style="color: #5E5E5E;">,</span> inputData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;">// Remove the alpha channel</span></span>
<span id="cb8-7">    cv<span class="op" style="color: #5E5E5E;">::</span>cvtColor<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">,</span> texture<span class="op" style="color: #5E5E5E;">,</span> cv<span class="op" style="color: #5E5E5E;">::</span>COLOR_RGBA2RGB<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;">// Convert RGB image to a three-channel matrix of 32-bit floats</span></span>
<span id="cb8-9">    texture<span class="op" style="color: #5E5E5E;">.</span>convertTo<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">,</span> CV_32FC3<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;">// Initialize a tensor using the texture data</span></span>
<span id="cb8-12">    torch<span class="op" style="color: #5E5E5E;">::</span>Tensor input <span class="op" style="color: #5E5E5E;">=</span> torch<span class="op" style="color: #5E5E5E;">::</span>from_blob<span class="op" style="color: #5E5E5E;">(</span>texture<span class="op" style="color: #5E5E5E;">.</span>data<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">{</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> height<span class="op" style="color: #5E5E5E;">,</span> width<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;">// Permute tensor dimensions</span></span>
<span id="cb8-14">    input <span class="op" style="color: #5E5E5E;">=</span> input<span class="op" style="color: #5E5E5E;">.</span>permute<span class="op" style="color: #5E5E5E;">({</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">});</span></span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;">// Scale and normalize color channel values</span></span>
<span id="cb8-16">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> input<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">][</span>i<span class="op" style="color: #5E5E5E;">].</span><span class="va" style="color: #111111;">div_</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">255.0</span><span class="bu" style="color: null;">f</span><span class="op" style="color: #5E5E5E;">).</span><span class="va" style="color: #111111;">sub_</span><span class="op" style="color: #5E5E5E;">(</span>mean_stats<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]).</span><span class="va" style="color: #111111;">div_</span><span class="op" style="color: #5E5E5E;">(</span>std_stats<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;">// Initialize a vector to store model inputs</span></span>
<span id="cb8-19">    <span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>torch<span class="op" style="color: #5E5E5E;">::</span>jit<span class="op" style="color: #5E5E5E;">::</span>IValue<span class="op" style="color: #5E5E5E;">&gt;</span> inputs<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-20">    <span class="co" style="color: #5E5E5E;">// Add input tensor to inputs vector</span></span>
<span id="cb8-21">    inputs<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>input<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-22"></span>
<span id="cb8-23">    <span class="co" style="color: #5E5E5E;">// Initialize predicted class index to an invalid value</span></span>
<span id="cb8-24">    <span class="dt" style="color: #AD0000;">int</span> class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-25"></span>
<span id="cb8-26">    <span class="cf" style="color: #003B4F;">try</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-27">        <span class="co" style="color: #5E5E5E;">// Enable inference mode</span></span>
<span id="cb8-28">        torch<span class="op" style="color: #5E5E5E;">::</span>InferenceMode guard<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-29">        <span class="co" style="color: #5E5E5E;">// Perform inference and extract the predicted class index</span></span>
<span id="cb8-30">        class_idx <span class="op" style="color: #5E5E5E;">=</span> torch<span class="op" style="color: #5E5E5E;">::</span>softmax<span class="op" style="color: #5E5E5E;">(</span>network<span class="op" style="color: #5E5E5E;">.</span>forward<span class="op" style="color: #5E5E5E;">(</span>inputs<span class="op" style="color: #5E5E5E;">).</span>toTensor<span class="op" style="color: #5E5E5E;">(),</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">).</span>argmax<span class="op" style="color: #5E5E5E;">().</span>item<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb8-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-32">    <span class="cf" style="color: #003B4F;">catch</span> <span class="op" style="color: #5E5E5E;">(...)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-33">        <span class="co" style="color: #5E5E5E;">// Return a value of -2 if an error occurs during the forward pass</span></span>
<span id="cb8-34">        class_idx <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-35">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-36"></span>
<span id="cb8-37">    <span class="cf" style="color: #003B4F;">return</span> class_idx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-38"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>That is all the code needed for the plugin. We can now build the solution to generate the DLL file.</p>
</section>
<section id="build-solution" class="level2">
<h2 class="anchored" data-anchor-id="build-solution">Build Solution</h2>
<p>Open the Build menu at the top of the Visual Studio window and click Build Solution. Visual Studio will generate a new x64 folder in the project directory containing the DLL file and its dependencies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-build-solution.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-build-solution</figcaption><p></p>
</figure>
</div>
</section>
<section id="gather-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="gather-dependencies">Gather Dependencies</h2>
<p>Right-click the project name in the Solution Explorer panel and select <code>Open Folder in File Explorer</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-open-folder-in-explorer.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-open-folder-in-explorer</figcaption><p></p>
</figure>
</div>
<p>In the new File Explorer window, go to the parent folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-project-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder</figcaption><p></p>
</figure>
</div>
<p>Open the <code>x64 → Release</code> subfolder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/visual-studio-project-folder-x64-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">visual-studio-project-folder-x64-folder</figcaption><p></p>
</figure>
</div>
<p>We’ll need to copy all the DLL files in this folder to the Unity project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/images/file-explorer-select-dll-files.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">file-explorer-select-dll-files</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to perform inference with TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>. Part 3 will cover the required modifications for the original Unity project to use this DLL.</p>
<p><strong>Previous:</strong> <a href="../part-1/">How to Create a LibTorch Plugin for Unity on Windows Pt.1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">How to Create a LibTorch Plugin for Unity on Windows Pt.3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>libtorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-2/index.html</guid>
  <pubDate>Tue, 28 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create a LibTorch Plugin for Unity on Windows Pt. 1</title>
  <link>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Select a Model</li>
<li>Modify Transforms</li>
<li>Define Learner</li>
<li>Export the Model</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The previous <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity</a> tutorial series implemented a <a href="https://arxiv.org/abs/1512.03385">ResNet</a>-based image classifier in <a href="https://unity.com/">Unity</a> with the <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> inference library. The Barracuda library works well with the older ResNet architecture but does not support more recent ones like <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> and <a href="https://arxiv.org/abs/2110.02178">MobileViT</a> at the time of writing.</p>
<p>This follow-up series covers using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>, the C++ distribution of <a href="https://pytorch.org/">PyTorch</a>, to perform inference with these newer model architectures. We’ll modify the original tutorial code and create a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file to access the LibTorch functionality in Unity.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/libtorch-plugin-demo.mp4" class="img-fluid" controls=""><a href="./videos/libtorch-plugin-demo.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">libtorch-plugin-demo</figcaption><p></p>
</figure>
</div>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This post covers the required modifications to the <a href="https://github.com/cj-mills/fastai-to-unity-tutorial#training-code">original training code</a>. We’ll finetune models from the <a href="https://github.com/rwightman/pytorch-image-models">Timm library</a> on the same <a href="https://www.kaggle.com/datasets/belalelwikel/asl-and-some-words">ASL dataset</a> as the original tutorial. The Timm library provides access to a wide range of pretrained computer vision models and integrates with the <a href="https://docs.fast.ai/">fastai library</a>. Below is a link to the complete modified training code, along with links for running the notebook on Google Colab and Kaggle.</p>
<table class="table">
<thead>
<tr class="header">
<th>GitHub Repository</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-Torchscript-Tutorial.ipynb">Jupyter Notebook</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-to-libtorch-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-Torchscript-Tutorial.ipynb">Open in Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial/blob/main/notebooks/Fastai-timm-to-Torchscript-Tutorial.ipynb"><img src="christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-1/https:/kaggle.com/static/images/open-in-kaggle.svg" class="img-fluid" alt="Kaggle"></a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The <a href="https://pypi.org/project/timm/">pip package</a> for the Timm library is more stable than the GitHub repository but has fewer model types and pretrained weights. For example, the pip package has <a href="https://github.com/rwightman/pytorch-image-models/blob/0.5.x/timm/models/convnext.py">pretrained ConvNeXt models</a> but no MobileViT models. However, the latest GitHub version had some issues running the MobileNetV3 models at the time of writing.</p>
<p>Recent <a href="https://github.com/fastai/fastai/releases/tag/2.7.0">updates</a> to the fastai library resolve some <a href="https://benjaminwarner.dev/2022/06/14/debugging-pytorch-performance-decrease">performance issues</a> with PyTorch so let’s update that too. They also provide a new <code>ChannelsLast</code> (beta) callback that further <a href="https://pytorch.org/tutorials/intermediate/memory_format_tutorial.html#performance-gains">improves performance</a> on modern GPUs.</p>
<p><strong>Uncomment the cell below if running on Google Colab or Kaggle</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip3 install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip3 install -U fastai==2.7.2</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip3 install -U kaggle==1.5.12</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip3 install -U Pillow==9.1.0</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># !pip3 install -U timm==0.5.4 # more stable fewer models</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># !pip3 install -U git+https://github.com/rwightman/pytorch-image-models.git # more models less stable</span></span></code></pre></div>
<p><strong>Note for Colab:</strong> You must restart the runtime in order to use newly installed version of Pillow.</p>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p><strong>Disable max rows and columns for pandas</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb3-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb3-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
</section>
<section id="select-a-model" class="level2">
<h2 class="anchored" data-anchor-id="select-a-model">Select a Model</h2>
<p>Let’s start by selecting a model from the Timm library to finetune. The available pretrained models depend on the version of the Timm library installed.</p>
<p><strong>Import the Timm library</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> timm</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">timm.__version__</span></code></pre></div>
<pre class="text"><code>'0.6.2.dev0'</code></pre>
<p><strong>Check available pretrained model types</strong></p>
<p>We can check which model types have pretrained weights using the <code>timm.list_models()</code> function.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">model_types <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">set</span>([model.split(<span class="st" style="color: #20794D;">'_'</span>)[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> model <span class="kw" style="color: #003B4F;">in</span> timm.list_models(pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)]))</span>
<span id="cb7-2">model_types.sort()</span>
<span id="cb7-3">pd.DataFrame(model_types)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
adv
</td>
</tr>
<tr>
<th>
1
</th>
<td>
bat
</td>
</tr>
<tr>
<th>
2
</th>
<td>
beit
</td>
</tr>
<tr>
<th>
3
</th>
<td>
botnet26t
</td>
</tr>
<tr>
<th>
4
</th>
<td>
cait
</td>
</tr>
<tr>
<th>
5
</th>
<td>
coat
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convit
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convmixer
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext
</td>
</tr>
<tr>
<th>
9
</th>
<td>
crossvit
</td>
</tr>
<tr>
<th>
10
</th>
<td>
cspdarknet53
</td>
</tr>
<tr>
<th>
11
</th>
<td>
cspresnet50
</td>
</tr>
<tr>
<th>
12
</th>
<td>
cspresnext50
</td>
</tr>
<tr>
<th>
13
</th>
<td>
deit
</td>
</tr>
<tr>
<th>
14
</th>
<td>
densenet121
</td>
</tr>
<tr>
<th>
15
</th>
<td>
densenet161
</td>
</tr>
<tr>
<th>
16
</th>
<td>
densenet169
</td>
</tr>
<tr>
<th>
17
</th>
<td>
densenet201
</td>
</tr>
<tr>
<th>
18
</th>
<td>
densenetblur121d
</td>
</tr>
<tr>
<th>
19
</th>
<td>
dla102
</td>
</tr>
<tr>
<th>
20
</th>
<td>
dla102x
</td>
</tr>
<tr>
<th>
21
</th>
<td>
dla102x2
</td>
</tr>
<tr>
<th>
22
</th>
<td>
dla169
</td>
</tr>
<tr>
<th>
23
</th>
<td>
dla34
</td>
</tr>
<tr>
<th>
24
</th>
<td>
dla46
</td>
</tr>
<tr>
<th>
25
</th>
<td>
dla46x
</td>
</tr>
<tr>
<th>
26
</th>
<td>
dla60
</td>
</tr>
<tr>
<th>
27
</th>
<td>
dla60x
</td>
</tr>
<tr>
<th>
28
</th>
<td>
dm
</td>
</tr>
<tr>
<th>
29
</th>
<td>
dpn107
</td>
</tr>
<tr>
<th>
30
</th>
<td>
dpn131
</td>
</tr>
<tr>
<th>
31
</th>
<td>
dpn68
</td>
</tr>
<tr>
<th>
32
</th>
<td>
dpn68b
</td>
</tr>
<tr>
<th>
33
</th>
<td>
dpn92
</td>
</tr>
<tr>
<th>
34
</th>
<td>
dpn98
</td>
</tr>
<tr>
<th>
35
</th>
<td>
eca
</td>
</tr>
<tr>
<th>
36
</th>
<td>
ecaresnet101d
</td>
</tr>
<tr>
<th>
37
</th>
<td>
ecaresnet269d
</td>
</tr>
<tr>
<th>
38
</th>
<td>
ecaresnet26t
</td>
</tr>
<tr>
<th>
39
</th>
<td>
ecaresnet50d
</td>
</tr>
<tr>
<th>
40
</th>
<td>
ecaresnet50t
</td>
</tr>
<tr>
<th>
41
</th>
<td>
ecaresnetlight
</td>
</tr>
<tr>
<th>
42
</th>
<td>
efficientnet
</td>
</tr>
<tr>
<th>
43
</th>
<td>
efficientnetv2
</td>
</tr>
<tr>
<th>
44
</th>
<td>
ens
</td>
</tr>
<tr>
<th>
45
</th>
<td>
ese
</td>
</tr>
<tr>
<th>
46
</th>
<td>
fbnetc
</td>
</tr>
<tr>
<th>
47
</th>
<td>
fbnetv3
</td>
</tr>
<tr>
<th>
48
</th>
<td>
gc
</td>
</tr>
<tr>
<th>
49
</th>
<td>
gcresnet33ts
</td>
</tr>
<tr>
<th>
50
</th>
<td>
gcresnet50t
</td>
</tr>
<tr>
<th>
51
</th>
<td>
gcresnext26ts
</td>
</tr>
<tr>
<th>
52
</th>
<td>
gcresnext50ts
</td>
</tr>
<tr>
<th>
53
</th>
<td>
gernet
</td>
</tr>
<tr>
<th>
54
</th>
<td>
ghostnet
</td>
</tr>
<tr>
<th>
55
</th>
<td>
gluon
</td>
</tr>
<tr>
<th>
56
</th>
<td>
gmixer
</td>
</tr>
<tr>
<th>
57
</th>
<td>
gmlp
</td>
</tr>
<tr>
<th>
58
</th>
<td>
halo2botnet50ts
</td>
</tr>
<tr>
<th>
59
</th>
<td>
halonet26t
</td>
</tr>
<tr>
<th>
60
</th>
<td>
halonet50ts
</td>
</tr>
<tr>
<th>
61
</th>
<td>
haloregnetz
</td>
</tr>
<tr>
<th>
62
</th>
<td>
hardcorenas
</td>
</tr>
<tr>
<th>
63
</th>
<td>
hrnet
</td>
</tr>
<tr>
<th>
64
</th>
<td>
ig
</td>
</tr>
<tr>
<th>
65
</th>
<td>
inception
</td>
</tr>
<tr>
<th>
66
</th>
<td>
jx
</td>
</tr>
<tr>
<th>
67
</th>
<td>
lambda
</td>
</tr>
<tr>
<th>
68
</th>
<td>
lamhalobotnet50ts
</td>
</tr>
<tr>
<th>
69
</th>
<td>
lcnet
</td>
</tr>
<tr>
<th>
70
</th>
<td>
legacy
</td>
</tr>
<tr>
<th>
71
</th>
<td>
levit
</td>
</tr>
<tr>
<th>
72
</th>
<td>
mixer
</td>
</tr>
<tr>
<th>
73
</th>
<td>
mixnet
</td>
</tr>
<tr>
<th>
74
</th>
<td>
mnasnet
</td>
</tr>
<tr>
<th>
75
</th>
<td>
mobilenetv2
</td>
</tr>
<tr>
<th>
76
</th>
<td>
mobilenetv3
</td>
</tr>
<tr>
<th>
77
</th>
<td>
mobilevit
</td>
</tr>
<tr>
<th>
78
</th>
<td>
nasnetalarge
</td>
</tr>
<tr>
<th>
79
</th>
<td>
nf
</td>
</tr>
<tr>
<th>
80
</th>
<td>
nfnet
</td>
</tr>
<tr>
<th>
81
</th>
<td>
pit
</td>
</tr>
<tr>
<th>
82
</th>
<td>
pnasnet5large
</td>
</tr>
<tr>
<th>
83
</th>
<td>
poolformer
</td>
</tr>
<tr>
<th>
84
</th>
<td>
regnetv
</td>
</tr>
<tr>
<th>
85
</th>
<td>
regnetx
</td>
</tr>
<tr>
<th>
86
</th>
<td>
regnety
</td>
</tr>
<tr>
<th>
87
</th>
<td>
regnetz
</td>
</tr>
<tr>
<th>
88
</th>
<td>
repvgg
</td>
</tr>
<tr>
<th>
89
</th>
<td>
res2net101
</td>
</tr>
<tr>
<th>
90
</th>
<td>
res2net50
</td>
</tr>
<tr>
<th>
91
</th>
<td>
res2next50
</td>
</tr>
<tr>
<th>
92
</th>
<td>
resmlp
</td>
</tr>
<tr>
<th>
93
</th>
<td>
resnest101e
</td>
</tr>
<tr>
<th>
94
</th>
<td>
resnest14d
</td>
</tr>
<tr>
<th>
95
</th>
<td>
resnest200e
</td>
</tr>
<tr>
<th>
96
</th>
<td>
resnest269e
</td>
</tr>
<tr>
<th>
97
</th>
<td>
resnest26d
</td>
</tr>
<tr>
<th>
98
</th>
<td>
resnest50d
</td>
</tr>
<tr>
<th>
99
</th>
<td>
resnet101
</td>
</tr>
<tr>
<th>
100
</th>
<td>
resnet101d
</td>
</tr>
<tr>
<th>
101
</th>
<td>
resnet152
</td>
</tr>
<tr>
<th>
102
</th>
<td>
resnet152d
</td>
</tr>
<tr>
<th>
103
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
104
</th>
<td>
resnet18d
</td>
</tr>
<tr>
<th>
105
</th>
<td>
resnet200d
</td>
</tr>
<tr>
<th>
106
</th>
<td>
resnet26
</td>
</tr>
<tr>
<th>
107
</th>
<td>
resnet26d
</td>
</tr>
<tr>
<th>
108
</th>
<td>
resnet26t
</td>
</tr>
<tr>
<th>
109
</th>
<td>
resnet32ts
</td>
</tr>
<tr>
<th>
110
</th>
<td>
resnet33ts
</td>
</tr>
<tr>
<th>
111
</th>
<td>
resnet34
</td>
</tr>
<tr>
<th>
112
</th>
<td>
resnet34d
</td>
</tr>
<tr>
<th>
113
</th>
<td>
resnet50
</td>
</tr>
<tr>
<th>
114
</th>
<td>
resnet50d
</td>
</tr>
<tr>
<th>
115
</th>
<td>
resnet51q
</td>
</tr>
<tr>
<th>
116
</th>
<td>
resnet61q
</td>
</tr>
<tr>
<th>
117
</th>
<td>
resnetblur50
</td>
</tr>
<tr>
<th>
118
</th>
<td>
resnetrs101
</td>
</tr>
<tr>
<th>
119
</th>
<td>
resnetrs152
</td>
</tr>
<tr>
<th>
120
</th>
<td>
resnetrs200
</td>
</tr>
<tr>
<th>
121
</th>
<td>
resnetrs270
</td>
</tr>
<tr>
<th>
122
</th>
<td>
resnetrs350
</td>
</tr>
<tr>
<th>
123
</th>
<td>
resnetrs420
</td>
</tr>
<tr>
<th>
124
</th>
<td>
resnetrs50
</td>
</tr>
<tr>
<th>
125
</th>
<td>
resnetv2
</td>
</tr>
<tr>
<th>
126
</th>
<td>
resnext101
</td>
</tr>
<tr>
<th>
127
</th>
<td>
resnext26ts
</td>
</tr>
<tr>
<th>
128
</th>
<td>
resnext50
</td>
</tr>
<tr>
<th>
129
</th>
<td>
resnext50d
</td>
</tr>
<tr>
<th>
130
</th>
<td>
rexnet
</td>
</tr>
<tr>
<th>
131
</th>
<td>
sebotnet33ts
</td>
</tr>
<tr>
<th>
132
</th>
<td>
sehalonet33ts
</td>
</tr>
<tr>
<th>
133
</th>
<td>
selecsls42b
</td>
</tr>
<tr>
<th>
134
</th>
<td>
selecsls60
</td>
</tr>
<tr>
<th>
135
</th>
<td>
selecsls60b
</td>
</tr>
<tr>
<th>
136
</th>
<td>
semnasnet
</td>
</tr>
<tr>
<th>
137
</th>
<td>
sequencer2d
</td>
</tr>
<tr>
<th>
138
</th>
<td>
seresnet152d
</td>
</tr>
<tr>
<th>
139
</th>
<td>
seresnet33ts
</td>
</tr>
<tr>
<th>
140
</th>
<td>
seresnet50
</td>
</tr>
<tr>
<th>
141
</th>
<td>
seresnext101
</td>
</tr>
<tr>
<th>
142
</th>
<td>
seresnext101d
</td>
</tr>
<tr>
<th>
143
</th>
<td>
seresnext26d
</td>
</tr>
<tr>
<th>
144
</th>
<td>
seresnext26t
</td>
</tr>
<tr>
<th>
145
</th>
<td>
seresnext26ts
</td>
</tr>
<tr>
<th>
146
</th>
<td>
seresnext50
</td>
</tr>
<tr>
<th>
147
</th>
<td>
seresnextaa101d
</td>
</tr>
<tr>
<th>
148
</th>
<td>
skresnet18
</td>
</tr>
<tr>
<th>
149
</th>
<td>
skresnet34
</td>
</tr>
<tr>
<th>
150
</th>
<td>
skresnext50
</td>
</tr>
<tr>
<th>
151
</th>
<td>
spnasnet
</td>
</tr>
<tr>
<th>
152
</th>
<td>
ssl
</td>
</tr>
<tr>
<th>
153
</th>
<td>
swin
</td>
</tr>
<tr>
<th>
154
</th>
<td>
swinv2
</td>
</tr>
<tr>
<th>
155
</th>
<td>
swsl
</td>
</tr>
<tr>
<th>
156
</th>
<td>
tf
</td>
</tr>
<tr>
<th>
157
</th>
<td>
tinynet
</td>
</tr>
<tr>
<th>
158
</th>
<td>
tnt
</td>
</tr>
<tr>
<th>
159
</th>
<td>
tresnet
</td>
</tr>
<tr>
<th>
160
</th>
<td>
tv
</td>
</tr>
<tr>
<th>
161
</th>
<td>
twins
</td>
</tr>
<tr>
<th>
162
</th>
<td>
vgg11
</td>
</tr>
<tr>
<th>
163
</th>
<td>
vgg13
</td>
</tr>
<tr>
<th>
164
</th>
<td>
vgg16
</td>
</tr>
<tr>
<th>
165
</th>
<td>
vgg19
</td>
</tr>
<tr>
<th>
166
</th>
<td>
visformer
</td>
</tr>
<tr>
<th>
167
</th>
<td>
vit
</td>
</tr>
<tr>
<th>
168
</th>
<td>
volo
</td>
</tr>
<tr>
<th>
169
</th>
<td>
wide
</td>
</tr>
<tr>
<th>
170
</th>
<td>
xception
</td>
</tr>
<tr>
<th>
171
</th>
<td>
xception41
</td>
</tr>
<tr>
<th>
172
</th>
<td>
xception41p
</td>
</tr>
<tr>
<th>
173
</th>
<td>
xception65
</td>
</tr>
<tr>
<th>
174
</th>
<td>
xception65p
</td>
</tr>
<tr>
<th>
175
</th>
<td>
xception71
</td>
</tr>
<tr>
<th>
176
</th>
<td>
xcit
</td>
</tr>
</tbody>

</table>
</div>
<p>Timm provides many pretrained models, but not all of them are fast enough for real-time applications. We can filter the results by providing a full or partial model name.</p>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/2201.03545">ConvNeXt</a> models</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'convnext*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
convnext_base
</td>
</tr>
<tr>
<th>
1
</th>
<td>
convnext_base_384_in22ft1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
convnext_base_in22ft1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
convnext_base_in22k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
convnext_large
</td>
</tr>
<tr>
<th>
5
</th>
<td>
convnext_large_384_in22ft1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
convnext_large_in22ft1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
convnext_large_in22k
</td>
</tr>
<tr>
<th>
8
</th>
<td>
convnext_small
</td>
</tr>
<tr>
<th>
9
</th>
<td>
convnext_small_384_in22ft1k
</td>
</tr>
<tr>
<th>
10
</th>
<td>
convnext_small_in22ft1k
</td>
</tr>
<tr>
<th>
11
</th>
<td>
convnext_small_in22k
</td>
</tr>
<tr>
<th>
12
</th>
<td>
convnext_tiny
</td>
</tr>
<tr>
<th>
13
</th>
<td>
convnext_tiny_384_in22ft1k
</td>
</tr>
<tr>
<th>
14
</th>
<td>
convnext_tiny_hnf
</td>
</tr>
<tr>
<th>
15
</th>
<td>
convnext_tiny_in22ft1k
</td>
</tr>
<tr>
<th>
16
</th>
<td>
convnext_tiny_in22k
</td>
</tr>
<tr>
<th>
17
</th>
<td>
convnext_xlarge_384_in22ft1k
</td>
</tr>
<tr>
<th>
18
</th>
<td>
convnext_xlarge_in22ft1k
</td>
</tr>
<tr>
<th>
19
</th>
<td>
convnext_xlarge_in22k
</td>
</tr>
</tbody>

</table>
</div>
<p>Let’s go with the <code>convnext_tiny</code> model since we want higher framerates. Each model comes with a set of default configuration parameters. We must keep track of the mean and std values used to normalize the model input. Many pretrained models use the ImageNet normalization stats, but others like MobileViT do not.</p>
<p><strong>Inspect the default configuration for the <code>convnext_tiny</code> model</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> convnext</span>
<span id="cb9-2">convnext_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_tiny'</span></span>
<span id="cb9-3">pd.DataFrame.from_dict(convnext.default_cfgs[convnext_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x: auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://dl.fbaipublicfiles.com/convnext/convnext_tiny_1k_224_ema.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/1801.04381">MobileNetV2</a> models</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilenetv2*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilenetv2_050
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilenetv2_100
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilenetv2_110d
</td>
</tr>
<tr>
<th>
3
</th>
<td>
mobilenetv2_120d
</td>
</tr>
<tr>
<th>
4
</th>
<td>
mobilenetv2_140
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilenetv2_050</code> model</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> efficientnet</span>
<span id="cb11-2">mobilenetv2_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilenetv2_050'</span></span>
<span id="cb11-3">pd.DataFrame.from_dict(efficientnet.default_cfgs[mobilenetv2_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv2_050-3d30d450.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv_stem
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
classifier
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/1905.02244">MobileNetV3</a> models</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilenetv3*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilenetv3_large_100
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilenetv3_large_100_miil
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilenetv3_large_100_miil_in21k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
mobilenetv3_rw
</td>
</tr>
<tr>
<th>
4
</th>
<td>
mobilenetv3_small_050
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mobilenetv3_small_075
</td>
</tr>
<tr>
<th>
6
</th>
<td>
mobilenetv3_small_100
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilenetv3_small_050</code> model</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> mobilenetv3</span>
<span id="cb13-2">mobilenetv3_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilenetv3_small_050'</span></span>
<span id="cb13-3">pd.DataFrame.from_dict(mobilenetv3.default_cfgs[mobilenetv3_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv3_small_050_lambc-4b7bbe87.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv_stem
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
classifier
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Check available pretrained <a href="https://arxiv.org/abs/2110.02178">MobileViT</a> models</strong> * <strong>Note:</strong> MobileViT models are not available in timm <code>0.5.4</code></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;">'mobilevit*'</span>, pretrained<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
mobilevit_s
</td>
</tr>
<tr>
<th>
1
</th>
<td>
mobilevit_xs
</td>
</tr>
<tr>
<th>
2
</th>
<td>
mobilevit_xxs
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect the default configuration for the <code>mobilevit_xxs</code> model</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">from</span> timm.models <span class="im" style="color: #00769E;">import</span> mobilevit</span>
<span id="cb15-2">mobilevit_model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mobilevit_xxs'</span></span>
<span id="cb15-3">pd.DataFrame.from_dict(mobilevit.default_cfgs[mobilevit_model], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-mvit-weights/mobilevit_xxs-ad385b40.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 256, 256)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(8, 8)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.9
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0, 0, 0)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(1, 1, 1)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
stem.conv
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
head.fc
</td>
</tr>
<tr>
<th>
fixed_input_size
</th>
<td>
False
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Select a model</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">model_type <span class="op" style="color: #5E5E5E;">=</span> convnext</span>
<span id="cb16-2">model_name <span class="op" style="color: #5E5E5E;">=</span> convnext_model</span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># model_type = efficientnet</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;"># model_name = mobilenetv2_model</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;"># model_type = mobilenetv3</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;"># model_name = mobilenetv3_model</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># model_type = mobilevit</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;"># model_name = mobilevit_model</span></span></code></pre></div>
<p>After picking a model, we’ll store the related normalization stats for future use.</p>
<p><strong>Store normalization stats</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">mean <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'mean'</span>]</span>
<span id="cb17-2">std <span class="op" style="color: #5E5E5E;">=</span> model_type.default_cfgs[model_name][<span class="st" style="color: #20794D;">'std'</span>]</span>
<span id="cb17-3">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p><strong>Define target input dimensions</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># size_1_1 = (224, 224)</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># size_3_2 = (224, 336)</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># size_4_3 = (216, 288)</span></span>
<span id="cb19-4">size_16_9 <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">216</span>, <span class="dv" style="color: #AD0000;">384</span>)</span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># size_16_9_l = (288, 512)</span></span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">input_dims <span class="op" style="color: #5E5E5E;">=</span> size_16_9</span></code></pre></div>
</section>
<section id="modify-transforms" class="level2">
<h2 class="anchored" data-anchor-id="modify-transforms">Modify Transforms</h2>
<p>We can apply the normalization stats at the end of the batch transforms.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [FlipItem(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>), Resize(input_dims, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb21-2"></span>
<span id="cb21-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb21-4">    Contrast(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb21-5">    Saturation(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb21-6">    Hue(max_hue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb21-7">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb21-8">        size<span class="op" style="color: #5E5E5E;">=</span>input_dims, </span>
<span id="cb21-9">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb21-10">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb21-11">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb21-12">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb21-13">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb21-14">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb21-15">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb21-16">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb21-17">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb21-18">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border),</span>
<span id="cb21-19">    Normalize.from_stats(mean<span class="op" style="color: #5E5E5E;">=</span>mean, std<span class="op" style="color: #5E5E5E;">=</span>std)</span>
<span id="cb21-20">]</span></code></pre></div>
</section>
<section id="define-learner" class="level2">
<h2 class="anchored" data-anchor-id="define-learner">Define Learner</h2>
<p>The training process is identical to the original tutorial, and we only need to pass the name of the Timm model to the <code>vision_learner</code> object.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model_name, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics).to_fp16()</span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;"># learn = vision_learner(dls, model_name, metrics=metrics, cbs=[ChannelsLast]).to_fp16()</span></span></code></pre></div>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>Once training completes, we need to convert our trained PyTorch model to a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript</a> module for use in LibTorch. We do so using the <a href="https://pytorch.org/docs/stable/generated/torch.jit.trace.html"><code>torch.jit.trace()</code></a> method.</p>
<p><strong>Generate a TorchScript module using the test image</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">traced_script_module <span class="op" style="color: #5E5E5E;">=</span> torch.jit.trace(learn.model.cpu(), batched_tensor)</span></code></pre></div>
<p>We can perform inference with the TorchScript module the same way we would a PyTorch model.</p>
<p><strong>Verify the TorchScript module’s accuracy</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb24-2">    torchscript_preds <span class="op" style="color: #5E5E5E;">=</span> traced_script_module(batched_tensor)</span>
<span id="cb24-3">learn.dls.vocab[torch.nn.functional.softmax(torchscript_preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).argmax()]</span></code></pre></div>
<pre class="text"><code>'J'</code></pre>
<p><strong>Define TorchScript file name</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">module_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.pt"</span></span>
<span id="cb26-2">module_file_name</span></code></pre></div>
<pre class="text"><code>'asl-and-some-words-convnext_tiny.pt'</code></pre>
<p>Some models like MobileViT will require the exact input dimensions in LibTorch as was used in the <code>torch.jit.trace()</code> method. Therefore we’ll convert the PyTorch model again using the training dimensions before saving the TorchScript module to a file.</p>
<p><strong>Generate a torchscript module using the target input dimensions and save it to a file</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.randn(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">*</span>input_dims).shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 216, 384])</code></pre>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">traced_script_module <span class="op" style="color: #5E5E5E;">=</span> torch.jit.trace(learn.model.cpu(), torch.randn(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">*</span>input_dims))</span>
<span id="cb30-2">traced_script_module.save(module_file_name)</span></code></pre></div>
<p>We can export the normalization stats to a JSON file using the same method for the class labels. We’ll load the stats in Unity and pass them to the LibTorch plugin.</p>
<p><strong>Export model normalization stats</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">normalization_stats <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"mean"</span>: <span class="bu" style="color: null;">list</span>(mean), <span class="st" style="color: #20794D;">"std"</span>: <span class="bu" style="color: null;">list</span>(std)}</span>
<span id="cb31-2">normalization_stats_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-normalization_stats.json"</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(normalization_stats_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb31-5">    json.dump(normalization_stats, write_file)</span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered how to modify the training code from the <a href="../../fastai-to-unity-tutorial/part-1/">fastai-to-unity tutorial</a>to finetune models from the Timm library and export them as TorchScript modules. Part 2 will cover creating a dynamic link library (<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library">DLL</a>) file in Visual Studio to perform inference with these TorchScript modules using <a href="https://pytorch.org/cppdocs/installing.html">LibTorch</a>.</p>
<p><strong>Previous:</strong> <a href="../../fastai-to-unity-tutorial/part-3/">Fastai to Unity Tutorial Pt. 3</a></p>
<p><strong>Next:</strong> <a href="../part-2/">How to Create a LibTorch Plugin for Unity on Windows Pt.2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-libtorch-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>libtorch</category>
  <category>unity</category>
  <guid>christianjmills.com/posts/fastai-libtorch-unity-tutorial/part-1/index.html</guid>
  <pubDate>Tue, 28 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fastai to Unity Beginner Tutorial Pt. 3</title>
  <link>christianjmills.com/posts/fastai-to-unity-tutorial/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Create GitHub Pages Repository</li>
<li>Build WebGL Application</li>
<li>Test Live Demo</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1">Part 1</a> covered training an image classification model using the fastai library and exporting it to ONNX. <a href="../part-2/">Part 2</a> covered implementing a trained image classification model in a Unity project using the Barracuda library. In this post, we’ll build a Unity project as a shareable web demo and host it for free using GitHub Pages. The image classifier will execute locally in the user’s web browser.</p>
<p>WebGL builds use Barracuda’s Pixel Shader backend, which is not nearly as performant as the Compute Shader backend. Therefore, I recommend using WebGL for sharing prototypes and target operating systems for final projects.</p>
<p><strong>Pixel Shader Backend: ResNet18</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-pixel-shader-fps-resnet18.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-pixel-shader-fps-resnet18</figcaption><p></p>
</figure>
</div>
<p><strong>Pixel Shader Backend: ResNet34</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-pixel-shader-fps-resnet34.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-pixel-shader-fps-resnet34</figcaption><p></p>
</figure>
</div>
<p><strong>Compute Shader Backend: ResNet18</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-fps-resnet18.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-compute-shader-fps-resnet18</figcaption><p></p>
</figure>
</div>
<p><strong>Compute Shader Backend: ResNet34</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-fps-resnet34.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-compute-shader-fps-resnet34</figcaption><p></p>
</figure>
</div>
<p><strong>Compute Shader Backend with asynchronous GPU readback: ResNet18</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-async-fps-resnet18.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-compute-shader-async-fps-resnet18</figcaption><p></p>
</figure>
</div>
<p><strong>Compute Shader Backend with asynchronous GPU readback: ResNet34</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webcam-compute-shader-async-fps-resnet34.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcam-compute-shader-async-fps-resnet34</figcaption><p></p>
</figure>
</div>
</section>
<section id="create-github-pages-repository" class="level2">
<h2 class="anchored" data-anchor-id="create-github-pages-repository">Create GitHub Pages Repository</h2>
<p>We first need to create a <a href="https://github.com/new">new GitHub repository</a> to store the WebGL build. We can do this on GitHub or locally using Git, GitHub Desktop, or another tool.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-desktop-create-new-repository.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-desktop-create-new-repository</figcaption><p></p>
</figure>
</div>
<p>Open the Settings tab for the new repository on GitHub.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-new-repository.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-new-repository</figcaption><p></p>
</figure>
</div>
<p>Open the Pages section and select the main branch as the source for GitHub Pages.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-select-main-branch.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-select-main-branch</figcaption><p></p>
</figure>
</div>
<p>Click the Save button to start the automated build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-click-save.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-click-save</figcaption><p></p>
</figure>
</div>
<p>GitHub will provide a URL for accessing the web demo once it finishes building.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-get-url.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-get-url</figcaption><p></p>
</figure>
</div>
<p>We can check the GitHub Pages build progress under the Actions tab for the repository.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-check-build-progress.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-check-build-progress</figcaption><p></p>
</figure>
</div>
<p>The web page will be accessible once the “pages build and deployment” workflow completes. Although, we don’t have any web pages at the moment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-build-complete.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-build-complete</figcaption><p></p>
</figure>
</div>
</section>
<section id="build-webgl-application" class="level2">
<h2 class="anchored" data-anchor-id="build-webgl-application">Build WebGL Application</h2>
<p>In the Unity project, select <code>File → Build Settings...</code> in the top menu bar to open the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-open-build-settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-open-build-settings</figcaption><p></p>
</figure>
</div>
<p>Select <code>WebGL</code> from the list of platforms and click Switch Platform.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-settings-switch-to-webgl.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-build-settings-switch-to-webgl</figcaption><p></p>
</figure>
</div>
<p>Unity enables compression by default for WebGL builds, which GitHub Pages does not support. We can disable compression in the Player Settings. Click the Player Settings button in the bottom-left corner of the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-settings-open-player-settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-build-settings-open-player-settings</figcaption><p></p>
</figure>
</div>
<p>Select <code>Disabled</code> from the Compression Format dropdown menu and close the Project Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-player-settings-disable-webgl-compression.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-player-settings-disable-webgl-compression</figcaption><p></p>
</figure>
</div>
<p>We can test the WebGL build locally by clicking Build and Run in the Build Settings window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-settings-build-and-run.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-build-settings-build-and-run</figcaption><p></p>
</figure>
</div>
<p>Unity will prompt us to select a folder to store the build files.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-select-build-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-select-build-folder</figcaption><p></p>
</figure>
</div>
<p>Navigate to the local folder for the GitHub Pages repository and click Select Folder to start the build process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-build-select-github-pages-repo-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-build-select-github-pages-repo-folder</figcaption><p></p>
</figure>
</div>
<p>Once the build completes, Unity will launch the demo in the default web browser. Unity caps the framerate to the platform’s default <a href="https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html">target framerate</a> by default. On my Windows 10 desktop, that is 60fps.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/unity-webgl-build-local-test.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webgl-build-local-test</figcaption><p></p>
</figure>
</div>
<p>If we examine the repository folder, we can see a new <code>Build</code> folder, a <code>StreamingAssets</code> folder, a <code>TemplateData</code> folder, and an <code>index.html</code> file.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-repo-folder-after-webgl-build.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-repo-folder-after-webgl-build</figcaption><p></p>
</figure>
</div>
<p>We can push the local changes to GitHub, which will automatically trigger the “pages build and deployment” workflow.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-check-webgl-build-progress.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-check-webgl-build-progress</figcaption><p></p>
</figure>
</div>
</section>
<section id="test-live-demo" class="level2">
<h2 class="anchored" data-anchor-id="test-live-demo">Test Live Demo</h2>
<p>We can test the web demo at the URL provided by GitHub once the build workflow completes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-3/images/github-pages-webgl-demo.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github-pages-webgl-demo</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered how to build a Unity project as a shareable web demo and host it using GitHub Pages.</p>
<p><strong>Previous:</strong> <a href="../part-2">Fastai to Unity Tutorial Pt. 2</a></p>
<p><strong>Follow Up:</strong> <a href="../../fastai-libtorch-unity-tutorial/part-1">How to Create a LibTorch Plugin for Unity on Windows Pt.1</a></p>
<p><strong>Follow Up:</strong> <a href="../../fastai-openvino-unity-tutorial/part-1">How to Create an OpenVINO Plugin for Unity on Windows Pt. 1</a></p>
<p><strong>Intermediate Tutorial:</strong> <a href="../../icevision-openvino-unity-tutorial/part-1">End-to-End Object Detection for Unity With IceVision and OpenVINO Pt. 1</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/fastai-to-unity-tutorial/part-3/index.html</guid>
  <pubDate>Wed, 08 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fastai to Unity Beginner Tutorial Pt. 2</title>
  <link>christianjmills.com/posts/fastai-to-unity-tutorial/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Set Up Unity Hub</li>
<li>Install Unity Editor</li>
<li>Create New Project</li>
<li>Install Barracuda Package</li>
<li>Import Assets</li>
<li>Create Image Classifier Script</li>
<li>Create Processing Shaders</li>
<li>Set up Unity Scene</li>
<li>Test in Editor</li>
<li>Summary</li>
</ul>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="../part-1">Part 1</a> covered training an image classification model using the fastai library and exporting it to ONNX. In this post, we’ll cover implementing a trained image classification model in a Unity project using the Barracuda library.</p>
</section>
<section id="set-up-unity-hub" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-hub">Set Up Unity Hub</h2>
<p>Before creating a project, we need to install <a href="https://unity3d.com/get-unity/download">Unity Hub</a>, create a <a href="https://id.unity.com/">UnityID account</a>, and activate a (free) Unity license. The beginner Unity tutorial linked below covers all these steps and how to create a simple flappy bird-style game.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=8rdfcq-jePw&amp;t=113s">Make Your First Video Game - Ultimate Beginner Unity3D Tutorial</a></li>
</ul>
<p>The link opens to the part covering how to install Unity for the first time, but I recommend watching the entire tutorial for those new to Unity.</p>
</section>
<section id="install-unity-editor" class="level2">
<h2 class="anchored" data-anchor-id="install-unity-editor">Install Unity Editor</h2>
<p>Once we have Unity Hub installed and an activated license, we need to install a version of the Unity Editor. We will use the latest 2022.1+ release as early versions have some issues building WebGL projects with Barracuda. The tutorial uses 2022.1.3.f1, which you can install directly from the link below.</p>
<ul>
<li><strong>Unity download archive:</strong> <a href="unityhub://2022.1.3f1/1cedbfe38737">Unity 2022.1.3</a></li>
</ul>
<p>Open Unity Hub and select the <code>Installs</code> section in the side panel. Then click the <code>Install Editor</code> button in the upper right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-installs.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-installs</figcaption><p></p>
</figure>
</div>
<p>Click the <code>Install</code> button next to the latest <code>2022.1</code> version under <code>Other Versions</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-installs-select-2022-1-3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-installs-select-2022-1-3</figcaption><p></p>
</figure>
</div>
<p>Scroll down the <code>Add modules</code> selection menu and click the check box next to <code>WebGL Build Support</code>. Feel free to add any additional target platforms here as well. Click the <code>Install</code> button after selecting all desired modules.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-install-2022-1-3-with-webgl.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-install-2022-1-3-with-webgl</figcaption><p></p>
</figure>
</div>
<p>Unity Hub will begin downloading and installing the selected editor version. If the install fails the first time, click the retry button, and it should complete successfully.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-install-editor-failed-message.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-install-editor-failed-message</figcaption><p></p>
</figure>
</div>
</section>
<section id="create-new-project" class="level2">
<h2 class="anchored" data-anchor-id="create-new-project">Create New Project</h2>
<p>Go back to the Projects section after the editor finishes installing and click New Project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project</figcaption><p></p>
</figure>
</div>
<p>Select the target editor version from the Editor Version dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-select-unity-version.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-select-unity-version</figcaption><p></p>
</figure>
</div>
<p>Select the 2D Core template.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-select-2D-template.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-select-2D-template</figcaption><p></p>
</figure>
</div>
<p>Pick a name for the project and a location for the project folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-name-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-name-project</figcaption><p></p>
</figure>
</div>
<p>Finally, click Create Project in the lower right-hand corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-hub-new-project-click-create-project.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-hub-new-project-click-create-project</figcaption><p></p>
</figure>
</div>
</section>
<section id="install-barracuda-package" class="level2">
<h2 class="anchored" data-anchor-id="install-barracuda-package">Install Barracuda Package</h2>
<p>Inside the editor window, we’ll first install the Barracuda package. Select <code>Window → Package Manager</code> from the top menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-open-package-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-open-package-manager</figcaption><p></p>
</figure>
</div>
<p>In the Package Manager window, click the little <code>+</code> sign in the upper left-hand corner and select <code>Add package from git URL...</code> from the dropdown menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-package-manager-add-from-git.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-package-manager-add-from-git</figcaption><p></p>
</figure>
</div>
<p>Enter <code>com.unity.barracuda</code> into the text box and click <code>Add</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-package-manager-add-barracuda.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-package-manager-add-barracuda</figcaption><p></p>
</figure>
</div>
<p>Wait for the Barracuda package to install and close the Package Manager window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-package-manager-installing-barracuda-please-wait.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-package-manager-installing-barracuda-please-wait</figcaption><p></p>
</figure>
</div>
</section>
<section id="import-assets" class="level2">
<h2 class="anchored" data-anchor-id="import-assets">Import Assets</h2>
<p>Next, we’ll import any ONNX, JSON, and test image files into the Assets folder. Right-click a space in the Assets section and select <code>Create → Folder</code> from the popup menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-folder</figcaption><p></p>
</figure>
</div>
<p>Name the new folder Models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-models-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-models-folder</figcaption><p></p>
</figure>
</div>
<p>Drag and drop any ONNX files and JSON class label files from the operating system’s file explorer into the Models folder. Sample files are available in the Google Drive link below.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1VCDqvkBiHOJX5Xe64Ay3Y2ARz4ZBmqCw?usp=sharing">Model Asssets</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-import-model-assets.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-model-assets</figcaption><p></p>
</figure>
</div>
<p>We can click on an ONNX file to examine it in the Inspector tab on the right-hand side of the editor window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-inspect-model-asset.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-inspect-model-asset</figcaption><p></p>
</figure>
</div>
<p>When <a href="https://netron.app/">Netron</a> is available, we can double-click on the ONNX file to open it in Netron.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-inspect-model-asset-netron.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-inspect-model-asset-netron</figcaption><p></p>
</figure>
</div>
<div style="overflow-y:auto; max-height:500px">
<pre><code>&lt;img src="./images/asl-and-some-words-resnet18.png" alt="asl-and-some-words-resnet18"&gt;</code></pre>
</div>
<p>Next, create an Images folder and drop any test images into it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-images-folder.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-images-folder</figcaption><p></p>
</figure>
</div>
<p>Maybe stick with symmetrical hand signs (e.g., Play) since the model expects mirrored input images.</p>
<p><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1MyMQZzLx_PoCl3vArCjMqRWQkVyf99Cz?usp=sharing">Image Assets</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-import-image-assets.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-image-assets</figcaption><p></p>
</figure>
</div>
<p>Unity automatically imports images as a Sprite (2D and UI) <a href="https://docs.unity3d.com/Manual/TextureTypes.html">texture type</a>. We don’t need to change it for our purposes.</p>
</section>
<section id="create-image-classifier-script" class="level2">
<h2 class="anchored" data-anchor-id="create-image-classifier-script">Create Image Classifier Script</h2>
<p>Now we can start coding. We’ll store C# scripts in a new Scripts folder. Right-click a space inside it and select <code>Create → C# Script</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-c-sharp-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-c-sharp-script</figcaption><p></p>
</figure>
</div>
<p>We’ll name the script <code>ImageClassifier</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-image-classifier-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-image-classifier-script</figcaption><p></p>
</figure>
</div>
<p><strong>Default script code</strong></p>
<p>By default, C# scripts contain the following code.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;">public</span> <span class="kw" style="color: #003B4F;">class</span> ImageClassifier <span class="op" style="color: #5E5E5E;">:</span> MonoBehaviour</span>
<span id="cb2-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb2-8">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb2-9">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-10">        </span>
<span id="cb2-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb2-14">    <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-16">        </span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Add required namespaces</strong></p>
<ul>
<li><a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.html">Unity.Barracuda</a>: Provides access to the Barracuda API.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system?view=net-5.0">System</a>: Contains fundamental classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.UI.html">UnityEngine.UI</a>: Provides access to UI elements.</li>
<li><a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@5.9/api/UnityEngine.Rendering.html">UnityEngine.Rendering</a>: Provides access to the elements of the rendering pipeline.</li>
</ul>
<hr>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Collections</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Generic</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">using</span> Unity<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Barracuda</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Rendering</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">using</span> System<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UI</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<section id="define-public-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-public-variables">Define public variables</h3>
<p>We’ll add the required public variables above the Start method. We will be able to access these variables in the Inspector tab. We can add <a href="https://docs.unity3d.com/ScriptReference/HeaderAttribute.html">Header</a> attributes to organize the public variables in the Inspector tab and use <a href="https://docs.unity3d.com/ScriptReference/TooltipAttribute.html">Tooltip</a> attributes to provide information about variables.</p>
<p><strong>Define scene object variables</strong></p>
<p>First, we need a variable to access the screen object that displays either a test image or webcam input.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Scene Objects"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Screen object for the scene"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">public</span> Transform screen<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define data processing variables</strong></p>
<p>Next, we’ll define the variables for processing model input. We can set the default target input resolution to 216 and use it to scale the source resolution while maintaining the original aspect ratio.</p>
<p>The only preprocessing step we need to implement is normalizing images using the ImageNet stats. The fastest way to do this is with shaders. Shaders are programs that run on the GPU. We will implement ImageNet normalization in a <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute Shader</a> and a <a href="https://docs.unity3d.com/Manual/SL-VertexFragmentShaderExamples.html">Fragment shader</a> to account for platform support. We attach a Fragment shader to a <a href="https://docs.unity3d.com/Manual/Materials.html">Material</a>, so that is what we’ll pass into the script.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Data Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target minimum model input dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> targetDim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">216</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The compute shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">public</span> ComputeShader processingShader<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The material with the fragment shader for GPU processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">public</span> Material processingMaterial<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define Barracuda variables</strong></p>
<p>We’ll add the required private variables right below the public variables. We pass in ONNX files as an <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.NNModel.html">NNModel</a> object.</p>
<p>We’ll be adding a SoftMax and an Argmax layer to the end of the model, so we need to define names for those. We need to indicate the output layer we want to modify with the new layers. In our case, there is only one output layer.</p>
<p>By default, Barracuda uses a channels-last order for Tensors. However, switching to channels first can significantly improve performance on some GPUs.</p>
<p>We can choose from <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.WorkerFactory.Type.html">several</a> different inference backends (Although we’ll only want to use two in practice). The Auto option will automatically pick the best backend for the target platform.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Barracuda"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Barracuda/ONNX asset file"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">public</span> NNModel modelAsset<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name for the custom softmax output layer"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> softmaxLayer <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"softmaxLayer"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The name for the custom softmax output layer"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span> argmaxLayer <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"argmaxLayer"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The target output layer index"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> outputLayerIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"EXPERIMENTAL: Indicate whether to order tensor data channels first"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useNCHW <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The model execution backend"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;">public</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span> workerType <span class="op" style="color: #5E5E5E;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Auto</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define output processing variables</strong></p>
<p>As mentioned in a <a href="../../deep-learning-unity-intro/">previous post</a>, reading model output from the GPU to the CPU can cause a significant performance bottleneck. Therefore, we will add the option to read the model output asynchronously at the cost of a few frames of latency. Unfortunately, this feature does not work with the inference backend used for WebGL builds.</p>
<p>We pass in the JSON file containing the class labels as a <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html">TextAsset</a>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output Processing"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Asynchronously download model output from the GPU to the CPU."</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"A json file containing the class labels"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">public</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for debugging</strong></p>
<p>Next, we’ll add a Boolean variable to toggle printing debug messages to the console. These messages get printed to the console in the browser as well.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Debugging"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Print debugging messages to the console"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> printDebugMessages <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define webcam variables</strong></p>
<p>We need to specify a desired resolution and framerate when using a webcam as input.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Webcam"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use a webcam as input"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">public</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1280</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">720</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The requested webcam framerate"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> webcamFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for user interface</strong></p>
<p>We’ll make a simple GUI that displays the predicted class, the current framerate, and controls for selecting webcam devices.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Header</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GUI"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display predicted class"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Display fps"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">bool</span> displayFPS <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The on-screen text color"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;">public</span> Color textColor <span class="op" style="color: #5E5E5E;">=</span> Color<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">red</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The scale value for the on-screen font size"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-9"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">99</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">int</span> fontScale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-11"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The number of seconds to wait between refreshing the fps value"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-12"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Range</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0.01f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">1.0f</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">float</span> fpsRefreshRate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1f</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-14"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The toggle for using a webcam as the input source"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-15"><span class="kw" style="color: #003B4F;">public</span> Toggle useWebcamToggle<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-16"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The dropdown menu that lists available webcam devices"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb10-17"><span class="kw" style="color: #003B4F;">public</span> Dropdown webcamDropdown<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-private-variables" class="level3">
<h3 class="anchored" data-anchor-id="define-private-variables">Define private variables</h3>
<p>We’ll add the required private variables right below the public variables.</p>
<p><strong>Define private webcam variables</strong></p>
<p>We’ll keep a list of available webcam devices so users can switch between them. Unity renders webcam input to a <a href="https://docs.unity3d.com/ScriptReference/WebCamTexture.html">WebcamTexture</a>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">// List of available webcam devices</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">private</span> WebCamDevice<span class="op" style="color: #5E5E5E;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">// Live video input from a webcam</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;">private</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">// The name of the current webcam  device</span></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define input variables</strong></p>
<p>We’ll update the dimensions and content of the screen object based on the test image or webcam.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">// The test image dimensions</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;">private</span> Vector2Int imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">// The test image texture</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;">private</span> Texture imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;">// The current screen object dimensions</span></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;">private</span> Vector2Int screenDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;">// The model input texture</span></span>
<span id="cb12-8"><span class="kw" style="color: #003B4F;">private</span> RenderTexture inputTexture<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define Barracuda variables</strong></p>
<p>We execute models in Barracuda using an <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.IWorker.html">IWorker</a>interface and store data in <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.Tensor.html">Tensor</a> objects.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">// The main interface to execute models</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">private</span> IWorker engine<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">// Stores the input data for the model</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">private</span> Tensor input<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for handling asynchronous GPU readback</strong></p>
<p>When using asynchronous GPU readback, we need one Texture that stores data on the GPU and one that stores data on the CPU.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// Stores the raw model output on the GPU when using useAsyncGPUReadback</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;">private</span> RenderTexture outputTextureGPU<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">// Stores the raw model output on the CPU when using useAsyncGPUReadback</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">private</span> Texture2D outputTextureCPU<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking class labels</strong></p>
<p>We need to create a little class that indicates the structure of the JSON content. Our JSON file only contains a single array of strings. We can store this array in a dedicated variable.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">// A class for reading in class labels from a JSON file</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;">{</span> <span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> classes<span class="op" style="color: #5E5E5E;">;</span> <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;">// The ordered list of class names</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">[]</span> classes<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;">// Stores the predicted class index</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><strong>Define variables for tracking the framerate</strong></p>
<p>Lastly, we need to define a couple of variables for the custom fps counter.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">// The current frame rate value</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> fps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">// Controls when the frame rate value updates</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">float</span> fpsTimer <span class="op" style="color: #5E5E5E;">=</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="define-initialization-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-initialization-methods">Define Initialization Methods</h3>
<p>We first need to define some methods to initialize webcams, the screen object, any GUI dropdown menus, and the in-game camera.</p>
<p><strong>Define method to initialize a webcam device</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">/// Initialize the selected webcam device</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"deviceName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The name of the selected webcam device</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">string</span> deviceName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb17-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb17-7">    <span class="co" style="color: #5E5E5E;">// Stop any webcams already playing</span></span>
<span id="cb17-8">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;">// Create a new WebCamTexture</span></span>
<span id="cb17-11">    webcamTexture <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">WebCamTexture</span><span class="op" style="color: #5E5E5E;">(</span>deviceName<span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> webcamDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> webcamFPS<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-12"></span>
<span id="cb17-13">    <span class="co" style="color: #5E5E5E;">// Start the webcam</span></span>
<span id="cb17-14">    webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Play</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb17-15">    <span class="co" style="color: #5E5E5E;">// Check if webcam is playing</span></span>
<span id="cb17-16">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;">// Update toggle value</span></span>
<span id="cb17-18">    useWebcamToggle<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetIsOnWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-19"></span>
<span id="cb17-20">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="st" style="color: #20794D;">"Webcam is playing"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Webcam not playing, option disabled"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb17-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene screen object</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;">/// Resize and position an in-scene screen object</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-6">    <span class="co" style="color: #5E5E5E;">// Set the texture for the screen object</span></span>
<span id="cb18-7">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-8">    <span class="co" style="color: #5E5E5E;">// Set the screen dimensions</span></span>
<span id="cb18-9">    screenDims <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> imageDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-10"></span>
<span id="cb18-11">    <span class="co" style="color: #5E5E5E;">// Flip the screen around the Y-Axis when using webcam</span></span>
<span id="cb18-12">    <span class="dt" style="color: #AD0000;">float</span> yRotation <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> 180f <span class="op" style="color: #5E5E5E;">:</span> 0f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-13">    <span class="co" style="color: #5E5E5E;">// Invert the scale value for the Z-Axis when using webcam</span></span>
<span id="cb18-14">    <span class="dt" style="color: #AD0000;">float</span> zScale <span class="op" style="color: #5E5E5E;">=</span> useWebcam <span class="op" style="color: #5E5E5E;">?</span> <span class="op" style="color: #5E5E5E;">-</span>1f <span class="op" style="color: #5E5E5E;">:</span> 1f<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">    <span class="co" style="color: #5E5E5E;">// Set screen rotation</span></span>
<span id="cb18-17">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotation</span> <span class="op" style="color: #5E5E5E;">=</span> Quaternion<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Euler</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> yRotation<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-18">    <span class="co" style="color: #5E5E5E;">// Adjust the screen dimensions</span></span>
<span id="cb18-19">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">localScale</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> zScale<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-20"></span>
<span id="cb18-21">    <span class="co" style="color: #5E5E5E;">// Adjust the screen position</span></span>
<span id="cb18-22">    screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize GUI dropdown menu options</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">/// Initialize the GUI dropdown list</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb19-6">    <span class="co" style="color: #5E5E5E;">// Create list of webcam device names</span></span>
<span id="cb19-7">    List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;</span> webcamNames <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> List<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">string</span><span class="op" style="color: #5E5E5E;">&gt;();</span></span>
<span id="cb19-8">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Add</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;">// Remove default dropdown options</span></span>
<span id="cb19-11">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ClearOptions</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;">// Add webcam device names to dropdown menu</span></span>
<span id="cb19-13">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">AddOptions</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb19-14">    <span class="co" style="color: #5E5E5E;">// Set the value for the dropdown to the current webcam device</span></span>
<span id="cb19-15">    webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetValueWithoutNotify</span><span class="op" style="color: #5E5E5E;">(</span>webcamNames<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">IndexOf</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb19-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize the in-scene camera object</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;">/// Resize and position the main camera based on an in-scene screen object</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"screenDims"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The dimensions of an in-scene screen object</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int screenDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> cameraName <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Main Camera"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb20-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb20-7">    <span class="co" style="color: #5E5E5E;">// Get a reference to the Main Camera GameObject</span></span>
<span id="cb20-8">    GameObject camera <span class="op" style="color: #5E5E5E;">=</span> GameObject<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Find</span><span class="op" style="color: #5E5E5E;">(</span>cameraName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;">// Adjust the camera position to account for updates to the screenDims</span></span>
<span id="cb20-10">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">transform</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">position</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector3</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">-</span>10f<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb20-11">    <span class="co" style="color: #5E5E5E;">// Render objects with no perspective (i.e. 2D)</span></span>
<span id="cb20-12">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographic</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-13">    <span class="co" style="color: #5E5E5E;">// Adjust the camera size to account for updates to the screenDims</span></span>
<span id="cb20-14">    camera<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">orthographicSize</span> <span class="op" style="color: #5E5E5E;">=</span> screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb20-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to initialize a Barracuda inference interface</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;">/// Initialize an interface to execute the specified model using the specified backend</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"model"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target model representation</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"workerType"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target compute backend</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useNCHW"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">EXPERIMENTAL: The channel order for the compute backend</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;">private</span> IWorker <span class="fu" style="color: #4758AB;">InitializeWorker</span><span class="op" style="color: #5E5E5E;">(</span>Model model<span class="op" style="color: #5E5E5E;">,</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span> workerType<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">bool</span> useNCHW <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb21-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-10">    <span class="co" style="color: #5E5E5E;">// Validate the selected worker type</span></span>
<span id="cb21-11">    workerType <span class="op" style="color: #5E5E5E;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ValidateType</span><span class="op" style="color: #5E5E5E;">(</span>workerType<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    <span class="co" style="color: #5E5E5E;">// Set the channel order of the compute backend to channel-first</span></span>
<span id="cb21-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useNCHW<span class="op" style="color: #5E5E5E;">)</span> ComputeInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">channelsOrder</span> <span class="op" style="color: #5E5E5E;">=</span> ComputeInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ChannelsOrder</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">NCHW</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-15"></span>
<span id="cb21-16">    <span class="co" style="color: #5E5E5E;">// Create a worker to execute the model using the selected backend</span></span>
<span id="cb21-17">    <span class="kw" style="color: #003B4F;">return</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CreateWorker</span><span class="op" style="color: #5E5E5E;">(</span>workerType<span class="op" style="color: #5E5E5E;">,</span> model<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-start-method" class="level3">
<h3 class="anchored" data-anchor-id="define-start-method">Define Start method</h3>
<p>The <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html">Start</a> method is <a href="https://docs.unity3d.com/Manual/ExecutionOrder.html">called</a> once before the first frame update, so we’ll perform any required setup steps here.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;">// Start is called before the first frame update</span></span>
<span id="cb22-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Start</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb22-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;">// Get the source image texture</span></span>
<span id="cb22-5">    imageTexture <span class="op" style="color: #5E5E5E;">=</span> screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">gameObject</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetComponent</span><span class="op" style="color: #5E5E5E;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;">&gt;().</span><span class="fu" style="color: #4758AB;">material</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">mainTexture</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-6">    <span class="co" style="color: #5E5E5E;">// Get the source image dimensions as a Vector2Int</span></span>
<span id="cb22-7">    imageDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">(</span>imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> imageTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-8"></span>
<span id="cb22-9">    <span class="co" style="color: #5E5E5E;">// Initialize list of available webcam devices</span></span>
<span id="cb22-10">    webcamDevices <span class="op" style="color: #5E5E5E;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">devices</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-11">    <span class="kw" style="color: #003B4F;">foreach</span> <span class="op" style="color: #5E5E5E;">(</span>WebCamDevice device <span class="kw" style="color: #003B4F;">in</span> webcamDevices<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>device<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-12">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-13">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-14">    <span class="co" style="color: #5E5E5E;">// Initialize webcam</span></span>
<span id="cb22-15">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-16"></span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb22-18">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-19">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb22-20">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-21"></span>
<span id="cb22-22">    <span class="co" style="color: #5E5E5E;">// Get an object oriented representation of the model</span></span>
<span id="cb22-23">    Model m_RunTimeModel <span class="op" style="color: #5E5E5E;">=</span> ModelLoader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Load</span><span class="op" style="color: #5E5E5E;">(</span>modelAsset<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-24">    <span class="co" style="color: #5E5E5E;">// Get the name of the target output layer</span></span>
<span id="cb22-25">    <span class="dt" style="color: #AD0000;">string</span> outputLayer <span class="op" style="color: #5E5E5E;">=</span> m_RunTimeModel<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">outputs</span><span class="op" style="color: #5E5E5E;">[</span>outputLayerIndex<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb22-26"></span>
<span id="cb22-27">    <span class="co" style="color: #5E5E5E;">// Create a model builder to modify the m_RunTimeModel</span></span>
<span id="cb22-28">    ModelBuilder modelBuilder <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelBuilder</span><span class="op" style="color: #5E5E5E;">(</span>m_RunTimeModel<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-29"></span>
<span id="cb22-30">    <span class="co" style="color: #5E5E5E;">// Add a new Softmax layer</span></span>
<span id="cb22-31">    modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Softmax</span><span class="op" style="color: #5E5E5E;">(</span>softmaxLayer<span class="op" style="color: #5E5E5E;">,</span> outputLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-32">    <span class="co" style="color: #5E5E5E;">// Add a new Argmax layer</span></span>
<span id="cb22-33">    modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Reduce</span><span class="op" style="color: #5E5E5E;">(</span>Layer<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ArgMax</span><span class="op" style="color: #5E5E5E;">,</span> argmaxLayer<span class="op" style="color: #5E5E5E;">,</span> softmaxLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-34">    <span class="co" style="color: #5E5E5E;">// Initialize the interface for executing the model</span></span>
<span id="cb22-35">    engine <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">InitializeWorker</span><span class="op" style="color: #5E5E5E;">(</span>modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">model</span><span class="op" style="color: #5E5E5E;">,</span> workerType<span class="op" style="color: #5E5E5E;">,</span> useNCHW<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-36"></span>
<span id="cb22-37">    <span class="co" style="color: #5E5E5E;">// Initialize the GPU output texture</span></span>
<span id="cb22-38">    outputTextureGPU <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-39">    <span class="co" style="color: #5E5E5E;">// Initialize the CPU output texture</span></span>
<span id="cb22-40">    outputTextureCPU <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Texture2D</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBAHalf</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb22-41"></span>
<span id="cb22-42">    <span class="co" style="color: #5E5E5E;">// Initialize list of class labels from JSON file</span></span>
<span id="cb22-43">    classes <span class="op" style="color: #5E5E5E;">=</span> JsonUtility<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FromJson</span><span class="op" style="color: #5E5E5E;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;">&gt;(</span>classLabels<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">classes</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb22-44"></span>
<span id="cb22-45">    <span class="co" style="color: #5E5E5E;">// Initialize the webcam dropdown list</span></span>
<span id="cb22-46">    <span class="fu" style="color: #4758AB;">InitializeDropdown</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb22-47"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-processing-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-processing-methods">Define Processing Methods</h3>
<p>Next, we need to define methods to process images using the Compute Shader, calculate the input resolution, handle asynchronous GPU readback, and process raw model output.</p>
<p><strong>Define method to process images using a compute shader</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;">/// Process the provided image using the specified function on the GPU</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"image"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target image RenderTexture</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"computeShader"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputerShader</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"functionName"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The target ComputeShader function</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb23-8"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;">,</span> ComputeShader computeShader<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">string</span> functionName<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb23-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb23-10">    <span class="co" style="color: #5E5E5E;">// Specify the number of threads on the GPU</span></span>
<span id="cb23-11">    <span class="dt" style="color: #AD0000;">int</span> numthreads <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-12">    <span class="co" style="color: #5E5E5E;">// Get the index for the specified function in the ComputeShader</span></span>
<span id="cb23-13">    <span class="dt" style="color: #AD0000;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;">=</span> computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">FindKernel</span><span class="op" style="color: #5E5E5E;">(</span>functionName<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-14">    <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb23-15">    RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-16">    <span class="co" style="color: #5E5E5E;">// Enable random write access</span></span>
<span id="cb23-17">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb23-18">    <span class="co" style="color: #5E5E5E;">// Create the HDR RenderTexture</span></span>
<span id="cb23-19">    result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Create</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb23-20"></span>
<span id="cb23-21">    <span class="co" style="color: #5E5E5E;">// Set the value for the Result variable in the ComputeShader</span></span>
<span id="cb23-22">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Result"</span><span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-23">    <span class="co" style="color: #5E5E5E;">// Set the value for the InputImage variable in the ComputeShader</span></span>
<span id="cb23-24">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">SetTexture</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"InputImage"</span><span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-25"></span>
<span id="cb23-26">    <span class="co" style="color: #5E5E5E;">// Execute the ComputeShader</span></span>
<span id="cb23-27">    computeShader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispatch</span><span class="op" style="color: #5E5E5E;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span> <span class="op" style="color: #5E5E5E;">/</span> numthreads<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-28"></span>
<span id="cb23-29">    <span class="co" style="color: #5E5E5E;">// Copy the result into the source RenderTexture</span></span>
<span id="cb23-30">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> image<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-31"></span>
<span id="cb23-32">    <span class="co" style="color: #5E5E5E;">// Release the temporary RenderTexture</span></span>
<span id="cb23-33">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb23-34"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to calculate input resolution</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">/// Scale the source image resolution to the target input dimensions</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;">/// while maintaing the source aspect ratio.</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"imageDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"targetDims"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;">private</span> Vector2Int <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> targetDim<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb24-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-10">    <span class="co" style="color: #5E5E5E;">// Clamp the minimum dimension value to 64px</span></span>
<span id="cb24-11">    targetDim <span class="op" style="color: #5E5E5E;">=</span> Mathf<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Max</span><span class="op" style="color: #5E5E5E;">(</span>targetDim<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb24-12"></span>
<span id="cb24-13">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2Int</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb24-14"></span>
<span id="cb24-15">    <span class="co" style="color: #5E5E5E;">// Calculate the input dimensions using the target minimum dimension</span></span>
<span id="cb24-16">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb24-17">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-18">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-19">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-21">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb24-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb24-23">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> targetDim<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-24">        inputDims<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">((</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>imageDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">)</span>targetDim<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb24-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb24-26"></span>
<span id="cb24-27">    <span class="kw" style="color: #003B4F;">return</span> inputDims<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-28"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to handle asynchronous GPU readback</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;">/// Called once AsyncGPUReadback has been completed</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"request"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb25-5"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb25-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-7">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">hasError</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb25-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-9">        Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb25-10">        <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb25-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-12"></span>
<span id="cb25-13">    <span class="co" style="color: #5E5E5E;">// Make sure the Texture2D is not null</span></span>
<span id="cb25-14">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>outputTextureCPU<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb25-15">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb25-16">        <span class="co" style="color: #5E5E5E;">// Fill Texture2D with raw data from the AsyncGPUReadbackRequest</span></span>
<span id="cb25-17">        outputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;">(</span>request<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetData</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">uint</span><span class="op" style="color: #5E5E5E;">&gt;());</span></span>
<span id="cb25-18">        <span class="co" style="color: #5E5E5E;">// Apply changes to Textur2D</span></span>
<span id="cb25-19">        outputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Apply</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb25-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb25-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to process raw model output</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">/// Process the raw model output to get the predicted class index</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"engine"</span><span class="kw" style="color: #003B4F;">&gt;</span><span class="co" style="color: #5E5E5E;">The interface for executing the model</span><span class="kw" style="color: #003B4F;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;returns&gt;&lt;/returns&gt;</span></span>
<span id="cb26-6"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">int</span> <span class="fu" style="color: #4758AB;">ProcessOutput</span><span class="op" style="color: #5E5E5E;">(</span>IWorker engine<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-7"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-8">    <span class="dt" style="color: #AD0000;">int</span> classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;">// Get raw model output</span></span>
<span id="cb26-11">    Tensor output <span class="op" style="color: #5E5E5E;">=</span> engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PeekOutput</span><span class="op" style="color: #5E5E5E;">(</span>argmaxLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-12"></span>
<span id="cb26-13">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useAsyncGPUReadback<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb26-14">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-15">        <span class="co" style="color: #5E5E5E;">// Copy model output to a RenderTexture</span></span>
<span id="cb26-16">        output<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-17">        <span class="co" style="color: #5E5E5E;">// Asynchronously download model output from the GPU to the CPU</span></span>
<span id="cb26-18">        AsyncGPUReadback<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Request</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> TextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">RGBAHalf</span><span class="op" style="color: #5E5E5E;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-19">        <span class="co" style="color: #5E5E5E;">// Get the predicted class index</span></span>
<span id="cb26-20">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>outputTextureCPU<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetPixel</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">).</span><span class="fu" style="color: #4758AB;">r</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-21"></span>
<span id="cb26-22">        <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb26-23">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">||</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Output texture not initialized"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb26-25">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb26-26">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb26-27">        <span class="co" style="color: #5E5E5E;">// Get the predicted class index</span></span>
<span id="cb26-28">        classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span>output<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb26-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb26-30"></span>
<span id="cb26-31">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Class Index: {classIndex}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb26-32"></span>
<span id="cb26-33">    <span class="co" style="color: #5E5E5E;">// Dispose Tensor and associated memories.</span></span>
<span id="cb26-34">    output<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb26-35"></span>
<span id="cb26-36">    <span class="kw" style="color: #003B4F;">return</span> classIndex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb26-37"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-update-method" class="level3">
<h3 class="anchored" data-anchor-id="define-update-method">Define Update method</h3>
<p>We’ll place anything we want to run every frame in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">Update</a> method.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;">// Update is called once per frame</span></span>
<span id="cb27-2"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">Update</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb27-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-4">    useWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">?</span> useWebcam <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-5">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-7">        <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb27-8">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>webcamTexture <span class="op" style="color: #5E5E5E;">||</span> <span class="op" style="color: #5E5E5E;">!</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-9"></span>
<span id="cb27-10">        <span class="co" style="color: #5E5E5E;">// Skip the rest of the method if the webcam is not initialized</span></span>
<span id="cb27-11">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">16</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-12"></span>
<span id="cb27-13">        <span class="co" style="color: #5E5E5E;">// Make sure screen dimensions match webcam resolution when using webcam</span></span>
<span id="cb27-14">        <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">!=</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-15">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-16">            <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb27-17">            <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-18">            <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb27-19">            <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-22">    <span class="kw" style="color: #003B4F;">else</span> <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">isPlaying</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-23">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-24">        <span class="co" style="color: #5E5E5E;">// Stop the current webcam</span></span>
<span id="cb27-25">        webcamTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Stop</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-26"></span>
<span id="cb27-27">        <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb27-28">        <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-29">        <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb27-30">        <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-32"></span>
<span id="cb27-33">    <span class="co" style="color: #5E5E5E;">// Scale the source image resolution</span></span>
<span id="cb27-34">    Vector2Int inputDims <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">,</span> targetDim<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-35">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputDims.x} x {inputDims.y}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-36"></span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;">// Initialize the input texture with the calculated input dimensions</span></span>
<span id="cb27-38">    inputTexture <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span><span class="op" style="color: #5E5E5E;">,</span> inputDims<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-39">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Input Dims: {inputTexture.width}x{inputTexture.height}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-40"></span>
<span id="cb27-41">    <span class="co" style="color: #5E5E5E;">// Copy the source texture into model input texture</span></span>
<span id="cb27-42">    Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">((</span>useWebcam <span class="op" style="color: #5E5E5E;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;">:</span> imageTexture<span class="op" style="color: #5E5E5E;">),</span> inputTexture<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-43"></span>
<span id="cb27-44">    <span class="co" style="color: #5E5E5E;">// Disable asynchronous GPU readback when not using a Compute Shader backend</span></span>
<span id="cb27-45">    useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">=</span> engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Summary</span><span class="op" style="color: #5E5E5E;">().</span><span class="fu" style="color: #4758AB;">Contains</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Unity.Barracuda.ComputeVarsWithSharedModel"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">?</span> useAsyncGPUReadback <span class="op" style="color: #5E5E5E;">:</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-46"></span>
<span id="cb27-47">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>SystemInfo<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">supportsComputeShaders</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb27-48">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-49">        <span class="co" style="color: #5E5E5E;">// Normalize the input pixel data</span></span>
<span id="cb27-50">        <span class="fu" style="color: #4758AB;">ProcessImageGPU</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> processingShader<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"NormalizeImageNet"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-51"></span>
<span id="cb27-52">        <span class="co" style="color: #5E5E5E;">// Initialize a Tensor using the inputTexture</span></span>
<span id="cb27-53">        input <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> channels<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-54">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-55">    <span class="kw" style="color: #003B4F;">else</span></span>
<span id="cb27-56">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb27-57">        <span class="co" style="color: #5E5E5E;">// Define a temporary HDR RenderTexture</span></span>
<span id="cb27-58">        RenderTexture result <span class="op" style="color: #5E5E5E;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">GetTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb27-59">                                                          inputTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">height</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">24</span><span class="op" style="color: #5E5E5E;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ARGBHalf</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-60">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">active</span> <span class="op" style="color: #5E5E5E;">=</span> result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-61"></span>
<span id="cb27-62">        <span class="co" style="color: #5E5E5E;">// Apply preprocessing steps</span></span>
<span id="cb27-63">        Graphics<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Blit</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> result<span class="op" style="color: #5E5E5E;">,</span> processingMaterial<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-64"></span>
<span id="cb27-65">        <span class="co" style="color: #5E5E5E;">// Initialize a Tensor using the inputTexture</span></span>
<span id="cb27-66">        input <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">,</span> channels<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-67">        RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>result<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-68">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb27-69"></span>
<span id="cb27-70">    <span class="co" style="color: #5E5E5E;">// Execute the model with the input Tensor</span></span>
<span id="cb27-71">    engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Execute</span><span class="op" style="color: #5E5E5E;">(</span>input<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-72">    <span class="co" style="color: #5E5E5E;">// Dispose Tensor and associated memories.</span></span>
<span id="cb27-73">    input<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-74"></span>
<span id="cb27-75">    <span class="co" style="color: #5E5E5E;">// Release the input texture</span></span>
<span id="cb27-76">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-77">    <span class="co" style="color: #5E5E5E;">// Get the predicted class index</span></span>
<span id="cb27-78">    classIndex <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">ProcessOutput</span><span class="op" style="color: #5E5E5E;">(</span>engine<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-79">    <span class="co" style="color: #5E5E5E;">// Check if index is valid</span></span>
<span id="cb27-80">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb27-81">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>printDebugMessages<span class="op" style="color: #5E5E5E;">)</span> Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>validIndex <span class="op" style="color: #5E5E5E;">?</span> $<span class="st" style="color: #20794D;">"Predicted Class: {classes[classIndex]}"</span> <span class="op" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Invalid index"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb27-82"></span>
<span id="cb27-83">    <span class="co" style="color: #5E5E5E;">// Unload assets when running in a web browser</span></span>
<span id="cb27-84">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Application<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">platform</span> <span class="op" style="color: #5E5E5E;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;">)</span> Resources<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb27-85"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-gui-methods" class="level3">
<h3 class="anchored" data-anchor-id="define-gui-methods">Define GUI Methods</h3>
<p>We need some methods to handle user interactions with the GUI and display the predicted class and current framerate.</p>
<p><strong>Define method to update webcam usage from GUI</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;">/// This method is called when the value for the webcam toggle changes</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;param</span><span class="ot" style="color: #003B4F;"> name=</span><span class="dt" style="color: #AD0000;">"useWebcam"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/param&gt;</span></span>
<span id="cb28-5"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamToggle</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">bool</span> useWebcam<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb28-6"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb28-7">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">useWebcam</span> <span class="op" style="color: #5E5E5E;">=</span> useWebcam<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb28-8"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define method to update webcam device from GUI</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;">/// The method is called when the selected value for the webcam dropdown changes</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;">/// </span><span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb29-4"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">UpdateWebcamDevice</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb29-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb29-6">    currentWebcam <span class="op" style="color: #5E5E5E;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;">[</span>webcamDropdown<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">value</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">name</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb29-7">    Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Selected Webcam: {currentWebcam}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-8">    <span class="co" style="color: #5E5E5E;">// Initialize webcam if it is not already playing</span></span>
<span id="cb29-9">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>useWebcam<span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;">(</span>currentWebcam<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-10"></span>
<span id="cb29-11">    <span class="co" style="color: #5E5E5E;">// Resize and position the screen object using the source image dimensions</span></span>
<span id="cb29-12">    <span class="fu" style="color: #4758AB;">InitializeScreen</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb29-13">    <span class="co" style="color: #5E5E5E;">// Resize and position the main camera using the source image dimensions</span></span>
<span id="cb29-14">    <span class="fu" style="color: #4758AB;">InitializeCamera</span><span class="op" style="color: #5E5E5E;">(</span>screenDims<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb29-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Define OnGUI method</strong></p>
<p>We’ll display the predicted class and current frame rate in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnGUI.html">OnGUI</a> method.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">// OnGUI is called for rendering and handling GUI events.</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;">public</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnGUI</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb30-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-4">    <span class="co" style="color: #5E5E5E;">// Define styling information for GUI elements</span></span>
<span id="cb30-5">    GUIStyle style <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> GUIStyle</span>
<span id="cb30-6">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-7">        fontSize <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>Screen<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>1f <span class="op" style="color: #5E5E5E;">/</span> <span class="op" style="color: #5E5E5E;">(</span>100f <span class="op" style="color: #5E5E5E;">-</span> fontScale<span class="op" style="color: #5E5E5E;">)))</span></span>
<span id="cb30-8">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb30-9">    style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">normal</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textColor</span> <span class="op" style="color: #5E5E5E;">=</span> textColor<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-10"></span>
<span id="cb30-11">    <span class="co" style="color: #5E5E5E;">// Define screen spaces for GUI elements</span></span>
<span id="cb30-12">    Rect slot1 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-13">    Rect slot2 <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Rect</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> style<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fontSize</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.5f</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-14"></span>
<span id="cb30-15">    <span class="co" style="color: #5E5E5E;">// Verify predicted class index is valid</span></span>
<span id="cb30-16">    <span class="dt" style="color: #AD0000;">bool</span> validIndex <span class="op" style="color: #5E5E5E;">=</span> classIndex <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> classIndex <span class="op" style="color: #5E5E5E;">&lt;</span> classes<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Length</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-17">    <span class="dt" style="color: #AD0000;">string</span> content <span class="op" style="color: #5E5E5E;">=</span> $<span class="st" style="color: #20794D;">"Predicted Class: {(validIndex ? classes[classIndex] : "</span>Invalid index<span class="st" style="color: #20794D;">")}"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-18">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayPredictedClass<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>slot1<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>content<span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-19"></span>
<span id="cb30-20">    <span class="co" style="color: #5E5E5E;">// Update framerate value</span></span>
<span id="cb30-21">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">&gt;</span> fpsTimer<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb30-22">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb30-23">        fps <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)(</span>1f <span class="op" style="color: #5E5E5E;">/</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledDeltaTime</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-24">        fpsTimer <span class="op" style="color: #5E5E5E;">=</span> Time<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">unscaledTime</span> <span class="op" style="color: #5E5E5E;">+</span> fpsRefreshRate<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb30-26"></span>
<span id="cb30-27">    <span class="co" style="color: #5E5E5E;">// Adjust screen position when not showing predicted class</span></span>
<span id="cb30-28">    Rect fpsRect <span class="op" style="color: #5E5E5E;">=</span> displayPredictedClass <span class="op" style="color: #5E5E5E;">?</span> slot2 <span class="op" style="color: #5E5E5E;">:</span> slot1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-29">    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>displayFPS<span class="op" style="color: #5E5E5E;">)</span> GUI<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Label</span><span class="op" style="color: #5E5E5E;">(</span>fpsRect<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">GUIContent</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"FPS: {fps}"</span><span class="op" style="color: #5E5E5E;">),</span> style<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb30-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="define-ondisable-method" class="level3">
<h3 class="anchored" data-anchor-id="define-ondisable-method">Define OnDisable Method</h3>
<p>We’ll perform any clean-up steps in the <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDisable.html">OnDisable</a>method.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">// OnDisable is called when the MonoBehavior becomes disabled</span></span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;">private</span> <span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">OnDisable</span><span class="op" style="color: #5E5E5E;">()</span></span>
<span id="cb31-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb31-4">    <span class="co" style="color: #5E5E5E;">// Release the resources allocated for the outputTextureGPU</span></span>
<span id="cb31-5">    RenderTexture<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb31-6"></span>
<span id="cb31-7">    <span class="co" style="color: #5E5E5E;">// Release the resources allocated for the inference engine</span></span>
<span id="cb31-8">    engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb31-9"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="create-processing-shaders" class="level2">
<h2 class="anchored" data-anchor-id="create-processing-shaders">Create Processing Shaders</h2>
<p>Now we need to create the Shaders for normalizing input images. We’ll store the shaders in a new Shaders folder.</p>
<section id="create-compute-shader" class="level3">
<h3 class="anchored" data-anchor-id="create-compute-shader">Create Compute Shader</h3>
<p>Right-click a space in the Shaders folder and select <code>Create → Shader → Compute Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-compute-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-compute-shader</figcaption><p></p>
</figure>
</div>
<p>Name the Compute Shader <code>ProcessingShader</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-processing-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-processing-shader</figcaption><p></p>
</figure>
</div>
<p><strong>Default Compute Shader Code</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb32-2">#pragma kernel CSMain</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">// Create a RenderTexture with enableRandomWrite flag and set it</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">// with cs.SetTexture</span></span>
<span id="cb32-6">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb32-9"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">CSMain</span> <span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb32-10"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb32-11">    <span class="co" style="color: #5E5E5E;">// </span><span class="al" style="color: #AD0000;">TODO</span><span class="co" style="color: #5E5E5E;">: insert actual code here!</span></span>
<span id="cb32-12"></span>
<span id="cb32-13">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">x</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">(</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">y</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">15</span><span class="op" style="color: #5E5E5E;">)/</span><span class="fl" style="color: #AD0000;">15.0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="fl" style="color: #AD0000;">0.0</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb32-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We need to add a new Texture2D variable to store the pixel data for the input image. We’ll remove the default method and create a new one called <code>NormalizeImageNet</code>. We need to replace the default method name in the #pragma kernel line at the top.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb33-2">#pragma kernel NormalizeImageNet</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb33-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb33-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb33-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb33-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb33-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb33-13">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb33-14">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb33-15">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb33-16">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb33-17">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb33-18">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb33-19">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb33-20">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb33-21">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb33-22">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb33-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="create-image-effect-shader" class="level3">
<h3 class="anchored" data-anchor-id="create-image-effect-shader">Create Image Effect Shader</h3>
<p>Right-click a space in the Shaders folder and select <code>Create → Shader → Image Effect Shader</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-image-effect-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-image-effect-shader</figcaption><p></p>
</figure>
</div>
<p>Name the new shader <code>NormalizeImageNet</code> and open it in the code editor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-normalize-imagenet-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-normalize-imagenet-shader</figcaption><p></p>
</figure>
</div>
<p><strong>Default Image Effect Shader Code</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1">Shader <span class="st" style="color: #20794D;">"Hidden/NormalizeImageNet"</span></span>
<span id="cb34-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-3">    Properties</span>
<span id="cb34-4">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-5">        <span class="fu" style="color: #4758AB;">_MainTex</span> <span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Texture"</span><span class="op" style="color: #5E5E5E;">,</span> 2D<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"white"</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb34-6">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-7">    SubShader</span>
<span id="cb34-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-9">        <span class="co" style="color: #5E5E5E;">// No culling or depth</span></span>
<span id="cb34-10">        Cull Off ZWrite Off ZTest Always</span>
<span id="cb34-11"></span>
<span id="cb34-12">        Pass</span>
<span id="cb34-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-14">            CGPROGRAM</span>
<span id="cb34-15">            #pragma vertex vert</span>
<span id="cb34-16">            #pragma fragment frag</span>
<span id="cb34-17"></span>
<span id="cb34-18">            #include <span class="st" style="color: #20794D;">"UnityCG.cginc"</span></span>
<span id="cb34-19"></span>
<span id="cb34-20">            <span class="kw" style="color: #003B4F;">struct</span> appdata</span>
<span id="cb34-21">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-22">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-23">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-24">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb34-25"></span>
<span id="cb34-26">            <span class="kw" style="color: #003B4F;">struct</span> v2f</span>
<span id="cb34-27">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-28">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-29">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> SV_POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-30">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb34-31"></span>
<span id="cb34-32">            v2f <span class="fu" style="color: #4758AB;">vert</span> <span class="op" style="color: #5E5E5E;">(</span>appdata v<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb34-33">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-34">                v2f o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-35">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UnityObjectToClipPos</span><span class="op" style="color: #5E5E5E;">(</span>v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-36">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span> <span class="op" style="color: #5E5E5E;">=</span> v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-37">                <span class="kw" style="color: #003B4F;">return</span> o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-38">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-39"></span>
<span id="cb34-40">            sampler2D _MainTex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-41"></span>
<span id="cb34-42">            fixed4 <span class="fu" style="color: #4758AB;">frag</span> <span class="op" style="color: #5E5E5E;">(</span>v2f i<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> SV_Target</span>
<span id="cb34-43">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb34-44">                fixed4 col <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">tex2D</span><span class="op" style="color: #5E5E5E;">(</span>_MainTex<span class="op" style="color: #5E5E5E;">,</span> i<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb34-45">                <span class="co" style="color: #5E5E5E;">// just invert the colors</span></span>
<span id="cb34-46">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rgb</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rgb</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-47">                <span class="kw" style="color: #003B4F;">return</span> col<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb34-48">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-49">            ENDCG</span>
<span id="cb34-50">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-51">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb34-52"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>The string at the top of the file indicates the path to access the shader in the Unity Editor. We can replace the Hidden folder name with Processing Shaders to keep things more organized. We’ll replace the fixed4 frag method with the normalization steps.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb35-1">Shader <span class="st" style="color: #20794D;">"Processing Shaders/NormalizeImageNet"</span></span>
<span id="cb35-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-3">    Properties</span>
<span id="cb35-4">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-5">        <span class="fu" style="color: #4758AB;">_MainTex</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Texture"</span><span class="op" style="color: #5E5E5E;">,</span> 2D<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"white"</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb35-6">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-7">    SubShader</span>
<span id="cb35-8">    <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-9">        <span class="co" style="color: #5E5E5E;">// No culling or depth</span></span>
<span id="cb35-10">        Cull Off ZWrite Off ZTest Always</span>
<span id="cb35-11"></span>
<span id="cb35-12">        Pass</span>
<span id="cb35-13">        <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-14">            CGPROGRAM</span>
<span id="cb35-15">            #pragma vertex vert</span>
<span id="cb35-16">            #pragma fragment frag</span>
<span id="cb35-17"></span>
<span id="cb35-18">            #include <span class="st" style="color: #20794D;">"UnityCG.cginc"</span></span>
<span id="cb35-19"></span>
<span id="cb35-20">            <span class="kw" style="color: #003B4F;">struct</span> appdata</span>
<span id="cb35-21">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-22">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-23">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-24">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb35-25"></span>
<span id="cb35-26">            <span class="kw" style="color: #003B4F;">struct</span> v2f</span>
<span id="cb35-27">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-28">                float2 uv <span class="op" style="color: #5E5E5E;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-29">                float4 vertex <span class="op" style="color: #5E5E5E;">:</span> SV_POSITION<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-30">            <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb35-31"></span>
<span id="cb35-32">            v2f <span class="fu" style="color: #4758AB;">vert</span><span class="op" style="color: #5E5E5E;">(</span>appdata v<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb35-33">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-34">                v2f o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-35">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">UnityObjectToClipPos</span><span class="op" style="color: #5E5E5E;">(</span>v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">vertex</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-36">                o<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span> <span class="op" style="color: #5E5E5E;">=</span> v<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-37">                <span class="kw" style="color: #003B4F;">return</span> o<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-38">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-39"></span>
<span id="cb35-40">            sampler2D _MainTex<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-41"></span>
<span id="cb35-42">            <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb35-43">            float4 <span class="fu" style="color: #4758AB;">frag</span><span class="op" style="color: #5E5E5E;">(</span>v2f i<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> SV_Target</span>
<span id="cb35-44">            <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb35-45">                float4 col <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">tex2D</span><span class="op" style="color: #5E5E5E;">(</span>_MainTex<span class="op" style="color: #5E5E5E;">,</span> i<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">uv</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb35-46">                <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb35-47">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-48">                <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb35-49">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-50">                <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb35-51">                col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>col<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-52">                <span class="kw" style="color: #003B4F;">return</span> col<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb35-53">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-54">            ENDCG</span>
<span id="cb35-55">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-56">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb35-57"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><strong>Create Normalize ImageNet Material</strong></p>
<p>Next, we need to create a new material to use the NormalizeImageNet shader. Right-click a space in the Shaders folder and select Create → Material.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-material.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-material</figcaption><p></p>
</figure>
</div>
<p>We can name it <code>NormalizeImageNet</code> as well.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-normalize-imagenet-material.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-normalize-imagenet-material</figcaption><p></p>
</figure>
</div>
<p>With the new Material selected, open the Shader dropdown menu at the top of the Inspector tab. Type in the Material’s name and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-change-material-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-change-material-shader</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="set-up-unity-scene" class="level2">
<h2 class="anchored" data-anchor-id="set-up-unity-scene">Set up Unity Scene</h2>
<p>We can, at last, start setting up our Unity scene. We need a screen to display the webcam feed, an empty object to attach the <code>ImageClassifier</code> script, a dropdown menu for selecting webcam devices, and a toggle to switch between the test image and a webcam feed.</p>
<p><strong>Create Screen object</strong></p>
<p>Right-click a space in the Hierarchy tab and select 3D Object → Quad. We can name the new object Screen.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-quad.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-quad</figcaption><p></p>
</figure>
</div>
<p>Next, drag and drop a test image from the Assets → Images folder onto the Screen object in the Scene view. Note that the Screen looks a bit dim. We need to change the shader for the Screen’s Material so that it does not require an external light source.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-attach-image-to-screen.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-attach-image-to-screen</figcaption><p></p>
</figure>
</div>
<p>Select the Screen in the Hierarchy tab and open the Shader dropdown menu in the Inspector tab. Type Unlit/Texture into the search box and press enter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-update-screen-material-shader.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-update-screen-material-shader</figcaption><p></p>
</figure>
</div>
<p><strong>Create Inference Manager object</strong></p>
<p>Right-click a space in the Hierarchy tab and select Create Empty. Name the empty object <code>InferenceManager</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-create-empty-gameobject.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-create-empty-gameobject</figcaption><p></p>
</figure>
</div>
<p>With the <code>InferenceManager</code> object selected, drag the <code>ImageClassifier</code> script into the Inspector tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-attach-image-classifier-script.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-attach-image-classifier-script</figcaption><p></p>
</figure>
</div>
<p>Now we can assign the Screen, compute shader, Material, ONNX file, and class labels file in the Inspector tab by dragging them into their respective fields.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-assign-image-classifier-script-assets.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-assign-image-classifier-script-assets</figcaption><p></p>
</figure>
</div>
<p><strong>Add GUI prefab</strong></p>
<p>We still need to create the GUI toggle and dropdown menu. To save time, I made a <a href="https://docs.unity3d.com/Manual/Prefabs.html">Prefab</a> that we can drop into the Scene.</p>
<ul>
<li><strong>Google Drive:</strong> <a href="https://drive.google.com/drive/folders/1ZP02X7vkhLzyouHjKNpD9bI6BU8YDjlM?usp=sharing">Canvas Prefab</a></li>
</ul>
<p>Unity provides a free <a href="https://assetstore.unity.com/packages/essentials/ui-samples-25468">UI Sample</a>package for anyone that wants to try creating a custom UI, and there are plenty of <a href="https://assetstore.unity.com/?category=tools%2Fgui\2d%2Fgui\3d%2Fgui&amp;orderBy=1">options</a> on the Asset Store.</p>
<p>Drag and drop the Canvas prefab into a new folder called Prefabs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-import-canvas-prefab.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-import-canvas-prefab</figcaption><p></p>
</figure>
</div>
<p>From there, drag the prefab into the Hierarchy tab. We can see the GUI by switching to the Game view.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-add-canvas-to-hierarchy-tab.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-canvas-to-hierarchy-tab</figcaption><p></p>
</figure>
</div>
<p><strong>Configure Webcam Toggle On Value Changed function</strong></p>
<p>Next, we need to pair the <code>WebcamToggle</code> with the <code>UpdateWebcamToggle</code> function in the <code>ImageClassifier</code> script. Expand the Canvas object and select the <code>WebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-select-webcamtoggle.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-select-webcamtoggle</figcaption><p></p>
</figure>
</div>
<p>Click and drag the <code>InferenceManager</code> into the <code>On Value Changed</code> field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamtoggle-assign-inference-manager</figcaption><p></p>
</figure>
</div>
<p>Open the <code>No Function</code> dropdown menu and select <code>ImageClassifier → UpdateWebcamToggle</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamtoggle-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamtoggle-assign-inference-manager-function</figcaption><p></p>
</figure>
</div>
<p><strong>Configure Webcam Dropdown On Value Changed function</strong></p>
<p>We can follow the same steps to pair the <code>WebcamDropdown</code> with the <code>UpdateWebcamDevice</code> function in the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamdropdown-assign-inference-manager</figcaption><p></p>
</figure>
</div>
<p>This time select <code>ImageClassifier → UpdateWebcamDevice</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-webcamdropdown-assign-inference-manager-function.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-webcamdropdown-assign-inference-manager-function</figcaption><p></p>
</figure>
</div>
<p><strong>Assign GUI objects to Inference Manager</strong></p>
<p>We can now assign the <code>WebcamToggle</code> and <code>WebcamDropdown</code> objects to their respective fields for the <code>ImageClassifier</code> script.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-inference-manager-assign-gui-objects.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-inference-manager-assign-gui-objects</figcaption><p></p>
</figure>
</div>
<p><strong>Add Event System</strong></p>
<p>Before we can use the GUI, we need to add an Event System. Right-click a space in the Hierarchy tab and select <code>UI → Event System</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-add-eventsystem.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-add-eventsystem</figcaption><p></p>
</figure>
</div>
</section>
<section id="test-in-editor" class="level2">
<h2 class="anchored" data-anchor-id="test-in-editor">Test in Editor</h2>
<p>We can finally test the project in the editor. Click the play button in the top-middle of the Editor window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-click-play-button.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-click-play-button</figcaption><p></p>
</figure>
</div>
<p>The predicted class should be <code>Play</code>, the dropdown menu should update with available webcam devices, and the Screen object should fill the preview window while maintaining the source aspect ratio. GPU utilization should hover near 100% when using asynchronous GPU readback.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-2/images/unity-test-in-editor.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">unity-test-in-editor</figcaption><p></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post covered implementing an image classification model in a Unity project using the Barracuda library. Part 3 will cover building the Unity project to run in a web browser and hosting it using GitHub Pages.</p>
<p><strong>Previous:</strong> <a href="../part-1/">Fastai to Unity Tutorial Pt. 1</a></p>
<p><strong>Next:</strong> <a href="../part-3/">Fastai to Unity Tutorial Pt. 3</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/fastai-to-unity-tutorial/part-2/index.html</guid>
  <pubDate>Tue, 07 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fastai to Unity Beginner Tutorial Pt. 1</title>
  <link>christianjmills.com/posts/fastai-to-unity-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Overview</li>
<li>Install Dependencies</li>
<li>Configure Kaggle API</li>
<li>Download Dataset</li>
<li>Inspect Dataset</li>
<li>Define Dataloaders</li>
<li>Define Learner</li>
<li>Inspect Trained Model</li>
<li>Implement Processing Steps</li>
<li>Export the Model</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial series, we will walk through training an image classifier using the <a href="https://docs.fast.ai/">fastai library</a> and implementing it in a <a href="https://unity.com/">Unity</a> game engine project using the <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> inference library. Check out <a href="../../deep-learning-unity-intro/">this post</a> for more information about Barracuda. We will then build the Unity project to run in a web browser and host it using <a href="https://pages.github.com/">GitHub Pages</a>.</p>
<p>The tutorial uses this&nbsp;<a href="https://www.kaggle.com/datasets/belalelwikel/asl-and-some-words">American Sign Language (ASL) dataset</a>&nbsp;from Kaggle but feel free to follow along with a different dataset. The dataset contains sample images for digits 1-9, letters A-Z, and some common words. One could use a model trained on this dataset to map hand gestures to user input or make an ASL education game.</p>
<p><strong>Live Demo:</strong> <a href="https://cj-mills.github.io/Fastai-ASL-Classification-WebGL-Demo/">ASL Classifier</a></p>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Part 1 covers how to finetune a ResNet model for image classification using the fastai library and export it to ONNX format. The training code is available in the Jupyter notebook linked below, and links for running the notebook on Google Colab and Kaggle are below as well.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>Kaggle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-to-unity-tutorial/blob/main/notebooks/Fastai-to-Unity-Tutorial.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-to-unity-tutorial/blob/main/notebooks/Fastai-to-Unity-Tutorial.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-to-unity-tutorial/blob/main/notebooks/Fastai-to-Unity-Tutorial.ipynb"><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/https:/kaggle.com/static/images/open-in-kaggle.svg" class="img-fluid" alt="Kaggle"></a></td>
</tr>
</tbody>
</table>
</section>
<section id="install-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="install-dependencies">Install Dependencies</h2>
<p>The training code requires <a href="https://pytorch.org/">PyTorch</a> for the fastai library, the fastai library itself for training, and the <a href="https://github.com/Kaggle/kaggle-api">Kaggle API Python package</a> for downloading the dataset. Google Colab uses an older version of <a href="https://pillow.readthedocs.io/en/stable/">Pillow</a>, so update that package when training there.</p>
<p><strong>Uncomment the cell below if running on Google Colab or Kaggle</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip3 install -U torch torchvision torchaudio</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip3 install -U fastai</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># !pip3 install -U kaggle</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># !pip3 install -U Pillow</span></span></code></pre></div>
<p><strong>Note for Colab:</strong> You must restart the runtime in order to use newly installed version of Pillow.</p>
<p><strong>Import all fastai computer vision functionality</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</section>
<section id="configure-kaggle-api" class="level2">
<h2 class="anchored" data-anchor-id="configure-kaggle-api">Configure Kaggle API</h2>
<p>The Kaggle API tool requires an API Key for a Kaggle account. Sign in or create a Kaggle account using the link below, then click the Create New API Token button.</p>
<ul>
<li><strong>Kaggle Account Settings:</strong> <a href="https://www.kaggle.com/me/account">https://www.kaggle.com/me/account</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/kaggle-create-new-api-token.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">kaggle-create-new-api-token</figcaption><p></p>
</figure>
</div>
<p>Kaggle will generate and download a <code>kaggle.json</code> file containing your username and new API token. Paste the values for each in the code cell below.</p>
<p><strong>Enter Kaggle username and API token</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">creds <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'{"username":"","key":""}'</span></span></code></pre></div>
<p><strong>Save Kaggle credentials if none are present</strong> * <strong>Source:</strong> <a href="https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb">https://github.com/fastai/fastbook/blob/master/09_tabular.ipynb</a></p>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">cred_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Save API key to a json file if it does not already exist</span></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> cred_path.exists():</span>
<span id="cb4-4">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-5">    cred_path.write_text(creds)</span>
<span id="cb4-6">    cred_path.chmod(<span class="bn" style="color: #AD0000;">0o600</span>)</span></code></pre></div>
<p><strong>Import Kaggle API</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span></code></pre></div>
<p><strong>(Optional) Define method to display default function arguments</strong></p>
<p>The code cell below defines a method to display the default arguments for a specified function. It’s not required, but I find it convenient for creating quick references in notebooks.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> inspect</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-3">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-5">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">def</span> inspect_default_args(target, annotations: <span class="bu" style="color: null;">bool</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;"># Get the argument names</span></span>
<span id="cb6-9">    args <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(target).args</span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;"># Get the default values</span></span>
<span id="cb6-11">    defaults <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(target).defaults</span>
<span id="cb6-12"></span>
<span id="cb6-13">    index <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Default Value"</span>]</span>
<span id="cb6-14"></span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># Pad defaults</span></span>
<span id="cb6-16">    defaults <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span>(<span class="bu" style="color: null;">len</span>(args)<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">len</span>(defaults)) <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(defaults)</span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;">if</span> annotations:</span>
<span id="cb6-18">        index.append(<span class="st" style="color: #20794D;">"Annotation"</span>)</span>
<span id="cb6-19">        annotations <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(target).annotations.values()</span>
<span id="cb6-20">        <span class="co" style="color: #5E5E5E;"># Pad annotations</span></span>
<span id="cb6-21">        annotations <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span>(<span class="bu" style="color: null;">len</span>(args)<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">len</span>(annotations)) <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(annotations)</span>
<span id="cb6-22">        default_args <span class="op" style="color: #5E5E5E;">=</span> {arg:[df, annot] <span class="cf" style="color: #003B4F;">for</span> arg,df,annot <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(args, defaults, annotations)}</span>
<span id="cb6-23">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-24">        default_args <span class="op" style="color: #5E5E5E;">=</span> {arg:[default] <span class="cf" style="color: #003B4F;">for</span> arg,default <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(args, defaults)}</span>
<span id="cb6-25">        </span>
<span id="cb6-26">    <span class="cf" style="color: #003B4F;">return</span> pd.DataFrame(default_args, index<span class="op" style="color: #5E5E5E;">=</span>index).T</span></code></pre></div>
</section>
<section id="download-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-dataset">Download Dataset</h2>
<p>Now that we have our Kaggle credentials set, we need to define the dataset and where to store it.</p>
<p><strong>Define path to dataset</strong></p>
<p>We’ll use the default archive and data folders for the fastai library to store the compressed and uncompressed datasets.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">kaggle_dataset <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'belalelwikel/asl-and-some-words'</span></span>
<span id="cb7-2">archive_dir <span class="op" style="color: #5E5E5E;">=</span> URLs.path()</span>
<span id="cb7-3">dataset_dir <span class="op" style="color: #5E5E5E;">=</span> archive_dir<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'../data'</span></span>
<span id="cb7-4">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'asl-and-some-words'</span></span>
<span id="cb7-5">archive_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.zip'</span>)</span>
<span id="cb7-6">dataset_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Define method to extract the dataset from an archive file</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> file_extract(fname, dest<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;">"Extract `fname` to `dest` using `tarfile` or `zipfile`."</span></span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;">if</span> dest <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: dest <span class="op" style="color: #5E5E5E;">=</span> Path(fname).parent</span>
<span id="cb8-4">    fname <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(fname)</span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;">if</span>   fname.endswith(<span class="st" style="color: #20794D;">'gz'</span>):  tarfile.<span class="bu" style="color: null;">open</span>(fname, <span class="st" style="color: #20794D;">'r:gz'</span>).extractall(dest)</span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;">elif</span> fname.endswith(<span class="st" style="color: #20794D;">'zip'</span>): zipfile.ZipFile(fname     ).extractall(dest)</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;">else</span>: <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="ss" style="color: #20794D;">f'Unrecognized archive: </span><span class="sc" style="color: #5E5E5E;">{</span>fname<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<p><strong>Download the dataset if it is not present</strong></p>
<p>The archive file is over 2GB, so we don’t want to download it more than necessary.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> archive_path.exists():</span>
<span id="cb9-2">    api.dataset_download_cli(kaggle_dataset, path<span class="op" style="color: #5E5E5E;">=</span>archive_dir)</span>
<span id="cb9-3">    file_extract(fname<span class="op" style="color: #5E5E5E;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;">=</span>dataset_path)</span></code></pre></div>
</section>
<section id="inspect-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-dataset">Inspect Dataset</h2>
<p>We can start inspecting the dataset once it finishes downloading.</p>
<p><strong>Inspect the dataset path</strong></p>
<p>The training data is in a subfolder named ASL, and there are over 200,000 samples.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dataset_path.ls()</span></code></pre></div>
<pre class="text"><code>    (#1) [Path('/home/innom-dt/.fastai/archive/../data/asl-and-some-words/ASL')]</code></pre>
<p><strong>Get image file paths</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"ASL"</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>    203000</code></pre>
<p><strong>Inspect files</strong></p>
<p>The dataset indicates the object class in both the folder and file names.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">files[<span class="dv" style="color: #AD0000;">0</span>], files[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<pre class="text"><code>    (Path('/home/innom-dt/.fastai/archive/../data/asl-and-some-words/ASL/J/J1491.jpg'),
     Path('/home/innom-dt/.fastai/archive/../data/asl-and-some-words/ASL/E/E1063.jpg'))</code></pre>
<p><strong>Inspect class folder names</strong></p>
<p>There are 51 class folders, and the dataset does not predefine a training-validation split.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">folder_names <span class="op" style="color: #5E5E5E;">=</span> [path.name <span class="cf" style="color: #003B4F;">for</span> path <span class="kw" style="color: #003B4F;">in</span> Path(dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ASL'</span>).ls()]</span>
<span id="cb16-2">folder_names.sort()</span>
<span id="cb16-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Num classes: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(folder_names)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb16-4">pd.DataFrame(folder_names)</span></code></pre></div>
<pre class="text"><code>    Num classes: 51</code></pre>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3
</td>
</tr>
<tr>
<th>
2
</th>
<td>
4
</td>
</tr>
<tr>
<th>
3
</th>
<td>
5
</td>
</tr>
<tr>
<th>
4
</th>
<td>
7
</td>
</tr>
<tr>
<th>
5
</th>
<td>
8
</td>
</tr>
<tr>
<th>
6
</th>
<td>
9
</td>
</tr>
<tr>
<th>
7
</th>
<td>
A
</td>
</tr>
<tr>
<th>
8
</th>
<td>
B
</td>
</tr>
<tr>
<th>
9
</th>
<td>
Baby
</td>
</tr>
<tr>
<th>
10
</th>
<td>
Brother
</td>
</tr>
<tr>
<th>
11
</th>
<td>
C
</td>
</tr>
<tr>
<th>
12
</th>
<td>
D
</td>
</tr>
<tr>
<th>
13
</th>
<td>
Dont_like
</td>
</tr>
<tr>
<th>
14
</th>
<td>
E
</td>
</tr>
<tr>
<th>
15
</th>
<td>
F
</td>
</tr>
<tr>
<th>
16
</th>
<td>
Friend
</td>
</tr>
<tr>
<th>
17
</th>
<td>
G
</td>
</tr>
<tr>
<th>
18
</th>
<td>
H
</td>
</tr>
<tr>
<th>
19
</th>
<td>
Help
</td>
</tr>
<tr>
<th>
20
</th>
<td>
House
</td>
</tr>
<tr>
<th>
21
</th>
<td>
I
</td>
</tr>
<tr>
<th>
22
</th>
<td>
J
</td>
</tr>
<tr>
<th>
23
</th>
<td>
K
</td>
</tr>
<tr>
<th>
24
</th>
<td>
L
</td>
</tr>
<tr>
<th>
25
</th>
<td>
Like
</td>
</tr>
<tr>
<th>
26
</th>
<td>
Love
</td>
</tr>
<tr>
<th>
27
</th>
<td>
M
</td>
</tr>
<tr>
<th>
28
</th>
<td>
Make
</td>
</tr>
<tr>
<th>
29
</th>
<td>
More
</td>
</tr>
<tr>
<th>
30
</th>
<td>
N
</td>
</tr>
<tr>
<th>
31
</th>
<td>
Name
</td>
</tr>
<tr>
<th>
32
</th>
<td>
No
</td>
</tr>
<tr>
<th>
33
</th>
<td>
O_OR_0
</td>
</tr>
<tr>
<th>
34
</th>
<td>
P
</td>
</tr>
<tr>
<th>
35
</th>
<td>
Pay
</td>
</tr>
<tr>
<th>
36
</th>
<td>
Play
</td>
</tr>
<tr>
<th>
37
</th>
<td>
Q
</td>
</tr>
<tr>
<th>
38
</th>
<td>
R
</td>
</tr>
<tr>
<th>
39
</th>
<td>
S
</td>
</tr>
<tr>
<th>
40
</th>
<td>
Stop
</td>
</tr>
<tr>
<th>
41
</th>
<td>
T
</td>
</tr>
<tr>
<th>
42
</th>
<td>
U
</td>
</tr>
<tr>
<th>
43
</th>
<td>
V_OR_2
</td>
</tr>
<tr>
<th>
44
</th>
<td>
W_OR_6
</td>
</tr>
<tr>
<th>
45
</th>
<td>
With
</td>
</tr>
<tr>
<th>
46
</th>
<td>
X
</td>
</tr>
<tr>
<th>
47
</th>
<td>
Y
</td>
</tr>
<tr>
<th>
48
</th>
<td>
Yes
</td>
</tr>
<tr>
<th>
49
</th>
<td>
Z
</td>
</tr>
<tr>
<th>
50
</th>
<td>
nothing
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect one of the training images</strong></p>
<p>The sample images all have a resolution of 200x200.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> PIL</span>
<span id="cb18-2">img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(files[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb18-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;">{</span>img<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb18-4">img</span></code></pre></div>
<pre class="text"><code>    Image Dims: (200, 200)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_28_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
</section>
<section id="define-dataloaders" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloaders">Define Dataloaders</h2>
<p>Next, we need to define the <a href="https://docs.fast.ai/vision.augment.html">Transforms</a> for the <a href="https://docs.fast.ai/vision.data.html#ImageDataLoaders">DataLoaders</a> object.</p>
<p><strong>Define target input dimensions</strong></p>
<p>The Unity project will take input from a webcam, and most webcams don’t have a square aspect ratio like the training samples. We will need to account for this to get more accurate predictions.</p>
<p>We can train with a square aspect ratio and crop the webcam input in Unity, but that might make users feel cramped when using the application.</p>
<p>Alternatively, we can expand the training images to a more typical aspect ratio like 4:3 or 16:9. This approach will allow us to use the entire webcam input, so we’ll go with this one.</p>
<p>I have a <a href="../../crop-images-on-gpu-tutorial/">separate tutorial</a> for cropping images on the GPU in Unity for anyone that wants to try the other approach.</p>
<p>Below are some sample input dimensions in different aspect ratios.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># size_1_1 = (224, 224)</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;"># size_3_2 = (224, 336)</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;"># size_4_3 = (216, 288)</span></span>
<span id="cb20-4">size_16_9 <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">216</span>, <span class="dv" style="color: #AD0000;">384</span>)</span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;"># size_16_9_l = (288, 512)</span></span></code></pre></div>
<p><strong>Define Transforms</strong></p>
<p>Something else to consider is that the webcam input in Unity mirrors the actual image. Mirrored input would likely not be an issue for something like a pet classifier, but hand orientation matters for ASL. We either need to flip the input image each time in Unity, or we can train the model with pre-flipped images. It is easier to mirror the training images, so we’ll use the <a href="https://docs.fast.ai/vision.augment.html#FlipItem">FlipItem</a> transform with a probability of 1.0 to flip every training sample.</p>
<p>I have a <a href="../../flip-image-compute-shader-tutorial/">separate tutorial</a> covering how to flip images on the GPU in Unity for anyone that wants to try that approach.</p>
<p>Since we are resizing to a different aspect ratio, we need to choose a padding method. The default reflection padding might add more fingers, changing an image’s meaning. The zeros padding option might work, but most user backgrounds will not be pure black. Therefore, we’ll go with border padding.</p>
<p>We can add some batch transforms like tweaking the contrast, saturation, hue, zoom, brightness, and warping to help crappify the images. However, we need to disable the <code>do_flip</code> and <code>max_rotate</code> options in <code>aug_transforms</code>.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">inspect_default_args(aug_transforms)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
mult
</th>
<td>
1.0
</td>
</tr>
<tr>
<th>
do_flip
</th>
<td>
True
</td>
</tr>
<tr>
<th>
flip_vert
</th>
<td>
False
</td>
</tr>
<tr>
<th>
max_rotate
</th>
<td>
10.0
</td>
</tr>
<tr>
<th>
min_zoom
</th>
<td>
1.0
</td>
</tr>
<tr>
<th>
max_zoom
</th>
<td>
1.1
</td>
</tr>
<tr>
<th>
max_lighting
</th>
<td>
0.2
</td>
</tr>
<tr>
<th>
max_warp
</th>
<td>
0.2
</td>
</tr>
<tr>
<th>
p_affine
</th>
<td>
0.75
</td>
</tr>
<tr>
<th>
p_lighting
</th>
<td>
0.75
</td>
</tr>
<tr>
<th>
xtra_tfms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
size
</th>
<td>
None
</td>
</tr>
<tr>
<th>
mode
</th>
<td>
bilinear
</td>
</tr>
<tr>
<th>
pad_mode
</th>
<td>
reflection
</td>
</tr>
<tr>
<th>
align_corners
</th>
<td>
True
</td>
</tr>
<tr>
<th>
batch
</th>
<td>
False
</td>
</tr>
<tr>
<th>
min_scale
</th>
<td>
1.0
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">item_tfms <span class="op" style="color: #5E5E5E;">=</span> [FlipItem(p<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>), Resize(size_16_9, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)]</span>
<span id="cb22-2"></span>
<span id="cb22-3">batch_tfms <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb22-4">    Contrast(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb22-5">    Saturation(max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb22-6">    Hue(max_hue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb22-7">    <span class="op" style="color: #5E5E5E;">*</span>aug_transforms(</span>
<span id="cb22-8">        size<span class="op" style="color: #5E5E5E;">=</span>size_16_9, </span>
<span id="cb22-9">        mult<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb22-10">        do_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb22-11">        flip_vert<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb22-12">        max_rotate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb22-13">        min_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb22-14">        max_zoom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb22-15">        max_lighting<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb22-16">        max_warp<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb22-17">        p_affine<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb22-18">        pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Border)</span>
<span id="cb22-19">]</span></code></pre></div>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">128</span></span></code></pre></div>
<p><strong>Define DataLoaders object</strong></p>
<p>We can use the <a href="https://docs.fast.ai/vision.data.html#ImageDataLoaders.from_folder">from_folder</a> method to instantiate the DataLoaders object.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">inspect_default_args(ImageDataLoaders.from_folder)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
cls
</th>
<td>
None
</td>
</tr>
<tr>
<th>
path
</th>
<td>
None
</td>
</tr>
<tr>
<th>
train
</th>
<td>
train
</td>
</tr>
<tr>
<th>
valid
</th>
<td>
valid
</td>
</tr>
<tr>
<th>
valid_pct
</th>
<td>
None
</td>
</tr>
<tr>
<th>
seed
</th>
<td>
None
</td>
</tr>
<tr>
<th>
vocab
</th>
<td>
None
</td>
</tr>
<tr>
<th>
item_tfms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
batch_tfms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
bs
</th>
<td>
64
</td>
</tr>
<tr>
<th>
val_bs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
shuffle
</th>
<td>
True
</td>
</tr>
<tr>
<th>
device
</th>
<td>
None
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(</span>
<span id="cb25-2">    path<span class="op" style="color: #5E5E5E;">=</span>dataset_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ASL'</span>, </span>
<span id="cb25-3">    valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb25-4">    bs<span class="op" style="color: #5E5E5E;">=</span>bs, </span>
<span id="cb25-5">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>item_tfms, </span>
<span id="cb25-6">    batch_tfms<span class="op" style="color: #5E5E5E;">=</span>batch_tfms</span>
<span id="cb25-7">)</span></code></pre></div>
<p><strong>Verify DataLoaders object</strong></p>
<p>Let’s verify the DataLoaders object works as expected before training a model.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">dls.train.show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_40_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p>We can see that the DataLoaders object applies the transforms to the training split, including mirroring the image. However, it does not appear to mirror images from the validation split.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">dls.valid.show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_41_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p>We can get around this by using a solution provided on the <a href="https://forums.fast.ai/t/how-to-apply-aug-transforms-to-validation-set-while-training/79417/10?u=cjmills">fastai forums</a> to apply the training split transforms to the validation split. It is not strictly necessary to mirror the validation split, but the accuracy metrics would be confusing during training without it.</p>
<p><strong>Apply training split transforms to validation split</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): dls[<span class="dv" style="color: #AD0000;">1</span>].show_batch()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_43_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
</section>
<section id="define-learner" class="level2">
<h2 class="anchored" data-anchor-id="define-learner">Define Learner</h2>
<p>Now we need to define the Learner object for training the model.</p>
<p><strong>Inspect Learner parameters</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">inspect_default_args(vision_learner)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
dls
</th>
<td>
None
</td>
</tr>
<tr>
<th>
arch
</th>
<td>
None
</td>
</tr>
<tr>
<th>
normalize
</th>
<td>
True
</td>
</tr>
<tr>
<th>
n_out
</th>
<td>
None
</td>
</tr>
<tr>
<th>
pretrained
</th>
<td>
True
</td>
</tr>
<tr>
<th>
loss_func
</th>
<td>
None
</td>
</tr>
<tr>
<th>
opt_func
</th>
<td>
&lt;function Adam at 0x7fa5e274a560&gt;
</td>
</tr>
<tr>
<th>
lr
</th>
<td>
0.001
</td>
</tr>
<tr>
<th>
splitter
</th>
<td>
None
</td>
</tr>
<tr>
<th>
cbs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
metrics
</th>
<td>
None
</td>
</tr>
<tr>
<th>
path
</th>
<td>
None
</td>
</tr>
<tr>
<th>
model_dir
</th>
<td>
models
</td>
</tr>
<tr>
<th>
wd
</th>
<td>
None
</td>
</tr>
<tr>
<th>
wd_bn_bias
</th>
<td>
False
</td>
</tr>
<tr>
<th>
train_bn
</th>
<td>
True
</td>
</tr>
<tr>
<th>
moms
</th>
<td>
(0.95, 0.85, 0.95)
</td>
</tr>
<tr>
<th>
cut
</th>
<td>
None
</td>
</tr>
<tr>
<th>
n_in
</th>
<td>
3
</td>
</tr>
<tr>
<th>
init
</th>
<td>
&lt;function kaiming_normal_ at 0x7fa60b397be0&gt;
</td>
</tr>
<tr>
<th>
custom_head
</th>
<td>
None
</td>
</tr>
<tr>
<th>
concat_pool
</th>
<td>
True
</td>
</tr>
<tr>
<th>
lin_ftrs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
ps
</th>
<td>
0.5
</td>
</tr>
<tr>
<th>
pool
</th>
<td>
True
</td>
</tr>
<tr>
<th>
first_bn
</th>
<td>
True
</td>
</tr>
<tr>
<th>
bn_final
</th>
<td>
False
</td>
</tr>
<tr>
<th>
lin_first
</th>
<td>
False
</td>
</tr>
<tr>
<th>
y_range
</th>
<td>
None
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define model</strong></p>
<p>I recommend sticking with a ResNet18 or ResNet34 model, as the larger models can significantly lower frame rates.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">model <span class="op" style="color: #5E5E5E;">=</span> resnet18</span></code></pre></div>
<p><strong>Define <a href="https://docs.fast.ai/metrics.html">metrics</a></strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">metrics <span class="op" style="color: #5E5E5E;">=</span> [error_rate, accuracy]</span></code></pre></div>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, model, metrics<span class="op" style="color: #5E5E5E;">=</span>metrics).to_fp16()</span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">inspect_default_args(learn.lr_find)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
self
</th>
<td>
None
</td>
</tr>
<tr>
<th>
start_lr
</th>
<td>
0.0
</td>
</tr>
<tr>
<th>
end_lr
</th>
<td>
10
</td>
</tr>
<tr>
<th>
num_it
</th>
<td>
100
</td>
</tr>
<tr>
<th>
stop_div
</th>
<td>
True
</td>
</tr>
<tr>
<th>
show_plot
</th>
<td>
True
</td>
</tr>
<tr>
<th>
suggest_funcs
</th>
<td>
&lt;function valley at 0x7fa5e24996c0&gt;
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Define <a href="https://docs.fast.ai/callback.schedule.html#Suggestion-Methods">suggestion methods</a></strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">suggest_funcs <span class="op" style="color: #5E5E5E;">=</span> [valley, minimum, steep]</span></code></pre></div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;">=</span>suggest_funcs)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_56_2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">2e-3</span></span>
<span id="cb36-2">lr</span></code></pre></div>
<pre class="text"><code>    0.002</code></pre>
<p><strong>Define number of epochs</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<p><strong>Fine tune model</strong></p>
<p>After picking a learning rate, we can train the model for a few epochs. Training can take a while on Google Colab and Kaggle.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">inspect_default_args(learn.fine_tune)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
self
</th>
<td>
None
</td>
</tr>
<tr>
<th>
epochs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
base_lr
</th>
<td>
0.002
</td>
</tr>
<tr>
<th>
freeze_epochs
</th>
<td>
1
</td>
</tr>
<tr>
<th>
lr_mult
</th>
<td>
100
</td>
</tr>
<tr>
<th>
pct_start
</th>
<td>
0.3
</td>
</tr>
<tr>
<th>
div
</th>
<td>
5.0
</td>
</tr>
<tr>
<th>
lr_max
</th>
<td>
None
</td>
</tr>
<tr>
<th>
div_final
</th>
<td>
100000.0
</td>
</tr>
<tr>
<th>
wd
</th>
<td>
None
</td>
</tr>
<tr>
<th>
moms
</th>
<td>
None
</td>
</tr>
<tr>
<th>
cbs
</th>
<td>
None
</td>
</tr>
<tr>
<th>
reset_opt
</th>
<td>
False
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): learn.fine_tune(epochs, base_lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
accuracy
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.365705
</td>
<td>
0.175888
</td>
<td>
0.056305
</td>
<td>
0.943695
</td>
<td>
04:52
</td>
</tr>
</tbody>

</table>
</div>
<div style="overflow-x:auto; overflow-y:auto">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
accuracy
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.038334
</td>
<td>
0.021014
</td>
<td>
0.008103
</td>
<td>
0.991897
</td>
<td>
04:56
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.012614
</td>
<td>
0.011383
</td>
<td>
0.004236
</td>
<td>
0.995764
</td>
<td>
04:59
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.006508
</td>
<td>
0.006591
</td>
<td>
0.003325
</td>
<td>
0.996675
</td>
<td>
04:55
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="inspect-trained-model" class="level2">
<h2 class="anchored" data-anchor-id="inspect-trained-model">Inspect Trained Model</h2>
<p>Once the model finishes training, we can test it on a sample image and see where it struggles.</p>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;">import</span> PIL</span></code></pre></div>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">test_file <span class="op" style="color: #5E5E5E;">=</span> files[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb42-2">test_file.name</span></code></pre></div>
<pre class="text"><code>    'J1491.jpg'</code></pre>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file)</span>
<span id="cb44-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_67_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Make a prediction on a single image using a <a href="https://docs.fast.ai/vision.core.html#PILImage">fastai.vision.core.PILImage</a></strong></p>
<p>Remember that we need to flip the test image before feeding it to the model.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">learn.predict(PILImage(test_img.transpose(Image.Transpose.FLIP_LEFT_RIGHT)))</span></code></pre></div>
<pre class="text"><code>    ('J',
     TensorBase(22),
     TensorBase([9.6170e-14, 7.7060e-13, 2.5787e-13, 1.1222e-13, 1.5709e-10, 3.6805e-11,
             1.7642e-11, 2.3571e-13, 3.5861e-15, 9.8273e-13, 4.1524e-14, 1.3218e-12,
             7.3592e-14, 3.8404e-14, 4.9230e-12, 8.4399e-12, 2.0167e-11, 3.2757e-13,
             4.0114e-10, 2.3624e-11, 8.3717e-14, 1.9143e-07, 1.0000e+00, 9.7685e-14,
             9.4480e-15, 3.3952e-15, 9.4246e-12, 2.3079e-12, 1.6612e-15, 6.6745e-14,
             3.9778e-14, 2.2675e-11, 1.7859e-14, 1.7659e-11, 5.1701e-11, 8.4209e-14,
             4.6891e-11, 1.3487e-11, 1.0827e-11, 1.0881e-10, 2.6260e-09, 4.2682e-13,
             3.1842e-13, 7.4326e-13, 4.8983e-13, 2.0801e-13, 9.1052e-14, 1.0467e-08,
             2.3752e-14, 1.0124e-09, 6.7431e-11]))</code></pre>
<p><strong>Make predictions for a group of images</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): learn.show_results()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_71_2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Define an Interpretation object</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): interp <span class="op" style="color: #5E5E5E;">=</span> Interpretation.from_learner(learn)</span></code></pre></div>
<p><strong>Plot top losses</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;">with</span> dls.valid.dataset.set_split_idx(<span class="dv" style="color: #AD0000;">0</span>): interp.plot_top_losses(k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">15</span>,<span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_75_2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
</section>
<section id="implement-processing-steps" class="level2">
<h2 class="anchored" data-anchor-id="implement-processing-steps">Implement Processing Steps</h2>
<p>When we are satisfied with the model, we can start preparing for implementing it in Unity. We will need to apply the same preprocessing and post-processing in Unity that fastai applies automatically. We will verify we understand the processing steps by implementing them in Python first.</p>
<p><strong>Inspect the <code>after_item</code> pipeline</strong></p>
<p>We don’t need to worry about flipping or padding the image in Unity with the current training approach.</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">learn.dls.after_item</span></code></pre></div>
<pre class="text"><code>    Pipeline: FlipItem -- {'p': 1.0} -&gt; Resize -- {'size': (384, 216), 'method': 'pad', 'pad_mode': 'border', 'resamples': (&lt;Resampling.BILINEAR: 2&gt;, 0), 'p': 1.0} -&gt; ToTensor</code></pre>
<p><strong>Inspect the <code>after_batch</code> pipeline</strong></p>
<p>The <code>after_batch</code> pipeline first scales the image color channel values from <img src="https://latex.codecogs.com/png.latex?%5B0,255%5D"> to <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">. Unity already uses the range <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">, so we don’t need to implement this step. We also don’t need to implement any of the image augmentations. However, we do need to normalize the image using the ImageNet stats.</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">learn.dls.after_batch</span></code></pre></div>
<pre class="text"><code>    Pipeline: IntToFloatTensor -- {'div': 255.0, 'div_mask': 1} -&gt; Warp -- {'magnitude': 0.2, 'p': 1.0, 'draw_x': None, 'draw_y': None, 'size': (216, 384), 'mode': 'bilinear', 'pad_mode': 'border', 'batch': False, 'align_corners': True, 'mode_mask': 'nearest'} -&gt; Contrast -- {'max_lighting': 0.25, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Saturation -- {'max_lighting': 0.25, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Hue -- {'p': 1.0} -&gt; Brightness -- {'max_lighting': 0.5, 'p': 1.0, 'draw': None, 'batch': False} -&gt; Normalize -- {'mean': tensor([[[[0.4850]],
    
             [[0.4560]],
    
             [[0.4060]]]], device='cuda:0'), 'std': tensor([[[[0.2290]],
    
             [[0.2240]],
    
             [[0.2250]]]], device='cuda:0'), 'axes': (0, 2, 3)}</code></pre>
<p><strong>Reset test image</strong></p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">test_img <span class="op" style="color: #5E5E5E;">=</span> PIL.Image.<span class="bu" style="color: null;">open</span>(test_file)</span>
<span id="cb54-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_81_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">test_img <span class="op" style="color: #5E5E5E;">=</span> test_img.transpose(Image.Transpose.FLIP_LEFT_RIGHT)</span>
<span id="cb55-2">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_82_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">test_img.size</span></code></pre></div>
<pre class="text"><code>    (200, 200)</code></pre>
<hr>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="bu" style="color: null;">min</span>(test_img.size)</span></code></pre></div>
<pre class="text"><code>    200</code></pre>
<hr>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">min_dim <span class="op" style="color: #5E5E5E;">=</span> test_img.size.index(<span class="bu" style="color: null;">min</span>(test_img.size))</span>
<span id="cb60-2">max_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> min_dim</span></code></pre></div>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">target_dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span></span></code></pre></div>
<p><strong>Set input dims</strong></p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">inp_dims <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb62-2">inp_dims[min_dim] <span class="op" style="color: #5E5E5E;">=</span> target_dim</span>
<span id="cb62-3">inp_dims[max_dim] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(test_img.size[max_dim] <span class="op" style="color: #5E5E5E;">/</span> (test_img.size[min_dim]<span class="op" style="color: #5E5E5E;">/</span>target_dim))</span>
<span id="cb62-4">inp_dims</span></code></pre></div>
<pre class="text"><code>    [224, 224]</code></pre>
<hr>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">resized_img <span class="op" style="color: #5E5E5E;">=</span> test_img.resize(inp_dims)</span>
<span id="cb64-2">resized_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/fastai-to-unity-tutorial/part-1/images/output_89_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p><strong>Convert image to tensor</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">img_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(resized_img).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb65-2">img_tensor.shape, img_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([3, 224, 224]),
     tensor([[[  0,   0,   0,  ...,   1,   0,   0],
              [  0,   4,   2,  ...,   9,   2,   0],
              [  5,  82,  99,  ...,  74,   8,   0],
              ...,
              [  3, 127, 154,  ..., 141,   0,   3],
              [  3, 102, 125,  ..., 120,   0,   0],
              [  0,   0,   4,  ...,   0,   1,   0]],
     
             [[  4,   1,   2,  ...,   0,   2,   5],
              [  2,   1,   0,  ...,   0,   0,   5],
              [  0,  75,  91,  ...,  63,   1,   1],
              ...,
              [  3, 126, 150,  ..., 151,   0,   0],
              [  7, 105, 122,  ..., 127,   1,   0],
              [  8,   5,   3,  ...,   4,   6,   2]],
     
             [[253, 254, 255,  ..., 253, 255, 254],
              [244, 220, 199,  ..., 209, 237, 255],
              [212, 222, 180,  ..., 188, 211, 251],
              ...,
              [196, 225, 171,  ..., 238, 204, 255],
              [207, 247, 222,  ..., 242, 218, 255],
              [223, 203, 193,  ..., 219, 247, 254]]], dtype=torch.uint8))</code></pre>
<p><strong>Scale tensor values</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">scaled_tensor <span class="op" style="color: #5E5E5E;">=</span> img_tensor.<span class="bu" style="color: null;">float</span>().div_(<span class="dv" style="color: #AD0000;">255</span>)</span></code></pre></div>
<p><strong>Prepare imagenet mean values</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">mean_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(imagenet_stats[<span class="dv" style="color: #AD0000;">0</span>]).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb68-2">mean_tensor.shape, mean_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([3, 1, 1]),
     tensor([[[0.4850]],
     
             [[0.4560]],
     
             [[0.4060]]]))</code></pre>
<p><strong>Prepare imagenet std values</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">std_tensor <span class="op" style="color: #5E5E5E;">=</span> tensor(imagenet_stats[<span class="dv" style="color: #AD0000;">1</span>]).view(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).permute(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb70-2">std_tensor.shape, std_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([3, 1, 1]),
     tensor([[[0.2290]],
     
             [[0.2240]],
     
             [[0.2250]]]))</code></pre>
<p><strong>Normalize and batch image tensor</strong></p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">normalized_tensor <span class="op" style="color: #5E5E5E;">=</span> (scaled_tensor <span class="op" style="color: #5E5E5E;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;">/</span> std_tensor</span>
<span id="cb72-2">batched_tensor <span class="op" style="color: #5E5E5E;">=</span> normalized_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb72-3">batched_tensor.shape, batched_tensor</span></code></pre></div>
<pre class="text"><code>    (torch.Size([1, 3, 224, 224]),
     tensor([[[[-2.1179, -2.1179, -2.1179,  ..., -2.1008, -2.1179, -2.1179],
               [-2.1179, -2.0494, -2.0837,  ..., -1.9638, -2.0837, -2.1179],
               [-2.0323, -0.7137, -0.4226,  ..., -0.8507, -1.9809, -2.1179],
               ...,
               [-2.0665,  0.0569,  0.5193,  ...,  0.2967, -2.1179, -2.0665],
               [-2.0665, -0.3712,  0.0227,  ..., -0.0629, -2.1179, -2.1179],
               [-2.1179, -2.1179, -2.0494,  ..., -2.1179, -2.1008, -2.1179]],
     
              [[-1.9657, -2.0182, -2.0007,  ..., -2.0357, -2.0007, -1.9482],
               [-2.0007, -2.0182, -2.0357,  ..., -2.0357, -2.0357, -1.9482],
               [-2.0357, -0.7227, -0.4426,  ..., -0.9328, -2.0182, -2.0182],
               ...,
               [-1.9832,  0.1702,  0.5903,  ...,  0.6078, -2.0357, -2.0357],
               [-1.9132, -0.1975,  0.1001,  ...,  0.1877, -2.0182, -2.0357],
               [-1.8957, -1.9482, -1.9832,  ..., -1.9657, -1.9307, -2.0007]],
     
              [[ 2.6051,  2.6226,  2.6400,  ...,  2.6051,  2.6400,  2.6226],
               [ 2.4483,  2.0300,  1.6640,  ...,  1.8383,  2.3263,  2.6400],
               [ 1.8905,  2.0648,  1.3328,  ...,  1.4722,  1.8731,  2.5703],
               ...,
               [ 1.6117,  2.1171,  1.1759,  ...,  2.3437,  1.7511,  2.6400],
               [ 1.8034,  2.5006,  2.0648,  ...,  2.4134,  1.9951,  2.6400],
               [ 2.0823,  1.7337,  1.5594,  ...,  2.0125,  2.5006,  2.6226]]]]))</code></pre>
<p><strong>Pass tensor to model</strong></p>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb74-2">    preds <span class="op" style="color: #5E5E5E;">=</span> learn.model(batched_tensor.cuda())</span>
<span id="cb74-3">preds</span></code></pre></div>
<pre class="text"><code>    TensorBase([[-4.9931e+00, -1.9711e+00, -3.3677e+00, -3.0452e+00,  3.9567e+00,
              3.9293e+00,  3.1657e+00, -5.3549e+00, -7.9026e+00, -1.5491e+00,
             -2.4086e+00, -2.6251e+00, -4.0321e+00, -7.3666e+00, -1.0557e+00,
             -3.2344e-01,  4.7887e+00, -4.8819e+00,  6.5188e+00,  1.1152e+00,
             -5.9519e-01,  1.1730e+01,  3.0779e+01, -4.4505e+00, -1.0000e+01,
             -9.1124e+00, -3.7176e-01, -4.2437e+00, -8.6924e+00, -1.5119e+00,
             -8.4118e+00,  9.1559e-01, -7.6669e+00,  1.7187e+00,  2.0639e+00,
             -4.0788e+00,  9.0079e+00, -2.8547e-02,  1.1223e+00, -3.2541e-02,
              8.9209e+00, -4.2307e+00, -3.6343e+00, -9.8461e-01, -4.2557e+00,
             -2.2238e+00, -5.9167e+00,  7.0386e+00, -7.7322e+00,  4.3321e+00,
             -3.1247e-01]], device='cuda:0')</code></pre>
<p><strong>Process model output</strong></p>
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<pre class="text"><code>    TensorBase([[2.9133e-16, 5.9815e-15, 1.4800e-15, 2.0433e-15, 2.2450e-12, 2.1844e-12,
             1.0179e-12, 2.0287e-16, 1.5878e-17, 9.1219e-15, 3.8617e-15, 3.1101e-15,
             7.6160e-16, 2.7138e-17, 1.4940e-14, 3.1072e-14, 5.1585e-12, 3.2557e-16,
             2.9103e-11, 1.3097e-13, 2.3678e-14, 5.3343e-09, 1.0000e+00, 5.0120e-16,
             1.9486e-18, 4.7354e-18, 2.9607e-14, 6.1632e-16, 7.2077e-18, 9.4674e-15,
             9.5424e-18, 1.0727e-13, 2.0099e-17, 2.3949e-13, 3.3822e-13, 7.2685e-16,
             3.5069e-10, 4.1729e-14, 1.3190e-13, 4.1563e-14, 3.2148e-10, 6.2438e-16,
             1.1337e-15, 1.6041e-14, 6.0902e-16, 4.6457e-15, 1.1568e-16, 4.8942e-11,
             1.8828e-17, 3.2679e-12, 3.1415e-14]], device='cuda:0')</code></pre>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">preds.argmax()</span></code></pre></div>
<pre class="text"><code>    TensorBase(22, device='cuda:0')</code></pre>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>][preds.argmax()]</span></code></pre></div>
<pre class="text"><code>    TensorBase(1., device='cuda:0')</code></pre>
<p><strong>Get the class labels</strong></p>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">learn.dls.vocab</span></code></pre></div>
<pre class="text"><code>    ['1', '3', '4', '5', '7', '8', '9', 'A', 'B', 'Baby', 'Brother', 'C', 'D', 'Dont_like', 'E', 'F', 'Friend', 'G', 'H', 'Help', 'House', 'I', 'J', 'K', 'L', 'Like', 'Love', 'M', 'Make', 'More', 'N', 'Name', 'No', 'O_OR_0', 'P', 'Pay', 'Play', 'Q', 'R', 'S', 'Stop', 'T', 'U', 'V_OR_2', 'W_OR_6', 'With', 'X', 'Y', 'Yes', 'Z', 'nothing']</code></pre>
<p><strong>Get the predicted class label</strong></p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">learn.dls.vocab[torch.nn.functional.softmax(preds, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).argmax()]</span></code></pre></div>
<pre class="text"><code>    'J'</code></pre>
</section>
<section id="export-the-model" class="level2">
<h2 class="anchored" data-anchor-id="export-the-model">Export the Model</h2>
<p>The last step is to export the trained model to ONNX format.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">onnx_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>learn<span class="sc" style="color: #5E5E5E;">.</span>arch<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.onnx"</span></span>
<span id="cb86-2">onnx_file_name</span></code></pre></div>
<pre class="text"><code>    'asl-and-some-words-resnet18.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<p>We’ll use an older <a href="https://github.com/onnx/onnx/blob/main/docs/Versioning.md#operator-sets">opset_version</a> to ensure the model is compatible with the Barracuda library. We will also unlock the input dimensions for the model to give ourselves more flexibility in Unity. Although, we’ll want to stick close to the training resolution for the best accuracy.</p>
<div class="sourceCode" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">torch.onnx.export(learn.model.cpu(),</span>
<span id="cb88-2">                  batched_tensor,</span>
<span id="cb88-3">                  onnx_file_name,</span>
<span id="cb88-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb88-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb88-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb88-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb88-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb88-9">                  dynamic_axes<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'input'</span>: {<span class="dv" style="color: #AD0000;">2</span> : <span class="st" style="color: #20794D;">'height'</span>, <span class="dv" style="color: #AD0000;">3</span> : <span class="st" style="color: #20794D;">'width'</span>}}</span>
<span id="cb88-10">                 )</span></code></pre></div>
<p><strong>Export class labels</strong></p>
<p>We can export the list of class labels to a JSON file and import it into the Unity project. That way, we don’t have to hardcode them, and we can easily swap in models trained on different datasets.</p>
<div class="sourceCode" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb89-2"></span>
<span id="cb89-3">class_labels <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"classes"</span>: <span class="bu" style="color: null;">list</span>(learn.dls.vocab)}</span>
<span id="cb89-4">class_labels_file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-classes.json"</span></span>
<span id="cb89-5"></span>
<span id="cb89-6"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> write_file:</span>
<span id="cb89-7">    json.dump(class_labels, write_file)</span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post, we walked through how to finetune a ResNet model for image classification using the fastai library and export it to ONNX format. Part 2 will cover implementing the trained model in a Unity project using the Barracuda library.</p>
<p><strong>Previous:</strong> <a href="../../deep-learning-unity-intro/">Getting Started With Deep Learning in Unity</a></p>
<p><strong>Next:</strong> <a href="../part-2/">Fastai to Unity Tutorial Pt. 2</a></p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/fastai-to-unity-tutorial">GitHub Repository</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>fastai</category>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/fastai-to-unity-tutorial/part-1/index.html</guid>
  <pubDate>Mon, 06 Jun 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting Started With Deep Learning in Unity</title>
  <link>christianjmills.com/posts/deep-learning-unity-intro/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>The Barracuda Library</li>
<li>Exporting Models to ONNX</li>
<li>Loading Models</li>
<li>Executing Models</li>
<li>Working with Data</li>
<li>Summary</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Most deep learning models get deployed to servers instead of user devices. Server-side inference comes with many advantages, like complete control over the runtime environment and the option to scale computing resources up and down as needed. It can also be the only feasible way to run extremely-large models like <a href="https://openai.com/api/">GPT-3</a>.</p>
<p>However, running models on user devices can provide compelling cost, latency, and privacy benefits. There are no servers to maintain, no lag from poor internet connections, and no user data to protect. The latency benefits can be particularly significant for interactive real-time applications.</p>
<p><a href="https://unity.com/">Unity</a> is one of the best platforms for developing real-time 2D, 3D, VR, and AR applications. Its core competency is game development, but it also works well for other immersive and interactive applications.</p>
<p>There are many potential ways to leverage deep learning in Unity applications, including mapping user movement to virtual avatars, generating character dialogue, and powering enemy AI to name a few. Below are some examples from personal projects.</p>
<section id="in-game-style-transfer" class="level4">
<h4 class="anchored" data-anchor-id="in-game-style-transfer">In-Game Style Transfer</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/in-game-style-transfer.mp4" class="img-fluid" controls=""><a href="./videos/in-game-style-transfer.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">in-game-style-transfer</figcaption><p></p>
</figure>
</div>
</section>
<section id="pose-estimation" class="level4">
<h4 class="anchored" data-anchor-id="pose-estimation">Pose Estimation</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/multipose-demo-1.mp4" class="img-fluid" controls=""><a href="./videos/multipose-demo-1.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">multipose-demo-1</figcaption><p></p>
</figure>
</div>
</section>
<section id="object-detection" class="level4">
<h4 class="anchored" data-anchor-id="object-detection">Object Detection</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/openvino-yolox-object-detection-short.mp4" class="img-fluid" controls=""><a href="./videos/openvino-yolox-object-detection-short.mp4">Video</a></video></p>
<p></p><figcaption class="figure-caption">openvino-yolox-object-detection-short</figcaption><p></p>
</figure>
</div>
<p>These examples only scratch the surface of what’s possible by combining deep learning models with powerful real-time creation tools like Unity and <a href="https://www.unrealengine.com/en-US">Unreal Engine</a>. The Barracuda library makes it easy to start exploring these possibilities.</p>
</section>
</section>
<section id="the-barracuda-library" class="level2">
<h2 class="anchored" data-anchor-id="the-barracuda-library">The Barracuda Library</h2>
<p><a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> is a neural network inference library for the Unity game engine. It initially focused on models trained with Unity’s Deep Reinforcement Learning toolkit, <a href="https://github.com/Unity-Technologies/ml-agents">ML-Agents</a>, but has expanded support over time.</p>
<p>Barracuda provides <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.WorkerFactory.Type.html">multiple</a> backends for both CPU and GPU inference. The fastest CPU backend uses the <a href="https://docs.unity3d.com/Packages/com.unity.burst@1.7/manual/index.html">Burst compiler</a>, which translates IL/.NET bytecode into highly-optimized native code using <a href="https://llvm.org/">LLVM</a>. The most performant GPU backend uses <a href="https://docs.unity3d.com/Manual/class-ComputeShader.html">Compute shaders</a>. Compute shaders are programs written in <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl?redirectedfrom=MSDN">High-level shader language (HLSL)</a> that run on the GPU, outside the standard <a href="https://docs.unity3d.com/Manual/Glossary.html#Renderpipeline">rendering pipeline</a>.</p>
<p>Some platforms don’t support Compute shaders, so Unity recently added a Pixel Shader backend to enable GPU inference on platforms where Compute shaders are not supported. While faster than CPU inference, it is significantly slower than the Compute shader backend in my testing.</p>
<p>One of Barracuda’s greatest strengths is its cross-platform support. As of writing, Barracuda does not support specialized inference hardware, quantization, or even FP16 precision. However, it runs wherever Unity does, which is <a href="https://support.unity.com/hc/en-us/articles/206336795-What-platforms-are-supported-by-Unity-">nearly everywhere</a>.</p>
</section>
<section id="exporting-models-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="exporting-models-to-onnx">Exporting Models to ONNX</h2>
<p>Barracuda works with models in the <a href="https://onnx.ai/">ONNX</a> file format. PyTorch provides <a href="https://pytorch.org/docs/stable/onnx.html">built-in support</a> to export models to ONNX.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">torch.onnx.export(learn.model.cpu(),</span>
<span id="cb1-2">                  batched_tensor,</span>
<span id="cb1-3">                  onnx_file_name,</span>
<span id="cb1-4">                  export_params<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb1-5">                  opset_version<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb1-6">                  do_constant_folding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb1-7">                  input_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'input'</span>],</span>
<span id="cb1-8">                  output_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'output'</span>],</span>
<span id="cb1-9">                 )</span></code></pre></div>
<p>We can use the <a href="https://github.com/onnx/tensorflow-onnx">tf2onnx</a> python package to convert TensorFlow models.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">python</span> <span class="at" style="color: #657422;">-m</span> tf2onnx.convert <span class="at" style="color: #657422;">--saved-model</span> ./savedmodel <span class="at" style="color: #657422;">--opset</span> 10 <span class="at" style="color: #657422;">--output</span> model.onnx</span></code></pre></div>
<p>Barracuda maps <a href="https://github.com/onnx/onnx/blob/main/docs/Operators.md">ONNX operators</a> to backend-specific implementations, so model support depends on what operators Unity <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/SupportedOperators.html">implements</a> for a given inference backend. One could theoretically implement missing operations themselves, but it would probably make more sense to explore other inference options at that point. Another option is to tweak the model architecture to ensure it only uses supported operations.</p>
</section>
<section id="loading-models" class="level2">
<h2 class="anchored" data-anchor-id="loading-models">Loading Models</h2>
<p>Unity imports ONNX models as an <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.NNModel.html">NNModel</a> asset.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">Tooltip</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The Barracuda/ONNX asset file"</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">public</span> NNModel modelAsset<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p>These then compile into a <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.Model.html#methods">Model</a> object at runtime.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">// Get an object oriented representation of the model</span></span>
<span id="cb4-2">m_RunTimeModel <span class="op" style="color: #5E5E5E;">=</span> ModelLoader<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Load</span><span class="op" style="color: #5E5E5E;">(</span>modelAsset<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
</section>
<section id="executing-models" class="level2">
<h2 class="anchored" data-anchor-id="executing-models">Executing Models</h2>
<p>Barracuda has an <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.IWorker.html">IWorker</a> interface that abstracts implementation details for different inference backends. It is responsible for translating the <code>Model</code> object into a set of operations and executing them.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// Create a worker to execute the model using the selected backend</span></span>
<span id="cb5-2">IWorker engine <span class="op" style="color: #5E5E5E;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CreateWorker</span><span class="op" style="color: #5E5E5E;">(</span>workerType<span class="op" style="color: #5E5E5E;">,</span> m_RunTimeModel<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p>Barracuda can run models in a single frame or across multiple using <a href="https://docs.unity3d.com/Manual/Coroutines.html">Coroutines</a>. The latter option can help maintain smooth frame rates when using more demanding models.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">// Execute the model with the input Tensor</span></span>
<span id="cb6-2">engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Execute</span><span class="op" style="color: #5E5E5E;">(</span>input<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
</section>
<section id="working-with-data" class="level2">
<h2 class="anchored" data-anchor-id="working-with-data">Working with Data</h2>
<p>Barracuda stores data in multi-dimensional array-like objects called <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.Tensor.html">Tensors</a>.</p>
<section id="initializing-tensors" class="level3">
<h3 class="anchored" data-anchor-id="initializing-tensors">Initializing Tensors</h3>
<p>We can initialize an input Tensor from an array for CPU data, a <a href="https://docs.unity3d.com/ScriptReference/ComputeBuffer.html">ComputeBuffer</a> for general GPU data, or a <a href="https://docs.unity3d.com/ScriptReference/Texture2D.html">Texture2D</a> or <a href="https://docs.unity3d.com/ScriptReference/RenderTexture.html">RenderTexture</a> for image data.</p>
<p><strong>Initialize from an array</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// Normal single-dimensional array</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> tensorData <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-4">    0f<span class="op" style="color: #5E5E5E;">,</span> 1f<span class="op" style="color: #5E5E5E;">,</span> 2f<span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb7-5">    3f<span class="op" style="color: #5E5E5E;">,</span> 4f<span class="op" style="color: #5E5E5E;">,</span> 5f<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb7-6">    6f<span class="op" style="color: #5E5E5E;">,</span> 7f<span class="op" style="color: #5E5E5E;">,</span> 8f </span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb7-8"></span>
<span id="cb7-9">Tensor tensor <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>n<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> c<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> tensorData<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p><strong>Initialize from image data</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">// Initialize a Tensor using the inputTexture</span></span>
<span id="cb8-2">Tensor input <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>inputTexture<span class="op" style="color: #5E5E5E;">,</span> channels<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
</section>
<section id="accessing-tensor-elements" class="level3">
<h3 class="anchored" data-anchor-id="accessing-tensor-elements">Accessing Tensor Elements</h3>
<p>We can <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/TensorHandling.html#data-access">access</a> Tensor elements using multi-dimensional array operators.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">// Normal single-dimensional array</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span> tensorData <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="dt" style="color: #AD0000;">float</span><span class="op" style="color: #5E5E5E;">[]</span></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-4">    0f<span class="op" style="color: #5E5E5E;">,</span> 1f<span class="op" style="color: #5E5E5E;">,</span> 2f<span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb9-5">    3f<span class="op" style="color: #5E5E5E;">,</span> 4f<span class="op" style="color: #5E5E5E;">,</span> 5f<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb9-6">    6f<span class="op" style="color: #5E5E5E;">,</span> 7f<span class="op" style="color: #5E5E5E;">,</span> 8f </span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;">// Batch size: 1, Height: 3, Width: 3, Channels: 1</span></span>
<span id="cb9-10">Tensor tensor <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>n<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> c<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> tensorData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Tensor shape: {tensor.shape}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-13">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"First element in flat array: {tensor[0]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-14">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Second row, third column: {tensor[0, 1, 2, 0]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-15"></span>
<span id="cb9-16">tensor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;">// Batch size: 1, Height: 1, Width: 3, Channels: 3</span></span>
<span id="cb9-19">tensor <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Tensor</span><span class="op" style="color: #5E5E5E;">(</span>n<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> h<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> w<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> c<span class="op" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">,</span> tensorData<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-20"></span>
<span id="cb9-21">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"Tensor shape: {tensor.shape}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-22">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"First element in flat array: {tensor[0]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-23">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"First row, first column, second channel: {tensor[0, 0, 0, 1]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-24">Debug<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Log</span><span class="op" style="color: #5E5E5E;">(</span>$<span class="st" style="color: #20794D;">"First row, second column, third channel: {tensor[0, 0, 1, 2]}"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-25"></span>
<span id="cb9-26">tensor<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Dispose</span><span class="op" style="color: #5E5E5E;">();</span></span></code></pre></div>
<p><strong>Output</strong></p>
<pre class="text"><code>Tensor shape: (n:1, h:3, w:3, c:1)
First element in flat array: 0
Second row, third column: 5

Tensor shape: (n:1, h:1, w:3, c:3)
First element in flat array: 0
First row, first column, second channel: 1
First row, second column, third channel: 5</code></pre>
</section>
<section id="retrieving-model-output" class="level3">
<h3 class="anchored" data-anchor-id="retrieving-model-output">Retrieving Model Output</h3>
<p>We can download model output to the CPU or copy it to a RenderTexture to keep the data on the GPU, as shown below.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">// Get raw model output</span></span>
<span id="cb11-2">Tensor output <span class="op" style="color: #5E5E5E;">=</span> engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PeekOutput</span><span class="op" style="color: #5E5E5E;">(</span>outputLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">// Copy model output to a RenderTexture</span></span>
<span id="cb11-5">output<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p>Reading model output from the GPU to the CPU causes a <a href="https://en.wikipedia.org/wiki/Pipeline_stall">pipeline stall</a> as Unity prevents any execution on the main thread to prevent the data from changing before it has finished downloading to the CPU. The pipeline stall can cause a noticeable performance bottleneck that increases with the amount of data we need to download.</p>
<p>This performance bottleneck is not an issue when the model output can stay on the GPU like when performing artistic style transfer. However, reading the prediction of a simple image classifier to the CPU can cap GPU utilization from approximately 100% to around 60%.</p>
<section id="standard-gpu-readback" class="level4">
<h4 class="anchored" data-anchor-id="standard-gpu-readback">Standard GPU Readback</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/deep-learning-unity-intro/images/image-classifier-without-async.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image-classifier-without-async</figcaption><p></p>
</figure>
</div>
<p>Fortunately, Unity provides a method to read data from the GPU asynchronously called <a href="https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadback.Request.html">AsyncGPUReadback.Request()</a>. The one drawback to this method is that it adds a few frames of latency. That should not be noticeable as long as the frame rate is high enough.</p>
</section>
<section id="asynchronous-gpu-readback" class="level4">
<h4 class="anchored" data-anchor-id="asynchronous-gpu-readback">Asynchronous GPU Readback</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/deep-learning-unity-intro/images/image-classifier-with-async.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image-classifier-with-async</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="processing-data" class="level3">
<h3 class="anchored" data-anchor-id="processing-data">Processing Data</h3>
<p>We typically need to manually implement preprocessing steps like applying ImageNet normalization to input images. We can implement these preprocessing steps on the CPU using C# scripts or on the GPU using Compute shaders (when supported) or <a href="https://docs.unity3d.com/Manual/SL-VertexFragmentShaderExamples.html">Fragment Shaders</a>. Naturally, we want to perform image preprocessing on the GPU when possible.</p>
<section id="imagenet-normalization-compute-shader" class="level4">
<h4 class="anchored" data-anchor-id="imagenet-normalization-compute-shader">ImageNet Normalization Compute shader</h4>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">// Each #kernel tells which function to compile; you can have many kernels</span></span>
<span id="cb12-2">#pragma kernel NormalizeImageNet</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;">// The pixel data for the input image</span></span>
<span id="cb12-5">Texture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> InputImage<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;">// The pixel data for the processed image</span></span>
<span id="cb12-7">RWTexture2D<span class="op" style="color: #5E5E5E;">&lt;</span>float4<span class="op" style="color: #5E5E5E;">&gt;</span> Result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;">// Apply the ImageNet normalization stats from PyTorch to an image</span></span>
<span id="cb12-10"><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;">numthreads</span><span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)]</span></span>
<span id="cb12-11"><span class="dt" style="color: #AD0000;">void</span> <span class="fu" style="color: #4758AB;">NormalizeImageNet</span><span class="op" style="color: #5E5E5E;">(</span>uint3 id <span class="op" style="color: #5E5E5E;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb12-12"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb12-13">    <span class="co" style="color: #5E5E5E;">// Set the pixel color values for the processed image</span></span>
<span id="cb12-14">    Result<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">float4</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span id="cb12-15">        <span class="co" style="color: #5E5E5E;">// Normalize the red color channel values</span></span>
<span id="cb12-16">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">r</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4850f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2290f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb12-17">        <span class="co" style="color: #5E5E5E;">// Normalize the green color channel values</span></span>
<span id="cb12-18">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">g</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4560f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2240f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb12-19">        <span class="co" style="color: #5E5E5E;">// Normalize the blue color channel values</span></span>
<span id="cb12-20">        <span class="op" style="color: #5E5E5E;">(</span>InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">b</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.4060f</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.2250f</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb12-21">        <span class="co" style="color: #5E5E5E;">// Ignore the alpha/transparency channel</span></span>
<span id="cb12-22">        InputImage<span class="op" style="color: #5E5E5E;">[</span>id<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">xy</span><span class="op" style="color: #5E5E5E;">].</span><span class="fu" style="color: #4758AB;">a</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb12-23"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can sometimes use Barracuda to handle postprocessing by adding additional layers to the end of models, like Sigmoid, Softmax, and Argmax, <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/api/Unity.Barracuda.ModelBuilder.html#Unity_Barracuda_ModelBuilder_Upsample2D_System_String_System_Object_Int32___System_Boolean_">at runtime</a>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">// Create a model builder to modify the m_RunTimeModel</span></span>
<span id="cb13-2">ModelBuilder modelBuilder <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">ModelBuilder</span><span class="op" style="color: #5E5E5E;">(</span>m_RunTimeModel<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">// Add a new Softmax layer</span></span>
<span id="cb13-5">modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Softmax</span><span class="op" style="color: #5E5E5E;">(</span>softmaxLayer<span class="op" style="color: #5E5E5E;">,</span> outputLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;">// Add a new Argmax layer</span></span>
<span id="cb13-7">modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Reduce</span><span class="op" style="color: #5E5E5E;">(</span>Layer<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">Type</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ArgMax</span><span class="op" style="color: #5E5E5E;">,</span> argmaxLayer<span class="op" style="color: #5E5E5E;">,</span> softmaxLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;">// Create a worker to execute the model using the selected backend</span></span>
<span id="cb13-10">IWorker engine <span class="op" style="color: #5E5E5E;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">CreateWorker</span><span class="op" style="color: #5E5E5E;">(</span>workerType<span class="op" style="color: #5E5E5E;">,</span> modelBuilder<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">model</span><span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p>Otherwise, we need to implement those manually as well.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">// Get raw model output</span></span>
<span id="cb14-2">Tensor output <span class="op" style="color: #5E5E5E;">=</span> engine<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">PeekOutput</span><span class="op" style="color: #5E5E5E;">(</span>outputLayer<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">// Initialize vector for coordinates</span></span>
<span id="cb14-5">Vector2 coords <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Vector2</span><span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;">// Process estimated point coordinates</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> output<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">length</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span></span>
<span id="cb14-9"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb14-10">    coords<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">((</span>output<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> inputDims<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>imageDims<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">/</span> inputDims<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb14-11"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post introduced the Barracuda inference library for the Unity game engine. Barracuda is not the only option to perform inference in Unity, but it provides a good starting point. A follow-up tutorial series will walk through training a model using the <a href="https://docs.fast.ai/">fastai library</a>, exporting it to ONNX format, and performing inference with it in a Unity project using the Barracuda library.</p>
<p><strong>Next:</strong> <a href="../fastai-to-unity-tutorial/part-1/">Fastai to Unity Tutorial Pt. 1</a></p>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>unity</category>
  <category>barracuda</category>
  <guid>christianjmills.com/posts/deep-learning-unity-intro/index.html</guid>
  <pubDate>Sat, 28 May 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on No ML Degree Book</title>
  <link>christianjmills.com/posts/no-ml-degree-book-notes/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Key Points</li>
<li>Programming</li>
<li>Machine Learning</li>
<li>A Base Portfolio</li>
<li>Talent Projects</li>
<li>Self Evaluation</li>
<li>Ideas</li>
<li>Workflow</li>
<li>Job Hunting</li>
<li>References</li>
</ul>
<section id="key-points" class="level2">
<h2 class="anchored" data-anchor-id="key-points">Key Points</h2>
<section id="self-learning-ml" class="level3">
<h3 class="anchored" data-anchor-id="self-learning-ml">Self-learning ML</h3>
<ul>
<li>Start with software engineering, then transition to machine learning.</li>
<li>Use free peer-to-peer CS schools to learn programming and <a href="https://course.fast.ai/">Fastai</a> to learn machine learning.</li>
</ul>
</section>
<section id="hireability" class="level3">
<h3 class="anchored" data-anchor-id="hireability">Hireability</h3>
<ul>
<li>Search for small companies, companies with specific needs, and organizations with practical interviews.</li>
<li>Employers hire self-learners based on validated real-world results.</li>
</ul>
</section>
<section id="portfolio" class="level3">
<h3 class="anchored" data-anchor-id="portfolio">Portfolio</h3>
<ul>
<li><p>Create a solid portfolio that requires high-effort focus and develop rigorous work habits.</p></li>
<li><p>The safest portfolio projects involve publishing papers, machine learning competitions, and contributing to open-source projects.</p></li>
<li><p>The second-best projects are creating live ML products, collaborating with people in the industry, and developing ML content with high engagement.</p></li>
<li><p>Result-based portfolio projects have metrics or testimonials, a context, and third-party validation.</p></li>
<li><p>Improve promising existing projects instead of coming up with gut project ideas.</p></li>
</ul>
</section>
</section>
<section id="programming" class="level2">
<h2 class="anchored" data-anchor-id="programming">Programming</h2>
<section id="start-with-programming" class="level3">
<h3 class="anchored" data-anchor-id="start-with-programming">Start with Programming</h3>
<ul>
<li>There are far more entry-level positions in software development.</li>
<li>Aim for at least six months to two years of study and work experience.</li>
</ul>
</section>
<section id="no-degree-tech-schools-and-online-courses" class="level3">
<h3 class="anchored" data-anchor-id="no-degree-tech-schools-and-online-courses">No-degree Tech Schools and Online Courses</h3>
<table class="table">
<thead>
<tr class="header">
<th>Schools &amp; Courses</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.codecademy.com/">Codecademy</a></td>
<td>Learn to code for free.</td>
</tr>
<tr class="even">
<td><a href="https://scrimba.com/">Scrimba</a></td>
<td>Interactive courses for frontend development.</td>
</tr>
<tr class="odd">
<td><a href="https://www.freecodecamp.org/">freeCodeCamp</a></td>
<td>Learn to code for free, building projects.</td>
</tr>
<tr class="even">
<td><a href="https://42.fr/en/homepage/">42</a></td>
<td>42 is a tuition-free, peer-to-peer, project-based, online computer science training program.</td>
</tr>
<tr class="odd">
<td><a href="https://www.holbertonschool.com/">Holberton School</a></td>
<td>Learn software development in a collaborative, project-based environment.</td>
</tr>
</tbody>
</table>
</section>
<section id="boot-camps" class="level3">
<h3 class="anchored" data-anchor-id="boot-camps">Boot Camps</h3>
<table class="table">
<thead>
<tr class="header">
<th>Boot Camps</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.bloomtech.com/">Bloom Institute of Technology</a></td>
<td>Bloom Institute of Technology is an online tech school that offers a deferred tuition program.</td>
</tr>
</tbody>
</table>
</section>
<section id="computer-science" class="level3">
<h3 class="anchored" data-anchor-id="computer-science">Computer Science</h3>
<ul>
<li>90% of today’s models train on and deploy to servers.</li>
<li>Most work focuses on making the data, training, and production process faster by improving efficiency and organization.</li>
<li>A practical computer science curriculum that focuses on projects and programming provides a solid base.</li>
</ul>
</section>
<section id="front-end-and-mobile" class="level3">
<h3 class="anchored" data-anchor-id="front-end-and-mobile">Front-end and Mobile</h3>
<ul>
<li>Running ML models on personal computers and phones provides compelling cost, latency, and privacy benefits.</li>
<li>Major shifts on the client side include human-in-the-loop, prompt engineering, and active learning.</li>
<li>Creating smaller intermediate models, workflows, and programs to interact with server-side models is crucial.</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Tools</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.tensorflow.org/js">TensorFlow.js</a></td>
<td>Develop ML models in JavaScript, and use ML directly in the browser or in Node.js.</td>
</tr>
<tr class="even">
<td><a href="https://github.com/microsoft/onnxruntime/tree/master/js/web#readme">ONNX Runtime Web</a></td>
<td>ONNX Runtime Web is a Javascript library for running ONNX models on browsers and on Node.js.</td>
</tr>
<tr class="odd">
<td><a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen (C++)</a> compiled with <a href="https://webassembly.org/">Web Assembly</a></td>
<td>Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms.</td>
</tr>
<tr class="even">
<td><a href="https://pyscript.net/">PyScript</a></td>
<td>PyScript is a framework that allows users to create rich Python applications in the browser using HTML’s interface and the power of <a href="https://pyodide.org/en/stable/">Pyodide</a>, <a href="https://webassembly.org/">WASM</a>, and modern web technologies.</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="machine-learning">Machine Learning</h2>
<section id="learning-machine-learning" class="level3">
<h3 class="anchored" data-anchor-id="learning-machine-learning">Learning Machine Learning</h3>
<ul>
<li>Prioritize creating a great resume instead of building competitive interview skills.
<ul>
<li>A strong portfolio weighs heavier than a boot camp graduation.</li>
</ul></li>
<li>Focus on ML opportunities that have practical interviews and light theory requirements.</li>
<li>Learn data-centric problem-solving tools.</li>
<li>Identify, scope, communicate and solve problems.</li>
<li>Build a portfolio with externally validated results.</li>
<li>Gain a light overview of ML and statistics.</li>
<li>Many companies look for strong programmers and offer on-the-job ML training.</li>
</ul>
</section>
<section id="practical-ml-courses" class="level3">
<h3 class="anchored" data-anchor-id="practical-ml-courses">Practical ML Courses</h3>
<ul>
<li>Pick a practical ML course and study it for one month.
<ul>
<li>After the first month, 90% of your focus should be on your portfolio.</li>
</ul></li>
<li>Classic machine learning is still prevalent in the industry and often shows up in interviews.
<ul>
<li>Explore one or two videos each evening from StatQuest’s <a href="https://www.youtube.com/watch?v=qBigTkBLU6g&amp;list=PLblh5JKOoLUK0FLuzwntyYI10UQFUhsY9">Statistics Fundamentals</a> and <a href="https://www.youtube.com/watch?v=Gv9_4yMHFhI&amp;list=PLblh5JKOoLUICTaGLRoHQDuF_7q2GfuJF">Machine Learning</a> playlists.</li>
</ul></li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Courses</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://course.fast.ai/">Fast.ai: Practical Deep Learning for Coders</a></td>
<td>Fast.ai provides a practical, application-first approach to deep learning.</td>
</tr>
<tr class="even">
<td><a href="https://www.kaggle.com/thirty-days-of-ml-assignments">Kaggle: 30 Days of ML</a></td>
<td>Machine learning beginner → Kaggle competitor in 30 days.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/GokuMohandas/MadeWithML">Made With ML Course</a></td>
<td>Learn how to responsibly deliver value with ML.</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th>Skills</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Get comfortable working with lots of tools mixing off-the-shelf library calls with dabbling in the source code, context switching, and debugging.</td>
</tr>
<tr class="even">
<td>Spot potential risks and weaknesses with your solutions and how to mitigate them.</td>
</tr>
<tr class="odd">
<td>Learn the types of problems machine learning can and cannot solve.</td>
</tr>
<tr class="even">
<td>Learn when to use paid APIs, open-source, or custom solutions.</td>
</tr>
<tr class="odd">
<td>Learn rudimentary awareness of how your model impacts a business, including privacy, UI/UX, legal, ethics, and the business model.</td>
</tr>
<tr class="even">
<td>Communicate expectations and timelines to technical and non-technical stakeholders.</td>
</tr>
<tr class="odd">
<td>Learn how and when to mitigate risk from your inexperience.</td>
</tr>
<tr class="even">
<td>Understand what data is available and how to get more.</td>
</tr>
<tr class="odd">
<td>Extract, visualize, clean, and load data.</td>
</tr>
<tr class="even">
<td>Understand the data and use it to make informed decisions.</td>
</tr>
<tr class="odd">
<td>Understand the type of problem and how to find a solution.</td>
</tr>
<tr class="even">
<td>Set and measure appropriate objectives and success criteria.</td>
</tr>
<tr class="odd">
<td>Develop baseline models.</td>
</tr>
<tr class="even">
<td>Train models with state-of-the-art results.</td>
</tr>
<tr class="odd">
<td>Quickly and efficiently debug models.</td>
</tr>
<tr class="even">
<td>Visualize model performance.</td>
</tr>
<tr class="odd">
<td>Deploy models and understand memory, cost, queries-per-second, and latency.</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="a-base-portfolio" class="level2">
<h2 class="anchored" data-anchor-id="a-base-portfolio">A Base Portfolio</h2>
<section id="weak-portfolio-projects" class="level3">
<h3 class="anchored" data-anchor-id="weak-portfolio-projects">Weak Portfolio Projects</h3>
<ul>
<li>Don’t include toy projects like MNIST on your resume.</li>
<li>ML projects that are too hard for the recruiter to evaluate or lack results don’t help your resume.</li>
<li>Self-learners need to differentiate themselves from fake and low-effort portfolios.</li>
</ul>
</section>
<section id="degree-equivalent-portfolio-projects" class="level3">
<h3 class="anchored" data-anchor-id="degree-equivalent-portfolio-projects">Degree Equivalent Portfolio Projects</h3>
<ul>
<li>Degree equivalent projects are 1-3 months long, results-driven projects that provide evidence you can do the job and are easy for recruiters to understand.</li>
<li>A non-expert recruiter needs third-party validation that you didn’t copy-paste your projects.</li>
</ul>
<section id="primary-options" class="level4">
<h4 class="anchored" data-anchor-id="primary-options">Primary Options</h4>
<ul>
<li>Achieve a high-ranking score in an ML competition.</li>
<li>Contribute to a popular ML open-source project.</li>
<li>Write a paper that gets published (this is mostly for transitioning STEM researchers).</li>
</ul>
</section>
<section id="secondary-options-require-more-effort-for-recruiters" class="level4">
<h4 class="anchored" data-anchor-id="secondary-options-require-more-effort-for-recruiters">Secondary Options (require more effort for recruiters)</h4>
<ul>
<li>Create an ML project with real users (ideally, a deployed model with a UI).</li>
<li>Create an industry-specific solution with a mentor that provides testimonials.</li>
<li>Create ML content with high engagement, such as blogging, podcasts, and videos.</li>
</ul>
</section>
</section>
<section id="high-effort-projects" class="level3">
<h3 class="anchored" data-anchor-id="high-effort-projects">High-effort Projects</h3>
<ul>
<li>Smaller ML competitions like niche competitions on Kaggle, Numerai, ML conference competitions, or company competitions are great portfolio projects.</li>
<li>Open-source contributions to up-and-coming projects are often the best way to collaborate and get to know people in ML.</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Open-Source Projects</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://ffcv.io/">FFCV</a></td>
<td>FFCV is a drop-in data loading system that dramatically increases data throughput in model training.</td>
</tr>
<tr class="even">
<td><a href="https://www.eleuther.ai/">EleutherAI</a></td>
<td>EleutherAI is a grassroots collective of researchers working to open source AI research.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/huggingface">Hugging Face</a></td>
<td>The AI community building the future.</td>
</tr>
<tr class="even">
<td><a href="https://www.pytorchlightning.ai/">PyTorch Lightning</a></td>
<td>Scale your PyTorch models, without the boilerplate.</td>
</tr>
<tr class="odd">
<td><a href="https://laion.ai/#top">LAION</a></td>
<td>The Large-scale Artificial Intelligence Open Network</td>
</tr>
<tr class="even">
<td><a href="https://github.com/replicate">Replicate</a></td>
<td>Replicate makes it easy to share your machine learning model.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/rwightman/pytorch-image-models">timm</a></td>
<td>PyTorch image models, scripts, pretrained weights</td>
</tr>
<tr class="even">
<td><a href="https://github.com/qubvel/segmentation_models">Segmentation Models</a></td>
<td>Segmentation models with pretrained backbones.</td>
</tr>
<tr class="odd">
<td><a href="https://www.gymlibrary.ml/">OpenAI Gym</a></td>
<td>Gym is a standard API for reinforcement learning, and a diverse collection of reference environments.</td>
</tr>
<tr class="even">
<td><a href="https://albumentations.ai/">Albumentations</a></td>
<td>Albumentations is a computer vision tool that boosts the performance of deep convolutional neural networks.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/arogozhnikov/einops">einops</a></td>
<td>einops provides flexible and powerful tensor operations for readable and reliable code. Supports numpy, pytorch, tensorflow, jax, and <a href="https://github.com/arogozhnikov/einops#supported-frameworks">others</a>.</td>
</tr>
<tr class="even">
<td><a href="https://github.com/google/flax">FLAX</a></td>
<td>Flax is a neural network library for JAX that is designed for flexibility.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/fastai">fast.ai</a></td>
<td>fastai simplifies training fast and accurate neural nets using modern best practices.</td>
</tr>
<tr class="even">
<td><a href="https://github.com/microsoft/onnxruntime">ONNX Runtime</a></td>
<td>ONNX Runtime is a cross-platform inference and training machine-learning accelerator.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/ml-tooling/best-of-ml-python">Best-of Machine Learning with Python</a></td>
<td>A ranked list of awesome machine learning Python libraries. Updated weekly.</td>
</tr>
</tbody>
</table>
</section>
<section id="industry-portfolio-projects" class="level3">
<h3 class="anchored" data-anchor-id="industry-portfolio-projects">Industry Portfolio Projects</h3>
<ul>
<li>Portfolio projects that solve a real problem need someone that vouches for your solution.</li>
<li>Email ten to twenty ML engineers at startups you respect and ask them for industry problems with accessible data you can tackle.</li>
<li>Try people on Twitter with less than 10k followers and a blog.</li>
<li>ML engineers can put you in a good starting point, scope the project, help you when you get stuck, and potentially hire or recommend you later.</li>
<li>Approach people who post <a href="https://www.upwork.com/freelance-jobs/data-science/">data-related freelance</a> projects on freelancer marketplaces and look at sites that post <a href="https://www.kdnuggets.com/2020/12/data-science-volunteering.html">pro-bono data projects</a>.</li>
</ul>
<section id="email-example" class="level4">
<h4 class="anchored" data-anchor-id="email-example">Email Example</h4>
<pre class="text"><code>Title: Industry ML problems
Hi Jane,
I’m self-studying deep learning [Link to github] and I’m looking
for problems I can tackle for my portfolio.
Given your interesting work on Twitters’s recommendation
system [link to their blog], I thought you could have exposure to
other unique industry problems.
I’m thinking of using Twitter’s API to do an NLP analysis to
detect the percentage of bots on Twitter. Is that a good entry-
level problem to tackle or can you think of something else?
Cheers,
Bob</code></pre>
</section>
</section>
</section>
<section id="talent-projects" class="level2">
<h2 class="anchored" data-anchor-id="talent-projects">Talent Projects</h2>
<ul>
<li><p>Talent projects are 1-4 week open, result-driven projects that help you stand out once in an interview.</p></li>
<li><p>Talent projects focus on novelty and result in a demo, blog post, or visual.</p></li>
<li><p>Talent projects indicate a passion for a particular topic, establish personal branding, and help create a developer advocacy skillset.</p></li>
<li><p>Talent projects are hard to execute and introduce more noise for recruiters.</p></li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>X-factor Projects</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://fn.lc/post/diy-self-driving/">DIY Self Driving - A Holiday Side Project</a></td>
<td>DIY Self Driving - A Holiday Side Project</td>
</tr>
<tr class="even">
<td><a href="https://github.com/lucidrains?tab=repositories">lucidrains GitHub repositories</a></td>
<td>How to turn novel papers into prototypes</td>
</tr>
<tr class="odd">
<td><a href="https://towardsdatascience.com/the-cold-start-problem-how-to-build-your-machine-learning-portfolio-6718b4ae83e9">How to collect data in the wild and create irl demos</a></td>
<td>The cold start problem: how to build your machine learning portfolio</td>
</tr>
</tbody>
</table>
<section id="developer-advocacy-projects" class="level3">
<h3 class="anchored" data-anchor-id="developer-advocacy-projects">Developer Advocacy Projects</h3>
<ul>
<li>Developer advocacy roles focus on engagement through content and can work as a transition into more technical roles.</li>
<li>External excitement is an indicator that you made a unique contribution.</li>
</ul>
</section>
</section>
<section id="self-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="self-evaluation">Self Evaluation</h2>
<section id="metric-based-portfolio-items" class="level3">
<h3 class="anchored" data-anchor-id="metric-based-portfolio-items">Metric-based Portfolio Items</h3>
<ul>
<li>Portfolio items need metrics, context, and third-party validation.</li>
<li>Third-party validation reduces the doubt you made a mistake or made things up.</li>
</ul>
<section id="example-portfolio-item" class="level4">
<h4 class="anchored" data-anchor-id="example-portfolio-item">Example Portfolio Item</h4>
<pre class="text"><code>A skin cancer classification model with 90% accuracy on
Benchmark X with a previous SOTA of 85%. Published in
Machine Learning Conference X as the first author.</code></pre>
</section>
</section>
<section id="testimonial-based-portfolio-items" class="level3">
<h3 class="anchored" data-anchor-id="testimonial-based-portfolio-items">Testimonial-Based Portfolio Items</h3>
<ul>
<li>Contributing to popular frameworks demonstrates you understand what they need and understand the framework enough to improve and pass a technical review for your submission.</li>
</ul>
<section id="example-portfolio-item-1" class="level4">
<h4 class="anchored" data-anchor-id="example-portfolio-item-1">Example Portfolio Item</h4>
<pre class="text"><code>A released open-source contribution to PyTorch, the LAMB
optimizer [link], and a blog post [link].</code></pre>
<ul>
<li><p>You can also request a quote from the framework’s team.</p>
<pre class="text"><code>"X made a fast and well-documented implementation of
the LAMB optimizer in PyTorch.", Employee X at
Facebook Meta. [endorsement link], [commit link] and a
blog post [link]</code></pre></li>
<li><p>Public endorsements on Twitter, LinkedIn, or GitHub make them verifiable.</p></li>
</ul>
</section>
</section>
<section id="product-portfolio-items" class="level3">
<h3 class="anchored" data-anchor-id="product-portfolio-items">Product Portfolio Items</h3>
<ul>
<li>Live demos allow recruiters to test projects without technical expertise.</li>
<li>Using a recent or custom model is more likely to convince cynical recruiters your project is original.</li>
<li>Open-ended projects need a cluster of validation to compensate for less interpretable results.</li>
<li>When applicable, deploy the model on a scalable back-end on a large cloud provider and show evidence it supports at least 100 QPS.</li>
</ul>
<section id="example-portfolio-item-2" class="level4">
<h4 class="anchored" data-anchor-id="example-portfolio-item-2">Example Portfolio Item</h4>
<pre class="text"><code>A super-resolution model in production and a live UI. [link]
Optimized deployment taking the original RAM footprint
from 1 GB to 150 MB, and the CPU inference from 4
seconds to 30 ms. [Google Colab benchmark link]. 100
weekly users [Stats screenshot], 250 stars on GitHub [link],
and seen on Hacker News [link] and recommended by X,
at Famous company. [link to tweet]</code></pre>
</section>
</section>
</section>
<section id="ideas" class="level2">
<h2 class="anchored" data-anchor-id="ideas">Ideas</h2>
<section id="base-portfolio-ideas" class="level3">
<h3 class="anchored" data-anchor-id="base-portfolio-ideas">Base Portfolio Ideas</h3>
<ul>
<li>Avoid gut ideas until you have a few years of experience to tell if it’s good.</li>
<li>Good base portfolio ideas are validated problems and allow you to translate hard work into outcomes with as few risks as possible.</li>
</ul>
</section>
<section id="talent-project-ideas" class="level3">
<h3 class="anchored" data-anchor-id="talent-project-ideas">Talent Project Ideas</h3>
<ul>
<li>It is better to overdeliver on a tiny real problem than to make a vague attempt on an ambitious one.</li>
<li>Successful talent projects lead to short and clear stories.</li>
<li>Try ranking a few dozen project areas rather than deciding between a few specific ideas. Ideas that appear in any mainstream channel are likely overused.</li>
</ul>
</section>
<section id="sourcing-ideas" class="level3">
<h3 class="anchored" data-anchor-id="sourcing-ideas">Sourcing Ideas</h3>
<ul>
<li>Starting Points
<ul>
<li>Top ML conferences from 1987 to 2007</li>
<li>Stanford’s <a href="https://nlp.stanford.edu/courses/cs224n/">CS224n</a>, <a href="https://stanford-cs329s.github.io/">CS329S</a> &amp; <a href="http://cs231n.stanford.edu/index.html">CS231n</a> projects</li>
<li>FastAI <a href="https://twitter.com/EmilWallner/status/1522207033931403264">student projects</a></li>
<li>Twitter <a href="https://twitter.com/EmilWallner/following">likes</a> and GitHub <a href="https://github.com/emilwallner?tab=following">stars</a></li>
<li>Creative projects like <a href="https://twitter.com/ak92501">AK</a>, <a href="https://mlart.co/">ML x Art</a>, <a href="http://www.aiartonline.com/">NeurIPS gallery</a></li>
<li>Edge devices and <a href="https://twitter.com/EdgeImpulse">hardware projects</a></li>
<li>Kaggle <a href="https://www.kaggle.com/search?q=1st+place">Kernels</a></li>
<li>Top 15-40% of papers on <a href="https://arxiv-sanity-lite.com/">Arxiv Sanity</a></li>
</ul></li>
<li>Aim for projects made by people early in their careers.</li>
</ul>
</section>
<section id="ranking-ideas" class="level3">
<h3 class="anchored" data-anchor-id="ranking-ideas">Ranking Ideas</h3>
<ul>
<li>Try to gather at least 20-30 project ideas before ranking them.</li>
<li>Can you impress a non-technical person in less than 30 seconds?</li>
<li>Can you find a quick way to run the model?</li>
<li>Do you have enough computing resources and knowledge for the project?</li>
<li>Is there an apparent angle to improve the project?</li>
<li>Does the project excite you?</li>
<li>Ranking a project often depends on whether you will use the project for your resume, personal marketing, getting a developer advocacy role, or something else.</li>
<li>Narrow down the list to five projects and pick the most exciting one.</li>
<li>If you can’t create a baseline within the first week, move on to something else.</li>
</ul>
</section>
<section id="promoting-projects" class="level3">
<h3 class="anchored" data-anchor-id="promoting-projects">Promoting Projects</h3>
<ul>
<li>Have something highly visual or a few-click online demo to make it more shareable on social media.</li>
<li>Spread good vibes on Twitter and have a good reply game to build an audience.</li>
<li>Share projects that use specific tools/products in their Slack channels and Discord groups.</li>
<li>Add models to model platforms like <a href="https://huggingface.co/spaces">Huggingface Spaces</a>, <a href="https://replicate.com/">Replicate</a>, <a href="https://modelplace.ai/">Modelplace</a>, and <a href="https://runwayml.com/hosted-models/">Runway models</a>.</li>
<li>Look into using Google’s Keyword tool, other mainstream SEO tools, Google’s trending topics, and Youtube’s Keyword tool to increase search traffic.</li>
</ul>
</section>
</section>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">Workflow</h2>
<section id="high-effort-focus" class="level3">
<h3 class="anchored" data-anchor-id="high-effort-focus">High-effort Focus</h3>
<ul>
<li>Starting with a blank page and trying to build your first project requires high-effort focus.</li>
<li>Resource for building high-effort focus
<ul>
<li><a href="https://jamesclear.com/atomic-habits">Atomic Habits</a></li>
<li><a href="https://www.calnewport.com/books/deep-work/">Deep Work</a></li>
</ul></li>
<li>Building high-effort focus requires good sleep, exercise, and food routines.</li>
<li>Sleep at least 8 hours, ideally 9 hours, in a quiet, dark, and cool environment.</li>
<li>Exercise at least 20 minutes per day to elevate your heart rate.</li>
<li>Eat healthy food that does not spike your sugar levels.</li>
<li>Use tiny habits to gradually increase your capacity for high-effort focus to 1-3 hours per day.</li>
</ul>
</section>
<section id="learning-schedule" class="level3">
<h3 class="anchored" data-anchor-id="learning-schedule">Learning Schedule</h3>
<ul>
<li>8:00am-2:00pm: High-effort focus (scoping, coding, major refactoring)</li>
<li>2:00pm-6:00pm: Low-effort focus (light debugging and simple refactoring)</li>
<li>6:00pm-10:00pm: Mid-effort focus (learning gaps + skimming)</li>
<li>Try taking long breaks during lunch for exercise and leisure to reenergize for another high-effort session.</li>
</ul>
</section>
</section>
<section id="job-hunting" class="level2">
<h2 class="anchored" data-anchor-id="job-hunting">Job Hunting</h2>
<ul>
<li>The ideal hiring process for self-learners is specialized, practical, or small-scale.
<ul>
<li>This hiring process is more prevalent with smaller organizations, startups, companies with specific cultures, or specialized teams within larger organizations.</li>
<li>Hiring managers are technical, and questions cater to each candidate’s work are reflect skills for the job.</li>
</ul></li>
</ul>
<section id="high-growth-startups-and-small-organizations" class="level3">
<h3 class="anchored" data-anchor-id="high-growth-startups-and-small-organizations">High-growth Startups and Small Organizations</h3>
<ul>
<li>Smaller companies that have technical hiring managers, technical founders, and few applicants are good choices for self-learners.</li>
<li>These companies need people who can add value on day one.</li>
<li>The hiring process can vary more between small companies, and you often need to do more adjacent work related to ML.</li>
<li>Places to look for startups
<ul>
<li><a href="https://www.producthunt.com/search?q=ai&amp;topics=Artificial%20Intelligence">Product Hunt</a></li>
<li><a href="https://www.ycombinator.com/companies">Y Combinator’s list of startups</a></li>
<li><a href="https://angel.co/jobs">Angel list</a></li>
<li><a href="https://hn.algolia.com/?dateRange=pastYear&amp;page=0&amp;prefix=true&amp;query=ask%20hn%3A%20who%20is%20hiring&amp;sort=byPopularity&amp;type=story">Ask HN: Who is hiring? monthly threads</a></li>
<li><a href="https://remoteok.com/">remote jobs</a></li>
<li>local incubators and offices</li>
<li>portfolios of <a href="https://betaboom.com/blog/top-angel-investors/">angel investors</a></li>
</ul></li>
<li>Reach out to your professional, social, and personal networks.</li>
<li>Research institutions often need people who can do the more engineering-heavy side of their ML research.</li>
</ul>
</section>
<section id="midsized-and-large-companies" class="level3">
<h3 class="anchored" data-anchor-id="midsized-and-large-companies">Midsized and Large Companies</h3>
<ul>
<li>Search for no-degree graduates on LinkedIn and see where they work or ask them directly.</li>
<li>Look for companies that actively look for <a href="https://www.nocsdegree.com/jobs/">non-degree candidates</a>.</li>
<li>Attract companies with online and social media presence.</li>
<li>Use interview-as-a-service companies like <a href="https://triplebyte.com/">TripleByte</a>.</li>
<li>Browse Glassdoor and look for companies with <a href="https://www.glassdoor.fr/Overview/Working-at-Skyscanner-EI_IE437400.11,21.htm?countryRedirect=true">practical interviews</a>.</li>
</ul>
</section>
<section id="resume" class="level3">
<h3 class="anchored" data-anchor-id="resume">Resume</h3>
<ul>
<li>Aim for half a page with essential contact information, tech jobs, and one or two bullet points with your most impressive ML projects.</li>
<li>Don’t refer to yourself as an ML enthusiast, add jargon, or make the resume more than one page.</li>
</ul>
</section>
<section id="email-templates-for-contacting-startups" class="level3">
<h3 class="anchored" data-anchor-id="email-templates-for-contacting-startups">Email Templates for Contacting Startups</h3>
<ul>
<li>Email the company’s founder and CEO and send two follow-up emails one week apart if they don’t reply.</li>
<li>Email companies regardless of whether they have open positions.</li>
</ul>
<section id="email-template" class="level4">
<h4 class="anchored" data-anchor-id="email-template">Email Template</h4>
<pre class="text"><code>Title: Entry-level ML positions
Hi John,
I hope you’ve had an excellent week so far!
I first saw your product on Product Hunt. I loved the user
interface, and I was impressed by the quality of the generative
model. I’m currently looking for an entry-level ML position.
I’ve made open source contributions to PyTorch and ranked in
the top 5% in a popular image segmentation competition on
Kaggle. You can find more details in my portfolio [github] and
[linkedin] here.
If you have any opportunities at [company] or know anyone else
hiring, please let me know.
Cheers,
Jane</code></pre>
</section>
</section>
<section id="interview-prep" class="level3">
<h3 class="anchored" data-anchor-id="interview-prep">Interview Prep</h3>
<ul>
<li>Practice describing yourself concisely in 30 seconds and giving a 30 seconds overview of each critical project.</li>
<li>Do some of the easy <a href="https://leetcode.com/problemset/all/?difficulty=EASY&amp;page=1&amp;sorting=W3sic29ydE9yZGVyIjoiREVTQ0VORElORyIsIm9yZGVyQnkiOiJGUk9OVEVORF9JRCJ9XQ%3D%3D">LeetCode</a> questions in Python and practice mock interviews with friends.</li>
<li>Invest a few hours researching the problems companies you like are working on and get data on how they are likely to approach them.
<ul>
<li>Have specific questions and the ability to discuss their problems in detail.</li>
</ul></li>
</ul>
</section>
<section id="plan-b" class="level3">
<h3 class="anchored" data-anchor-id="plan-b">Plan B</h3>
<ul>
<li>Apply for software roles closely related to machine learning.</li>
<li>Apply for software roles in companies that do a lot of ML.</li>
<li>Apply for developer advocacy and content marketing roles in ML companies.</li>
<li>Apply for product manager and analytic roles related to ML.</li>
<li>Bid on ML contracting opportunities or software projects related to ML.</li>
</ul>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://www.nomldegree.com/l/no-ml-degree">No ML Degree: How to Land Your First Machine Learning Job Without a Degree</a></li>
</ul>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>career</category>
  <category>notes</category>
  <guid>christianjmills.com/posts/no-ml-degree-book-notes/index.html</guid>
  <pubDate>Fri, 27 May 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on The Hugging Face Deep RL Class Pt.2</title>
  <link>christianjmills.com/posts/hugging-face-deep-rl-course-notes/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Types of Value-Based Methods</li>
<li>The Bellman Equation</li>
<li>Monte Carlo vs Temporal Difference Learning</li>
<li>Introducing Q-Learning</li>
<li>Lab</li>
<li>References</li>
</ul>
<section id="types-of-value-based-methods" class="level2">
<h2 class="anchored" data-anchor-id="types-of-value-based-methods">Types of Value-Based Methods</h2>
<ul>
<li>The value of a state is the expected discounted return from starting in that state and following the policy.</li>
<li>Value-based methods involve learning a value function that maps a state to the expected value of being in that state.</li>
<li>Finding an optimal value function leads to having an optimal policy.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cpi%5E%7B%5C*%7D(s)%20=%20argmax_%7Ba%7D%20Q%5E%7B%5C*%7D(s,a)"></li>
<li>Value-based methods require us to define how the agent acts (i.e., the policy) based on the predicted value map.</li>
<li>Greedy policies always take the action that leads to the biggest reward.</li>
<li>Epsilon-Greedy policies switch between exploring random actions and taking actions with the highest known reward.
<ul>
<li>The probability of exploring random actions is high at the beginning of training and decreases as training progresses.</li>
</ul></li>
</ul>
<section id="the-state-value-function" class="level3">
<h3 class="anchored" data-anchor-id="the-state-value-function">The State-Value function</h3>
<ul>
<li>The state-value function, for each state <img src="https://latex.codecogs.com/png.latex?S_%7Bt%7D">, outputs the expected return <img src="https://latex.codecogs.com/png.latex?E_%7B%5Cpi%7D%5Cleft%5B%20G_%7Bt%7D%20%5Cright%5D"> if the agent starts in that state <img src="https://latex.codecogs.com/png.latex?S_%7Bt%7D"> and then follows the policy <img src="https://latex.codecogs.com/png.latex?%5Cpi"> forever.</li>
<li><img src="https://latex.codecogs.com/png.latex?V_%7B%5Cpi%7D(s)%20=%20E_%7B%5Cpi%7D%5Cleft%5B%20G%20_%7Bt%7D%20%5Cvert%20S_%7Bt%7D%20=%20s%20%5Cright%5D"></li>
</ul>
</section>
<section id="the-action-value-function" class="level3">
<h3 class="anchored" data-anchor-id="the-action-value-function">The Action-Value function</h3>
<ul>
<li>The action-value function outputs the expected return $E_{}$ for each state-action pair <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20S_%7Bt%7D,%20A_%7Bt%7D%20%5Cright)"> if the agent takes a given action <img src="https://latex.codecogs.com/png.latex?A_%7Bt%7D"> when starting in a given state <img src="https://latex.codecogs.com/png.latex?S_%7Bt%7D"> and then follows the policy <img src="https://latex.codecogs.com/png.latex?%5Cpi"> forever.</li>
<li><img src="https://latex.codecogs.com/png.latex?Q_%7B%5Cpi%7D%20(s,a)%20=%20E_%7B%5Cpi%7D%20%5Cleft%5B%20G_%7Bt%7D%20%5Cvert%20S_%7Bt%7D%20=%20s,%20A_%7Bt%7D%20=%20a%20%5Cright%5D"></li>
</ul>
</section>
</section>
<section id="the-bellman-equation" class="level2">
<h2 class="anchored" data-anchor-id="the-bellman-equation">The Bellman Equation</h2>
<ul>
<li>The Bellman equation simplifies our value estimation.</li>
<li>The Bellman equation is a recursive equation that allows us to consider the value of any state <img src="https://latex.codecogs.com/png.latex?S_%7Bt%7D"> as the immediate reward <img src="https://latex.codecogs.com/png.latex?R_%7Bt+1%7D"> plus the discounted value of the state that follows <img src="https://latex.codecogs.com/png.latex?gamma%20%5Ccdot%20V(S_%7Bt+1%7D)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?V_%7B%5Cpi%7D(s)%20=%20E_%7B%5Cpi%7D%20%5Cleft%5B%20R_%7Bt+1%7D%20+%20%5Cgamma%20%5Ccdot%20V_%7B%5Cpi%7D(S_%7Bt+1%7D)%20%5Cvert%20S_%7Bt%7D%20=%20s%20%5Cright%5D"></li>
</ul>
</section>
<section id="monte-carlo-vs-temporal-difference-learning" class="level2">
<h2 class="anchored" data-anchor-id="monte-carlo-vs-temporal-difference-learning">Monte Carlo vs Temporal Difference Learning</h2>
<ul>
<li>Monte Carlo uses an entire episode of experience before learning.</li>
<li>Temporal difference learning learns after each step.</li>
</ul>
<section id="monte-carlo-learning-at-the-end-of-the-episode" class="level3">
<h3 class="anchored" data-anchor-id="monte-carlo-learning-at-the-end-of-the-episode">Monte Carlo: learning at the end of the episode</h3>
<ul>
<li>Monte Carlo waits until the end of the episode, calculates the total rewards <img src="https://latex.codecogs.com/png.latex?G_%7Bt%7D">, and uses it as a target for updating the value function <img src="https://latex.codecogs.com/png.latex?V(S_%7Bt%7D)"> using a learning rate <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</li>
<li><img src="https://latex.codecogs.com/png.latex?V(S_%7Bt%7D)%20%5Cleftarrow%20V(S_%7Bt%7D)%20+%20%5Calpha%20%5Cleft%5BG_%7Bt%7D%20-%20V(S_%7Bt%7D)%20%5Cright%5D"></li>
<li>At the end of each episode, we have a list of States, Actions, Rewards, and new States.</li>
<li>The agent improves by running more and more episodes.</li>
<li>Monte Carlo uses the actual accurate discounted return of an episode.</li>
</ul>
</section>
<section id="temporal-difference-learning-learning-at-each-step" class="level3">
<h3 class="anchored" data-anchor-id="temporal-difference-learning-learning-at-each-step">Temporal Difference Learning: learning at each step</h3>
<ul>
<li>Temporal difference waits for one interaction <img src="https://latex.codecogs.com/png.latex?S_%7Bt+1%7D">, forms a TD target <img src="https://latex.codecogs.com/png.latex?R_%7Bt+1%7D%20+%20%5Cgamma%20%5Ccdot%20V(S_%7Bt+1%7D)">, and updates the value function <img src="https://latex.codecogs.com/png.latex?V(S_%7Bt%7D)"> using the immediate reward plus <img src="https://latex.codecogs.com/png.latex?R_%7Bt+1%7D"> the discounted value of the following state <img src="https://latex.codecogs.com/png.latex?gamma%20%5Ccdot%20V(S_%7Bt+1%7D)"> scaled by a learning rate <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</li>
<li><img src="https://latex.codecogs.com/png.latex?V(S_%7Bt%7D)%20%5Cleftarrow%20V(S_%7Bt%7D)%20+%20%5Calpha%20%5Cleft%5BR_%7Bt+1%7D%20+%20%5Cgamma%20%5Ccdot%20V(S_%7Bt+1%7D)%20-%20V(S_%7Bt%7D)%20%5Cright%5D"></li>
<li>TD Learning that waits for one step is TD(0) or one-step TD.</li>
<li>The agent improves by running more and more steps.</li>
<li>TD Learning uses an estimated return called TD target.</li>
</ul>
</section>
</section>
<section id="introducing-q-learning" class="level2">
<h2 class="anchored" data-anchor-id="introducing-q-learning">Introducing Q-Learning</h2>
<section id="what-is-q-learning" class="level3">
<h3 class="anchored" data-anchor-id="what-is-q-learning">What is Q-Learning?</h3>
<ul>
<li>Q-Learning (a.k.a. Sarsamax) is an off-policy value-based method that uses a TD approach to train its action-value function called the Q-Function.</li>
<li>Off-policy refers to using a different policy for acting and updating.
<ul>
<li>We use a greedy policy for updating the action-value function and an epsilon-greedy function for choosing actions.</li>
</ul></li>
<li>The “Q” refers to the quality of a given action in a given state.</li>
<li>The Q-Function maintains a Q-table that tracks the value of each possible state-action pair.</li>
<li>Each cell in the Q-table stores the value from taking a given action in a given state.</li>
<li>We initialize the values for each state-action pair in the Q-table to 0.</li>
</ul>
</section>
<section id="the-q-learning-algorithm" class="level3">
<h3 class="anchored" data-anchor-id="the-q-learning-algorithm">The Q-Learning algorithm</h3>
<ul>
<li>Q Learning waits for one interaction, forms a TD target <img src="https://latex.codecogs.com/png.latex?R_%7Bt+1%7D%20+%20%5Cgamma%20max_%7Ba%7D%20Q(S_%7Bt+1%7D%20,%20a)">, and updates the Q-value <img src="https://latex.codecogs.com/png.latex?Q(S_%7Bt%7D%20,%20A_%7Bt%7D%20)"> for the state-action pair $(S_{t} , A_{t} ) $ in the Q-table using the immediate reward <img src="https://latex.codecogs.com/png.latex?R_%7Bt+1%7D"> plus the discounted optimal (i.e., greedy) Q-Value of the following state <img src="https://latex.codecogs.com/png.latex?%5Cgamma%20max_%7Ba%7D%20Q(S_%7Bt+1%7D%20,%20a)"> scaled by a learning rate <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</li>
<li>The Q-Values in the Q-table become more accurate with more steps.</li>
<li><strong>Input:</strong> policy <img src="https://latex.codecogs.com/png.latex?%5Cpi">, positive integer <img src="https://latex.codecogs.com/png.latex?num%5C_episodes">, small positive fraction <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?GLIE"> <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Cepsilon_%7Bi%7D%5C%7D"></li>
<li><strong>Output:</strong> value function <img src="https://latex.codecogs.com/png.latex?Q%20(%5Capprox%20q_%7B%5Cpi%7D)"> if num_episodes is large enough</li>
<li><strong>Steps:</strong>
<ol type="1">
<li>Initialize <img src="https://latex.codecogs.com/png.latex?Q"> arbitrarily <img src="https://latex.codecogs.com/png.latex?(">e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?Q(s,a)%20=%200"> for all <img src="https://latex.codecogs.com/png.latex?s%20%5C%20%5Cepsilon%20S%20A(s)">, and <img src="https://latex.codecogs.com/png.latex?Q(terminal-state,%20%5Ccdot)%20=%200%20)"></li>
<li>for <img src="https://latex.codecogs.com/png.latex?i%20%5Cleftarrow%201"> to num_episodes
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?%5Cepsilon%20%5Cleftarrow%20%5Cepsilon_%7Bi%7D"></li>
<li>Observe <img src="https://latex.codecogs.com/png.latex?S_%7B0%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?t%20%5Cleftarrow%200"></li>
<li>repeat until <img src="https://latex.codecogs.com/png.latex?S_%7Bt%7D"> is terminal
<ol type="1">
<li>Choose action <img src="https://latex.codecogs.com/png.latex?A_%7Bt%7D"> using policy derived from <img src="https://latex.codecogs.com/png.latex?Q(e.g.,%20%5Cepsilon">-greedy<img src="https://latex.codecogs.com/png.latex?)"></li>
<li>Take action <img src="https://latex.codecogs.com/png.latex?A_%7Bt%7D"> and observe <img src="https://latex.codecogs.com/png.latex?R_%7Bt+1%7D,S_%7Bt+1%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?Q(S_%7Bt%7D,A_%7Bt%7D)%20%5Cleftarrow%20Q(S_%7Bt%7D,A_%7Bt%7D)%20+%20%5Calpha%20(R_%7Bt+1%7D%20+%20%5Cgamma%20%5Ccdot%20max_%7Ba%7DQ(S_%7Bt+1%7D,%20a)%20-%20Q(S_%7Bt%7D,%20A_%7Bt%7D))"></li>
<li><img src="https://latex.codecogs.com/png.latex?t%20%5Cleftarrow%20t%20+%201"></li>
</ol></li>
</ol></li>
<li>return <img src="https://latex.codecogs.com/png.latex?Q"></li>
</ol></li>
</ul>
</section>
<section id="off-policy-vs-on-policy" class="level3">
<h3 class="anchored" data-anchor-id="off-policy-vs-on-policy">Off-policy vs On-policy</h3>
<ul>
<li>Off-policy refers to using a different policy for acting and updating.</li>
<li>On-policy refers to using the same policy for acting and updating.</li>
</ul>
</section>
</section>
<section id="lab" class="level2">
<h2 class="anchored" data-anchor-id="lab">Lab</h2>
<ul>
<li><strong>Objective:</strong> Code a Reinforcement Learning agent from scratch to play <a href="https://www.gymlibrary.ml/environments/toy_text/frozen_lake/">FrozenLake</a> and <a href="https://www.gymlibrary.ml/environments/toy_text/taxi/">Taxi</a> using Q-Learning, share it to the community, and experiment with different configurations.</li>
<li><strong>Environments:</strong>
<ul>
<li><a href="https://www.gymlibrary.ml/environments/toy_text/frozen_lake/">FrozenLake-v1</a>: The agent needs to go from the starting state (S) to the goal state (G) by walking only on frozen tiles (F) and avoiding holes (H).</li>
<li><a href="https://www.gymlibrary.ml/environments/toy_text/taxi/">Taxi-v3</a>: The agent needs to learn to navigate a city to transport its passengers from point A to point B.</li>
</ul></li>
<li><a href="https://github.com/huggingface/deep-rl-class">Syllabus</a></li>
<li><a href="https://discord.gg/aYka4Yhff9">Discord server</a></li>
<li><a href="https://discord.gg/aYka4Yhff9">#study-group-unit2 discord channel</a></li>
</ul>
<section id="prerequisites" class="level3">
<h3 class="anchored" data-anchor-id="prerequisites">Prerequisites</h3>
<ul>
<li><a href="https://github.com/huggingface/deep-rl-class/blob/main/unit2/README.md">Unit 2 README</a></li>
<li><a href="https://huggingface.co/blog/deep-rl-q-part1">An Introduction to Q-Learning Part 1</a></li>
<li><a href="https://huggingface.co/blog/deep-rl-q-part2">An Introduction to Q-Learning Part 2</a></li>
</ul>
</section>
<section id="objectives" class="level3">
<h3 class="anchored" data-anchor-id="objectives">Objectives</h3>
<ul>
<li>Be able to use Gym, the environment library.</li>
<li>Be able to code a Q-Learning agent from scratch.</li>
<li>Be able to push your trained agent and the code to the Hub with a video replay and an evaluation score.</li>
</ul>
<p><strong>Create and run a virual screen</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Virtual display</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> pyvirtualdisplay <span class="im" style="color: #00769E;">import</span> Display</span>
<span id="cb1-3"></span>
<span id="cb1-4">virtual_display <span class="op" style="color: #5E5E5E;">=</span> Display(visible<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1400</span>, <span class="dv" style="color: #AD0000;">900</span>))</span>
<span id="cb1-5">virtual_display.start()</span></code></pre></div>
<pre class="text"><code>&lt;pyvirtualdisplay.display.Display at 0x7fea103d3b20&gt;</code></pre>
<p><strong>Import the packages</strong> - <code>random</code>: To generate random numbers (that will be useful for Epsilon-Greedy Policy). - <code>imageio</code>: To generate a replay video</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">import</span> gym</span>
<span id="cb3-3"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> imageio</span>
<span id="cb3-5"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="im" style="color: #00769E;">import</span> pickle5 <span class="im" style="color: #00769E;">as</span> pickle</span></code></pre></div>
<pre class="text"><code>/home/innom-dt/mambaforge/envs/hf-drl-class-unit2/lib/python3.9/site-packages/gym/envs/registration.py:398: UserWarning: [33mWARN: Custom namespace `ALE` is being overridden by namespace `ALE`. If you are developing a plugin you shouldn't specify a namespace in `register` calls. The namespace is specified through the entry point package metadata.[0m
  logger.warn(</code></pre>
</section>
<section id="create-and-understand-frozenlake-environment-â" class="level3">
<h3 class="anchored" data-anchor-id="create-and-understand-frozenlake-environment-â">Create and understand <a href="https://www.gymlibrary.ml/environments/toy_text/frozen_lake/">FrozenLake environment â</a></h3>
<ul>
<li><a href="https://www.gymlibrary.ml/environments/toy_text/frozen_lake/">Documentation</a></li>
<li>The Q-Learning agent needs to navigate from the starting state (S) to the goal state (G) by walking only on frozen tiles (F) and avoid holes (H).</li>
<li>We can have two sizes of environment:
<ul>
<li><code>map_name="4x4"</code>: a 4x4 grid version</li>
<li><code>map_name="8x8"</code>: a 8x8 grid version</li>
</ul></li>
<li>The environment has two modes:
<ul>
<li><code>is_slippery=False</code>: The agent always moves in the intended direction due to the non-slippery nature of the frozen lake.</li>
<li><code>is_slippery=True</code>: The agent may not always move in the intended direction due to the slippery nature of the frozen lake (stochastic).</li>
</ul></li>
</ul>
<p><strong>Create a FrozenLake-v1 environment with a 4x4 non-slippery map</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">env <span class="op" style="color: #5E5E5E;">=</span> gym.make(<span class="st" style="color: #20794D;">"FrozenLake-v1"</span>, map_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"4x4"</span>, is_slippery<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<p><strong>(Optional)</strong> Define a custom grid: * “S”: start position * “F”: frozen tile * “H”: hole tile * “G”: gift tile</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Custom 4x4 grid</span></span>
<span id="cb6-2">desc<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"SFFF"</span>, <span class="st" style="color: #20794D;">"FHFH"</span>, <span class="st" style="color: #20794D;">"FFFH"</span>, <span class="st" style="color: #20794D;">"HFFG"</span>]</span>
<span id="cb6-3">gym.make(<span class="st" style="color: #20794D;">'FrozenLake-v1'</span>, desc<span class="op" style="color: #5E5E5E;">=</span>desc, is_slippery<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<p><strong>Note:</strong> This custom grid arrangement would like like the map below.</p>
</section>
<section id="inspect-the-environment" class="level3">
<h3 class="anchored" data-anchor-id="inspect-the-environment">Inspect the environment</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">env.reset()</span>
<span id="cb7-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"_____OBSERVATION SPACE_____ </span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb7-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Observation Space"</span>, env.observation_space)</span>
<span id="cb7-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Sample observation"</span>, env.observation_space.sample()) <span class="co" style="color: #5E5E5E;"># Get a random observation</span></span></code></pre></div>
<pre class="text"><code>_____OBSERVATION SPACE_____ 

Observation Space Discrete(16)
Sample observation 9</code></pre>
<p><strong>Note:</strong> The observation is a value representing the agentâs current position as <img src="https://latex.codecogs.com/png.latex?current%5C_row%20%5Ccdot%20nrows%20+%20current%5C_col">, where both the row and col start at 0.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> _____ACTION SPACE_____ </span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Action Space Shape"</span>, env.action_space.n)</span>
<span id="cb9-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Action Space Sample"</span>, env.action_space.sample()) <span class="co" style="color: #5E5E5E;"># Take a random action</span></span></code></pre></div>
<pre class="text"><code> _____ACTION SPACE_____ 

Action Space Shape 4
Action Space Sample 3</code></pre>
<p><strong>Action Space:</strong> * 0: GO LEFT * 1: GO DOWN * 2: GO RIGHT * 3: GO UP</p>
<p><strong>Reward Function:</strong> * Reach goal: +1 * Reach hole: 0 * Reach frozen: 0</p>
</section>
<section id="create-and-initialize-the-q-table" class="level3">
<h3 class="anchored" data-anchor-id="create-and-initialize-the-q-table">Create and Initialize the Q-table</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">state_space <span class="op" style="color: #5E5E5E;">=</span> env.observation_space.n</span>
<span id="cb11-2">action_space <span class="op" style="color: #5E5E5E;">=</span> env.action_space.n</span>
<span id="cb11-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"There are </span><span class="sc" style="color: #5E5E5E;">{</span>state_space<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> possible states and </span><span class="sc" style="color: #5E5E5E;">{</span>action_space<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> possible actions"</span>)</span></code></pre></div>
<pre class="text"><code>There are 16 possible states and 4 possible actions</code></pre>
<p><strong>Define a function to initialize a Q-table</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">def</span> initialize_q_table(state_space, action_space):</span>
<span id="cb13-2">    <span class="cf" style="color: #003B4F;">return</span> np.zeros((state_space, action_space))</span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb14-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb14-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb14-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> display_qtable(qtable, actions, num_rows, num_cols):</span>
<span id="cb15-2">    indices <span class="op" style="color: #5E5E5E;">=</span> np.array(np.meshgrid(<span class="op" style="color: #5E5E5E;">*</span>np.indices((num_rows, num_cols), sparse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))).T.reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb15-3">    map_coords <span class="op" style="color: #5E5E5E;">=</span> [<span class="ss" style="color: #20794D;">f"(</span><span class="sc" style="color: #5E5E5E;">{</span>r<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">{</span>c<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span> <span class="cf" style="color: #003B4F;">for</span> r,c <span class="kw" style="color: #003B4F;">in</span> indices]</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;">return</span> pd.DataFrame(qtable, index<span class="op" style="color: #5E5E5E;">=</span>map_coords, columns<span class="op" style="color: #5E5E5E;">=</span>actions)</span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">Qtable_frozenlake <span class="op" style="color: #5E5E5E;">=</span> initialize_q_table(state_space, action_space)</span>
<span id="cb16-2">action_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Left'</span>, <span class="st" style="color: #20794D;">'Down'</span>, <span class="st" style="color: #20794D;">'Right'</span>, <span class="st" style="color: #20794D;">'Up'</span>]</span>
<span id="cb16-3">display_qtable(Qtable_frozenlake, action_names, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Left
</th>
<th>
Down
</th>
<th>
Right
</th>
<th>
Up
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
(0,0)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(0,1)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(0,2)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(0,3)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(1,0)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(1,1)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(1,2)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(1,3)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(2,0)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(2,1)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(2,2)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(2,3)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(3,0)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(3,1)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(3,2)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
(3,3)
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="define-the-greedy-policy" class="level3">
<h3 class="anchored" data-anchor-id="define-the-greedy-policy">Define the greedy policy</h3>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> greedy_policy(Qtable, state):</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;"># Exploitation: take the action with the highest state, action value</span></span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;">return</span> np.argmax(Qtable[state])</span></code></pre></div>
</section>
<section id="define-the-epsilon-greedy-policy" class="level3">
<h3 class="anchored" data-anchor-id="define-the-epsilon-greedy-policy">Define the epsilon-greedy policy</h3>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> epsilon_greedy_policy(Qtable, state):</span>
<span id="cb18-2">    <span class="co" style="color: #5E5E5E;"># Generate a random number in the interval [0, 1)</span></span>
<span id="cb18-3">    random_num <span class="op" style="color: #5E5E5E;">=</span> random.random()</span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;"># if random_num &gt; greater than epsilon --&gt; exploitation, else --&gt; exploration</span></span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;">return</span> greedy_policy(Qtable, state) <span class="cf" style="color: #003B4F;">if</span> random_num <span class="op" style="color: #5E5E5E;">&gt;</span> epsilon <span class="cf" style="color: #003B4F;">else</span> env.action_space.sample()</span></code></pre></div>
</section>
<section id="define-the-hyperparameters" class="level3">
<h3 class="anchored" data-anchor-id="define-the-hyperparameters">Define the hyperparameters</h3>
<ul>
<li>We can use a progressive decay of the epsilon to make sure our agent explores enough of the state space to learn a good value approximation.</li>
<li>Decreasing the epsilon too quickly might cause the agent to get stuck by not exploring enough of the state space.</li>
</ul>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Training parameters</span></span>
<span id="cb19-2">n_training_episodes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10000</span>  <span class="co" style="color: #5E5E5E;"># Total training episodes</span></span>
<span id="cb19-3">learning_rate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.7</span>          <span class="co" style="color: #5E5E5E;"># Learning rate</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># Evaluation parameters</span></span>
<span id="cb19-6">n_eval_episodes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span>        <span class="co" style="color: #5E5E5E;"># Total number of test episodes</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;"># Environment parameters</span></span>
<span id="cb19-9">env_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"FrozenLake-v1"</span>     <span class="co" style="color: #5E5E5E;"># Name of the environment</span></span>
<span id="cb19-10">max_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">99</span>               <span class="co" style="color: #5E5E5E;"># Max steps per episode</span></span>
<span id="cb19-11">gamma <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.95</span>                 <span class="co" style="color: #5E5E5E;"># Discounting rate</span></span>
<span id="cb19-12">eval_seed <span class="op" style="color: #5E5E5E;">=</span> []               <span class="co" style="color: #5E5E5E;"># The evaluation seed of the environment</span></span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;"># Exploration parameters</span></span>
<span id="cb19-15">epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span>                 <span class="co" style="color: #5E5E5E;"># Exploration rate</span></span>
<span id="cb19-16">max_epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span>             <span class="co" style="color: #5E5E5E;"># Exploration probability at start</span></span>
<span id="cb19-17">min_epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.05</span>            <span class="co" style="color: #5E5E5E;"># Minimum exploration probability </span></span>
<span id="cb19-18">decay_rate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.005</span>            <span class="co" style="color: #5E5E5E;"># Exponential decay rate for exploration prob</span></span></code></pre></div>
</section>
<section id="create-the-training-loop-method" class="level3">
<h3 class="anchored" data-anchor-id="create-the-training-loop-method">Create the training loop method</h3>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;">def</span> train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable):</span>
<span id="cb20-2">    <span class="cf" style="color: #003B4F;">for</span> episode <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_training_episodes):</span>
<span id="cb20-3">        <span class="co" style="color: #5E5E5E;"># Reduce epsilon (because we need less and less exploration)</span></span>
<span id="cb20-4">        epsilon <span class="op" style="color: #5E5E5E;">=</span> min_epsilon <span class="op" style="color: #5E5E5E;">+</span> (max_epsilon <span class="op" style="color: #5E5E5E;">-</span> min_epsilon)<span class="op" style="color: #5E5E5E;">*</span>np.exp(<span class="op" style="color: #5E5E5E;">-</span>decay_rate<span class="op" style="color: #5E5E5E;">*</span>episode)</span>
<span id="cb20-5">        <span class="co" style="color: #5E5E5E;"># Reset the environment</span></span>
<span id="cb20-6">        state <span class="op" style="color: #5E5E5E;">=</span> env.reset()</span>
<span id="cb20-7">        step <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb20-8">        done <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb20-9">        </span>
<span id="cb20-10">        <span class="co" style="color: #5E5E5E;"># repeat</span></span>
<span id="cb20-11">        <span class="cf" style="color: #003B4F;">for</span> step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(max_steps):</span>
<span id="cb20-12">            <span class="co" style="color: #5E5E5E;"># Choose the action At using epsilon greedy policy</span></span>
<span id="cb20-13">            action <span class="op" style="color: #5E5E5E;">=</span> epsilon_greedy_policy(Qtable, state)</span>
<span id="cb20-14">            </span>
<span id="cb20-15">            <span class="co" style="color: #5E5E5E;"># Take action At and observe Rt+1 and St+1</span></span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;"># Take the action (a) and observe the outcome state(s') and reward (r)</span></span>
<span id="cb20-17">            new_state, reward, done, info <span class="op" style="color: #5E5E5E;">=</span> env.step(action)</span>
<span id="cb20-18">            <span class="co" style="color: #5E5E5E;"># Update Q(s,a):= Q(s,a) + lr [R(s,a) + gamma * max Q(s',a') - Q(s,a)]</span></span>
<span id="cb20-19">            td_target <span class="op" style="color: #5E5E5E;">=</span> reward <span class="op" style="color: #5E5E5E;">+</span> gamma <span class="op" style="color: #5E5E5E;">*</span> np.<span class="bu" style="color: null;">max</span>(Qtable[new_state])</span>
<span id="cb20-20">            Qtable[state][action] <span class="op" style="color: #5E5E5E;">=</span> Qtable[state][action] <span class="op" style="color: #5E5E5E;">+</span> learning_rate <span class="op" style="color: #5E5E5E;">*</span> (td_target <span class="op" style="color: #5E5E5E;">-</span> Qtable[state][action])</span>
<span id="cb20-21">            </span>
<span id="cb20-22">            <span class="co" style="color: #5E5E5E;"># If done, finish the episode</span></span>
<span id="cb20-23">            <span class="cf" style="color: #003B4F;">if</span> done:</span>
<span id="cb20-24">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb20-25">            </span>
<span id="cb20-26">            <span class="co" style="color: #5E5E5E;"># Our state is the new state</span></span>
<span id="cb20-27">            state <span class="op" style="color: #5E5E5E;">=</span> new_state</span>
<span id="cb20-28">    <span class="cf" style="color: #003B4F;">return</span> Qtable</span></code></pre></div>
</section>
<section id="train-the-q-learning-agent" class="level3">
<h3 class="anchored" data-anchor-id="train-the-q-learning-agent">Train the Q-Learning agent</h3>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">Qtable_frozenlake <span class="op" style="color: #5E5E5E;">=</span> train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable_frozenlake)</span></code></pre></div>
</section>
<section id="inspect-the-updated-q-learning-table" class="level3">
<h3 class="anchored" data-anchor-id="inspect-the-updated-q-learning-table">Inspect the updated Q-Learning table</h3>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">display_qtable(Qtable_frozenlake, action_names, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Left
</th>
<th>
Down
</th>
<th>
Right
</th>
<th>
Up
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
(0,0)
</th>
<td>
0.735092
</td>
<td>
0.773781
</td>
<td>
0.773781
</td>
<td>
0.735092
</td>
</tr>
<tr>
<th>
(0,1)
</th>
<td>
0.735092
</td>
<td>
0.000000
</td>
<td>
0.814506
</td>
<td>
0.773781
</td>
</tr>
<tr>
<th>
(0,2)
</th>
<td>
0.773781
</td>
<td>
0.857375
</td>
<td>
0.773781
</td>
<td>
0.814506
</td>
</tr>
<tr>
<th>
(0,3)
</th>
<td>
0.814506
</td>
<td>
0.000000
</td>
<td>
0.773781
</td>
<td>
0.773781
</td>
</tr>
<tr>
<th>
(1,0)
</th>
<td>
0.773781
</td>
<td>
0.814506
</td>
<td>
0.000000
</td>
<td>
0.735092
</td>
</tr>
<tr>
<th>
(1,1)
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
(1,2)
</th>
<td>
0.000000
</td>
<td>
0.902500
</td>
<td>
0.000000
</td>
<td>
0.814506
</td>
</tr>
<tr>
<th>
(1,3)
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
(2,0)
</th>
<td>
0.814506
</td>
<td>
0.000000
</td>
<td>
0.857375
</td>
<td>
0.773781
</td>
</tr>
<tr>
<th>
(2,1)
</th>
<td>
0.814506
</td>
<td>
0.902500
</td>
<td>
0.902500
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
(2,2)
</th>
<td>
0.857375
</td>
<td>
0.950000
</td>
<td>
0.000000
</td>
<td>
0.857375
</td>
</tr>
<tr>
<th>
(2,3)
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
(3,0)
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
(3,1)
</th>
<td>
0.000000
</td>
<td>
0.902500
</td>
<td>
0.950000
</td>
<td>
0.857375
</td>
</tr>
<tr>
<th>
(3,2)
</th>
<td>
0.902500
</td>
<td>
0.950000
</td>
<td>
1.000000
</td>
<td>
0.902500
</td>
</tr>
<tr>
<th>
(3,3)
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="define-the-evaluation-method" class="level3">
<h3 class="anchored" data-anchor-id="define-the-evaluation-method">Define the evaluation method</h3>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;">def</span> evaluate_agent(env, max_steps, n_eval_episodes, Q, seed):</span>
<span id="cb23-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;">    Evaluate the agent for ``n_eval_episodes`` episodes and returns average reward and std of reward.</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;">    :param env: The evaluation environment</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;">    :param n_eval_episodes: Number of episode to evaluate the agent</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;">    :param Q: The Q-table</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;">    :param seed: The evaluation seed array (for taxi-v3)</span></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb23-9">    episode_rewards <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;">for</span> episode <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_eval_episodes):</span>
<span id="cb23-11">        <span class="cf" style="color: #003B4F;">if</span> seed:</span>
<span id="cb23-12">            state <span class="op" style="color: #5E5E5E;">=</span> env.reset(seed<span class="op" style="color: #5E5E5E;">=</span>seed[episode])</span>
<span id="cb23-13">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb23-14">            state <span class="op" style="color: #5E5E5E;">=</span> env.reset()</span>
<span id="cb23-15">        step <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb23-16">        done <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb23-17">        total_rewards_ep <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb23-18">    </span>
<span id="cb23-19">        <span class="cf" style="color: #003B4F;">for</span> step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(max_steps):</span>
<span id="cb23-20">            <span class="co" style="color: #5E5E5E;"># Take the action (index) that have the maximum expected future reward given that state</span></span>
<span id="cb23-21">            action <span class="op" style="color: #5E5E5E;">=</span> np.argmax(Q[state][:])</span>
<span id="cb23-22">            new_state, reward, done, info <span class="op" style="color: #5E5E5E;">=</span> env.step(action)</span>
<span id="cb23-23">            total_rewards_ep <span class="op" style="color: #5E5E5E;">+=</span> reward</span>
<span id="cb23-24">        </span>
<span id="cb23-25">            <span class="cf" style="color: #003B4F;">if</span> done:</span>
<span id="cb23-26">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb23-27">            state <span class="op" style="color: #5E5E5E;">=</span> new_state</span>
<span id="cb23-28">        episode_rewards.append(total_rewards_ep)</span>
<span id="cb23-29">    mean_reward <span class="op" style="color: #5E5E5E;">=</span> np.mean(episode_rewards)</span>
<span id="cb23-30">    std_reward <span class="op" style="color: #5E5E5E;">=</span> np.std(episode_rewards)</span>
<span id="cb23-31">    </span>
<span id="cb23-32">    <span class="cf" style="color: #003B4F;">return</span> mean_reward, std_reward</span></code></pre></div>
</section>
<section id="evaluate-theq-learning-agent" class="level3">
<h3 class="anchored" data-anchor-id="evaluate-theq-learning-agent">Evaluate theQ-Learning agent</h3>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">mean_reward, std_reward <span class="op" style="color: #5E5E5E;">=</span> evaluate_agent(env, max_steps, n_eval_episodes, Qtable_frozenlake, eval_seed)</span>
<span id="cb24-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Mean_reward=</span><span class="sc" style="color: #5E5E5E;">{</span>mean_reward<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;"> +/- </span><span class="sc" style="color: #5E5E5E;">{</span>std_reward<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>Mean_reward=1.00 +/- 0.00</code></pre>
<p><strong>Note:</strong> * The mean reward should be 1.0 * Try using the <a href="https://www.gymlibrary.ml/environments/toy_text/frozen_lake/">slippery version</a> of the map.</p>
</section>
<section id="publish-our-trained-model-on-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="publish-our-trained-model-on-the-hub">Publish our trained model on the Hub</h3>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="op" style="color: #5E5E5E;">%%</span>capture</span>
<span id="cb26-2"><span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> HfApi, HfFolder, Repository</span>
<span id="cb26-3"><span class="im" style="color: #00769E;">from</span> huggingface_hub.repocard <span class="im" style="color: #00769E;">import</span> metadata_eval_result, metadata_save</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb26-6"><span class="im" style="color: #00769E;">import</span> datetime</span>
<span id="cb26-7"><span class="im" style="color: #00769E;">import</span> json</span></code></pre></div>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">def</span> record_video(env, Qtable, out_directory, fps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb27-2">    images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb27-3">    done <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb27-4">    state <span class="op" style="color: #5E5E5E;">=</span> env.reset(seed<span class="op" style="color: #5E5E5E;">=</span>random.randint(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">500</span>))</span>
<span id="cb27-5">    img <span class="op" style="color: #5E5E5E;">=</span> env.render(mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rgb_array'</span>)</span>
<span id="cb27-6">    images.append(img)</span>
<span id="cb27-7">    <span class="cf" style="color: #003B4F;">while</span> <span class="kw" style="color: #003B4F;">not</span> done:</span>
<span id="cb27-8">        <span class="co" style="color: #5E5E5E;"># Take the action (index) that have the maximum expected future reward given that state</span></span>
<span id="cb27-9">        action <span class="op" style="color: #5E5E5E;">=</span> np.argmax(Qtable[state][:])</span>
<span id="cb27-10">        state, reward, done, info <span class="op" style="color: #5E5E5E;">=</span> env.step(action) <span class="co" style="color: #5E5E5E;"># We directly put next_state = state for recording logic</span></span>
<span id="cb27-11">        img <span class="op" style="color: #5E5E5E;">=</span> env.render(mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rgb_array'</span>)</span>
<span id="cb27-12">        images.append(img)</span>
<span id="cb27-13">    imageio.mimsave(out_directory, [np.array(img) <span class="cf" style="color: #003B4F;">for</span> i, img <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(images)], fps<span class="op" style="color: #5E5E5E;">=</span>fps)</span></code></pre></div>
<p><strong><a href="https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard">Leaderboard</a></strong></p>
<p><strong>Log into Hugging Face account</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> notebook_login</span>
<span id="cb28-2">notebook_login()</span></code></pre></div>
<pre class="text"><code>Login successful
Your token has been saved to /home/innom-dt/.huggingface/token</code></pre>
<p><strong>Create a model dictionnary that contains the hyperparameters and the Q_table</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">model <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb30-2">    <span class="st" style="color: #20794D;">"env_id"</span>: env_id,</span>
<span id="cb30-3">    <span class="st" style="color: #20794D;">"max_steps"</span>: max_steps,</span>
<span id="cb30-4">    <span class="st" style="color: #20794D;">"n_training_episodes"</span>: n_training_episodes,</span>
<span id="cb30-5">    <span class="st" style="color: #20794D;">"n_eval_episodes"</span>: n_eval_episodes,</span>
<span id="cb30-6">    <span class="st" style="color: #20794D;">"eval_seed"</span>: eval_seed,</span>
<span id="cb30-7"></span>
<span id="cb30-8">    <span class="st" style="color: #20794D;">"learning_rate"</span>: learning_rate,</span>
<span id="cb30-9">    <span class="st" style="color: #20794D;">"gamma"</span>: gamma,</span>
<span id="cb30-10"></span>
<span id="cb30-11">    <span class="st" style="color: #20794D;">"epsilon"</span>: epsilon,</span>
<span id="cb30-12">    <span class="st" style="color: #20794D;">"max_epsilon"</span>: max_epsilon,</span>
<span id="cb30-13">    <span class="st" style="color: #20794D;">"min_epsilon"</span>: min_epsilon,</span>
<span id="cb30-14">    <span class="st" style="color: #20794D;">"decay_rate"</span>: decay_rate,</span>
<span id="cb30-15"></span>
<span id="cb30-16">    <span class="st" style="color: #20794D;">"qtable"</span>: Qtable_frozenlake</span>
<span id="cb30-17">}</span>
<span id="cb30-18">model</span></code></pre></div>
<pre class="text"><code>{'env_id': 'FrozenLake-v1',
 'max_steps': 99,
 'n_training_episodes': 10000,
 'n_eval_episodes': 100,
 'eval_seed': [],
 'learning_rate': 0.7,
 'gamma': 0.95,
 'epsilon': 1.0,
 'max_epsilon': 1.0,
 'min_epsilon': 0.05,
 'decay_rate': 0.005,
 'qtable': array([[0.73509189, 0.77378094, 0.77378094, 0.73509189],
        [0.73509189, 0.        , 0.81450625, 0.77378094],
        [0.77378094, 0.857375  , 0.77378094, 0.81450625],
        [0.81450625, 0.        , 0.77378094, 0.77378094],
        [0.77378094, 0.81450625, 0.        , 0.73509189],
        [0.        , 0.        , 0.        , 0.        ],
        [0.        , 0.9025    , 0.        , 0.81450625],
        [0.        , 0.        , 0.        , 0.        ],
        [0.81450625, 0.        , 0.857375  , 0.77378094],
        [0.81450625, 0.9025    , 0.9025    , 0.        ],
        [0.857375  , 0.95      , 0.        , 0.857375  ],
        [0.        , 0.        , 0.        , 0.        ],
        [0.        , 0.        , 0.        , 0.        ],
        [0.        , 0.9025    , 0.95      , 0.857375  ],
        [0.9025    , 0.95      , 1.        , 0.9025    ],
        [0.        , 0.        , 0.        , 0.        ]])}</code></pre>
<p><strong>Publish the trained model on the Hub</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">username <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cj-mills"</span></span>
<span id="cb32-2">repo_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"q-FrozenLake-v1-4x4-noSlippery"</span></span>
<span id="cb32-3">push_to_hub(</span>
<span id="cb32-4">    repo_id<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>username<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>repo_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>,</span>
<span id="cb32-5">    model<span class="op" style="color: #5E5E5E;">=</span>model,</span>
<span id="cb32-6">    env<span class="op" style="color: #5E5E5E;">=</span>env)</span></code></pre></div>
<pre class="text"><code>{'env_id': 'FrozenLake-v1', 'max_steps': 99, 'n_training_episodes': 10000, 'n_eval_episodes': 100, 'eval_seed': [], 'learning_rate': 0.7, 'gamma': 0.95, 'epsilon': 1.0, 'max_epsilon': 1.0, 'min_epsilon': 0.05, 'decay_rate': 0.005, 'qtable': array([[0.73509189, 0.77378094, 0.77378094, 0.73509189],
       [0.73509189, 0.        , 0.81450625, 0.77378094],
       [0.77378094, 0.857375  , 0.77378094, 0.81450625],
       [0.81450625, 0.        , 0.77378094, 0.77378094],
       [0.77378094, 0.81450625, 0.        , 0.73509189],
       [0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.9025    , 0.        , 0.81450625],
       [0.        , 0.        , 0.        , 0.        ],
       [0.81450625, 0.        , 0.857375  , 0.77378094],
       [0.81450625, 0.9025    , 0.9025    , 0.        ],
       [0.857375  , 0.95      , 0.        , 0.857375  ],
       [0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.9025    , 0.95      , 0.857375  ],
       [0.9025    , 0.95      , 1.        , 0.9025    ],
       [0.        , 0.        , 0.        , 0.        ]]), 'map_name': '4x4', 'slippery': False}
Pushing repo q-FrozenLake-v1-4x4-noSlippery to the Hugging Face Hub
Your model is pushed to the hub. You can view your model here: https://huggingface.co/cj-mills/q-FrozenLake-v1-4x4-noSlippery</code></pre>
</section>
<section id="create-and-understand-taxi-v3" class="level3">
<h3 class="anchored" data-anchor-id="create-and-understand-taxi-v3">Create and understand <a href="https://www.gymlibrary.ml/environments/toy_text/taxi/">Taxi-v3</a></h3>
<ul>
<li><a href="https://www.gymlibrary.ml/environments/toy_text/taxi/">Documentation</a></li>
<li>There are four designated locations in the grid world indicated by R(ed), G(reen), Y(ellow), and B(lue).</li>
<li>The taxi starts off at a random square and the passenger is at a random location.</li>
<li>The taxi drives to the passengerâs location, picks up the passenger, drives to the passengerâs destination (another one of the four specified locations), and then drops off the passenger.</li>
<li>The episode ends once the taxi drops off the passenger.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/hugging-face-deep-rl-course-notes/part-2/https:/www.gymlibrary.ml/_images/taxi.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi.gif</figcaption><p></p>
</figure>
</div>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">env <span class="op" style="color: #5E5E5E;">=</span> gym.make(<span class="st" style="color: #20794D;">"Taxi-v3"</span>)</span></code></pre></div>
<p><strong>Note:</strong> There are 25 taxi positions, five possible passenger locations (including when the passenger is in the taxi), and four destination locations, meaning 500 discrete states.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">state_space <span class="op" style="color: #5E5E5E;">=</span> env.observation_space.n</span>
<span id="cb35-2">action_space <span class="op" style="color: #5E5E5E;">=</span> env.action_space.n</span>
<span id="cb35-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"There are </span><span class="sc" style="color: #5E5E5E;">{</span>state_space<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> possible states and </span><span class="sc" style="color: #5E5E5E;">{</span>action_space<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> possible actions"</span>)</span></code></pre></div>
<pre><code>There are 500 possible states and 6 possible actions</code></pre>
<p><strong>Action space:</strong> * 0: move south * 1: move north * 2: move east * 3: move west * 4: pickup passenger * 5: drop off passenger</p>
<p><strong>Reward function:</strong> * -1 per step unless other reward is triggered. * +20 delivering passenger. * -10 executing pickup and drop-off actions illegally.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Create our Q table with state_size rows and action_size columns (500x6)</span></span>
<span id="cb37-2">Qtable_taxi <span class="op" style="color: #5E5E5E;">=</span> initialize_q_table(state_space, action_space)</span>
<span id="cb37-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Q-table shape: "</span>, Qtable_taxi .shape)</span>
<span id="cb37-4">indices <span class="op" style="color: #5E5E5E;">=</span> np.array(np.meshgrid(<span class="op" style="color: #5E5E5E;">*</span>np.indices((<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>), sparse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))).T.reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb37-5">map_coords <span class="op" style="color: #5E5E5E;">=</span> [<span class="ss" style="color: #20794D;">f"TaxiPos: </span><span class="sc" style="color: #5E5E5E;">{</span>tp<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, PassLoc: </span><span class="sc" style="color: #5E5E5E;">{</span>pl<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, DestLoc: </span><span class="sc" style="color: #5E5E5E;">{</span>dl<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span> <span class="cf" style="color: #003B4F;">for</span> tp,pl,dl <span class="kw" style="color: #003B4F;">in</span> indices]</span>
<span id="cb37-6">action_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'move south'</span>, <span class="st" style="color: #20794D;">'move north'</span>, <span class="st" style="color: #20794D;">'move east'</span>, <span class="st" style="color: #20794D;">'move west'</span>, <span class="st" style="color: #20794D;">'pickup passenger'</span>, <span class="st" style="color: #20794D;">'drop off passenger'</span>]</span>
<span id="cb37-7">pd.DataFrame(Qtable_taxi, index<span class="op" style="color: #5E5E5E;">=</span>map_coords, columns<span class="op" style="color: #5E5E5E;">=</span>action_names)</span></code></pre></div>
<pre><code>Q-table shape:  (500, 6)</code></pre>
<div style="overflow-x:auto; overflow-y:auto; height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
move south
</th>
<th>
move north
</th>
<th>
move east
</th>
<th>
move west
</th>
<th>
pickup passenger
</th>
<th>
drop off passenger
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 0
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="define-the-hyperparameters-1" class="level3">
<h3 class="anchored" data-anchor-id="define-the-hyperparameters-1">Define the hyperparameters</h3>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Training parameters</span></span>
<span id="cb39-2">n_training_episodes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25000</span>   <span class="co" style="color: #5E5E5E;"># Total training episodes</span></span>
<span id="cb39-3">learning_rate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.7</span>           <span class="co" style="color: #5E5E5E;"># Learning rate</span></span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;"># Evaluation parameters</span></span>
<span id="cb39-6">n_eval_episodes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span>        <span class="co" style="color: #5E5E5E;"># Total number of test episodes</span></span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;"># Environment parameters</span></span>
<span id="cb39-9">env_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Taxi-v3"</span>           <span class="co" style="color: #5E5E5E;"># Name of the environment</span></span>
<span id="cb39-10">max_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">99</span>               <span class="co" style="color: #5E5E5E;"># Max steps per episode</span></span>
<span id="cb39-11">gamma <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.95</span>                 <span class="co" style="color: #5E5E5E;"># Discounting rate</span></span>
<span id="cb39-12"></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;"># Exploration parameters</span></span>
<span id="cb39-14">epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span>                 <span class="co" style="color: #5E5E5E;"># Exploration rate</span></span>
<span id="cb39-15">max_epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span>             <span class="co" style="color: #5E5E5E;"># Exploration probability at start</span></span>
<span id="cb39-16">min_epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.05</span>           <span class="co" style="color: #5E5E5E;"># Minimum exploration probability </span></span>
<span id="cb39-17">decay_rate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.005</span>            <span class="co" style="color: #5E5E5E;"># Exponential decay rate for exploration prob</span></span></code></pre></div>
<p><strong>DO NOT MODIFY EVAL_SEED</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># DO NOT MODIFY EVAL_SEED</span></span>
<span id="cb40-2">eval_seed <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">16</span>,<span class="dv" style="color: #AD0000;">54</span>,<span class="dv" style="color: #AD0000;">165</span>,<span class="dv" style="color: #AD0000;">177</span>,<span class="dv" style="color: #AD0000;">191</span>,<span class="dv" style="color: #AD0000;">191</span>,<span class="dv" style="color: #AD0000;">120</span>,<span class="dv" style="color: #AD0000;">80</span>,<span class="dv" style="color: #AD0000;">149</span>,<span class="dv" style="color: #AD0000;">178</span>,<span class="dv" style="color: #AD0000;">48</span>,<span class="dv" style="color: #AD0000;">38</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">125</span>,<span class="dv" style="color: #AD0000;">174</span>,<span class="dv" style="color: #AD0000;">73</span>,<span class="dv" style="color: #AD0000;">50</span>,<span class="dv" style="color: #AD0000;">172</span>,<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">148</span>,<span class="dv" style="color: #AD0000;">146</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">25</span>,<span class="dv" style="color: #AD0000;">40</span>,<span class="dv" style="color: #AD0000;">68</span>,<span class="dv" style="color: #AD0000;">148</span>,<span class="dv" style="color: #AD0000;">49</span>,<span class="dv" style="color: #AD0000;">167</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">97</span>,<span class="dv" style="color: #AD0000;">164</span>,<span class="dv" style="color: #AD0000;">176</span>,<span class="dv" style="color: #AD0000;">61</span>,<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">54</span>,<span class="dv" style="color: #AD0000;">55</span>,</span>
<span id="cb40-3"> <span class="dv" style="color: #AD0000;">161</span>,<span class="dv" style="color: #AD0000;">131</span>,<span class="dv" style="color: #AD0000;">184</span>,<span class="dv" style="color: #AD0000;">51</span>,<span class="dv" style="color: #AD0000;">170</span>,<span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">120</span>,<span class="dv" style="color: #AD0000;">113</span>,<span class="dv" style="color: #AD0000;">95</span>,<span class="dv" style="color: #AD0000;">126</span>,<span class="dv" style="color: #AD0000;">51</span>,<span class="dv" style="color: #AD0000;">98</span>,<span class="dv" style="color: #AD0000;">36</span>,<span class="dv" style="color: #AD0000;">135</span>,<span class="dv" style="color: #AD0000;">54</span>,<span class="dv" style="color: #AD0000;">82</span>,<span class="dv" style="color: #AD0000;">45</span>,<span class="dv" style="color: #AD0000;">95</span>,<span class="dv" style="color: #AD0000;">89</span>,<span class="dv" style="color: #AD0000;">59</span>,<span class="dv" style="color: #AD0000;">95</span>,<span class="dv" style="color: #AD0000;">124</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">113</span>,<span class="dv" style="color: #AD0000;">58</span>,<span class="dv" style="color: #AD0000;">85</span>,<span class="dv" style="color: #AD0000;">51</span>,<span class="dv" style="color: #AD0000;">134</span>,<span class="dv" style="color: #AD0000;">121</span>,<span class="dv" style="color: #AD0000;">169</span>,<span class="dv" style="color: #AD0000;">105</span>,<span class="dv" style="color: #AD0000;">21</span>,<span class="dv" style="color: #AD0000;">30</span>,<span class="dv" style="color: #AD0000;">11</span>,<span class="dv" style="color: #AD0000;">50</span>,<span class="dv" style="color: #AD0000;">65</span>,<span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">43</span>,<span class="dv" style="color: #AD0000;">82</span>,<span class="dv" style="color: #AD0000;">145</span>,<span class="dv" style="color: #AD0000;">152</span>,<span class="dv" style="color: #AD0000;">97</span>,<span class="dv" style="color: #AD0000;">106</span>,<span class="dv" style="color: #AD0000;">55</span>,<span class="dv" style="color: #AD0000;">31</span>,<span class="dv" style="color: #AD0000;">85</span>,<span class="dv" style="color: #AD0000;">38</span>,</span>
<span id="cb40-4"> <span class="dv" style="color: #AD0000;">112</span>,<span class="dv" style="color: #AD0000;">102</span>,<span class="dv" style="color: #AD0000;">168</span>,<span class="dv" style="color: #AD0000;">123</span>,<span class="dv" style="color: #AD0000;">97</span>,<span class="dv" style="color: #AD0000;">21</span>,<span class="dv" style="color: #AD0000;">83</span>,<span class="dv" style="color: #AD0000;">158</span>,<span class="dv" style="color: #AD0000;">26</span>,<span class="dv" style="color: #AD0000;">80</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">81</span>,<span class="dv" style="color: #AD0000;">32</span>,<span class="dv" style="color: #AD0000;">11</span>,<span class="dv" style="color: #AD0000;">28</span>,<span class="dv" style="color: #AD0000;">148</span>] <span class="co" style="color: #5E5E5E;"># Evaluation seed, this ensures that all classmates agents are trained on the same taxi starting position</span></span>
<span id="cb40-5">                                                          <span class="co" style="color: #5E5E5E;"># Each seed has a specific starting state</span></span></code></pre></div>
</section>
<section id="train-a-q-learning-agent" class="level3">
<h3 class="anchored" data-anchor-id="train-a-q-learning-agent">Train a Q-Learning agent</h3>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">Qtable_taxi <span class="op" style="color: #5E5E5E;">=</span> train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable_taxi)</span>
<span id="cb41-2">indices <span class="op" style="color: #5E5E5E;">=</span> np.array(np.meshgrid(<span class="op" style="color: #5E5E5E;">*</span>np.indices((<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>), sparse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))).T.reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb41-3">map_coords <span class="op" style="color: #5E5E5E;">=</span> [<span class="ss" style="color: #20794D;">f"TaxiPos: </span><span class="sc" style="color: #5E5E5E;">{</span>tp<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, PassLoc: </span><span class="sc" style="color: #5E5E5E;">{</span>pl<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, DestLoc: </span><span class="sc" style="color: #5E5E5E;">{</span>dl<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span> <span class="cf" style="color: #003B4F;">for</span> tp,pl,dl <span class="kw" style="color: #003B4F;">in</span> indices]</span>
<span id="cb41-4">action_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'move south'</span>, <span class="st" style="color: #20794D;">'move north'</span>, <span class="st" style="color: #20794D;">'move east'</span>, <span class="st" style="color: #20794D;">'move west'</span>, <span class="st" style="color: #20794D;">'pickup passenger'</span>, <span class="st" style="color: #20794D;">'drop off passenger'</span>]</span>
<span id="cb41-5">pd.DataFrame(Qtable_taxi, index<span class="op" style="color: #5E5E5E;">=</span>map_coords, columns<span class="op" style="color: #5E5E5E;">=</span>action_names)</span></code></pre></div>
<div style="overflow-x:auto; overflow-y:auto; height:500px">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
move south
</th>
<th>
move north
</th>
<th>
move east
</th>
<th>
move west
</th>
<th>
pickup passenger
</th>
<th>
drop off passenger
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 0
</th>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 0
</th>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 0
</th>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 0
</th>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 0
</th>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 0
</th>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
9.000000
</td>
<td>
20.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
-3.790024
</td>
<td>
3.949478
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 0
</th>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
1.951237
</td>
<td>
9.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 0
</th>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
5.209976
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 0
</th>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 0
</th>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 0
</th>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 0
</th>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 0
</th>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 0
</th>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 0
</th>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 0
</th>
<td>
12.580250
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
14.295000
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 0
</th>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 0
</th>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 0
</th>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 0
</th>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 0
</th>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 0
</th>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
14.295000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 0
</th>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 0
</th>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 0
</th>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 0
</th>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
3.949478
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 0
</th>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
18.000000
</td>
<td>
16.100000
</td>
<td>
9.000000
</td>
<td>
20.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
3.949478
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 0
</th>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
<td>
7.933492
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 0
</th>
<td>
-2.394933
</td>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 0
</th>
<td>
6.536817
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 0
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 0
</th>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 0
</th>
<td>
14.295000
</td>
<td>
18.000000
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 0
</th>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 0
</th>
<td>
14.295000
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
12.580250
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 0
</th>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 0
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 0
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 0
</th>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 0
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 0
</th>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 1
</th>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 1
</th>
<td>
12.580250
</td>
<td>
16.100000
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 1
</th>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 1
</th>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
12.580250
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 1
</th>
<td>
10.951237
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 1
</th>
<td>
10.951237
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 1
</th>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
14.295000
</td>
<td>
12.580250
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 1
</th>
<td>
10.951237
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 1
</th>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
3.949478
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 1
</th>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 1
</th>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 1
</th>
<td>
12.580250
</td>
<td>
16.100000
</td>
<td>
16.100000
</td>
<td>
12.580250
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 1
</th>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 1
</th>
<td>
14.295000
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 1
</th>
<td>
-2.394933
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 1
</th>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 1
</th>
<td>
-2.394933
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 1
</th>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 1
</th>
<td>
14.295000
</td>
<td>
18.000000
</td>
<td>
16.100000
</td>
<td>
14.295000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 1
</th>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 1
</th>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
12.580250
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 1
</th>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 1
</th>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 1
</th>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 1
</th>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 1
</th>
<td>
12.580250
</td>
<td>
16.100000
</td>
<td>
12.580250
</td>
<td>
14.295000
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 1
</th>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 1
</th>
<td>
16.100000
</td>
<td>
12.580250
</td>
<td>
12.580250
</td>
<td>
14.295000
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 1
</th>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
6.536817
</td>
<td>
3.949478
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 1
</th>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 1
</th>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 1
</th>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 1
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 1
</th>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 1
</th>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
7.933492
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 1
</th>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 1
</th>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 1
</th>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 1
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 1
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 1
</th>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 1
</th>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 2
</th>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 2
</th>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
10.951237
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 2
</th>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 2
</th>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 2
</th>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 2
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 2
</th>
<td>
6.536817
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 2
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 2
</th>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
14.295000
</td>
<td>
10.951237
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 2
</th>
<td>
16.100000
</td>
<td>
12.580250
</td>
<td>
12.580250
</td>
<td>
12.580250
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 2
</th>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 2
</th>
<td>
3.949478
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 2
</th>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 2
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 2
</th>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 2
</th>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 2
</th>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 2
</th>
<td>
12.580250
</td>
<td>
16.100000
</td>
<td>
14.295000
</td>
<td>
12.580250
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 2
</th>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 2
</th>
<td>
14.295000
</td>
<td>
10.951237
</td>
<td>
12.580250
</td>
<td>
14.295000
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 2
</th>
<td>
3.949478
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 2
</th>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 2
</th>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 2
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 2
</th>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 2
</th>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
12.580250
</td>
<td>
12.580250
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 2
</th>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 2
</th>
<td>
18.000000
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
16.100000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 2
</th>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 2
</th>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 2
</th>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 2
</th>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 2
</th>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 2
</th>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 2
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 2
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 2
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 2
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 2
</th>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 2
</th>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 2
</th>
<td>
-1.468351
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 2
</th>
<td>
1.614404
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 2
</th>
<td>
0.533683
</td>
<td>
2.752004
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 2
</th>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 2
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 2
</th>
<td>
-2.394933
</td>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 2
</th>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 2
</th>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 2
</th>
<td>
5.209976
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 1, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 2, DestLoc: 3
</th>
<td>
9.403676
</td>
<td>
12.580250
</td>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 3, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
9.403676
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 0, PassLoc: 4, DestLoc: 3
</th>
<td>
18.000000
</td>
<td>
14.295000
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 1, DestLoc: 3
</th>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 2, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 3, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 1, PassLoc: 4, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 1, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 2, DestLoc: 3
</th>
<td>
2.752004
</td>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 3, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 2, PassLoc: 4, DestLoc: 3
</th>
<td>
-4.111427
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 1, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 2, DestLoc: 3
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 3, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 3, PassLoc: 4, DestLoc: 3
</th>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 1, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 2, DestLoc: 3
</th>
<td>
10.951237
</td>
<td>
14.295000
</td>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
3.580250
</td>
<td>
3.580250
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 3, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 4, PassLoc: 4, DestLoc: 3
</th>
<td>
16.100000
</td>
<td>
12.580250
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
5.295000
</td>
<td>
5.295000
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 1, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 2, DestLoc: 3
</th>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 3, DestLoc: 3
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 5, PassLoc: 4, DestLoc: 3
</th>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-4.111427
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 1, DestLoc: 3
</th>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-4.111427
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 2, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 3, DestLoc: 3
</th>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 6, PassLoc: 4, DestLoc: 3
</th>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 1, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 2, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 3, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 7, PassLoc: 4, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 1, DestLoc: 3
</th>
<td>
10.951237
</td>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
1.951237
</td>
<td>
9.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 2, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
5.209976
</td>
<td>
-3.790024
</td>
<td>
3.949478
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 3, DestLoc: 3
</th>
<td>
18.000000
</td>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
18.000000
</td>
<td>
9.000000
</td>
<td>
20.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 8, PassLoc: 4, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
5.209976
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 1, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 2, DestLoc: 3
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 3, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 9, PassLoc: 4, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 1, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 2, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 3, DestLoc: 3
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 10, PassLoc: 4, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 1, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 2, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 3, DestLoc: 3
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 11, PassLoc: 4, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 1, DestLoc: 3
</th>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 2, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 3, DestLoc: 3
</th>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 12, PassLoc: 4, DestLoc: 3
</th>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 1, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 2, DestLoc: 3
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 3, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 13, PassLoc: 4, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 1, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 2, DestLoc: 3
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 3, DestLoc: 3
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 14, PassLoc: 4, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 1, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 2, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 3, DestLoc: 3
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
0.533683
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 15, PassLoc: 4, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 1, DestLoc: 3
</th>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 2, DestLoc: 3
</th>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 3, DestLoc: 3
</th>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 16, PassLoc: 4, DestLoc: 3
</th>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
7.933492
</td>
<td>
0.403676
</td>
<td>
0.403676
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 1, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 2, DestLoc: 3
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 3, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 17, PassLoc: 4, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 1, DestLoc: 3
</th>
<td>
-1.468351
</td>
<td>
-0.493001
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-10.468351
</td>
<td>
-10.468351
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 2, DestLoc: 3
</th>
<td>
1.614404
</td>
<td>
2.752004
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-7.385596
</td>
<td>
-7.385596
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 3, DestLoc: 3
</th>
<td>
0.533683
</td>
<td>
1.614404
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-8.466317
</td>
<td>
-8.466317
</td>
</tr>
<tr>
<th>
TaxiPos: 18, PassLoc: 4, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 1, DestLoc: 3
</th>
<td>
-2.394933
</td>
<td>
-1.468351
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-11.394933
</td>
<td>
-11.394933
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 2, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 3, DestLoc: 3
</th>
<td>
7.933492
</td>
<td>
6.536817
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
9.403676
</td>
<td>
-1.066508
</td>
</tr>
<tr>
<th>
TaxiPos: 19, PassLoc: 4, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
3.949478
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 1, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
5.209976
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 2, DestLoc: 3
</th>
<td>
9.403676
</td>
<td>
10.951237
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
0.403676
</td>
<td>
7.933492
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 3, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-2.463183
</td>
<td>
5.209976
</td>
</tr>
<tr>
<th>
TaxiPos: 20, PassLoc: 4, DestLoc: 3
</th>
<td>
18.000000
</td>
<td>
16.100000
</td>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
9.000000
</td>
<td>
20.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 1, DestLoc: 3
</th>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 2, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 3, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 21, PassLoc: 4, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 1, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
-1.468351
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 2, DestLoc: 3
</th>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
1.614404
</td>
<td>
-6.247996
</td>
<td>
-6.247996
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 3, DestLoc: 3
</th>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-0.493001
</td>
<td>
0.533683
</td>
<td>
-9.493001
</td>
<td>
-9.493001
</td>
</tr>
<tr>
<th>
TaxiPos: 22, PassLoc: 4, DestLoc: 3
</th>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-4.111427
</td>
<td>
-3.275187
</td>
<td>
-13.111427
</td>
<td>
-13.111427
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 1, DestLoc: 3
</th>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-3.275187
</td>
<td>
-2.394933
</td>
<td>
-12.275187
</td>
<td>
-12.275187
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 2, DestLoc: 3
</th>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 3, DestLoc: 3
</th>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
7.933492
</td>
<td>
-2.463183
</td>
<td>
-2.463183
</td>
</tr>
<tr>
<th>
TaxiPos: 23, PassLoc: 4, DestLoc: 3
</th>
<td>
3.949478
</td>
<td>
2.752004
</td>
<td>
3.949478
</td>
<td>
5.209976
</td>
<td>
-5.050522
</td>
<td>
-5.050522
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 0, DestLoc: 3
</th>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
<td>
0.000000
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 1, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 2, DestLoc: 3
</th>
<td>
10.951237
</td>
<td>
12.580250
</td>
<td>
10.951237
</td>
<td>
9.403676
</td>
<td>
1.951237
</td>
<td>
1.951237
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 3, DestLoc: 3
</th>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
5.209976
</td>
<td>
6.536817
</td>
<td>
-3.790024
</td>
<td>
-3.790024
</td>
</tr>
<tr>
<th>
TaxiPos: 24, PassLoc: 4, DestLoc: 3
</th>
<td>
16.100000
</td>
<td>
14.295000
</td>
<td>
16.100000
</td>
<td>
18.000000
</td>
<td>
7.100000
</td>
<td>
7.100000
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="create-a-model-dictionary" class="level3">
<h3 class="anchored" data-anchor-id="create-a-model-dictionary">Create a model dictionary</h3>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">model <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb42-2">    <span class="st" style="color: #20794D;">"env_id"</span>: env_id,</span>
<span id="cb42-3">    <span class="st" style="color: #20794D;">"max_steps"</span>: max_steps,</span>
<span id="cb42-4">    <span class="st" style="color: #20794D;">"n_training_episodes"</span>: n_training_episodes,</span>
<span id="cb42-5">    <span class="st" style="color: #20794D;">"n_eval_episodes"</span>: n_eval_episodes,</span>
<span id="cb42-6">    <span class="st" style="color: #20794D;">"eval_seed"</span>: eval_seed,</span>
<span id="cb42-7"></span>
<span id="cb42-8">    <span class="st" style="color: #20794D;">"learning_rate"</span>: learning_rate,</span>
<span id="cb42-9">    <span class="st" style="color: #20794D;">"gamma"</span>: gamma,</span>
<span id="cb42-10"></span>
<span id="cb42-11">    <span class="st" style="color: #20794D;">"epsilon"</span>: epsilon,</span>
<span id="cb42-12">    <span class="st" style="color: #20794D;">"max_epsilon"</span>: max_epsilon,</span>
<span id="cb42-13">    <span class="st" style="color: #20794D;">"min_epsilon"</span>: min_epsilon,</span>
<span id="cb42-14">    <span class="st" style="color: #20794D;">"decay_rate"</span>: decay_rate,</span>
<span id="cb42-15"></span>
<span id="cb42-16">    <span class="st" style="color: #20794D;">"qtable"</span>: Qtable_taxi</span>
<span id="cb42-17">}</span></code></pre></div>
<p><strong>Publish the trained model on the Hub</strong></p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">username <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cj-mills"</span></span>
<span id="cb43-2">repo_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"q-Taxi-v3"</span></span>
<span id="cb43-3">push_to_hub(</span>
<span id="cb43-4">    repo_id<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>username<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>repo_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>,</span>
<span id="cb43-5">    model<span class="op" style="color: #5E5E5E;">=</span>model,</span>
<span id="cb43-6">    env<span class="op" style="color: #5E5E5E;">=</span>env)</span></code></pre></div>
<pre class="text"><code>IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (550, 350) to (560, 352) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).</code></pre>
<pre class="text"><code>{'env_id': 'Taxi-v3', 'max_steps': 99, 'n_training_episodes': 25000, 'n_eval_episodes': 100, 'eval_seed': [16, 54, 165, 177, 191, 191, 120, 80, 149, 178, 48, 38, 6, 125, 174, 73, 50, 172, 100, 148, 146, 6, 25, 40, 68, 148, 49, 167, 9, 97, 164, 176, 61, 7, 54, 55, 161, 131, 184, 51, 170, 12, 120, 113, 95, 126, 51, 98, 36, 135, 54, 82, 45, 95, 89, 59, 95, 124, 9, 113, 58, 85, 51, 134, 121, 169, 105, 21, 30, 11, 50, 65, 12, 43, 82, 145, 152, 97, 106, 55, 31, 85, 38, 112, 102, 168, 123, 97, 21, 83, 158, 26, 80, 63, 5, 81, 32, 11, 28, 148], 'learning_rate': 0.7, 'gamma': 0.95, 'epsilon': 1.0, 'max_epsilon': 1.0, 'min_epsilon': 0.05, 'decay_rate': 0.005, 'qtable': array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ],
       [ 2.75200369,  3.94947757,  2.75200369,  3.94947757,  5.20997639,
        -5.05052243],
       [ 7.93349184,  9.40367562,  7.93349184,  9.40367562, 10.9512375 ,
         0.40367562],
       ...,
       [10.9512375 , 12.58025   , 10.9512375 ,  9.40367562,  1.9512375 ,
         1.9512375 ],
       [ 5.20997639,  6.53681725,  5.20997639,  6.53681725, -3.79002361,
        -3.79002361],
       [16.1       , 14.295     , 16.1       , 18.        ,  7.1       ,
         7.1       ]])}
Pushing repo q-Taxi-v3 to the Hugging Face Hub</code></pre>
<pre class="text"><code>[swscaler @ 0x5936a80] Warning: data is not aligned! This can lead to a speed loss</code></pre>
<pre class="text"><code>Upload file replay.mp4:  27%|##7       | 32.0k/118k [00:00&lt;?, ?B/s]</code></pre>
<pre class="text"><code>Your model is pushed to the hub. You can view your model here: https://huggingface.co/cj-mills/q-Taxi-v3</code></pre>
<p><strong><a href="https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard">Leaderboard</a></strong></p>
</section>
<section id="load-from-hub" class="level3">
<h3 class="anchored" data-anchor-id="load-from-hub">Load from Hub</h3>
<ol type="1">
<li>Go to <a href="https://huggingface.co/models?other=q-learning">https://huggingface.co/models?other=q-learning</a> to see the list of all the q-learning saved models.</li>
<li>Select one and copy its repo_id.</li>
<li>Use <code>load_from_hub</code> with the repo_id and the filename.</li>
</ol>
<section id="do-not-modify-this-code" class="level4">
<h4 class="anchored" data-anchor-id="do-not-modify-this-code">Do not modify this code</h4>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="im" style="color: #00769E;">from</span> urllib.error <span class="im" style="color: #00769E;">import</span> HTTPError</span>
<span id="cb49-2"></span>
<span id="cb49-3"><span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> hf_hub_download</span>
<span id="cb49-4"></span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="kw" style="color: #003B4F;">def</span> load_from_hub(repo_id: <span class="bu" style="color: null;">str</span>, filename: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">str</span>:</span>
<span id="cb49-7">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb49-8"><span class="co" style="color: #5E5E5E;">    Download a model from Hugging Face Hub.</span></span>
<span id="cb49-9"><span class="co" style="color: #5E5E5E;">    :param repo_id: id of the model repository from the Hugging Face Hub</span></span>
<span id="cb49-10"><span class="co" style="color: #5E5E5E;">    :param filename: name of the model zip file from the repository</span></span>
<span id="cb49-11"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb49-12">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb49-13">        <span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> cached_download, hf_hub_url</span>
<span id="cb49-14">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">ImportError</span>:</span>
<span id="cb49-15">        <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ImportError</span>(</span>
<span id="cb49-16">            <span class="st" style="color: #20794D;">"You need to install huggingface_hub to use `load_from_hub`. "</span></span>
<span id="cb49-17">            <span class="st" style="color: #20794D;">"See https://pypi.org/project/huggingface-hub/ for installation."</span></span>
<span id="cb49-18">        )</span>
<span id="cb49-19"></span>
<span id="cb49-20">    <span class="co" style="color: #5E5E5E;"># Get the model from the Hub, download and cache the model on your local disk</span></span>
<span id="cb49-21">    pickle_model <span class="op" style="color: #5E5E5E;">=</span> hf_hub_download(</span>
<span id="cb49-22">        repo_id<span class="op" style="color: #5E5E5E;">=</span>repo_id,</span>
<span id="cb49-23">        filename<span class="op" style="color: #5E5E5E;">=</span>filename</span>
<span id="cb49-24">    )</span>
<span id="cb49-25"></span>
<span id="cb49-26">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(pickle_model, <span class="st" style="color: #20794D;">'rb'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb49-27">        downloaded_model_file <span class="op" style="color: #5E5E5E;">=</span> pickle.load(f)</span>
<span id="cb49-28">    </span>
<span id="cb49-29">    <span class="cf" style="color: #003B4F;">return</span> downloaded_model_file</span></code></pre></div>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">model <span class="op" style="color: #5E5E5E;">=</span> load_from_hub(repo_id<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"cj-mills/q-Taxi-v3"</span>, filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"q-learning.pkl"</span>)</span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="bu" style="color: null;">print</span>(model)</span>
<span id="cb50-4">env <span class="op" style="color: #5E5E5E;">=</span> gym.make(model[<span class="st" style="color: #20794D;">"env_id"</span>])</span>
<span id="cb50-5"></span>
<span id="cb50-6">evaluate_agent(env, model[<span class="st" style="color: #20794D;">"max_steps"</span>], model[<span class="st" style="color: #20794D;">"n_eval_episodes"</span>], model[<span class="st" style="color: #20794D;">"qtable"</span>], model[<span class="st" style="color: #20794D;">"eval_seed"</span>])</span></code></pre></div>
<pre class="text"><code>{'env_id': 'Taxi-v3', 'max_steps': 99, 'n_training_episodes': 25000, 'n_eval_episodes': 100, 'eval_seed': [16, 54, 165, 177, 191, 191, 120, 80, 149, 178, 48, 38, 6, 125, 174, 73, 50, 172, 100, 148, 146, 6, 25, 40, 68, 148, 49, 167, 9, 97, 164, 176, 61, 7, 54, 55, 161, 131, 184, 51, 170, 12, 120, 113, 95, 126, 51, 98, 36, 135, 54, 82, 45, 95, 89, 59, 95, 124, 9, 113, 58, 85, 51, 134, 121, 169, 105, 21, 30, 11, 50, 65, 12, 43, 82, 145, 152, 97, 106, 55, 31, 85, 38, 112, 102, 168, 123, 97, 21, 83, 158, 26, 80, 63, 5, 81, 32, 11, 28, 148], 'learning_rate': 0.7, 'gamma': 0.95, 'epsilon': 1.0, 'max_epsilon': 1.0, 'min_epsilon': 0.05, 'decay_rate': 0.005, 'qtable': array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ],
       [ 2.75200369,  3.94947757,  2.75200369,  3.94947757,  5.20997639,
        -5.05052243],
       [ 7.93349184,  9.40367562,  7.93349184,  9.40367562, 10.9512375 ,
         0.40367562],
       ...,
       [10.9512375 , 12.58025   , 10.9512375 ,  9.40367562,  1.9512375 ,
         1.9512375 ],
       [ 5.20997639,  6.53681725,  5.20997639,  6.53681725, -3.79002361,
        -3.79002361],
       [16.1       , 14.295     , 16.1       , 18.        ,  7.1       ,
         7.1       ]])}</code></pre>
<pre class="text"><code>(7.56, 2.706732347314747)</code></pre>
</section>
</section>
<section id="some-additional-challenges" class="level3">
<h3 class="anchored" data-anchor-id="some-additional-challenges">Some additional challenges</h3>
<ul>
<li>Train for more steps.</li>
<li>Try different hyperparameters by looking at what your classmates have done.</li>
<li>Try using FrozenLake-v1 slippery version and other environments.</li>
</ul>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://github.com/huggingface/deep-rl-class">The Hugging Face Deep Reinforcement Learning Class</a></li>
<li><a href="https://huggingface.co/blog/deep-rl-intro">An Introduction to Deep Reinforcement Learning</a></li>
</ul>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>ai</category>
  <category>huggingface</category>
  <category>reinforcement-learning</category>
  <category>notes</category>
  <guid>christianjmills.com/posts/hugging-face-deep-rl-course-notes/part-2/index.html</guid>
  <pubDate>Thu, 26 May 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/hugging-face-deep-rl-course-notes/part-2/images/frozen_lake.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on The Hugging Face Deep RL Class Pt.1</title>
  <link>christianjmills.com/posts/hugging-face-deep-rl-course-notes/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>What is Reinforcement Learning?</li>
<li>The Reinforcement Learning Framework</li>
<li>Exploration-Exploitation Tradeoff</li>
<li>The Policy</li>
<li>Deep Reinforcement Learning</li>
<li>Lab</li>
<li>References</li>
</ul>
<section id="what-is-reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="what-is-reinforcement-learning">What is Reinforcement Learning?</h2>
<ul>
<li>Reinforcement learning (RL) is a framework for solving control tasks where agents learn from the environment by interacting with it through trial and error and receiving rewards as unique feedback.</li>
</ul>
</section>
<section id="the-reinforcement-learning-framework" class="level2">
<h2 class="anchored" data-anchor-id="the-reinforcement-learning-framework">The Reinforcement Learning Framework</h2>
<section id="the-rl-process" class="level3">
<h3 class="anchored" data-anchor-id="the-rl-process">The RL Process</h3>
<ul>
<li>The RL process is a loop that outputs a sequence of state <img src="https://latex.codecogs.com/png.latex?S_%7B0%7D">, action <img src="https://latex.codecogs.com/png.latex?A_%7B0%7D">, reward <img src="https://latex.codecogs.com/png.latex?R_%7B1%7D">, and next state <img src="https://latex.codecogs.com/png.latex?S_%7B1%7D">.</li>
</ul>
</section>
<section id="the-reward-hypothesis" class="level3">
<h3 class="anchored" data-anchor-id="the-reward-hypothesis">The Reward Hypothesis</h3>
<ul>
<li>The reward and next state result from taking the current action in the current state.</li>
<li>The goal is to maximize the expected cumulative reward, called the expected return.</li>
</ul>
</section>
<section id="markov-property" class="level3">
<h3 class="anchored" data-anchor-id="markov-property">Markov Property</h3>
<ul>
<li>The Markov property implies that agents only need the current state to decide what action to take and not the history of all the states and actions.</li>
</ul>
</section>
<section id="observationstates-space" class="level3">
<h3 class="anchored" data-anchor-id="observationstates-space">Observation/States Space</h3>
<ul>
<li>Observations/States are the information agents get from the environment.</li>
<li>The state is a complete description of the agent’s environment (e.g., a chessboard).</li>
<li>An observation is a partial description of the state (e.g., the current frame of a video game).</li>
</ul>
</section>
<section id="action-space" class="level3">
<h3 class="anchored" data-anchor-id="action-space">Action Space</h3>
<ul>
<li>The action space is the set of all possible actions in an environment.</li>
<li>Actions can be discrete (e.g., up, down, left, right) or continuous (e.g., steering angle).</li>
<li>Different RL algorithms are suited for discrete and continuous actions.</li>
</ul>
</section>
<section id="rewards-and-discounting" class="level3">
<h3 class="anchored" data-anchor-id="rewards-and-discounting">Rewards and discounting</h3>
<ul>
<li>The reward is the only feedback the agent receives for its actions.</li>
<li>Rewards that happen earlier in a session (e.g., at the beginning of the game) are more probable since they are more predictable than the long-term reward.</li>
<li>We can discount longer-term reward values that are less predictable.</li>
<li>We define a discount rate called gamma with a value between 0 and 1. The discount rate is typically 0.99 or 0.95.</li>
<li>The larger the gamma, the smaller the discount, meaning agents care more about long-term rewards.</li>
<li>We discount each reward by gamma to the exponent of the time step, so they are less predictable the further into the future.</li>
<li>We can write the cumulative reward at each time step <img src="https://latex.codecogs.com/png.latex?t"> as:</li>
</ul>
</section>
<section id="rtau-r_t1-r_t2-r_t3-r_t4-ldots" class="level3">
<h3 class="anchored" data-anchor-id="rtau-r_t1-r_t2-r_t3-r_t4-ldots"><img src="https://latex.codecogs.com/png.latex?R(%5Ctau)%20=%20r_%7Bt+1%7D%20+%20r_%7Bt+2%7D%20+%20r_%7Bt+3%7D%20+%20r_%7Bt+4%7D%20+%20%5Cldots"></h3>
</section>
<section id="rtau-suminfty_k0r_t-k-1" class="level3">
<h3 class="anchored" data-anchor-id="rtau-suminfty_k0r_t-k-1"><img src="https://latex.codecogs.com/png.latex?R(%5Ctau)%20=%20%5Csum%5E%7B%5Cinfty%7D_%7Bk=0%7D%7Br_%7Bt%7D%20+%20k%20+%201%7D"></h3>
<ul>
<li>Discounted cumulative expected reward:</li>
</ul>
</section>
<section id="rtau-r_t1-gamma-r_t2-gamma2r_t3-gamma3r_t4-ldots" class="level3">
<h3 class="anchored" data-anchor-id="rtau-r_t1-gamma-r_t2-gamma2r_t3-gamma3r_t4-ldots"><img src="https://latex.codecogs.com/png.latex?R(%5Ctau)%20=%20r_%7Bt+1%7D%20+%20%5Cgamma%20r_%7Bt+2%7D%20+%20%5Cgamma%5E%7B2%7Dr_%7Bt+3%7D%20+%20%5Cgamma%5E%7B3%7Dr_%7Bt+4%7D%20+%20%5Cldots"></h3>
</section>
<section id="rtau-suminfty_k0gammak-r_t-k-1" class="level3">
<h3 class="anchored" data-anchor-id="rtau-suminfty_k0gammak-r_t-k-1"><img src="https://latex.codecogs.com/png.latex?R(%5Ctau)%20=%20%5Csum%5E%7B%5Cinfty%7D_%7Bk=0%7D%7B%5Cgamma%5Ek%7B%7D%20r_%7Bt%7D%20+%20k%20+%201%7D"></h3>
</section>
<section id="type-of-tasks" class="level3">
<h3 class="anchored" data-anchor-id="type-of-tasks">Type of tasks</h3>
<ul>
<li>A task is an instance of a Reinforcement Learning problem and is either episodic or continuous.</li>
</ul>
<section id="episodic-tasks" class="level4">
<h4 class="anchored" data-anchor-id="episodic-tasks">Episodic Tasks</h4>
<ul>
<li>Episodic tasks have starting points and ending points.</li>
<li>We can represent episodes as a list of states, actions, rewards, and new states.</li>
</ul>
</section>
<section id="continuous-tasks" class="level4">
<h4 class="anchored" data-anchor-id="continuous-tasks">Continuous Tasks</h4>
<ul>
<li>Continuous tasks have no terminal state, and the agent must learn to choose the best actions and simultaneously interact with the environment.</li>
</ul>
</section>
</section>
</section>
<section id="exploration-exploitation-tradeoff" class="level2">
<h2 class="anchored" data-anchor-id="exploration-exploitation-tradeoff">Exploration-Exploitation Tradeoff</h2>
<ul>
<li>We must balance gaining more information about the environment and exploiting known information to maximize reward (e.g., going with the usual restaurant or trying a new one).</li>
</ul>
</section>
<section id="the-policy" class="level2">
<h2 class="anchored" data-anchor-id="the-policy">The Policy</h2>
<ul>
<li><p>The policy is the function that tells the agent what action to take given the current state.</p></li>
<li><p>The goal is to find the optimal policy <img src="https://latex.codecogs.com/png.latex?%5Cpi"> which maximizes the expected return.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a%20=%20%5Cpi(s)"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cpi%5Cleft(%20a%20%5Cvert%20s%20%5Cright)%20=%20P%20%5Cleft%5B%20A%20%5Cvert%20s%20%5Cright%5D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bpolicy%7D%20%5Cleft(%20%5Ctext%7Bactions%7D%20%5C%20%5Cvert%20%5C%20%5Ctext%7Bstate%7D%20%5Cright)%20=%20%5Ctext%7Bprobability%20distribution%20over%20the%20set%20of%20actions%20given%20the%20current%20state%7D"></p></li>
</ul>
<section id="policy-based-methods" class="level3">
<h3 class="anchored" data-anchor-id="policy-based-methods">Policy-based Methods</h3>
<ul>
<li>Policy-based methods involve learning a policy function directly by teaching the agent which action to take in a given state.</li>
<li>A deterministic policy will always return the same action in a given state.</li>
<li>A stochastic policy outputs a probability distribution over actions.</li>
</ul>
</section>
<section id="value-based-methods" class="level3">
<h3 class="anchored" data-anchor-id="value-based-methods">Value-based methods</h3>
<ul>
<li>Value-based methods teach the agent to learn which future state is more valuable.</li>
<li>Value-based methods involve training a value function that maps a state to the expected value of being in that state.</li>
<li>The value of a state is the expected discounted return the agent can get if it starts in that state and then acts according to the policy.</li>
</ul>
</section>
</section>
<section id="deep-reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="deep-reinforcement-learning">Deep Reinforcement Learning</h2>
<ul>
<li>Deep reinforcement learning introduces deep neural networks to solve RL problems.</li>
</ul>
</section>
<section id="lab" class="level2">
<h2 class="anchored" data-anchor-id="lab">Lab</h2>
<ul>
<li><strong>Objective:</strong> Train a lander agent to land correctly, share it to the community, and experiment with different configurations.</li>
<li><a href="https://github.com/huggingface/deep-rl-class">Syllabus</a></li>
<li><a href="https://discord.gg/aYka4Yhff9">Discord server</a></li>
<li><a href="https://discord.gg/aYka4Yhff9">#study-group-unit1 discord channel</a></li>
<li>Environment: <a href="https://www.gymlibrary.ml/environments/box2d/lunar_lander/">LunarLander-v2</a></li>
<li>RL-Library: <a href="https://stable-baselines3.readthedocs.io/en/master/">Stable-Baselines3</a></li>
</ul>
<section id="prerequisites" class="level3">
<h3 class="anchored" data-anchor-id="prerequisites">Prerequisites</h3>
<ul>
<li><a href="https://github.com/huggingface/deep-rl-class/blob/main/unit1/README.md">Unit 1 README</a></li>
<li><a href="https://huggingface.co/blog/deep-rl-intro">An Introduction to Deep Reinforcement Learning</a></li>
</ul>
</section>
<section id="objectives" class="level3">
<h3 class="anchored" data-anchor-id="objectives">Objectives</h3>
<ul>
<li>Be able to use <strong>Gym</strong>, the environment library.</li>
<li>Be able to use <strong>Stable-Baselines3</strong>, the deep reinforcement learning library.</li>
<li>Be able to <strong>push your trained agent to the Hub</strong> with a nice video replay and an evaluation score.</li>
</ul>
</section>
<section id="set-the-gpu-google-colab" class="level3">
<h3 class="anchored" data-anchor-id="set-the-gpu-google-colab">Set the GPU (Google Colab)</h3>
<ul>
<li><code>Runtime &gt; Change Runtime type</code></li>
<li><code>Hardware Accelerator &gt; GPU</code></li>
</ul>
</section>
<section id="install-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="install-dependencies">Install dependencies</h3>
<p><strong>Install virtual screen libraries for rendering the environment</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">%%</span>capture</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>apt install python<span class="op" style="color: #5E5E5E;">-</span>opengl</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">!</span>apt install ffmpeg</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">!</span>apt install xvfb</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">!</span>pip3 install pyvirtualdisplay</span></code></pre></div>
<hr>
<p><strong>Create and run a virual screen</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Virtual display</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> pyvirtualdisplay <span class="im" style="color: #00769E;">import</span> Display</span>
<span id="cb2-3"></span>
<span id="cb2-4">virtual_display <span class="op" style="color: #5E5E5E;">=</span> Display(visible<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1400</span>, <span class="dv" style="color: #AD0000;">900</span>))</span>
<span id="cb2-5">virtual_display.start()</span></code></pre></div>
<pre class="text"><code>    &lt;pyvirtualdisplay.display.Display at 0x7f2df34855d0&gt;</code></pre>
<hr>
<section id="gymbox2d" class="level4">
<h4 class="anchored" data-anchor-id="gymbox2d">Gym[box2d]</h4>
<ul>
<li>Gym is a toolkit that contains test environments for developing and comparing reinforcement learning algorithms.</li>
<li><a href="https://www.gymlibrary.ml/environments/box2d/">Box2D</a> environments all involve toy games based around physics control, using <a href="https://box2d.org/">box2d</a>-based physics and PyGame-based rendering.</li>
<li><a href="https://github.com/openai/gym">GitHub Repository</a></li>
<li><a href="https://www.gymlibrary.ml/">Gym Documentation</a></li>
</ul>
</section>
<section id="stable-baselines" class="level4">
<h4 class="anchored" data-anchor-id="stable-baselines">Stable Baselines</h4>
<ul>
<li>The Stable Baselines3 library is a set of reliable implementations of reinforcement learning algorithms in PyTorch.</li>
<li><a href="https://github.com/DLR-RM/stable-baselines3">GitHub Repository</a></li>
<li><a href="https://stable-baselines3.readthedocs.io/en/master/index.html">Documentation</a></li>
</ul>
</section>
<section id="hugging-face-x-stable-baselines" class="level4">
<h4 class="anchored" data-anchor-id="hugging-face-x-stable-baselines">Hugging Face x Stable-baselines</h4>
<ul>
<li>Load and upload Stable-baseline3 models from the Hugging Face Hub.</li>
<li><a href="https://github.com/huggingface/huggingface_sb3">GitHub Repository</a></li>
</ul>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">%%</span>capture</span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">!</span>pip install gym[box2d]</span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;">!</span>pip install stable<span class="op" style="color: #5E5E5E;">-</span>baselines3[extra]</span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;">!</span>pip install huggingface_sb3</span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;">!</span>pip install ale<span class="op" style="color: #5E5E5E;">-</span>py<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">0.7.4</span> <span class="co" style="color: #5E5E5E;"># To overcome an issue with gym (https://github.com/DLR-RM/stable-baselines3/issues/875)</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="import-the-packages" class="level3">
<h3 class="anchored" data-anchor-id="import-the-packages">Import the packages</h3>
<p>The Hugging Face Hub Hugging Face works as a central place where anyone can share and explore models and datasets. It has versioning, metrics, visualizations and other features that will allow you to easilly collaborate with others.</p>
<p><a href="https://huggingface.co/models?pipeline_tag=reinforcement-learning&amp;sort=downloads">Hugging Face Hub Deep reinforcement Learning models</a></p>
<section id="load_from_hub" class="level4">
<h4 class="anchored" data-anchor-id="load_from_hub"><code>load_from_hub</code></h4>
<ul>
<li>Download a model from Hugging Face Hub.</li>
<li><a href="https://github.com/huggingface/huggingface_sb3/blob/23837ad2617c4288e1df71551ac2ef7f3eeee9d5/huggingface_sb3/load_from_hub.py#L6">Source Code</a></li>
</ul>
</section>
<section id="package_to_hub" class="level4">
<h4 class="anchored" data-anchor-id="package_to_hub"><code>package_to_hub</code></h4>
<ul>
<li>Evaluate a model, generate a demo video, and upload the model to Hugging Face Hub.</li>
<li><a href="https://github.com/huggingface/huggingface_sb3/blob/23837ad2617c4288e1df71551ac2ef7f3eeee9d5/huggingface_sb3/push_to_hub.py#L241">Source Code</a></li>
</ul>
</section>
<section id="push_to_hub" class="level4">
<h4 class="anchored" data-anchor-id="push_to_hub"><code>push_to_hub</code></h4>
<ul>
<li>Upload a model to Hugging Face Hub.</li>
<li><a href="https://github.com/huggingface/huggingface_sb3/blob/23837ad2617c4288e1df71551ac2ef7f3eeee9d5/huggingface_sb3/push_to_hub.py#L350">Source Code</a></li>
</ul>
</section>
<section id="notebook_login" class="level4">
<h4 class="anchored" data-anchor-id="notebook_login"><code>notebook_login</code></h4>
<ul>
<li>Display a widget to login to the HF website and store the token.</li>
<li><a href="https://github.com/huggingface/huggingface_hub/blob/7042df38a9839ac41efd60cf7f985d473c49d426/src/huggingface_hub/commands/user.py#L312">Source Code</a></li>
</ul>
</section>
<section id="ppo" class="level4">
<h4 class="anchored" data-anchor-id="ppo"><code>PPO</code></h4>
<ul>
<li>The <a href="https://arxiv.org/abs/1707.06347">Proximal Policy Optimization</a> algorithm</li>
<li><a href="https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html">Documentation</a></li>
</ul>
</section>
<section id="evaluate_policy" class="level4">
<h4 class="anchored" data-anchor-id="evaluate_policy"><code>evaluate_policy</code></h4>
<ul>
<li>Run a policy and return the average reward.</li>
<li><a href="https://stable-baselines3.readthedocs.io/en/master/common/evaluation.html#stable_baselines3.common.evaluation.evaluate_policy">Documentation</a></li>
</ul>
</section>
<section id="make_vec_env" class="level4">
<h4 class="anchored" data-anchor-id="make_vec_env"><code>make_vec_env</code></h4>
<ul>
<li>Create a wrapped, monitored vectorized environment (<a href="https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html?highlight=VecEnv#vecenv">VecEnv</a>).</li>
<li><a href="https://stable-baselines3.readthedocs.io/en/master/common/env_util.html#stable_baselines3.common.env_util.make_vec_env">Documentation</a></li>
</ul>
<hr>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> gym</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="im" style="color: #00769E;">from</span> huggingface_sb3 <span class="im" style="color: #00769E;">import</span> load_from_hub, package_to_hub, push_to_hub</span>
<span id="cb5-4"><span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> notebook_login</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="im" style="color: #00769E;">from</span> stable_baselines3 <span class="im" style="color: #00769E;">import</span> PPO</span>
<span id="cb5-7"><span class="im" style="color: #00769E;">from</span> stable_baselines3.common.evaluation <span class="im" style="color: #00769E;">import</span> evaluate_policy</span>
<span id="cb5-8"><span class="im" style="color: #00769E;">from</span> stable_baselines3.common.env_util <span class="im" style="color: #00769E;">import</span> make_vec_env</span></code></pre></div>
<hr>
</section>
</section>
<section id="understand-the-gym-api" class="level3">
<h3 class="anchored" data-anchor-id="understand-the-gym-api">Understand the Gym API</h3>
<ol type="1">
<li>Create our environment using <code>gym.make()</code></li>
<li>Reset the environment to its initial state with <code>observation = env.reset()</code></li>
<li>Get an action using our model</li>
<li>Perform the action using <code>env.step(action)</code>, which returns:</li>
</ol>
<ul>
<li><code>obsevation</code>: The new state (st+1)</li>
<li><code>reward</code>: The reward we get after executing the action</li>
<li><code>done</code>: Indicates if the episode terminated</li>
<li><code>info</code>: A dictionary that provides additional environment-specific information.</li>
</ul>
<ol start="5" type="1">
<li>Reset the environment to its initial state with <code>observation = env.reset()</code> at the end of each episode</li>
</ol>
</section>
<section id="create-the-lunarlander-environment-and-understand-how-it-works" class="level3">
<h3 class="anchored" data-anchor-id="create-the-lunarlander-environment-and-understand-how-it-works">Create the LunarLander environment and understand how it works</h3>
<section id="lunar-lander-environment" class="level4">
<h4 class="anchored" data-anchor-id="lunar-lander-environment">Lunar Lander Environment</h4>
<ul>
<li>This environment is a classic rocket trajectory optimization problem.</li>
<li>The agent needs to learn <strong>to adapt its speed and position(horizontal, vertical, and angular) to land correctly.</strong></li>
<li><a href="https://www.gymlibrary.ml/environments/box2d/lunar_lander/">Documentation</a></li>
</ul>
<table class="table">
<tbody>
<tr class="odd">
<td>Action Space</td>
<td>Discrete(4)</td>
</tr>
<tr class="even">
<td>Observation Space</td>
<td>(8,)</td>
</tr>
<tr class="odd">
<td>Observation High</td>
<td><code>[inf inf inf inf inf inf inf inf]</code></td>
</tr>
<tr class="even">
<td>Observation Low</td>
<td><code>[-inf -inf -inf -inf -inf -inf -inf -inf]</code></td>
</tr>
<tr class="odd">
<td>Import</td>
<td><code>gym.make("LunarLander-v2")</code></td>
</tr>
</tbody>
</table>
<p><strong>Create a <a href="https://www.gymlibrary.ml/environments/box2d/lunar_lander/">Lunar Lander</a> environment</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">env <span class="op" style="color: #5E5E5E;">=</span> gym.make(<span class="st" style="color: #20794D;">"LunarLander-v2"</span>)</span></code></pre></div>
<hr>
<p><strong>Reset the environment</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">observation <span class="op" style="color: #5E5E5E;">=</span> env.reset()</span></code></pre></div>
<hr>
<p><strong>Take some random actions in the environment</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb8-2">  <span class="co" style="color: #5E5E5E;"># Take a random action</span></span>
<span id="cb8-3">  action <span class="op" style="color: #5E5E5E;">=</span> env.action_space.sample()</span>
<span id="cb8-4">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Action taken:"</span>, action)</span>
<span id="cb8-5"></span>
<span id="cb8-6">  <span class="co" style="color: #5E5E5E;"># Do this action in the environment and get</span></span>
<span id="cb8-7">  <span class="co" style="color: #5E5E5E;"># next_state, reward, done and info</span></span>
<span id="cb8-8">  observation, reward, done, info <span class="op" style="color: #5E5E5E;">=</span> env.step(action)</span>
<span id="cb8-9">  </span>
<span id="cb8-10">  <span class="co" style="color: #5E5E5E;"># If the game is done (in our case we land, crashed or timeout)</span></span>
<span id="cb8-11">  <span class="cf" style="color: #003B4F;">if</span> done:</span>
<span id="cb8-12">      <span class="co" style="color: #5E5E5E;"># Reset the environment</span></span>
<span id="cb8-13">      <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Environment is reset"</span>)</span>
<span id="cb8-14">      observation <span class="op" style="color: #5E5E5E;">=</span> env.reset()</span></code></pre></div>
<pre class="text"><code>    Action taken: 0
    Action taken: 1
    Action taken: 0
    Action taken: 3
    Action taken: 0
    Action taken: 3
    Action taken: 1
    Action taken: 1
    Action taken: 0
    Action taken: 1
    Action taken: 0
    Action taken: 1
    Action taken: 0
    Action taken: 2
    Action taken: 1
    Action taken: 2
    Action taken: 3
    Action taken: 3
    Action taken: 3
    Action taken: 3</code></pre>
<hr>
<p><strong>Inspect the observation space</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># We create a new environment</span></span>
<span id="cb10-2">env <span class="op" style="color: #5E5E5E;">=</span> gym.make(<span class="st" style="color: #20794D;">"LunarLander-v2"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># Reset the environment</span></span>
<span id="cb10-4">env.reset()</span>
<span id="cb10-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"_____OBSERVATION SPACE_____ </span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Observation Space Shape"</span>, env.observation_space.shape)</span>
<span id="cb10-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Sample observation"</span>, env.observation_space.sample()) <span class="co" style="color: #5E5E5E;"># Get a random observation</span></span></code></pre></div>
<pre class="text"><code>    _____OBSERVATION SPACE_____ 
    
    Observation Space Shape (8,)
    Sample observation [ 1.9953048  -0.9302978   0.26271465 -1.406391    0.42527643 -0.07207114
      2.1984298   0.4171027 ]</code></pre>
<p><strong>Note:</strong> * The observation is a vector of size 8, where each value is a different piece of information about the lander. 1. Horizontal pad coordinate (x) 2. Vertical pad coordinate (y) 3. Horizontal speed (x) 4. Vertical speed (y) 5. Angle 6. Angular speed 7. If the left leg has contact point touched the land 8. If the right leg has contact point touched the land</p>
<hr>
<p><strong>Inspect the action space</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> _____ACTION SPACE_____ </span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Action Space Shape"</span>, env.action_space.n)</span>
<span id="cb12-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Action Space Sample"</span>, env.action_space.sample()) <span class="co" style="color: #5E5E5E;"># Take a random action</span></span></code></pre></div>
<pre class="text"><code>
     _____ACTION SPACE_____ 
    
    Action Space Shape 4
    Action Space Sample 1</code></pre>
<p><strong>Note:</strong> * The action space is discrete, with four available actions. 1. Do nothing. 2. Fire left orientation engine. 3. Fire the main engine. 4. Fire right orientation engine.</p>
<ul>
<li>Reward function details:
<ul>
<li>Moving from the top of the screen to the landing pad and zero speed is about 100~140 points.</li>
<li>Firing main engine is -0.3 each frame</li>
<li>Each leg ground contact is +10 points</li>
<li>Episode finishes if the lander crashes (additional - 100 points) or come to rest (+100 points)</li>
<li>The game is solved if your agent does 200 points.</li>
</ul></li>
</ul>
<hr>
<section id="vectorized-environment" class="level5">
<h5 class="anchored" data-anchor-id="vectorized-environment">Vectorized Environment</h5>
<ul>
<li>We can stack multiple independent environments into a single vector to get more diverse experiences during the training.</li>
</ul>
<p><strong>Stack 16 independent environments</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">env <span class="op" style="color: #5E5E5E;">=</span> make_vec_env(<span class="st" style="color: #20794D;">'LunarLander-v2'</span>, n_envs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</section>
</section>
</section>
<section id="create-the-model" class="level3">
<h3 class="anchored" data-anchor-id="create-the-model">Create the Model</h3>
<ul>
<li><a href="https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html">PPO (aka Proximal Policy Optimization)</a> is a combination of:
<ul>
<li><em>Value-based reinforcement learning method</em>: learning an action-value function that will tell us what’s the <strong>most valuable action to take given a state and action</strong>.</li>
<li><em>Policy-based reinforcement learning method</em>: learning a policy that will <strong>gives us a probability distribution over actions</strong>.</li>
</ul></li>
</ul>
<section id="stable-baselines3-setup-steps" class="level5">
<h5 class="anchored" data-anchor-id="stable-baselines3-setup-steps">Stable-Baselines3 setup steps:</h5>
<ol type="1">
<li>You <strong>create your environment</strong> (in our case it was done above)</li>
<li>You define the <strong>model you want to use and instantiate this model</strong> <code>model = PPO("MlpPolicy")</code></li>
<li>You <strong>train the agent</strong> with <code>model.learn</code> and define the number of training timesteps</li>
</ol>
<p><strong>Sample Code:</strong></p>
<pre><code># Create environment
env = gym.make('LunarLander-v2')

# Instantiate the agent
model = PPO('MlpPolicy', env, verbose=1)
# Train the agent
model.learn(total_timesteps=int(2e5))</code></pre>
<hr>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> inspect</span>
<span id="cb16-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb16-3">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb16-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb16-5">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
<hr>
<p><strong>Inspect default PPO arguments</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">args <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(PPO).args</span>
<span id="cb17-2">defaults <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(PPO).defaults</span>
<span id="cb17-3">defaults <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span>(<span class="bu" style="color: null;">len</span>(args)<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">len</span>(defaults)) <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(defaults)</span>
<span id="cb17-4">annotations <span class="op" style="color: #5E5E5E;">=</span> inspect.getfullargspec(PPO).annotations.values()</span>
<span id="cb17-5">annotations <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span>(<span class="bu" style="color: null;">len</span>(args)<span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">len</span>(annotations)) <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(annotations)</span>
<span id="cb17-6">ppo_default_args <span class="op" style="color: #5E5E5E;">=</span> {arg:[default, annotation] <span class="cf" style="color: #003B4F;">for</span> arg,default,annotation <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(args, defaults, annotations)}</span>
<span id="cb17-7">pd.DataFrame(ppo_default_args, index<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Default Value"</span>, <span class="st" style="color: #20794D;">"Annotation"</span>]).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Default Value
</th>
<th>
Annotation
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
self
</th>
<td>
None
</td>
<td>
None
</td>
</tr>
<tr>
<th>
policy
</th>
<td>
None
</td>
<td>
typing.Union[str, typing.Type[stable_baselines3.common.policies.ActorCriticPolicy]]
</td>
</tr>
<tr>
<th>
env
</th>
<td>
None
</td>
<td>
typing.Union[gym.core.Env, stable_baselines3.common.vec_env.base_vec_env.VecEnv, str]
</td>
</tr>
<tr>
<th>
learning_rate
</th>
<td>
0.0003
</td>
<td>
typing.Union[float, typing.Callable[[float], float]]
</td>
</tr>
<tr>
<th>
n_steps
</th>
<td>
2048
</td>
<td>
&lt;class ‘int’&gt;
</td>
</tr>
<tr>
<th>
batch_size
</th>
<td>
64
</td>
<td>
&lt;class ‘int’&gt;
</td>
</tr>
<tr>
<th>
n_epochs
</th>
<td>
10
</td>
<td>
&lt;class ‘int’&gt;
</td>
</tr>
<tr>
<th>
gamma
</th>
<td>
0.99
</td>
<td>
&lt;class ‘float’&gt;
</td>
</tr>
<tr>
<th>
gae_lambda
</th>
<td>
0.95
</td>
<td>
&lt;class ‘float’&gt;
</td>
</tr>
<tr>
<th>
clip_range
</th>
<td>
0.2
</td>
<td>
typing.Union[float, typing.Callable[[float], float]]
</td>
</tr>
<tr>
<th>
clip_range_vf
</th>
<td>
None
</td>
<td>
typing.Union[NoneType, float, typing.Callable[[float], float]]
</td>
</tr>
<tr>
<th>
normalize_advantage
</th>
<td>
True
</td>
<td>
&lt;class ‘bool’&gt;
</td>
</tr>
<tr>
<th>
ent_coef
</th>
<td>
0.0
</td>
<td>
&lt;class ‘float’&gt;
</td>
</tr>
<tr>
<th>
vf_coef
</th>
<td>
0.5
</td>
<td>
&lt;class ‘float’&gt;
</td>
</tr>
<tr>
<th>
max_grad_norm
</th>
<td>
0.5
</td>
<td>
&lt;class ‘float’&gt;
</td>
</tr>
<tr>
<th>
use_sde
</th>
<td>
False
</td>
<td>
&lt;class ‘bool’&gt;
</td>
</tr>
<tr>
<th>
sde_sample_freq
</th>
<td>
-1
</td>
<td>
&lt;class ‘int’&gt;
</td>
</tr>
<tr>
<th>
target_kl
</th>
<td>
None
</td>
<td>
typing.Optional[float]
</td>
</tr>
<tr>
<th>
tensorboard_log
</th>
<td>
None
</td>
<td>
typing.Optional[str]
</td>
</tr>
<tr>
<th>
create_eval_env
</th>
<td>
False
</td>
<td>
&lt;class ‘bool’&gt;
</td>
</tr>
<tr>
<th>
policy_kwargs
</th>
<td>
None
</td>
<td>
typing.Optional[typing.Dict[str, typing.Any]]
</td>
</tr>
<tr>
<th>
verbose
</th>
<td>
0
</td>
<td>
&lt;class ‘int’&gt;
</td>
</tr>
<tr>
<th>
seed
</th>
<td>
None
</td>
<td>
typing.Optional[int]
</td>
</tr>
<tr>
<th>
device
</th>
<td>
auto
</td>
<td>
typing.Union[torch.device, str]
</td>
</tr>
<tr>
<th>
_init_setup_model
</th>
<td>
True
</td>
<td>
&lt;class ‘bool’&gt;
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Define a PPO MlpPolicy architecture</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">model <span class="op" style="color: #5E5E5E;">=</span> PPO(<span class="st" style="color: #20794D;">"MlpPolicy"</span>, env, verbose<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<pre class="text"><code>    Using cuda device</code></pre>
<p><strong>Note:</strong> * We use a Multilayer Perceptron because the observations are vectors instead of images.</p>
<ul>
<li>Recommended Values:</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Argument</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>n_steps</td>
<td>1024</td>
</tr>
<tr class="even">
<td>batch_size</td>
<td>64</td>
</tr>
<tr class="odd">
<td>n_epochs</td>
<td>4</td>
</tr>
<tr class="even">
<td>gamma</td>
<td>0.999</td>
</tr>
<tr class="odd">
<td>gae_lambda</td>
<td>0.98</td>
</tr>
<tr class="even">
<td>ent_coef</td>
<td>0.01</td>
</tr>
<tr class="odd">
<td>verbose</td>
<td>1</td>
</tr>
</tbody>
</table>
<hr>
</section>
</section>
<section id="train-the-ppo-agent" class="level3">
<h3 class="anchored" data-anchor-id="train-the-ppo-agent">Train the PPO agent</h3>
<p><strong>Train the model</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">model.learn(total_timesteps<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">int</span>(<span class="dv" style="color: #AD0000;">2000000</span>))</span></code></pre></div>
<pre class="text"><code>    ---------------------------------
    | rollout/           |          |
    |    ep_len_mean     | 94.8     |
    |    ep_rew_mean     | -199     |
    | time/              |          |
    |    fps             | 2891     |
    |    iterations      | 1        |
    |    time_elapsed    | 11       |
    |    total_timesteps | 32768    |
    ---------------------------------
...
    ------------------------------------------
    | rollout/                |              |
    |    ep_len_mean          | 187          |
    |    ep_rew_mean          | 281          |
    | time/                   |              |
    |    fps                  | 593          |
    |    iterations           | 62           |
    |    time_elapsed         | 3421         |
    |    total_timesteps      | 2031616      |
    | train/                  |              |
    |    approx_kl            | 0.0047587324 |
    |    clip_fraction        | 0.0585       |
    |    clip_range           | 0.2          |
    |    entropy_loss         | -0.469       |
    |    explained_variance   | 0.986        |
    |    learning_rate        | 0.0003       |
    |    loss                 | 3.62         |
    |    n_updates            | 610          |
    |    policy_gradient_loss | -0.0007      |
    |    value_loss           | 11.5         |
    ------------------------------------------

    &lt;stable_baselines3.ppo.ppo.PPO at 0x7fcc807b8410&gt;</code></pre>
<hr>
</section>
<section id="evaluate-the-agent" class="level3">
<h3 class="anchored" data-anchor-id="evaluate-the-agent">Evaluate the agent</h3>
<ul>
<li>We can evaluate the model’s performance using the <a href="https://stable-baselines3.readthedocs.io/en/master/common/evaluation.html#stable_baselines3.common.evaluation.evaluate_policy"><code>evaluate_policy()</code></a> method.</li>
<li><a href="https://stable-baselines3.readthedocs.io/en/master/guide/examples.html#basic-usage-training-saving-loading">Example</a></li>
</ul>
<p><strong>Create a new environment for evaluation</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">eval_env <span class="op" style="color: #5E5E5E;">=</span> gym.make(<span class="st" style="color: #20794D;">'LunarLander-v2'</span>)</span></code></pre></div>
<hr>
<p><strong>Evaluate the model with 10 evaluation episodes and deterministic=True</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">mean_reward, std_reward <span class="op" style="color: #5E5E5E;">=</span> evaluate_policy(model, eval_env, n_eval_episodes<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<hr>
<p><strong>Print the results</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"mean_reward=</span><span class="sc" style="color: #5E5E5E;">{</span>mean_reward<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;"> +/- </span><span class="sc" style="color: #5E5E5E;">{</span>std_reward<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>    mean_reward=78.15 +/- 94.84891574522395</code></pre>
<hr>
</section>
<section id="publish-our-trained-model-on-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="publish-our-trained-model-on-the-hub">Publish our trained model on the Hub</h3>
<ul>
<li>We can use the <code>package_to_hub()</code> method to evaluate the model, record a replay, generate a model card, and push the model to the Hub in a single line of code.</li>
<li><a href="https://huggingface.co/spaces/ThomasSimonini/Lunar-Lander-Leaderboard"><strong>Leaderboard</strong></a></li>
<li>The <code>package_to_hub()</code> method returns a link to a Hub model repository such as https://huggingface.co/osanseviero/test_sb3.</li>
<li>Model repository features:
<ul>
<li>A video preview of your agent at the right.</li>
<li>Click “Files and versions” to see all the files in the repository.</li>
<li>Click “Use in stable-baselines3” to get a code snippet that shows how to load the model.</li>
<li>A model card (<code>README.md</code> file) which gives a description of the model</li>
</ul></li>
<li>Hugging Face Hub uses git-based repositories so we can update the model with new versions.</li>
</ul>
<p>Connect to Hugging Face Hub: 1. Create Hugging Face account https://huggingface.co/join 2. Create a new authentication token (https://huggingface.co/settings/tokens) <strong>with write role</strong> 3. Run the <code>notebook_login()</code> method.</p>
<p><strong>Log into Hugging Face account</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">notebook_login()</span>
<span id="cb26-2"><span class="op" style="color: #5E5E5E;">!</span>git config <span class="op" style="color: #5E5E5E;">--</span><span class="kw" style="color: #003B4F;">global</span> credential.helper store</span></code></pre></div>
<pre class="text"><code>    Login successful
    Your token has been saved to /root/.huggingface/token</code></pre>
<hr>
<p><code>package_to_hub</code> function arguments: - <code>model</code>: our trained model. - <code>model_name</code>: the name of the trained model that we defined in <code>model_save</code> - <code>model_architecture</code>: the model architecture we used (e.g., PPO) - <code>env_id</code>: the name of the environment, in our case <code>LunarLander-v2</code> - <code>eval_env</code>: the evaluation environment defined in eval_env - <code>repo_id</code>: the name of the Hugging Face Hub Repository that will be created/updated <code>(repo_id = {username}/{repo_name})</code> * <strong>Example format:</strong> {username}/{model_architecture}-{env_id} - <code>commit_message</code>: message of the commit</p>
<hr>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;">from</span> stable_baselines3.common.vec_env <span class="im" style="color: #00769E;">import</span> DummyVecEnv</span>
<span id="cb28-2"><span class="im" style="color: #00769E;">from</span> huggingface_sb3 <span class="im" style="color: #00769E;">import</span> package_to_hub</span></code></pre></div>
<hr>
<p><strong>Push the model to the Hugging Face Hub</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Define the name of the environment</span></span>
<span id="cb29-2">env_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"LunarLander-v2"</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;"># Create the evaluation env</span></span>
<span id="cb29-5">eval_env <span class="op" style="color: #5E5E5E;">=</span> DummyVecEnv([<span class="kw" style="color: #003B4F;">lambda</span>: gym.make(env_id)])</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;"># Define the model architecture we used</span></span>
<span id="cb29-8">model_architecture <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ppo"</span></span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;">## Define a repo_id</span></span>
<span id="cb29-11"><span class="co" style="color: #5E5E5E;">## repo_id is the id of the model repository from the Hugging Face Hub (repo_id = {organization}/{repo_name} for instance ThomasSimonini/ppo-LunarLander-v2</span></span>
<span id="cb29-12">repo_id <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"cj-mills/</span><span class="sc" style="color: #5E5E5E;">{</span>model_architecture<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>env_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb29-13"></span>
<span id="cb29-14">model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>model_architecture<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>env_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb29-15"></span>
<span id="cb29-16"><span class="co" style="color: #5E5E5E;">## Define the commit message</span></span>
<span id="cb29-17">commit_message <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"Upload </span><span class="sc" style="color: #5E5E5E;">{</span>model_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> model with longer training session"</span></span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;"># method save, evaluate, generate a model card and record a replay video of your agent before pushing the repo to the hub</span></span>
<span id="cb29-20">package_to_hub(model<span class="op" style="color: #5E5E5E;">=</span>model, <span class="co" style="color: #5E5E5E;"># Our trained model</span></span>
<span id="cb29-21">               model_name<span class="op" style="color: #5E5E5E;">=</span>model_name, <span class="co" style="color: #5E5E5E;"># The name of our trained model </span></span>
<span id="cb29-22">               model_architecture<span class="op" style="color: #5E5E5E;">=</span>model_architecture, <span class="co" style="color: #5E5E5E;"># The model architecture we used: in our case PPO</span></span>
<span id="cb29-23">               env_id<span class="op" style="color: #5E5E5E;">=</span>env_id, <span class="co" style="color: #5E5E5E;"># Name of the environment</span></span>
<span id="cb29-24">               eval_env<span class="op" style="color: #5E5E5E;">=</span>eval_env, <span class="co" style="color: #5E5E5E;"># Evaluation Environment</span></span>
<span id="cb29-25">               repo_id<span class="op" style="color: #5E5E5E;">=</span>repo_id, <span class="co" style="color: #5E5E5E;"># id of the model repository from the Hugging Face Hub (repo_id = {organization}/{repo_name} for instance ThomasSimonini/ppo-LunarLander-v2</span></span>
<span id="cb29-26">               commit_message<span class="op" style="color: #5E5E5E;">=</span>commit_message)</span></code></pre></div>
<pre class="text"><code>    'https://huggingface.co/cj-mills/ppo-LunarLander-v2'</code></pre>
<hr>
</section>
<section id="some-additional-challenges" class="level3">
<h3 class="anchored" data-anchor-id="some-additional-challenges">Some additional challenges</h3>
<ul>
<li>Train for more steps.</li>
<li>Try different <a href="https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html#parameters">hyperparameters</a> of <code>PPO</code>.</li>
<li>Check the <a href="https://stable-baselines3.readthedocs.io/en/master/modules/dqn.html">Stable-Baselines3 documentation</a> and try another model such as DQN.</li>
<li>Try using the <a href="https://www.gymlibrary.ml/environments/classic_control/cart_pole/">CartPole-v1</a>, <a href="https://www.gymlibrary.ml/environments/classic_control/mountain_car/">MountainCar-v0</a> or <a href="https://www.gymlibrary.ml/environments/box2d/car_racing/">CarRacing-v0</a> environments.</li>
</ul>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://github.com/huggingface/deep-rl-class">The Hugging Face Deep Reinforcement Learning Class</a></li>
<li><a href="https://huggingface.co/blog/deep-rl-intro">An Introduction to Deep Reinforcement Learning</a></li>
</ul>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>ai</category>
  <category>huggingface</category>
  <category>reinforcement-learning</category>
  <category>notes</category>
  <guid>christianjmills.com/posts/hugging-face-deep-rl-course-notes/part-1/index.html</guid>
  <pubDate>Thu, 05 May 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Transformers Book Ch. 11</title>
  <link>christianjmills.com/posts/transformers-book-notes/chapter-11/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Scaling Transformers</li>
<li>Going Beyond Text</li>
<li>Multimodal Transformers</li>
<li>References</li>
</ul>
<hr>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> transformers</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> datasets</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> accelerate</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Only print error messages</span></span>
<span id="cb1-6">transformers.logging.set_verbosity_error()</span>
<span id="cb1-7">datasets.logging.set_verbosity_error()</span>
<span id="cb1-8"></span>
<span id="cb1-9">transformers.__version__, datasets.__version__, accelerate.__version__</span></code></pre></div>
<pre class="text"><code>    ('4.18.0', '2.1.0', '0.5.1')</code></pre>
<hr>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> ast</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># https://astor.readthedocs.io/en/latest/</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">import</span> astor</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> inspect</span>
<span id="cb3-5"><span class="im" style="color: #00769E;">import</span> textwrap</span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">def</span> print_source(obj, exclude_doc<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb3-7">    </span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;"># Get source code</span></span>
<span id="cb3-9">    source <span class="op" style="color: #5E5E5E;">=</span> inspect.getsource(obj)</span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;"># Remove any common leading whitespace from every line</span></span>
<span id="cb3-11">    cleaned_source <span class="op" style="color: #5E5E5E;">=</span> textwrap.dedent(source)</span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;"># Parse the source into an AST node.</span></span>
<span id="cb3-13">    parsed <span class="op" style="color: #5E5E5E;">=</span> ast.parse(cleaned_source)</span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;">for</span> node <span class="kw" style="color: #003B4F;">in</span> ast.walk(parsed):</span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;"># Skip any nodes that are not class or function definitions</span></span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):</span>
<span id="cb3-18">            <span class="cf" style="color: #003B4F;">continue</span></span>
<span id="cb3-19">        </span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;">if</span> exclude_doc <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(node.body) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>: node.body <span class="op" style="color: #5E5E5E;">=</span> node.body[<span class="dv" style="color: #AD0000;">1</span>:]</span>
<span id="cb3-21">        </span>
<span id="cb3-22">    <span class="bu" style="color: null;">print</span>(astor.to_source(parsed))</span></code></pre></div>
<hr>
<section id="scaling-transformers" class="level2">
<h2 class="anchored" data-anchor-id="scaling-transformers">Scaling Transformers</h2>
<ul>
<li><strong><a href="http://incompleteideas.net/IncIdeas/BitterLesson.html">The Bitter Lesson</a></strong>
<ul>
<li><a href="http://www.incompleteideas.net/">Richard Sutton</a> argued that general methods that leverage computation are far more effective in AI than methods that leverage domain knowledge.</li>
<li>The human knowledge approach tends to complicate things, making them less suited to taking advantage of general methods leveraging computation.</li>
<li>Search methods and learning methods seem to scale arbitrarily with computation power.</li>
</ul></li>
<li>Large language models perform better on downstream tasks.</li>
<li>Interesting capabilities like zero-shot and few-shot learning emerge in the 10 to 100-billion parameter range.</li>
<li>Computing power and training data must also scale with parameter count.</li>
<li>Large language models like GPT-3 are estimated to cost <a href="https://lambdalabs.com/blog/demystifying-gpt-3/">$4.6 million</a> to train.</li>
<li>The high cost of training large models means we need a way to estimate the model’s performance in advance.</li>
<li><a href="https://arxiv.org/abs/2001.08361">Scaling Laws for Neural Language Models</a>
<ul>
<li>The performance of language models appears to obey a power-law relationship with model size and other factors.</li>
</ul></li>
</ul>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span></code></pre></div>
<hr>
<p><strong>Plot parameter counts over time for prominent Transformer architectures</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">model_data <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb5-2">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'12-06-2017'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'Transformer'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">213</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e6</span>},</span>
<span id="cb5-3">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'11-06-2018'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'GPT'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">110</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e6</span>},</span>
<span id="cb5-4">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'11-10-2018'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'BERT'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">340</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e6</span>},</span>
<span id="cb5-5">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'14-02-2019'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'GPT-2'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="fl" style="color: #AD0000;">1.5</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e9</span>},</span>
<span id="cb5-6">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'23-10-2019'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'T5'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">11</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e9</span>},</span>
<span id="cb5-7">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'17-09-2019'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'Megatron'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="fl" style="color: #AD0000;">8.3</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e9</span>},</span>
<span id="cb5-8">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'13-02-2020'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'Turing-NLG'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">17</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e9</span>},</span>
<span id="cb5-9">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'30-06-2020'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'GShard'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">600</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e9</span>},</span>
<span id="cb5-10">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'28-05-2020'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'GPT-3'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="dv" style="color: #AD0000;">175</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1e9</span>},</span>
<span id="cb5-11">    {<span class="st" style="color: #20794D;">'date'</span>: <span class="st" style="color: #20794D;">'11-01-2021'</span>, <span class="st" style="color: #20794D;">'name'</span>: <span class="st" style="color: #20794D;">'Switch-C'</span>, <span class="st" style="color: #20794D;">'size'</span>: <span class="fl" style="color: #AD0000;">1.571</span><span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">10e12</span>},</span>
<span id="cb5-12">]</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="kw" style="color: #003B4F;">def</span> label_point(x, y, val, ax):</span>
<span id="cb5-15">    a <span class="op" style="color: #5E5E5E;">=</span> pd.concat({<span class="st" style="color: #20794D;">"x"</span>: x, <span class="st" style="color: #20794D;">"y"</span>: y, <span class="st" style="color: #20794D;">"val"</span>: val}, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;">for</span> i, point <span class="kw" style="color: #003B4F;">in</span> a.iterrows():</span>
<span id="cb5-17">        ax.text(</span>
<span id="cb5-18">            point[<span class="st" style="color: #20794D;">"x"</span>],</span>
<span id="cb5-19">            point[<span class="st" style="color: #20794D;">"y"</span>],</span>
<span id="cb5-20">            <span class="bu" style="color: null;">str</span>(point[<span class="st" style="color: #20794D;">"val"</span>]),</span>
<span id="cb5-21">            horizontalalignment<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>,</span>
<span id="cb5-22">            verticalalignment<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bottom"</span>,</span>
<span id="cb5-23">        )</span>
<span id="cb5-24"></span>
<span id="cb5-25">df_lm <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame.from_records(model_data)</span>
<span id="cb5-26">df_lm[<span class="st" style="color: #20794D;">"date"</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df_lm[<span class="st" style="color: #20794D;">"date"</span>], dayfirst<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-27"></span>
<span id="cb5-28">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb5-29">df_lm.plot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"date"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"size"</span>, kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"scatter"</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">15</span>, ax<span class="op" style="color: #5E5E5E;">=</span>ax)</span>
<span id="cb5-30">ax.set_yscale(<span class="st" style="color: #20794D;">"log"</span>)</span>
<span id="cb5-31">label_point(df_lm[<span class="st" style="color: #20794D;">"date"</span>], df_lm[<span class="st" style="color: #20794D;">"size"</span>], df_lm[<span class="st" style="color: #20794D;">"name"</span>], ax)</span>
<span id="cb5-32">ax.set_xlabel(<span class="st" style="color: #20794D;">"Release date"</span>)</span>
<span id="cb5-33">ax.set_ylabel(<span class="st" style="color: #20794D;">"Number of parameters"</span>)</span>
<span id="cb5-34">ax.grid(<span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-35">plt.subplots_adjust(top<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.2</span>)</span>
<span id="cb5-36">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/output_5_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<hr>
<section id="scaling-laws" class="level3">
<h3 class="anchored" data-anchor-id="scaling-laws">Scaling Laws</h3>
<ul>
<li>Scaling laws allow us to empirically quantify the “bigger is better” paradigm for language models by studying their behavior with varying compute budgets <img src="https://latex.codecogs.com/png.latex?C">, dataset sizes <img src="https://latex.codecogs.com/png.latex?D">, and model sizes <img src="https://latex.codecogs.com/png.latex?N">.</li>
<li>We measure dataset size in the number of tokens.</li>
<li>The model size excludes parameters from the embedding layers.</li>
<li>We chart the dependence of the cross-entropy loss on these three factors to determine if a relationship emerges.</li>
<li>Scaling laws imply that increasing compute budget, dataset size, and model size in tandem is more productive than architectural tweaks or hyperparameter optimization to improve performance.</li>
<li>The test loss has a power-law relationship with computation budget, dataset size, and model size across several orders of magnitude.</li>
<li>We can express <img src="https://latex.codecogs.com/png.latex?L%5Cleft(%20X%20%5Cright)%20%5Csim%201/X%5E%7B%5Calpha%7D"> for <img src="https://latex.codecogs.com/png.latex?X%20=%20N,%20C,%20D"> where <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is a scaling exponent determined by a fit to the loss curve.
<ul>
<li>Typical values for <img src="https://latex.codecogs.com/png.latex?%5Calpha"> lie in the range <img src="https://latex.codecogs.com/png.latex?%5Cleft%5B0.05,0.095%20%5Cright%5D">.</li>
<li><a href="https://arxiv.org/abs/2010.14701">Scaling Laws for Autoregressive Generative Modeling</a></li>
</ul></li>
<li>These power laws mean we can extrapolate the early part of a loss curve to predict the approximate loss from training longer.</li>
<li>Larger models can achieve the same performance as smaller models with fewer training steps.</li>
<li>Scaling laws are also present for other modalities like images, videos, and mathematical problem-solving.</li>
</ul>
</section>
<section id="challenges-with-scaling" class="level3">
<h3 class="anchored" data-anchor-id="challenges-with-scaling">Challenges with Scaling</h3>
<ul>
<li>Provisioning and managing hundreds or thousands of GPU nodes typically requires specialized engineers familiar with running large-scale, distributed experiments.</li>
<li>Most companies cannot afford the teams and resources to train models at the largest scales.<br>
</li>
<li>A recently proposed distributed deep learning framework enables smaller groups to pool their computational resources and pre-train models.
<ul>
<li><a href="https://arxiv.org/abs/2106.10207">Distributed Deep Learning in Open Collaborations</a></li>
</ul></li>
<li>Large models require large, high-quality datasets.
<ul>
<li>It is hard to curate only high-quality training examples when the dataset contains terabytes of text.</li>
<li>We need a way to control common biases in the dataset to prevent the model from inheriting them.</li>
<li>There are potential licensing issues when using large-scale web-text corpora.</li>
<li>Large-scale text datasets might contain personal information.</li>
</ul></li>
<li>Evaluating trained models on downstream tasks requires additional time and resources.
<ul>
<li>We need to probe the model for biased and toxic output, even when using a cleaned dataset.</li>
</ul></li>
<li>Optimization approaches like distillation, pruning, and quantization might not be enough when starting with a model that is hundreds of gigabytes in size.</li>
<li><a href="https://openai.com/api/">OpenAI API</a></li>
<li><a href="https://huggingface.co/docs/api-inference/index">Hugging Face Accelerated Inference API</a></li>
<li><a href="https://bigscience.huggingface.co/">BigScience</a> is a one-year-long research workshop meant to foster discussions and reflections on the research questions surrounding large language models, the challenges of creating and sharing them, and datasets used for research.
<ul>
<li>The collaborative tasks involve creating, sharing, and evaluating a massive multilingual dataset and language model.</li>
</ul></li>
<li><a href="https://www.eleuther.ai/">EleutherAI</a> is a decentralized collective of volunteers focused on AI alignment, scaling, and open-source AI research.
<ul>
<li>EleutherAI wants to train and open-source a GPT-3-sized model.</li>
<li><a href="https://huggingface.co/EleutherAI/gpt-neo-2.7B">GPT-Neo 2.7B</a></li>
<li><a href="https://huggingface.co/EleutherAI/gpt-j-6B">GPT-J 6B</a></li>
</ul></li>
</ul>
</section>
<section id="attention-please" class="level3">
<h3 class="anchored" data-anchor-id="attention-please">Attention Please!</h3>
<ul>
<li>Self-attention involves performing pairwise comparisons of all the tokens in a sequence, which becomes a computational bottleneck.</li>
<li>The self-attention layer of the Transformer architecture naively scales like <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B2%7D)">, where n is the length of the sequence.</li>
<li>A recent paper from Google shows we can reduce the memory complexity to <img src="https://latex.codecogs.com/png.latex?O%20%5Cleft(%20%5Clog%7Bn%7D%20%5Cright)"> via a simple reordering of the operations.
<ul>
<li><a href="https://arxiv.org/abs/2112.05682">Self-attention Does Not Need <img src="https://latex.codecogs.com/png.latex?O(n%5E%7B2%7D)"> Memory</a></li>
</ul></li>
<li>Much of the recent research on transformers focuses on making self-attention more efficient.
<ul>
<li><a href="https://arxiv.org/abs/2009.06732">Efficient Transformers: A Survey</a></li>
</ul></li>
<li>Common approaches to making attention more efficient involve introducing sparsity into the attention mechanism or applying kernels to the attention matrix.</li>
</ul>
</section>
<section id="sparse-attention" class="level3">
<h3 class="anchored" data-anchor-id="sparse-attention">Sparse Attention</h3>
<ul>
<li>We can reduce the number of computations performed in the self-attention layer by limiting the number of query-key pairs it generates according to a predefined pattern.</li>
<li>There are a handful of popular “atomic” sparsity patterns.
<ul>
<li><a href="https://arxiv.org/abs/2106.04554">A Survey of Transformers</a></li>
</ul></li>
<li><strong>Global attention</strong> defines a few tokens in the sequence that are allowed to attend to all others.</li>
<li><strong>Band attention</strong> computes attention over a diagonal band.</li>
<li><strong>Dilated attention</strong> skips some query-key pairs using a dilated window with gaps.</li>
<li><strong>Random attention</strong> samples a few keys for each query to compute attention scores.</li>
<li><strong>Block local attention</strong> divides the sequence into blocks and restricts attention to within these blocks.</li>
<li>Most transformer models with sparse attention use a mix of atomic sparsity patterns to generate the final attention matrix.</li>
<li>Models like <a href="https://huggingface.co/allenai/longformer-base-4096">Longformer</a> use a mix of global and band attention, while <a href="https://huggingface.co/google/bigbird-roberta-base">Bigbird</a> adds random attention.</li>
<li>Introducing sparsity into the attention matrix enables models to process much longer sequences.</li>
<li>It is also possible to learn the sparsity pattern by clustering the tokens into chunks.
<ul>
<li><a href="https://huggingface.co/google/reformer-crime-and-punishment">Reformer</a> uses a hash function to cluster similar tokens.</li>
</ul></li>
</ul>
</section>
<section id="linearized-attention" class="level3">
<h3 class="anchored" data-anchor-id="linearized-attention">Linearized Attention</h3>
<ul>
<li>Linearized attention involves changing the order of operations for computing attention scores.</li>
<li>We compute the self-attention score of the queries and keys using a similarity function like the dot product.</li>
<li>For a general similarity function <img src="https://latex.codecogs.com/png.latex?sim%20%5Cleft(%20q_%7Bi%7D,k_%7Bj%7D%20%5Cright)">, we can express the attention outputs as the following equation: ### <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D%20=%20%5Csum_%7Bj%7D%7B%5Cfrac%7Bsim%20%5Cleft(%20Q_%7Bi%7D,%20K_%7Bj%7D%20%5Cright)%7D%7B%5Csum_%7Bk%7D%7Bsim%5Cleft(%20Q_%7Bi%7D,%20K_%7Bk%7D%20%5Cright)%7D%7DV_%7Bj%7D%7D"></li>
<li>The trick behind linearized attention mechanisms is to express the similarity function as a kernel function that decomposes the operation into two pieces: ### <img src="https://latex.codecogs.com/png.latex?sim%20%5Cleft(%20Q_%7Bj%7D,%20K_%7Bj%7D%20%5Cright)%20=%20%5Cphi%20%5Cleft(Q_%7Bi%7D%20%5Cright)%5E%7BT%7D%20%5Cphi%20%5Cleft(%20K_%7Bj%7D%20%5Cright)"></li>
<li>where <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is typically a high-dimensional feature map.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cphi%20%5Cleft(%20Q_%7Bi%7D%20%5Cright)"> is independent of <img src="https://latex.codecogs.com/png.latex?j"> and <img src="https://latex.codecogs.com/png.latex?k">, so we can pull it under the sums to write the attention output as follows: ### <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D%20=%20%5Cfrac%7B%5Cphi%20%5Cleft(Q_%7Bi%7D%20%5Cright)%5E%7BT%7D%20%5Csum_%7Bj%7D%7B%5Cphi%20%5Cleft(%20K_%7Bj%7D%20%5Cright)%7D%20V_%7Bj%7D%5E%7BT%7D%7D%7B%5Cphi%20%5Cleft(Q_%7Bi%7D%20%5Cright)%5E%7BT%7D%20%5Csum_%7Bk%7D%7B%5Cphi%20%5Cleft(%20K_%7Bk%7D%20%5Cright)%7D%7D"></li>
<li>By first computing <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bj%7D%7B%5Cphi%20%5Cleft(%20K_%7Bj%7D%20%5Cright)%7D%20V_%7Bj%7D%5E%7BT%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk%7D%7B%5Cphi%20%5Cleft(%20K_%7Bk%7D%20%5Cright)%7D">, we can effectively linearize the space and time complexity of self-attention.</li>
<li>Popular methods that implement linearized self-attention include Linear Transformer and Performer.
<ul>
<li><a href="https://arxiv.org/abs/2006.16236">Transformers are RNNs: Fast Autoregressive Transformers with Linear Attention</a></li>
<li><a href="https://arxiv.org/abs/2009.14794">Rethinking Attention with Performers</a></li>
</ul></li>
</ul>
</section>
</section>
<section id="going-beyond-text" class="level2">
<h2 class="anchored" data-anchor-id="going-beyond-text">Going Beyond Text</h2>
<ul>
<li>Developing effective strategies for common textual tasks like classification and question answering allows us to address many types of real-world problems.</li>
</ul>
<section id="limitations-to-using-text" class="level3">
<h3 class="anchored" data-anchor-id="limitations-to-using-text">Limitations to using text</h3>
<section id="human-reporting-bias" class="level4">
<h4 class="anchored" data-anchor-id="human-reporting-bias">Human reporting bias</h4>
<ul>
<li>The frequencies of events in the training text my not represent their actual frequencies.
<ul>
<li><a href="https://openreview.net/pdf?id=AzxEzvpdE3Wcy">Reporting Bias and Knowledge Acquisition</a></li>
</ul></li>
<li>A model trained exclusively on text from the internet might have a distorted image of the world.</li>
</ul>
</section>
<section id="common-sense" class="level4">
<h4 class="anchored" data-anchor-id="common-sense">Common Sense</h4>
<ul>
<li>Most do not document their reasoning based on common sense.</li>
<li>Language models trained on text might know many facts about the world but lack basic common-sense reasoning.</li>
</ul>
</section>
<section id="facts" class="level4">
<h4 class="anchored" data-anchor-id="facts">Facts</h4>
<ul>
<li>A probabilistic language model cannot reliably store facts and can produce factually incorrect text.</li>
<li>Such models can detect named entities but have no direct way to access information about them.</li>
</ul>
</section>
<section id="modality" class="level4">
<h4 class="anchored" data-anchor-id="modality">Modality</h4>
<ul>
<li>Language models can’t connect to other modalities, such as audio, visual signals, or tabular data, that might address some of these limitations.</li>
</ul>
</section>
</section>
<section id="vision" class="level3">
<h3 class="anchored" data-anchor-id="vision">Vision</h3>
<ul>
<li>Transformers are now achieving efficiency similar to or better than Convolutional Neural Networks (CNNs).</li>
</ul>
<section id="igpt" class="level4">
<h4 class="anchored" data-anchor-id="igpt">iGPT</h4>
<ul>
<li>iGPT (short for image GPT) uses the GPT architecture and autoregressive pretraining objective to predict future pixel values by viewing images as sequences of pixels.</li>
<li><a href="https://proceedings.mlr.press/v119/chen20s.html">Generative Pretraining From Pixels</a></li>
<li>Pretraining on large image datasets enables iGPT to “autocomplete” partial images.</li>
<li>iGPT achieves performant results on classification tasks when using a classification head.</li>
</ul>
</section>
<section id="vit" class="level4">
<h4 class="anchored" data-anchor-id="vit">ViT</h4>
<ul>
<li>Vision Transformer (Vit) is a BERT-style take on transformers for vision.</li>
<li>We split the image into smaller patches and then embed each of these patches with a linear projection.</li>
<li>We combine the patch embeddings with position embeddings and feed them through an ordinary transformer encoder.</li>
<li>We mask or distort some of the patches during training, and the objective is to predict the average color of the masked patch.</li>
<li>This approach did not produce better results when pretrained on the standard ImageNet dataset, but it scaled significantly better than Convolutional Neural Networks on larger datasets.</li>
<li><a href="https://arxiv.org/abs/2010.11929">An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale</a></li>
<li>The Hugging Face Transformers library includes Vision Transformer.</li>
</ul>
<hr>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span></code></pre></div>
<hr>
<p><strong>Load an image of a dog</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">image <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"dog.jpg"</span>)</span>
<span id="cb7-2">plt.imshow(image)</span>
<span id="cb7-3">plt.axis(<span class="st" style="color: #20794D;">"off"</span>)</span>
<span id="cb7-4">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/output_17_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<hr>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb8-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb8-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb8-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb8-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> pipeline</span></code></pre></div>
<hr>
</section>
<section id="imageclassificationpipeline" class="level4">
<h4 class="anchored" data-anchor-id="imageclassificationpipeline"><code>ImageClassificationPipeline</code></h4>
<ul>
<li><a href="https://huggingface.co/docs/transformers/main/en/main_classes/pipelines#transformers.ImageClassificationPipeline">Documentation</a></li>
<li>Create an image classification pipeline</li>
</ul>
<p><strong>Create an image classification pipeline</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">image_classifier <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">"image-classification"</span>)</span></code></pre></div>
<hr>
<p><strong>Get the model architecture</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">image_classifier.model.config.architectures</span></code></pre></div>
<pre class="text"><code>    ['ViTForImageClassification']</code></pre>
<hr>
</section>
<section id="vitforimageclassification" class="level4">
<h4 class="anchored" data-anchor-id="vitforimageclassification"><code>ViTForImageClassification</code></h4>
<ul>
<li><a href="https://huggingface.co/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">Documentation</a></li>
<li>Create a ViT Model transformer with an image classification head for ImageNet.</li>
</ul>
<p><strong>Get the link to the Hugging Face model card</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"https://huggingface.co/</span><span class="sc" style="color: #5E5E5E;">{</span>image_classifier<span class="sc" style="color: #5E5E5E;">.</span>model<span class="sc" style="color: #5E5E5E;">.</span>config<span class="sc" style="color: #5E5E5E;">.</span>_name_or_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>https://huggingface.co/google/vit-base-patch16-224</code></pre>
<hr>
<p><strong>View potential Image classes</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">pd.DataFrame(<span class="bu" style="color: null;">list</span>(image_classifier.model.config.id2label.values())).T</span></code></pre></div>
<hr>
<p><strong>Perform image classification</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">preds <span class="op" style="color: #5E5E5E;">=</span> image_classifier(image)</span>
<span id="cb15-2">preds_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(preds)</span>
<span id="cb15-3">preds_df</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
score
</th>
<th>
label
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0.989680
</td>
<td>
golden retriever
</td>
</tr>
<tr>
<th>
1
</th>
<td>
0.002968
</td>
<td>
Labrador retriever
</td>
</tr>
<tr>
<th>
2
</th>
<td>
0.000502
</td>
<td>
kuvasz
</td>
</tr>
<tr>
<th>
3
</th>
<td>
0.000402
</td>
<td>
Irish setter, red setter
</td>
</tr>
<tr>
<th>
4
</th>
<td>
0.000345
</td>
<td>
tennis ball
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>The model correctly classifies the dog as a Golden Retriever.</li>
<li>Video models are a natural extension of image models and add a temporal dimension on top of the spatial dimension.</li>
<li>Video tasks are more challenging as the volume of data gets much larger, and we need to deal with an extra dimension.</li>
<li>Models such as TimeSformer introduce a spatial and temporal attention mechanism.
<ul>
<li><a href="https://arxiv.org/abs/2102.05095">Is Space-Time Attention All You Need for Video Understanding?</a></li>
<li>Such models can help build tools for many tasks such as video classification or annotation.</li>
</ul></li>
</ul>
<hr>
</section>
</section>
<section id="tables" class="level3">
<h3 class="anchored" data-anchor-id="tables">Tables</h3>
<ul>
<li>Lots of data is in structured databases instead of raw text.</li>
<li>Table Parser (TAPAS) applies the Transformer architecture to tables by combining the tabular information with the query.</li>
<li><a href="https://arxiv.org/abs/2004.02349">TAPAS: Weakly Supervised Table Parsing via Pre-training</a></li>
</ul>
<p><img alt="tapas-architecture" width="800" caption="Architecture of TAPAS (courtesy of Jonathan Herzig)" src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/chapter11_tapas-architecture.png" id="tapas-architecture"></p>
<p><strong>Create some sample table data</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">book_data <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb16-2">    {<span class="st" style="color: #20794D;">"chapter"</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"Introduction"</span>, <span class="st" style="color: #20794D;">"start_page"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"end_page"</span>: <span class="dv" style="color: #AD0000;">11</span>},</span>
<span id="cb16-3">    {<span class="st" style="color: #20794D;">"chapter"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"Text classification"</span>, <span class="st" style="color: #20794D;">"start_page"</span>: <span class="dv" style="color: #AD0000;">12</span>, </span>
<span id="cb16-4">     <span class="st" style="color: #20794D;">"end_page"</span>: <span class="dv" style="color: #AD0000;">48</span>},</span>
<span id="cb16-5">    {<span class="st" style="color: #20794D;">"chapter"</span>: <span class="dv" style="color: #AD0000;">2</span>, <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"Named Entity Recognition"</span>, <span class="st" style="color: #20794D;">"start_page"</span>: <span class="dv" style="color: #AD0000;">49</span>,</span>
<span id="cb16-6">     <span class="st" style="color: #20794D;">"end_page"</span>: <span class="dv" style="color: #AD0000;">73</span>},</span>
<span id="cb16-7">    {<span class="st" style="color: #20794D;">"chapter"</span>: <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"Question Answering"</span>, <span class="st" style="color: #20794D;">"start_page"</span>: <span class="dv" style="color: #AD0000;">74</span>, </span>
<span id="cb16-8">     <span class="st" style="color: #20794D;">"end_page"</span>: <span class="dv" style="color: #AD0000;">120</span>},</span>
<span id="cb16-9">    {<span class="st" style="color: #20794D;">"chapter"</span>: <span class="dv" style="color: #AD0000;">4</span>, <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"Summarization"</span>, <span class="st" style="color: #20794D;">"start_page"</span>: <span class="dv" style="color: #AD0000;">121</span>, </span>
<span id="cb16-10">     <span class="st" style="color: #20794D;">"end_page"</span>: <span class="dv" style="color: #AD0000;">140</span>},</span>
<span id="cb16-11">    {<span class="st" style="color: #20794D;">"chapter"</span>: <span class="dv" style="color: #AD0000;">5</span>, <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"Conclusion"</span>, <span class="st" style="color: #20794D;">"start_page"</span>: <span class="dv" style="color: #AD0000;">141</span>, </span>
<span id="cb16-12">     <span class="st" style="color: #20794D;">"end_page"</span>: <span class="dv" style="color: #AD0000;">144</span>}</span>
<span id="cb16-13">]</span>
<span id="cb16-14"></span>
<span id="cb16-15">table <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(book_data)</span>
<span id="cb16-16">table[<span class="st" style="color: #20794D;">'number_of_pages'</span>] <span class="op" style="color: #5E5E5E;">=</span> table[<span class="st" style="color: #20794D;">'end_page'</span>]<span class="op" style="color: #5E5E5E;">-</span>table[<span class="st" style="color: #20794D;">'start_page'</span>]</span></code></pre></div>
<p><strong>Note:</strong> We need to make all columns of type <code>str</code> to play nicely with TAPAS.</p>
<hr>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">table <span class="op" style="color: #5E5E5E;">=</span> table.astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb17-2">table</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
chapter
</th>
<th>
name
</th>
<th>
start_page
</th>
<th>
end_page
</th>
<th>
number_of_pages
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0
</td>
<td>
Introduction
</td>
<td>
1
</td>
<td>
11
</td>
<td>
10
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
Text classification
</td>
<td>
12
</td>
<td>
48
</td>
<td>
36
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
Named Entity Recognition
</td>
<td>
49
</td>
<td>
73
</td>
<td>
24
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
Question Answering
</td>
<td>
74
</td>
<td>
120
</td>
<td>
46
</td>
</tr>
<tr>
<th>
4
</th>
<td>
4
</td>
<td>
Summarization
</td>
<td>
121
</td>
<td>
140
</td>
<td>
19
</td>
</tr>
<tr>
<th>
5
</th>
<td>
5
</td>
<td>
Conclusion
</td>
<td>
141
</td>
<td>
144
</td>
<td>
3
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Create a table question answering pipeline</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">table_qa <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">"table-question-answering"</span>)</span>
<span id="cb18-2">table_qa.model.config</span></code></pre></div>
<pre class="text"><code>    TapasConfig {
      "_name_or_path": "google/tapas-base-finetuned-wtq",
      "aggregation_labels": {
        "0": "NONE",
        "1": "SUM",
        "2": "AVERAGE",
        "3": "COUNT"
      },
      "aggregation_loss_weight": 1.0,
      "aggregation_temperature": 1.0,
      "allow_empty_column_selection": false,
      "answer_loss_cutoff": 0.664694,
      "answer_loss_importance": 1.0,
      "architectures": [
        "TapasForQuestionAnswering"
      ],
      "attention_probs_dropout_prob": 0.1,
      "average_approximation_function": "ratio",
      "average_logits_per_cell": false,
      "cell_selection_preference": 0.207951,
      "disable_per_token_loss": false,
      "gradient_checkpointing": false,
      "hidden_act": "gelu",
      "hidden_dropout_prob": 0.1,
      "hidden_size": 768,
      "huber_loss_delta": 0.121194,
      "init_cell_selection_weights_to_zero": true,
      "initializer_range": 0.02,
      "intermediate_size": 3072,
      "layer_norm_eps": 1e-12,
      "max_num_columns": 32,
      "max_num_rows": 64,
      "max_position_embeddings": 1024,
      "model_type": "tapas",
      "no_aggregation_label_index": 0,
      "num_aggregation_labels": 4,
      "num_attention_heads": 12,
      "num_hidden_layers": 12,
      "pad_token_id": 0,
      "positive_label_weight": 10.0,
      "reset_position_index_per_cell": true,
      "select_one_column": true,
      "softmax_temperature": 1.0,
      "temperature": 0.0352513,
      "transformers_version": "4.18.0",
      "type_vocab_size": [
        3,
        256,
        256,
        2,
        256,
        256,
        10
      ],
      "type_vocab_sizes": [
        3,
        256,
        256,
        2,
        256,
        256,
        10
      ],
      "use_answer_as_supervision": true,
      "use_gumbel_for_aggregation": false,
      "use_gumbel_for_cells": false,
      "use_normalized_answer_loss": false,
      "vocab_size": 30522
    }</code></pre>
<hr>
<p><strong>Get the link to the Hugging Face model card</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"https://huggingface.co/</span><span class="sc" style="color: #5E5E5E;">{</span>table_qa<span class="sc" style="color: #5E5E5E;">.</span>model<span class="sc" style="color: #5E5E5E;">.</span>config<span class="sc" style="color: #5E5E5E;">.</span>_name_or_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>    https://huggingface.co/google/tapas-base-finetuned-wtq</code></pre>
<hr>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">pd.DataFrame(table_qa.tokenizer.vocab.keys()).head(<span class="dv" style="color: #AD0000;">1500</span>).T</span></code></pre></div>
<hr>
<section id="tapasforquestionanswering" class="level4">
<h4 class="anchored" data-anchor-id="tapasforquestionanswering"><code>TapasForQuestionAnswering</code></h4>
<ul>
<li><a href="https://huggingface.co/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">Documentation</a></li>
<li>Create a Tapas Model with a cell selection head and optional aggregation head for question answering tasks.</li>
</ul>
<p><strong>Pass some queries to the model</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">queries <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"What's the topic in chapter 4?"</span>,</span>
<span id="cb23-2">           <span class="st" style="color: #20794D;">"What is the total number of pages?"</span>,</span>
<span id="cb23-3">           <span class="st" style="color: #20794D;">"On which page does the chapter about question-answering start?"</span>,</span>
<span id="cb23-4">           <span class="st" style="color: #20794D;">"How many chapters have more than 20 pages?"</span>]</span>
<span id="cb23-5">preds <span class="op" style="color: #5E5E5E;">=</span> table_qa(table, queries)</span></code></pre></div>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="cf" style="color: #003B4F;">for</span> query, pred <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(queries, preds):</span>
<span id="cb24-2">    <span class="bu" style="color: null;">print</span>(query)</span>
<span id="cb24-3">    <span class="cf" style="color: #003B4F;">if</span> pred[<span class="st" style="color: #20794D;">"aggregator"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>: </span>
<span id="cb24-4">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted answer: "</span> <span class="op" style="color: #5E5E5E;">+</span> pred[<span class="st" style="color: #20794D;">"answer"</span>])</span>
<span id="cb24-5">    <span class="cf" style="color: #003B4F;">else</span>: </span>
<span id="cb24-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted answer: "</span> <span class="op" style="color: #5E5E5E;">+</span> pred[<span class="st" style="color: #20794D;">"answer"</span>])</span>
<span id="cb24-7">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'='</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">50</span>)</span></code></pre></div>
<pre class="text"><code>    What's the topic in chapter 4?
    Predicted answer: Summarization
    ==================================================
    What is the total number of pages?
    Predicted answer: SUM &gt; 10, 36, 24, 46, 19, 3
    ==================================================
    On which page does the chapter about question-answering start?
    Predicted answer: AVERAGE &gt; 74
    ==================================================
    How many chapters have more than 20 pages?
    Predicted answer: COUNT &gt; 1, 2, 3
    ==================================================</code></pre>
<p><strong>Note:</strong> * The model predicted exactly one cell with no aggregation for the first query, and the answer is correct. * For the second query, the model correctly predicted that we need to sum the individual page counts for each chapter to determine the total number of pages. * The model correctly answered question three but included an unnecessary average aggregation. * The model correctly determined that chapters 1, 2, and 3 have more than 20 pages. * The ability to ask questions in natural language instead of Python code allows a much wider audience to query the data to answer specific questions.</p>
<hr>
</section>
</section>
</section>
<section id="multimodal-transformers" class="level2">
<h2 class="anchored" data-anchor-id="multimodal-transformers">Multimodal Transformers</h2>
<section id="speech-to-text" class="level3">
<h3 class="anchored" data-anchor-id="speech-to-text">Speech-to-Text</h3>
<ul>
<li>Speaking is more convenient than reading and writing for a significant portion of the population.</li>
<li>Automatic speech recognition (ASR) involves converting spoken words to text and enables voice technologies like Siri to answer questions like “What is the weather like today?”.</li>
<li>The <a href="https://huggingface.co/models?search=wav2vec2+facebook">wave2vec 2.0</a> family of models is one of the most recent developments in ASR and uses a transformer layer in combination with a CNN.
<ul>
<li><a href="https://arxiv.org/abs/2006.11477">wav2vec 2.0: A Framework for Self-Supervised Learning of Speech Representations</a></li>
</ul></li>
<li>These models leverage unlabeled data to achieve competitive results with only a few minutes of labeled data.</li>
<li>The Hugging Face Transformers library includes wave2vec 2.0 models.</li>
</ul>
<p><strong>Create an automatic speech recognition pipeline</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">asr <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">"automatic-speech-recognition"</span>)</span>
<span id="cb26-2">asr.model.config</span></code></pre></div>
<pre class="text"><code>    Wav2Vec2Config {
      "_name_or_path": "facebook/wav2vec2-base-960h",
      "activation_dropout": 0.1,
      "adapter_kernel_size": 3,
      "adapter_stride": 2,
      "add_adapter": false,
      "apply_spec_augment": true,
      "architectures": [
        "Wav2Vec2ForCTC"
      ],
      "attention_dropout": 0.1,
      "bos_token_id": 1,
      "classifier_proj_size": 256,
      "codevector_dim": 256,
      "contrastive_logits_temperature": 0.1,
      "conv_bias": false,
      "conv_dim": [
        512,
        512,
        512,
        512,
        512,
        512,
        512
      ],
      "conv_kernel": [
        10,
        3,
        3,
        3,
        3,
        2,
        2
      ],
      "conv_stride": [
        5,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "ctc_loss_reduction": "sum",
      "ctc_zero_infinity": false,
      "diversity_loss_weight": 0.1,
      "do_stable_layer_norm": false,
      "eos_token_id": 2,
      "feat_extract_activation": "gelu",
      "feat_extract_dropout": 0.0,
      "feat_extract_norm": "group",
      "feat_proj_dropout": 0.1,
      "feat_quantizer_dropout": 0.0,
      "final_dropout": 0.1,
      "gradient_checkpointing": false,
      "hidden_act": "gelu",
      "hidden_dropout": 0.1,
      "hidden_dropout_prob": 0.1,
      "hidden_size": 768,
      "initializer_range": 0.02,
      "intermediate_size": 3072,
      "layer_norm_eps": 1e-05,
      "layerdrop": 0.1,
      "mask_feature_length": 10,
      "mask_feature_min_masks": 0,
      "mask_feature_prob": 0.0,
      "mask_time_length": 10,
      "mask_time_min_masks": 2,
      "mask_time_prob": 0.05,
      "model_type": "wav2vec2",
      "num_adapter_layers": 3,
      "num_attention_heads": 12,
      "num_codevector_groups": 2,
      "num_codevectors_per_group": 320,
      "num_conv_pos_embedding_groups": 16,
      "num_conv_pos_embeddings": 128,
      "num_feat_extract_layers": 7,
      "num_hidden_layers": 12,
      "num_negatives": 100,
      "output_hidden_size": 768,
      "pad_token_id": 0,
      "proj_codevector_dim": 256,
      "tdnn_dilation": [
        1,
        2,
        3,
        1,
        1
      ],
      "tdnn_dim": [
        512,
        512,
        512,
        512,
        1500
      ],
      "tdnn_kernel": [
        5,
        3,
        3,
        1,
        1
      ],
      "transformers_version": "4.18.0",
      "use_weighted_layer_sum": false,
      "vocab_size": 32,
      "xvector_output_dim": 512
    }</code></pre>
<hr>
<p><strong>Get the link to the Hugging Face model card</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"https://huggingface.co/</span><span class="sc" style="color: #5E5E5E;">{</span>asr<span class="sc" style="color: #5E5E5E;">.</span>model<span class="sc" style="color: #5E5E5E;">.</span>config<span class="sc" style="color: #5E5E5E;">.</span>_name_or_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>    https://huggingface.co/facebook/wav2vec2-base-960h</code></pre>
<p><strong>Note:</strong> The model trained on 960 hours of speech audio.</p>
<hr>
<section id="wav2vec2forctc" class="level4">
<h4 class="anchored" data-anchor-id="wav2vec2forctc"><code>Wav2Vec2ForCTC</code></h4>
<ul>
<li><a href="https://huggingface.co/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Documentation</a></li>
<li>Create a Wav2Vec2 model with a language modeling head for Connectionist Temporal Classification (CTC).</li>
</ul>
<hr>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span></code></pre></div>
<hr>
</section>
<section id="the-superb-dataset" class="level4">
<h4 class="anchored" data-anchor-id="the-superb-dataset">The SUPERB Dataset</h4>
<ul>
<li><a href="https://huggingface.co/datasets/superb">Hugging Face Dataset Card</a></li>
<li>SUPERB is a leaderboard to benchmark the performance of a shared model across a wide range of speech processing tasks with minimal architecture changes and labeled data.</li>
</ul>
<p><strong>Load the ASR subset of the SUPERB dataset</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">ds <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"superb"</span>, <span class="st" style="color: #20794D;">"asr"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"validation[:1]"</span>)</span>
<span id="cb31-2">pd.DataFrame(ds[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
file
</th>
<th>
audio
</th>
<th>
text
</th>
<th>
speaker_id
</th>
<th>
chapter_id
</th>
<th>
id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
array
</th>
<td>
/home/innom-dt/.cache/huggingface/datasets/downloads/extracted/aa91addd71e85ab524e5b5b56fa3d0de777838850cb76ec55ad066e969fd5144/LibriSpeech/dev-clean/1272/128104/1272-128104-0000.flac
</td>
<td>
[0.002380371, 0.0020751953, 0.0019836426, 0.002105713, 0.0016174316, 0.00030517578, 9.1552734e-05, 0.00033569336, 0.0009765625, 0.0018310547, 0.0020141602, 0.002105713, 0.001739502, 0.00045776367, -0.00039672852, 0.00045776367, 0.0010070801, 9.1552734e-05, 0.00048828125, 0.001159668, 0.0007324219, 0.0009460449, 0.0018005371, 0.0018310547, 0.00088500977, 0.0004272461, 0.00048828125, 0.0007324219, 0.0010986328, 0.002105713, 0.0025634766, 0.002532959, 0.0025634766, 0.0022888184, 0.0018005371, 0.0010681152, 0.00064086914, 0.00012207031, 0.0002746582, 0.001159668, 0.0015258789, 0.0015563965, 0.0019226074, 0.0012207031, -3.0517578e-05, -0.00036621094, -0.00039672852, -0.00039672852, -0.00015258789, 0.0006713867, 0.0012817383, 0.0018615723, 0.0015869141, 0.0012817383, 0.0007324219, 9.1552734e-05, -0.000579834, -0.00045776367, 9.1552734e-05, 0.00033569336, 0.00024414062, 0.0011291504, 0.001373291, 0.0012817383, 0.00088500977, 0.00030517578, -0.00088500977, -0.0014648438, -0.0008239746, 0.00012207031, 0.0011901855, 0.0019226074, 0.0016479492, 0.00088500977, 0.00076293945, 0.0004272461, -0.0005187988, -0.0005493164, -0.00036621094, -0.0004272461, -0.00018310547, 0.000579834, 0.0009460449, 0.0007324219, 0.0010070801, 0.0007019043, 0.00024414062, -0.00018310547, -0.00064086914, -0.00088500977, -0.00048828125, 0.0002746582, 0.0007324219, 0.0018310547, 0.0018005371, 0.0012512207, 0.00061035156, -0.00036621094, -0.0012817383, -0.00091552734, …]
</td>
<td>
MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL
</td>
<td>
1272
</td>
<td>
128104
</td>
<td>
1272-128104-0000
</td>
</tr>
<tr>
<th>
path
</th>
<td>
/home/innom-dt/.cache/huggingface/datasets/downloads/extracted/aa91addd71e85ab524e5b5b56fa3d0de777838850cb76ec55ad066e969fd5144/LibriSpeech/dev-clean/1272/128104/1272-128104-0000.flac
</td>
<td>
/home/innom-dt/.cache/huggingface/datasets/downloads/extracted/aa91addd71e85ab524e5b5b56fa3d0de777838850cb76ec55ad066e969fd5144/LibriSpeech/dev-clean/1272/128104/1272-128104-0000.flac
</td>
<td>
MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL
</td>
<td>
1272
</td>
<td>
128104
</td>
<td>
1272-128104-0000
</td>
</tr>
<tr>
<th>
sampling_rate
</th>
<td>
/home/innom-dt/.cache/huggingface/datasets/downloads/extracted/aa91addd71e85ab524e5b5b56fa3d0de777838850cb76ec55ad066e969fd5144/LibriSpeech/dev-clean/1272/128104/1272-128104-0000.flac
</td>
<td>
16000
</td>
<td>
MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL
</td>
<td>
1272
</td>
<td>
128104
</td>
<td>
1272-128104-0000
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>The file column contains the path to the audio sample, and the text column contains the expected transcription.</li>
<li>We can use the <a href="https://pysoundfile.readthedocs.io/en/latest/">SoundFile library</a> to read each audio file and convert the audio to an array of floats.</li>
</ul>
<hr>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;">import</span> soundfile <span class="im" style="color: #00769E;">as</span> sf</span></code></pre></div>
<hr>
<p><strong>Add a new column storing each audio sample as an array of floats</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;">def</span> map_to_array(batch):</span>
<span id="cb33-2">    speech, _ <span class="op" style="color: #5E5E5E;">=</span> sf.read(batch[<span class="st" style="color: #20794D;">"file"</span>])</span>
<span id="cb33-3">    batch[<span class="st" style="color: #20794D;">"speech"</span>] <span class="op" style="color: #5E5E5E;">=</span> speech</span>
<span id="cb33-4">    <span class="cf" style="color: #003B4F;">return</span> batch</span>
<span id="cb33-5"></span>
<span id="cb33-6">ds <span class="op" style="color: #5E5E5E;">=</span> ds.<span class="bu" style="color: null;">map</span>(map_to_array)</span></code></pre></div>
<hr>
<p><strong>Play a sample from the dataset</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Audio</span>
<span id="cb34-2"></span>
<span id="cb34-3">display(Audio(ds[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'speech'</span>], rate<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16000</span>))</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ds.set_format(<span class="st" style="color: #20794D;">"numpy"</span>)</span></code></pre></div>
<hr>
<p><strong>Pass the audio sample the pipeline</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">pred <span class="op" style="color: #5E5E5E;">=</span> asr(ds[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">"speech"</span>])</span>
<span id="cb36-2"><span class="bu" style="color: null;">print</span>(pred)</span></code></pre></div>
<pre class="text"><code>    {'text': 'MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL'}</code></pre>
<p><strong>Note:</strong> * The words in the transcription are correct, but the punctuation is missing. * It is hard to infer punctuation from audio alone, and we could add it in a post-processing step. * Building a model for a new language still requires a minimum amount of labeled data, which can be challenging to obtain. * A new method named wav2vec-U combines clever clustering and GAN training to build a speech-to-text model using only independent unlabeled speech and unlabeled text data. * This method requires not aligned speech and text data, enabling the training of highly performant speech-to-text models for a much larger spectrum of languages. * <a href="https://arxiv.org/abs/2105.11084">Unsupervised Speech Recognition</a></p>
<hr>
<p><img alt="wav2vec-u" width="800" caption="Training scheme for wav2vec-U (courtesy of Alexsei Baevski)" src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/chapter11_wav2vec-u.png" id="wav2vec-u"></p>
</section>
</section>
<section id="vision-and-text" class="level3">
<h3 class="anchored" data-anchor-id="vision-and-text">Vision and Text</h3>
<ul>
<li>There have been several developments in combining visual and textual information.</li>
</ul>
<section id="vqa" class="level4">
<h4 class="anchored" data-anchor-id="vqa">VQA</h4>
<ul>
<li><a href="https://arxiv.org/abs/1612.00837">Making the V in VQA Matter: Elevating the Role of Image Understanding in Visual Question Answering</a></li>
<li>Models such as LXMERT and VisualBERT use vision models like ResNets to extract features from images and then use transformer encoders to combine them with the natural questions and predict and answer.
<ul>
<li><a href="https://arxiv.org/abs/1908.07490">LXMERT: Learning Cross-Modality Encoder Representations from Transformers</a></li>
<li><a href="https://arxiv.org/abs/1908.03557">VisualBERT: A Simple and Performant Baseline for Vision and Language</a></li>
</ul></li>
</ul>
</section>
<section id="layoutlm" class="level4">
<h4 class="anchored" data-anchor-id="layoutlm">LayoutLM</h4>
<ul>
<li>The <a href="https://huggingface.co/models?search=microsoft+layoutlm">LayoutLM</a> family of models uses an enhanced Transformer architecture that receives a text sequence, an image, and a layout as input.</li>
<li>There are embedding layers associated with each modality, a spatially-aware self-attention mechanism, and a mix of image and text/image pretraining objectives to align the different modalities.</li>
<li>LayoutLM models pre-train on millions of scanned documents and can transfer to various downstream tasks, similar to BERT for NLP.</li>
<li>LayoutLM models are the current state of the art for analyzing scanned business documents like receipts, invoices, or reports.</li>
</ul>
<p><img alt="layoutlm" width="500" caption="The model architecture and pretraining strategies for LayoutLMv2 (courtesy of Yang Xu)" src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/chapter11_layoutlm.png" id="layoutlm"></p>
</section>
<section id="dalle" class="level4">
<h4 class="anchored" data-anchor-id="dalle">DALL·E</h4>
<ul>
<li>DALLE uses the GPT architecture and autoregressive modeling to generate images from text.</li>
<li>It regards the words and pixels as one sequence of tokens and can, therefore, continue generating an image from a text prompt.</li>
<li><a href="https://arxiv.org/abs/2102.12092">Zero-Shot Text-to-Image Generation</a></li>
</ul>
</section>
<section id="clip" class="level4">
<h4 class="anchored" data-anchor-id="clip">CLIP</h4>
<ul>
<li><a href="https://arxiv.org/abs/2103.00020">Learning Transferable Visual Models From Natural Language Supervision</a></li>
<li>We can use the pretrained model for classification by embedding the possible classes with the text encoder and comparing the class embeddings to the image embedding that we want to classify.</li>
<li>We select the class with the highest similarity.</li>
<li>CLIP has remarkable zero-shot image classification performance and is competitive with fully supervised-trained vision models while being more flexible.</li>
<li>We need to instantiate a processor that contains a feature extractor and a tokenizer for image-to-text tasks.</li>
<li>The feature extractor converts the image into a form suitable for the model, while the tokenizer decodes the model predictions into text.</li>
</ul>
<p><img alt="clip-arch" width="800" caption="Architecture of CLIP (courtesy of Alec Radford)" src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/chapter11_clip-arch.png" id="clip-arch"></p>
<hr>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> CLIPProcessor, CLIPModel</span></code></pre></div>
<hr>
</section>
<section id="clipprocessor" class="level4">
<h4 class="anchored" data-anchor-id="clipprocessor"><code>CLIPProcessor</code></h4>
<ul>
<li><a href="https://huggingface.co/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor">Documentation</a></li>
<li>Create a CLIP processor which wraps a CLIP feaure extractor and a CLIP tokenizer into a single processor.</li>
</ul>
</section>
<section id="clipmodel" class="level4">
<h4 class="anchored" data-anchor-id="clipmodel"><code>CLIPModel</code></h4>
<ul>
<li><a href="https://huggingface.co/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">Documentation</a></li>
</ul>
<p><strong>Instantiate a CLIPModel and processor</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">clip_ckpt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"openai/clip-vit-base-patch32"</span></span>
<span id="cb39-2">model <span class="op" style="color: #5E5E5E;">=</span> CLIPModel.from_pretrained(clip_ckpt)</span>
<span id="cb39-3">processor <span class="op" style="color: #5E5E5E;">=</span> CLIPProcessor.from_pretrained(clip_ckpt)</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"https://huggingface.co/</span><span class="sc" style="color: #5E5E5E;">{</span>clip_ckpt<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>    https://huggingface.co/openai/clip-vit-base-patch32</code></pre>
<hr>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">processor</span></code></pre></div>
<pre class="text"><code>    CLIPProcessor:
    - feature_extractor: CLIPFeatureExtractor {
      "crop_size": 224,
      "do_center_crop": true,
      "do_normalize": true,
      "do_resize": true,
      "feature_extractor_type": "CLIPFeatureExtractor",
      "image_mean": [
        0.48145466,
        0.4578275,
        0.40821073
      ],
      "image_std": [
        0.26862954,
        0.26130258,
        0.27577711
      ],
      "resample": 3,
      "size": 224
    }
    
    - tokenizer: PreTrainedTokenizerFast(name_or_path='openai/clip-vit-base-patch32', vocab_size=49408, model_max_len=77, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'bos_token': AddedToken("&lt;|startoftext|&gt;", rstrip=False, lstrip=False, single_word=False, normalized=True), 'eos_token': AddedToken("&lt;|endoftext|&gt;", rstrip=False, lstrip=False, single_word=False, normalized=True), 'unk_token': AddedToken("&lt;|endoftext|&gt;", rstrip=False, lstrip=False, single_word=False, normalized=True), 'pad_token': '&lt;|endoftext|&gt;'})</code></pre>
<hr>
<p><strong>Load a test image</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">image <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"dog.jpg"</span>)</span>
<span id="cb44-2">plt.imshow(image)</span>
<span id="cb44-3">plt.axis(<span class="st" style="color: #20794D;">"off"</span>)</span>
<span id="cb44-4">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/transformers-book-notes/chapter-11/images/output_86_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<hr>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;">import</span> torch</span></code></pre></div>
<hr>
<p><strong>Create some sample image captions</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">texts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"a photo of a golden retriever"</span>, <span class="st" style="color: #20794D;">"a photo of a dog"</span>, <span class="st" style="color: #20794D;">"a photo of agi"</span>]</span></code></pre></div>
<hr>
<p><strong>Compare the image to the captions</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">inputs <span class="op" style="color: #5E5E5E;">=</span> processor(text<span class="op" style="color: #5E5E5E;">=</span>texts, images<span class="op" style="color: #5E5E5E;">=</span>image, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>, padding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb47-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb47-3">    outputs <span class="op" style="color: #5E5E5E;">=</span> model(<span class="op" style="color: #5E5E5E;">**</span>inputs)</span>
<span id="cb47-4">logits_per_image <span class="op" style="color: #5E5E5E;">=</span> outputs.logits_per_image</span>
<span id="cb47-5">probs <span class="op" style="color: #5E5E5E;">=</span> logits_per_image.softmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb47-6">pd.DataFrame(<span class="bu" style="color: null;">zip</span>(texts, probs[<span class="dv" style="color: #AD0000;">0</span>].numpy()), columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Text'</span>, <span class="st" style="color: #20794D;">"Probability"</span>])</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Text
</th>
<th>
Probability
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
a photo of a golden retriever
</td>
<td>
0.868025
</td>
</tr>
<tr>
<th>
1
</th>
<td>
a photo of a dog
</td>
<td>
0.131801
</td>
</tr>
<tr>
<th>
2
</th>
<td>
a photo of agi
</td>
<td>
0.000174
</td>
</tr>
</tbody>

</table>
</div>
<hr>
</section>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://transformersbook.com/">Natural Language Processing with Transformers Book</a></li>
<li><a href="https://github.com/nlp-with-transformers/notebooks">The Transformers book GitHub Repository</a></li>
</ul>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>ai</category>
  <category>huggingface</category>
  <category>nlp</category>
  <category>notes</category>
  <guid>christianjmills.com/posts/transformers-book-notes/chapter-11/index.html</guid>
  <pubDate>Tue, 26 Apr 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Transformers Book Ch. 10</title>
  <link>christianjmills.com/posts/transformers-book-notes/chapter-10/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Training Transformers from Scratch</li>
<li>Project: Python Source Code Generator</li>
<li>Large Datasets and Where to Find Them</li>
<li>Building a Tokenizer</li>
<li>Training a Model from Scratch</li>
<li>Results and Analysis</li>
<li>References</li>
</ul>
<hr>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> transformers</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> datasets</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> accelerate</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Only print error messages</span></span>
<span id="cb1-6">transformers.logging.set_verbosity_error()</span>
<span id="cb1-7">datasets.logging.set_verbosity_error()</span>
<span id="cb1-8"></span>
<span id="cb1-9">transformers.__version__, datasets.__version__, accelerate.__version__</span></code></pre></div>
<pre class="text"><code>    ('4.18.0', '2.1.0', '0.5.1')</code></pre>
<hr>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> ast</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># https://astor.readthedocs.io/en/latest/</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">import</span> astor</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> inspect</span>
<span id="cb3-5"><span class="im" style="color: #00769E;">import</span> textwrap</span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">def</span> print_source(obj, exclude_doc<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb3-7">    </span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;"># Get source code</span></span>
<span id="cb3-9">    source <span class="op" style="color: #5E5E5E;">=</span> inspect.getsource(obj)</span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;"># Remove any common leading whitespace from every line</span></span>
<span id="cb3-11">    cleaned_source <span class="op" style="color: #5E5E5E;">=</span> textwrap.dedent(source)</span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;"># Parse the source into an AST node.</span></span>
<span id="cb3-13">    parsed <span class="op" style="color: #5E5E5E;">=</span> ast.parse(cleaned_source)</span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;">for</span> node <span class="kw" style="color: #003B4F;">in</span> ast.walk(parsed):</span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;"># Skip any nodes that are not class or function definitions</span></span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):</span>
<span id="cb3-18">            <span class="cf" style="color: #003B4F;">continue</span></span>
<span id="cb3-19">        </span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;">if</span> exclude_doc <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(node.body) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>: node.body <span class="op" style="color: #5E5E5E;">=</span> node.body[<span class="dv" style="color: #AD0000;">1</span>:]</span>
<span id="cb3-21">        </span>
<span id="cb3-22">    <span class="bu" style="color: null;">print</span>(astor.to_source(parsed))</span></code></pre></div>
<hr>
<section id="training-transformers-from-scratch" class="level2">
<h2 class="anchored" data-anchor-id="training-transformers-from-scratch">Training Transformers from Scratch</h2>
<ul>
<li>Efficiently training large models from scratch requires special tools for distributed training.</li>
</ul>
</section>
<section id="project-python-source-code-generator" class="level2">
<h2 class="anchored" data-anchor-id="project-python-source-code-generator">Project: Python Source Code Generator</h2>
<ul>
<li>The goal is to train a GPT-like model to generate Python source code.</li>
</ul>
<section id="existing-ai-code-completion-products" class="level3">
<h3 class="anchored" data-anchor-id="existing-ai-code-completion-products">Existing AI Code Completion Products</h3>
<ul>
<li><a href="https://copilot.github.com/">GitHub Copilot</a></li>
<li><a href="https://www.tabnine.com/">TabNine</a></li>
<li><a href="https://www.kite.com/">Kite</a></li>
</ul>
</section>
<section id="codeparrot" class="level3">
<h3 class="anchored" data-anchor-id="codeparrot">CodeParrot</h3>
<ul>
<li><a href="https://github.com/huggingface/transformers/tree/main/examples/research_projects/codeparrot">GitHub Repository</a></li>
<li>CodeParrot is a GPT-2 model trained from scratch on Python code.</li>
</ul>
</section>
</section>
<section id="large-datasets-and-where-to-find-them" class="level2">
<h2 class="anchored" data-anchor-id="large-datasets-and-where-to-find-them">Large Datasets and Where to Find Them</h2>
<ul>
<li>Many domains often have large amounts of data available such as legal documents, biomedical databases, and programming codebases.</li>
<li>Large datasets can usually only be labeled using heuristics or accompanying metadata.</li>
<li>We can still use large unlabeled datasets to fine-tune language models for domain adaptation.</li>
<li>Using a pretrained model forces you to use the model’s corresponding tokenizer.</li>
<li>Using a tokenizer trained on a corpus from a different domain is typically suboptimal.</li>
</ul>
<section id="challenges-of-building-a-large-scale-corpus" class="level3">
<h3 class="anchored" data-anchor-id="challenges-of-building-a-large-scale-corpus">Challenges of Building a Large-Scale Corpus</h3>
<ul>
<li>The model will inherit any defects in the pretraining corpus.</li>
<li>It becomes more difficult to control or fully understand the contents of a dataset the larger it gets.</li>
<li>Most exceedingly large datasets are not handcrafted.</li>
<li>Creating large-scale datasets typically requires using data generated as a side effect of other activities.</li>
<li>The high degree of automation used to create large-scale datasets means there is limited control over the content and the method to create them.</li>
<li>There is an increased risk of training a model on lower-quality and biased data.</li>
<li>A significant portion of the C4 corpus used to train T5 is machine-translated rather than human-translated.</li>
<li>The stopword filtering in C4 disproportionately removed African-American English from the corpus.</li>
<li>It is challenging to find a middle ground between including too much explicit content and erasing all mention of sexuality or gender.</li>
<li>Common words like “sex” are absent from C4.</li>
<li>There are many copyright violations in the Bookcorpus dataset used to train BERT.</li>
<li>Bookcorpus also contains genre-skew toward “romance” novels.</li>
<li><a href="https://arxiv.org/abs/1506.06724">Aligning Books and Movies: Towards Story-like Visual Explanations by Watching Movies and Reading Books</a></li>
<li><a href="https://arxiv.org/abs/2105.05241">Addressing “Documentation Debt” in Machine Learning Research: A Retrospective Datasheet for BookCorpus</a></li>
</ul>
</section>
<section id="compare-text-generations-from-gpt-and-gpt-2" class="level3">
<h3 class="anchored" data-anchor-id="compare-text-generations-from-gpt-and-gpt-2">Compare text generations from GPT and GPT-2</h3>
<ul>
<li>The original GPT model trained predominately on BookCorpus.</li>
<li>GPT-2 trained on web pages, blogs, and news articles linked from Reddit.</li>
</ul>
<hr>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> pipeline, set_seed</span></code></pre></div>
<hr>
<p><strong>Initialze text generation pipelines with the original GPT and GPT-2</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">generation_gpt <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">"text-generation"</span>, model<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"openai-gpt"</span>)</span>
<span id="cb5-2">generation_gpt2 <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">"text-generation"</span>, model<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gpt2"</span>)</span></code></pre></div>
<p><strong>Note:</strong> The main difference between the two models is the pretraining dataset.</p>
<hr>
<p><strong>Compare the model sizes</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> model_size(model):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">sum</span>(t.numel() <span class="cf" style="color: #003B4F;">for</span> t <span class="kw" style="color: #003B4F;">in</span> model.parameters())</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"GPT  size: </span><span class="sc" style="color: #5E5E5E;">{</span>model_size(generation_gpt.model)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1000</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">M parameters"</span>)</span>
<span id="cb6-5"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"GPT2 size: </span><span class="sc" style="color: #5E5E5E;">{</span>model_size(generation_gpt2.model)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1000</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">M parameters"</span>)</span></code></pre></div>
<pre class="text"><code>    GPT  size: 116.5M parameters
    GPT2 size: 124.4M parameters</code></pre>
<p><strong>Note:</strong> The original GPT model is approximately the same size as the smallest GPT-2 variant.</p>
<hr>
<p><strong>Reset random seed</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">set_seed(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<hr>
<p><strong>Define a function to generate text using a prompt</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> enum_pipeline_ouputs(pipe, prompt, num_return_sequences):</span>
<span id="cb9-2">    out <span class="op" style="color: #5E5E5E;">=</span> pipe(prompt, num_return_sequences<span class="op" style="color: #5E5E5E;">=</span>num_return_sequences,</span>
<span id="cb9-3">               clean_up_tokenization_spaces<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>.join(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span> <span class="op" style="color: #5E5E5E;">+</span> s[<span class="st" style="color: #20794D;">"generated_text"</span>] <span class="cf" style="color: #003B4F;">for</span> i, s <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(out))</span></code></pre></div>
<hr>
<p><strong>Compare the output of the two models</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">When they came back"</span></span>
<span id="cb10-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"GPT completions:</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">+</span> enum_pipeline_ouputs(generation_gpt, prompt, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"GPT-2 completions:</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">+</span> enum_pipeline_ouputs(generation_gpt2, prompt, <span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
<pre class="text"><code>    GPT completions:
    1.
    When they came back. 
     " we need all we can get, " jason said once they had settled into the back of the truck without anyone stopping them. " after getting out here, it 'll be up to us what to find. for now
    2.
    When they came back. 
     his gaze swept over her body. he 'd dressed her, too, in the borrowed clothes that she 'd worn for the journey. 
     " i thought it would be easier to just leave you there. " a woman like
    3.
    When they came back to the house and she was sitting there with the little boy. 
     " don't be afraid, " he told her. she nodded slowly, her eyes wide. she was so lost in whatever she discovered that tom knew her mistake
    
    GPT-2 completions:
    1.
    When they came back we had a big dinner and the other guys went to see what their opinion was on her. I did an hour and they were happy with it.
    2.
    When they came back to this island there had been another massacre, but he could not help but feel pity for the helpless victim who had been left to die, and that they had failed that day. And so was very, very grateful indeed.
    3.
    When they came back to our house after the morning, I asked if she was sure. She said, "Nope." The two kids were gone that morning. I thought they were back to being a good friend.
    
    When Dost</code></pre>
<p><strong>Note:</strong> * The text generated with the original GPT model has a distinctive romance skew. * GPT-2 generates more neutral text containing blog-like or adventure-related elements. * A model reflects the language bias and over or underrepresentation of populations of the dataset used to train it. * We need to consider the model’s biases concerning the target audience. * <a href="https://arxiv.org/abs/2010.13561">Towards Accountability for Machine Learning Datasets: Practices from Software Engineering and Infrastructure</a></p>
<hr>
</section>
<section id="building-a-custom-code-dataset" class="level3">
<h3 class="anchored" data-anchor-id="building-a-custom-code-dataset">Building a Custom Code Dataset</h3>
<ul>
<li>We can obtain a pretraining corpus of Python code from GitHub repositories.</li>
<li>We can access GitHub repositories via the <a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api">GitHub REST API</a> or public dataset inventories like <a href="https://console.cloud.google.com/marketplace/product/github/github-repos?pli=1&amp;project=majestic-vault-303101">Google BigQuery</a>.</li>
<li>The GitHub REST API is rate limited but provides access to additional attributes like star and downstream usage information.</li>
<li>The <a href="https://libraries.io/">Libraries.io</a> service monitors open source packages.</li>
</ul>
<section id="bigquery-public-data.github_repos.contents-table" class="level4">
<h4 class="anchored" data-anchor-id="bigquery-public-data.github_repos.contents-table"><code>bigquery-public-data.github_repos.contents</code> table</h4>
<ul>
<li>The <a href="https://console.cloud.google.com/bigquery?project=bigquery-public-data&amp;page=table&amp;t=contents&amp;d=github_repos&amp;p=bigquery-public-data&amp;redirect_from_classic=true&amp;ws=!1m5!1m4!4m3!1sbigquery-public-data!2sgithub_repos!3scontents"><code>bigquery-public-data.github_repos.contents</code> table</a> contains copies of all ASCII files less than 10MB in size.</li>
</ul>
</section>
<section id="codesearchnet-corpus" class="level4">
<h4 class="anchored" data-anchor-id="codesearchnet-corpus">CodeSearchNet corpus</h4>
<ul>
<li>The CodeSearchNet corpus contains 2 million comment-code pairs from open-source libraries hosted on GitHub.</li>
<li>It contains code and documentation for several programming languages.</li>
<li><a href="https://huggingface.co/datasets/code_search_net">Hugging Face Dataset Card</a></li>
</ul>
</section>
<section id="creating-a-dataset-with-google-bigquery" class="level4">
<h4 class="anchored" data-anchor-id="creating-a-dataset-with-google-bigquery">Creating a dataset with Google BigQuery</h4>
<ul>
<li><a href="https://arxiv.org/abs/2006.03511">Unsupervised Translation of Programming Languages</a></li>
</ul>
<p><strong>Steps to export Python files</strong> 1. Create a Google Cloud account. 2. Create a Google BigQuery project under your account. 3. Create a dataset inside the project. 4. Create a table in the dataset to store the results of the SQL request. 5. Prepare the following SQL query and specify a destination table</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb12-1"><span class="kw" style="color: #003B4F;">SELECT</span> </span>
<span id="cb12-2">    f.repo_name, f.path, c.copies, c.<span class="kw" style="color: #003B4F;">size</span>, c.content, l.license</span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;">FROM</span></span>
<span id="cb12-4">    `bigquery<span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">data</span>.github_repos.files` <span class="kw" style="color: #003B4F;">AS</span> f</span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;">JOIN</span></span>
<span id="cb12-6">    `bigquery<span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">data</span>.github_repos.contents` <span class="kw" style="color: #003B4F;">AS</span> c</span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;">ON</span></span>
<span id="cb12-8">    f.<span class="kw" style="color: #003B4F;">id</span> <span class="op" style="color: #5E5E5E;">=</span> c.<span class="kw" style="color: #003B4F;">id</span></span>
<span id="cb12-9"><span class="kw" style="color: #003B4F;">JOIN</span></span>
<span id="cb12-10">    `bigquery<span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">data</span>.github_repos.licenses` <span class="kw" style="color: #003B4F;">as</span> l</span>
<span id="cb12-11"><span class="kw" style="color: #003B4F;">ON</span></span>
<span id="cb12-12">    f.repo_name <span class="op" style="color: #5E5E5E;">=</span> l.repo_name</span>
<span id="cb12-13"><span class="kw" style="color: #003B4F;">WHERE</span></span>
<span id="cb12-14">    <span class="kw" style="color: #003B4F;">NOT</span> c.binary</span>
<span id="cb12-15">    <span class="kw" style="color: #003B4F;">AND</span> ((F.path <span class="kw" style="color: #003B4F;">LIKE</span> <span class="st" style="color: #20794D;">'%.py'</span>)</span>
<span id="cb12-16">        <span class="kw" style="color: #003B4F;">AND</span> (c.<span class="kw" style="color: #003B4F;">size</span> <span class="kw" style="color: #003B4F;">BETWEEN</span> <span class="dv" style="color: #AD0000;">1024</span> <span class="kw" style="color: #003B4F;">and</span> <span class="dv" style="color: #AD0000;">1048575</span>))</span></code></pre></div>
<ol start="6" type="1">
<li>Run the query</li>
</ol>
<p><strong>Note:</strong> Encoutered the following error when attempting to run the query</p>
<pre class="text"><code>Quota exceeded: Your project exceeded quota for free query bytes scanned. For more information, see https://cloud.google.com/bigquery/docs/troubleshoot-quotas </code></pre>
<ul>
<li>The above command processes about 2.6TB of data to extract 26.8 million files.</li>
<li>The resulting dataset contains about 50 GB of compressed JSON files.</li>
<li>The dataset is about 200GB when uncompressed.</li>
<li>Each JSON file contains source code from Python files.</li>
<li>The query filters empty files like <code>__init__.py</code> files and files larger than 1MB.</li>
<li>The query includes the licenses for the files so we can filter the training data later on.</li>
</ul>
<p><strong>Steps to download results from Google Cloud</strong> 1. Export results to Google Cloud a. Create a bucket and a folder in Google Cloud Storage (GCS). b. Export your table to this bucket by selecting Export &gt; Export to GCS, with a JSON export format and gzip compression. 2. Download the bucket to your local machine using <a href="https://cloud.google.com/storage/docs/gsutil">gsutil</a> a. Install gsutil with pip install gsutil. b. Configure gsutil with your Google account: gsutil config. c.&nbsp;Copy your bucket on your machine: <code>bash      gsutil -m -o "GSUtil:parallel_process_count=1" cp -r gs://&lt;name_of_bucket&gt;</code></p>
<p><strong>Alternative: Download the dataset from Hugging Face Hub</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;">git</span> clone https://huggingface.co/datasets/transformersbook/codeparrot</span></code></pre></div>
</section>
</section>
<section id="to-filter-the-noise-or-not" class="level3">
<h3 class="anchored" data-anchor-id="to-filter-the-noise-or-not">To Filter the Noise or Not?</h3>
<ul>
<li>Data preparation is crucial, and we should clean the dataset as much as possible.</li>
<li>The quality of code in GitHub repositories varies greatly.</li>
<li>Having some noise in the training dataset makes our code generation system robust to noisy inputs at inference time but also makes predictions more random.</li>
<li>The intended use case and whole-system integration determine whether you want more or less noisy data and add pre and post-filtering operations.</li>
</ul>
<section id="potential-steps-to-clean-dataset" class="level4">
<h4 class="anchored" data-anchor-id="potential-steps-to-clean-dataset">Potential steps to clean dataset</h4>
<ul>
<li>Filter code based on stars or usage information.</li>
<li>Code with more stars or higher usage is more likely to be higher quality.</li>
<li>Remove duplicated code samples.</li>
<li>Consider copyright information.</li>
<li>Investigate the language used in the documentation, comments, or docstrings.</li>
<li>Remove personal identifying information such as passwords or keys.</li>
</ul>
</section>
</section>
<section id="working-with-large-datasets" class="level3">
<h3 class="anchored" data-anchor-id="working-with-large-datasets">Working with Large Datasets</h3>
<ul>
<li>Working with large datasets requires additional considerations regarding disk space and RAM usage.</li>
<li>It is common for datasets to be larger than the available RAM.</li>
<li>The Hugging Face Datasets library provides memory mapping and streaming functionality to address RAM and disk space limitations.</li>
</ul>
<section id="memory-mapping" class="level4">
<h4 class="anchored" data-anchor-id="memory-mapping">Memory mapping</h4>
<ul>
<li>Hugging Face Datasets uses a mechanism for zero-copy and zero-overhead memory mapping.</li>
<li>The mechanism caches each dataset in a file that directly reflects the content in RAM.</li>
<li>Hugging Face Datasets opens a read-only pointer to this file and uses it as a substitute for RAM.</li>
</ul>
<hr>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset, DownloadConfig</span></code></pre></div>
<hr>
<p><strong>Decompress and load the downloaded dataset from the local folder</strong></p>
<blockquote class="blockquote">
<p><strong>Note:</strong> The following code block assumes that you have downloaded the BigQuery dataset to a folder called <code>codeparrot</code>. We suggest skipping this step since it will unpack the compressed files and require ~180GB of disk space. This code is just for demonstration purposes and you can just continue below with the streamed dataset which will not consume that much disk space.</p>
</blockquote>
<hr>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">download_config <span class="op" style="color: #5E5E5E;">=</span> DownloadConfig(delete_extracted<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, cache_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/mnt/980SSD/Datasets/codeparrot-cache"</span>)</span>
<span id="cb16-2">dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"/mnt/980SSD/Datasets/codeparrot"</span>, cache_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/mnt/980SSD/Datasets/codeparrot-cache"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>,</span>
<span id="cb16-3">                       download_config<span class="op" style="color: #5E5E5E;">=</span>download_config)</span></code></pre></div>
<pre class="text"><code>    Dataset json downloaded and prepared to /mnt/980SSD/Datasets/codeparrot-cache/json/codeparrot-43fc192cc9f62326/0.0.0/ac0ca5f5289a6cf108e706efcf040422dbbfa8e658dee6a819f20d76bb84d26b. Subsequent calls will reuse this data.</code></pre>
<p><strong>Note:</strong> * The <code>delete_extracted=True</code> argument deletes the extracted files to free up disk space. * The Hugging Face Datasets library extracted and read the compressed JSON files by loading them in a single optimized cache file.</p>
<hr>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> psutil, os</span></code></pre></div>
<hr>
<p><strong>Check the size of the cached dataset</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Number of python files code in dataset : </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(dataset)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb19-2">ds_size <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(os.stat(f[<span class="st" style="color: #20794D;">"filename"</span>]).st_size <span class="cf" style="color: #003B4F;">for</span> f <span class="kw" style="color: #003B4F;">in</span> dataset.cache_files)</span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;"># os.stat.st_size is expressed in bytes, so we convert to GB</span></span>
<span id="cb19-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Dataset size (cache file) : </span><span class="sc" style="color: #5E5E5E;">{</span>ds_size <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">30</span><span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;"> GB"</span>)</span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># Process.memory_info is expressed in bytes, so we convert to MB</span></span>
<span id="cb19-6"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"RAM used: </span><span class="sc" style="color: #5E5E5E;">{</span>psutil<span class="sc" style="color: #5E5E5E;">.</span>Process(os.getpid())<span class="sc" style="color: #5E5E5E;">.</span>memory_info()<span class="sc" style="color: #5E5E5E;">.</span>rss <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;">20</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB"</span>)</span></code></pre></div>
<pre class="text"><code>    Number of python files code in dataset : 18695559
    Dataset size (cache file) : 183.68 GB
    RAM used: 4359 MB</code></pre>
<p><strong>Note:</strong> * The dataset is much larger than the available RAM, but we can still load and access it. * NLP data is typically lightweight to load compared to the model processing computations. * The zero-copy/zero-overhead format uses Apache Arrow under the hood for efficiency.</p>
<hr>
</section>
<section id="streaming" class="level4">
<h4 class="anchored" data-anchor-id="streaming">Streaming</h4>
<ul>
<li>Some datasets are too large to fit in most hard drives.</li>
<li>The Hugging Face Datasets library supports streaming many compressed and uncompressed file formats that we can read line-by-line.</li>
<li>Hugging Face Datasets opens and reads compressed JSON files on the fly in streaming mode.</li>
<li>Streamed datasets are of the type <a href="https://huggingface.co/docs/datasets/v2.1.0/en/package_reference/main_classes#datasets.IterableDataset"><code>IterableDataset</code></a>.</li>
<li>We cannot access random elements and need to read them in order.</li>
<li>Methods like <code>shuffle()</code> operate by fetching a buffer of examples and shuffling within this buffer.</li>
<li>The samples of a streamed dataset are identical to those of a nonstreamed dataset.</li>
<li>Streamed datasets do not generate a cache file on the drive or require significant RAM.</li>
<li>Individual batches load into memory as requested, reducing the memory footprint.</li>
<li>We can also stream remote datasets from the Hugging Face Hub, allowing us to use arbitrarily large datasets on small servers.</li>
</ul>
<hr>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">streamed_dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"/mnt/980SSD/Datasets/codeparrot"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>, streaming<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<pre class="text"><code>    AttributeError: '_io.BufferedReader' object has no attribute 'loc'</code></pre>
<hr>
<p><strong>Iterate through the streamed dataset</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">iterator <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(streamed_dataset)</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">next</span>(iterator))</span>
<span id="cb23-4"><span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">next</span>(iterator))</span></code></pre></div>
<hr>
<p><strong>Stream a remote dataset</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">remote_dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">'transformersbook/codeparrot'</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>,</span>
<span id="cb24-2">                              streaming<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<hr>
</section>
</section>
<section id="adding-datasets-to-the-hugging-face-hub" class="level3">
<h3 class="anchored" data-anchor-id="adding-datasets-to-the-hugging-face-hub">Adding Datasets to the Hugging Face Hub</h3>
<ul>
<li>Pushing our dataset to the Hugging Face Hub allows us to access it from a training server and share it with the community.</li>
</ul>
<section id="command-line-steps" class="level4">
<h4 class="anchored" data-anchor-id="command-line-steps">Command Line Steps</h4>
<ol type="1">
<li>Log into Hugging Face account</li>
</ol>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;">huggingface-cli</span> login</span></code></pre></div>
<ol start="2" type="1">
<li>Create a new dataset repository on the Hub for the training split</li>
</ol>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;">huggingface-cli</span> repo create <span class="at" style="color: #657422;">--type</span> dataset codeparrot-train</span></code></pre></div>
<ol start="3" type="1">
<li>Create a new dataset repository on the Hub for the validation split</li>
</ol>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;">huggingface-cli</span> repo create <span class="at" style="color: #657422;">--type</span> dataset codeparrot-valid</span></code></pre></div>
<ol start="4" type="1">
<li>Clone the training repository</li>
</ol>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;">huggingface-cli</span> repo create <span class="at" style="color: #657422;">--type</span> dataset codeparrot-train</span></code></pre></div>
<ol start="5" type="1">
<li>Clone the validation repository</li>
</ol>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;">huggingface-cli</span> repo create <span class="at" style="color: #657422;">--type</span> dataset codeparrot-valid</span></code></pre></div>
<ol start="6" type="1">
<li>Copy all but the last GitHub file to the as the training set</li>
</ol>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="bu" style="color: null;">cd</span> codeparrot-train</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;">cp</span> ../codeparrot/<span class="pp" style="color: #AD0000;">*</span>.json.gz .</span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;">rm</span> ./file-000000000183.json.gz</span></code></pre></div>
<ol start="7" type="1">
<li>Commit the files and push them to the Hub</li>
</ol>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Adding dataset files"</span></span>
<span id="cb31-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
<ol start="8" type="1">
<li>Repeat the process for the validation set</li>
</ol>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="bu" style="color: null;">cd</span> ../codeparrot-valid</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;">cp</span> ../codeparrot/file-000000000183.json.gz</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;">mv</span> ./file-000000000183.json.gz ./file-000000000183_validation.json.gz</span>
<span id="cb32-4"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Adding dataset files"</span></span>
<span id="cb32-6"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
<ul>
<li>It is good practice to add README cards that explain how the datasets were created and provide as much helpful information as possible.</li>
<li>A well-documented dataset is more likely to be valuable to other people, including the future you.</li>
<li><a href="https://github.com/huggingface/datasets/blob/master/templates/README_guide.md">Hugging Face Dataset Card Creation Guide</a></li>
</ul>
</section>
</section>
</section>
<section id="building-a-tokenizer" class="level2">
<h2 class="anchored" data-anchor-id="building-a-tokenizer">Building a Tokenizer</h2>
<ul>
<li>It is crucial to stick with the same preprocessing design choices used during the pretraining process when using a pretrained model.</li>
<li>Using a tokenizer prepared for another dataset when training a new model can be suboptimal.
<ul>
<li>The T5 tokenizer uses extensive stopword filtering and is unaware of some common English words like “sex.”</li>
<li>The CamemBERT tokenizer is only trained on French text and is unaware of common English words such as “being.”</li>
</ul></li>
</ul>
<hr>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoTokenizer</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">def</span> tok_list(tokenizer, string):</span>
<span id="cb34-2">    input_ids <span class="op" style="color: #5E5E5E;">=</span> tokenizer(string, add_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)[<span class="st" style="color: #20794D;">"input_ids"</span>]</span>
<span id="cb34-3">    <span class="cf" style="color: #003B4F;">return</span> [tokenizer.decode(tok) <span class="cf" style="color: #003B4F;">for</span> tok <span class="kw" style="color: #003B4F;">in</span> input_ids]</span></code></pre></div>
<p><strong>Initialize tokenizers using the pretrained T5 and CamemBERT model vocabularies</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">tokenizer_T5 <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"t5-base"</span>)</span>
<span id="cb35-2">tokenizer_camembert <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"camembert-base"</span>)</span></code></pre></div>
<hr>
<p><strong>Test the limitations of the T5 and CamemBERT tokenizers</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'T5 tokens for "sex": </span><span class="sc" style="color: #5E5E5E;">{</span>tok_list(tokenizer_T5,<span class="st" style="color: #20794D;">"sex"</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb36-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'CamemBERT tokens for "being": </span><span class="sc" style="color: #5E5E5E;">{</span>tok_list(tokenizer_camembert,<span class="st" style="color: #20794D;">"being"</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<pre class="text"><code>    T5 tokens for "sex": ['', 's', 'ex']
    CamemBERT tokens for "being": ['be', 'ing']</code></pre>
<p><strong>Note:</strong></p>
<ul>
<li>Splitting such short and common words into subparts is often inefficient as it increases the sequence length of the model.</li>
<li>It is essential to consider the domain and the preprocessing of the dataset used to train a tokenizer.</li>
<li>The tokenizer and model can encode bias from the dataset that impacts the downstream behavior of the model.</li>
</ul>
<hr>
<section id="the-tokenizer-model" class="level3">
<h3 class="anchored" data-anchor-id="the-tokenizer-model">The Tokenizer Model</h3>
<ul>
<li>Training a tokenizer is a way to create an optimal mapping from a string of text to a list of integers that the model can ingest.</li>
<li>The optimal string-to-integer conversion involves a vocabulary consisting of a list of atomic strings and an associated method to convert, normalize, cut, or map a text string into a list of indices with this vocabulary.</li>
<li>The list of indices is the input for the neural network.</li>
<li>The tokenizer processing pipeline involves normalization, pre-tokenization, the tokenizer model, and postprocessing.</li>
<li>The tokenizer model trains on a corpus.</li>
<li>Several subword tokenization algorithms are available, such as BPE, WordPiece, and Unigram.</li>
<li>BPE starts from a list of single characters and creates a vocabulary by progressively creating new tokens formed by merging the most frequently co-occurring basic units and adding them to the list.</li>
<li>This process continues until we reach the predefined vocabulary size.</li>
<li>Unigram initializes its base vocabulary with all the words in the corpus and potential subwords and progressively removes or splits the less helpful tokens until it reaches the target vocab size.</li>
<li>The impact of the chosen tokenization algorithm on downstream performance varies based on the task.</li>
<li>It is difficult to identify if one algorithm is better than the others.</li>
<li>Both BPE and Unigram perform reasonably well in most cases.</li>
</ul>
</section>
<section id="measuring-tokenizer-performance" class="level3">
<h3 class="anchored" data-anchor-id="measuring-tokenizer-performance">Measuring Tokenizer Performance</h3>
<ul>
<li>It is challenging to measure a tokenizer’s optimality and performance in practice.</li>
<li>Subword fertility calculates the average number of subwords produced per tokenized word.</li>
<li>The proportion of continued words refers to the amount of tokenized words in a corpus split into at least two subtokens.</li>
<li>Coverage metrics track information like the proportion of unknown words or rarely used tokens in a tokenized corpus.</li>
<li>We often estimate the robustness to misspelling or noise and model performance on such out-of-domain examples.</li>
<li>These measures provide different views on tokenizer performance.</li>
<li>However, they tend to ignore the interaction of the tokenizer with the model.</li>
<li>The best way to evaluate tokenizers is using the downstream performance of the model.</li>
</ul>
</section>
<section id="a-tokenizer-for-python" class="level3">
<h3 class="anchored" data-anchor-id="a-tokenizer-for-python">A Tokenizer for Python</h3>
<ul>
<li>Using a natural language pre-tokenizer for Python code might be suboptimal.</li>
<li>Indentation has semantic meaning in Python code.</li>
<li>Splitting on all whitespaces and removing them would remove valuable indentation information.</li>
<li>Line breaks are not meaningful in Python code, and we can remove them without issue.</li>
<li>Underscores can be part of single variable names and would not to use for splitting text.</li>
<li>Byte-level tokenizers preserve spaces and might be a good candidate for tokenizing code.</li>
<li>Python has a built-in tokenize module that splits Python code strings into meaningful units.
<ul>
<li>This approach is slow since it is Python-based and limited by the Python global interpreter lock (GIL).</li>
</ul></li>
<li>Most tokenizers provided by the Hugging Face Tokenizers library are in Rust and many orders of magnitude faster to train and use.</li>
</ul>
<hr>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoTokenizer</span></code></pre></div>
<hr>
<p><strong>Test the byte-level GPT-2 tokenizer on Python code</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">python_code <span class="op" style="color: #5E5E5E;">=</span> <span class="vs" style="color: #20794D;">r"""def say_hello():</span></span>
<span id="cb39-2"><span class="vs" style="color: #20794D;">    print("Hello, World!")</span></span>
<span id="cb39-3"><span class="vs" style="color: #20794D;"># Print it</span></span>
<span id="cb39-4"><span class="vs" style="color: #20794D;">say_hello()</span></span>
<span id="cb39-5"><span class="vs" style="color: #20794D;">"""</span></span>
<span id="cb39-6">python_code</span></code></pre></div>
<pre class="text"><code>    'def say_hello():\n    print("Hello, World!")\n# Print it\nsay_hello()\n'</code></pre>
<hr>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"gpt2"</span>)</span>
<span id="cb41-2">pd.DataFrame(tokenizer(python_code).tokens()).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
<th>
13
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
<th>
22
</th>
<th>
23
</th>
<th>
24
</th>
<th>
25
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
Ġsay
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
():
</td>
<td>
Ċ
</td>
<td>
Ġ
</td>
<td>
Ġ
</td>
<td>
Ġ
</td>
<td>
Ġprint
</td>
<td>
(“
</td>
<td>
Hello
</td>
<td>
,
</td>
<td>
ĠWorld
</td>
<td>
!“
</td>
<td>
)
</td>
<td>
Ċ
</td>
<td>
#
</td>
<td>
ĠPrint
</td>
<td>
Ġit
</td>
<td>
Ċ
</td>
<td>
say
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
()
</td>
<td>
Ċ
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Inspect the normalization step</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="bu" style="color: null;">print</span>(tokenizer.backend_tokenizer.normalizer)</span></code></pre></div>
<pre class="text"><code>    None</code></pre>
<p><strong>Note:</strong> The GPT-2 tokenizer does not use normalization and works directly on raw Unicode inputs.</p>
<hr>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb44-2">pd.set_option(<span class="st" style="color: #20794D;">'max_colwidth'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb44-3">pd.set_option(<span class="st" style="color: #20794D;">'display.max_rows'</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb44-4">pd.set_option(<span class="st" style="color: #20794D;">'display.max_columns'</span>, <span class="va" style="color: #111111;">None</span>)</span></code></pre></div>
<hr>
<p><strong>Inspect the pre-tokenization step</strong></p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">pd.DataFrame(tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(python_code))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
(0, 3)
</td>
</tr>
<tr>
<th>
1
</th>
<td>
Ġsay
</td>
<td>
(3, 7)
</td>
</tr>
<tr>
<th>
2
</th>
<td>
_
</td>
<td>
(7, 8)
</td>
</tr>
<tr>
<th>
3
</th>
<td>
hello
</td>
<td>
(8, 13)
</td>
</tr>
<tr>
<th>
4
</th>
<td>
():
</td>
<td>
(13, 16)
</td>
</tr>
<tr>
<th>
5
</th>
<td>
ĊĠĠĠ
</td>
<td>
(16, 20)
</td>
</tr>
<tr>
<th>
6
</th>
<td>
Ġprint
</td>
<td>
(20, 26)
</td>
</tr>
<tr>
<th>
7
</th>
<td>
(“
</td>
<td>
(26, 28)
</td>
</tr>
<tr>
<th>
8
</th>
<td>
Hello
</td>
<td>
(28, 33)
</td>
</tr>
<tr>
<th>
9
</th>
<td>
,
</td>
<td>
(33, 34)
</td>
</tr>
<tr>
<th>
10
</th>
<td>
ĠWorld
</td>
<td>
(34, 40)
</td>
</tr>
<tr>
<th>
11
</th>
<td>
!“)
</td>
<td>
(40, 43)
</td>
</tr>
<tr>
<th>
12
</th>
<td>
Ċ
</td>
<td>
(43, 44)
</td>
</tr>
<tr>
<th>
13
</th>
<td>
#
</td>
<td>
(44, 45)
</td>
</tr>
<tr>
<th>
14
</th>
<td>
ĠPrint
</td>
<td>
(45, 51)
</td>
</tr>
<tr>
<th>
15
</th>
<td>
Ġit
</td>
<td>
(51, 54)
</td>
</tr>
<tr>
<th>
16
</th>
<td>
Ċ
</td>
<td>
(54, 55)
</td>
</tr>
<tr>
<th>
17
</th>
<td>
say
</td>
<td>
(55, 58)
</td>
</tr>
<tr>
<th>
18
</th>
<td>
_
</td>
<td>
(58, 59)
</td>
</tr>
<tr>
<th>
19
</th>
<td>
hello
</td>
<td>
(59, 64)
</td>
</tr>
<tr>
<th>
20
</th>
<td>
()
</td>
<td>
(64, 66)
</td>
</tr>
<tr>
<th>
21
</th>
<td>
Ċ
</td>
<td>
(66, 67)
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>Hugging Face Tokenizers provides an offset tracking feature for switching between strings and tokens.</li>
<li>Hugging Face Tokenizers tracks all operations on the input string so that it is possible to know what part of the input string corresponds to a token after tokenization.</li>
<li>The numbers in the above output indicate where each token originates in the original string.</li>
<li>The word “hello” corresponds to the characters 8 to 13 in the original string.</li>
<li>Each Unicode character is composed of between 1 and 4 bytes.</li>
<li>There are 143,859 Unicode characters and 256 elements in the byte alphabet.</li>
<li>We can express each Unicode character as a sequence of bytes.</li>
<li>We can have a model using an alphabet of only 256 words and process any Unicode string.</li>
</ul>
<hr>
<p><strong>Check the representations of some Unicode characters</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">a, e <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">u"a"</span>, <span class="st" style="color: #20794D;">u"€"</span></span>
<span id="cb46-2">byte <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">ord</span>(a.encode(<span class="st" style="color: #20794D;">"utf-8"</span>))</span>
<span id="cb46-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` is encoded as `</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">.</span>encode(<span class="st" style="color: #20794D;">"utf-8"</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` with a single byte: </span><span class="sc" style="color: #5E5E5E;">{</span>byte<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb46-4">byte <span class="op" style="color: #5E5E5E;">=</span> [<span class="bu" style="color: null;">ord</span>(<span class="bu" style="color: null;">chr</span>(i)) <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> e.encode(<span class="st" style="color: #20794D;">"utf-8"</span>)]</span>
<span id="cb46-5"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>e<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` is encoded as `</span><span class="sc" style="color: #5E5E5E;">{</span>e<span class="sc" style="color: #5E5E5E;">.</span>encode(<span class="st" style="color: #20794D;">"utf-8"</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` with three bytes: </span><span class="sc" style="color: #5E5E5E;">{</span>byte<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<pre class="text"><code>    `a` is encoded as `b'a'` with a single byte: 97
    `€` is encoded as `b'\xe2\x82\xac'` with three bytes: [226, 130, 172]</code></pre>
<p><strong>Note:</strong></p>
<ul>
<li>Building our vocabulary from the 143,859 Unicode characters would make the model’s embedding layer extremely large.</li>
<li>Using only the 256 byte-values as the vocabulary would result in longer input sequences.
<ul>
<li><a href="https://arxiv.org/abs/2105.13626">ByT5: Towards a token-free future with pre-trained byte-to-byte models</a>
<ul>
<li>The ByT5 paper provides a details study of the overhead from using byte values for our vocabulary.</li>
</ul></li>
</ul></li>
<li>The BPE algorithm constructs a medium-sized vocabulary by extending the 256 byte-values with the most common combinations of bytes.</li>
<li>The name, Byte-Pair Encoding, comes from a data compression technique proposed by Philip Gage in 1994, which operated on bytes.
<ul>
<li><a href="https://thesai.org/Publications/ViewPaper?Volume=3&amp;Issue=8&amp;Code=IJACSA&amp;SerialNo=3">A New Algorithm for Data Compression Optimization</a></li>
</ul></li>
<li>Standard BPE algorithms in NLP typically operate on Unicode strings rather than bytes.
<ul>
<li>A recent type of BPE that works specifically on bytes is called byte-level BPE.</li>
</ul></li>
<li>The BPE algorithms are designed to work with clean Unicode strings as inputs, not bytes, and expect regular ASCII characters in the inputs without spaces or control characters.</li>
<li>Many Unicode control characters correspond to the 256 first bytes.</li>
<li>The GPT-2 tokenizer maps all the 256 input bytes to printable Unicode characters, which the BPE algorithms can digest.</li>
</ul>
<hr>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">from</span> transformers.models.gpt2.tokenization_gpt2 <span class="im" style="color: #00769E;">import</span> bytes_to_unicode</span></code></pre></div>
<hr>
<p><strong>Inspect the GPT-2 mapping of bytes to Unicode characters</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">byte_to_unicode_map <span class="op" style="color: #5E5E5E;">=</span> bytes_to_unicode()</span>
<span id="cb49-2">unicode_to_byte_map <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>((v, k) <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> byte_to_unicode_map.items())</span>
<span id="cb49-3">base_vocab <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(unicode_to_byte_map.keys())</span>
<span id="cb49-4"></span>
<span id="cb49-5"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Size of our base vocabulary: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(base_vocab)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb49-6"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'First element: `</span><span class="sc" style="color: #5E5E5E;">{</span>base_vocab[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`, last element: `</span><span class="sc" style="color: #5E5E5E;">{</span>base_vocab[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`'</span>)</span></code></pre></div>
<pre class="text"><code>Size of our base vocabulary: 256
First element: `!`, last element: `Ń`</code></pre>
<hr>
<p><strong>Examples of character mappings in BPE</strong></p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">byte_to_unicode_map <span class="op" style="color: #5E5E5E;">=</span> bytes_to_unicode()</span>
<span id="cb51-2">unicode_to_byte_map <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>((v, k) <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> byte_to_unicode_map.items())</span>
<span id="cb51-3">base_vocab <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(unicode_to_byte_map.keys())</span>
<span id="cb51-4"></span>
<span id="cb51-5">examples <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb51-6">    [<span class="st" style="color: #20794D;">'Regular characters'</span>, <span class="st" style="color: #20794D;">'`a` and `?`'</span>, <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">ord</span>(<span class="st" style="color: #20794D;">"a"</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> and </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">ord</span>(<span class="st" style="color: #20794D;">"?"</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span> , <span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>byte_to_unicode_map[<span class="bu" style="color: null;">ord</span>(<span class="st" style="color: #20794D;">"a"</span>)]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` and `</span><span class="sc" style="color: #5E5E5E;">{</span>byte_to_unicode_map[<span class="bu" style="color: null;">ord</span>(<span class="st" style="color: #20794D;">"?"</span>)]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`'</span>],</span>
<span id="cb51-7">    [<span class="st" style="color: #20794D;">'Nonprintable control character (carriage return)'</span>, <span class="st" style="color: #20794D;">'`U+000D`'</span>, <span class="ss" style="color: #20794D;">f'13'</span>, <span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>byte_to_unicode_map[<span class="dv" style="color: #AD0000;">13</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`'</span>],</span>
<span id="cb51-8">    [<span class="st" style="color: #20794D;">'A space'</span>, <span class="st" style="color: #20794D;">'` `'</span>, <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">ord</span>(<span class="st" style="color: #20794D;">" "</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, <span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>byte_to_unicode_map[<span class="bu" style="color: null;">ord</span>(<span class="st" style="color: #20794D;">" "</span>)]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`'</span>],</span>
<span id="cb51-9">    [<span class="st" style="color: #20794D;">'A nonbreakable space'</span>, <span class="st" style="color: #20794D;">'`</span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">xa0`'</span>, <span class="st" style="color: #20794D;">'160'</span>, <span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>byte_to_unicode_map[<span class="bu" style="color: null;">ord</span>(<span class="bu" style="color: null;">chr</span>(<span class="dv" style="color: #AD0000;">160</span>))]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`'</span>],</span>
<span id="cb51-10">    [<span class="st" style="color: #20794D;">'A newline character'</span>, <span class="st" style="color: #20794D;">'`</span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">n`'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="ss" style="color: #20794D;">f'`</span><span class="sc" style="color: #5E5E5E;">{</span>byte_to_unicode_map[<span class="bu" style="color: null;">ord</span>(<span class="bu" style="color: null;">chr</span>(<span class="dv" style="color: #AD0000;">10</span>))]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">`'</span>],</span>
<span id="cb51-11">]</span>
<span id="cb51-12"></span>
<span id="cb51-13">pd.DataFrame(examples, columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Description'</span>, <span class="st" style="color: #20794D;">'Character'</span>, <span class="st" style="color: #20794D;">'Bytes'</span>, <span class="st" style="color: #20794D;">'Mapped bytes'</span>])</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
Description
</th>
<th>
Character
</th>
<th>
Bytes
</th>
<th>
Mapped bytes
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
Regular characters
</td>
<td>
<code>a</code> and <code>?</code>
</td>
<td>
97 and 63
</td>
<td>
<code>a</code> and <code>?</code>
</td>
</tr>
<tr>
<th>
1
</th>
<td>
Nonprintable control character (carriage return)
</td>
<td>
<code>U+000D</code>
</td>
<td>
13
</td>
<td>
<code>č</code>
</td>
</tr>
<tr>
<th>
2
</th>
<td>
A space
</td>
<td>
<code></code>
</td>
<td>
32
</td>
<td>
<code>Ġ</code>
</td>
</tr>
<tr>
<th>
3
</th>
<td>
A nonbreakable space
</td>
<td>
<code>\xa0</code>
</td>
<td>
160
</td>
<td>
<code>ł</code>
</td>
</tr>
<tr>
<th>
4
</th>
<td>
A newline character
</td>
<td>
<code>\n</code>
</td>
<td>
10
</td>
<td>
<code>Ċ</code>
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Inspect the pre-tokenization step again</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">pd.DataFrame(tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(python_code))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
(0, 3)
</td>
</tr>
<tr>
<th>
1
</th>
<td>
Ġsay
</td>
<td>
(3, 7)
</td>
</tr>
<tr>
<th>
2
</th>
<td>
_
</td>
<td>
(7, 8)
</td>
</tr>
<tr>
<th>
3
</th>
<td>
hello
</td>
<td>
(8, 13)
</td>
</tr>
<tr>
<th>
4
</th>
<td>
():
</td>
<td>
(13, 16)
</td>
</tr>
<tr>
<th>
5
</th>
<td>
ĊĠĠĠ
</td>
<td>
(16, 20)
</td>
</tr>
<tr>
<th>
6
</th>
<td>
Ġprint
</td>
<td>
(20, 26)
</td>
</tr>
<tr>
<th>
7
</th>
<td>
(“
</td>
<td>
(26, 28)
</td>
</tr>
<tr>
<th>
8
</th>
<td>
Hello
</td>
<td>
(28, 33)
</td>
</tr>
<tr>
<th>
9
</th>
<td>
,
</td>
<td>
(33, 34)
</td>
</tr>
<tr>
<th>
10
</th>
<td>
ĠWorld
</td>
<td>
(34, 40)
</td>
</tr>
<tr>
<th>
11
</th>
<td>
!“)
</td>
<td>
(40, 43)
</td>
</tr>
<tr>
<th>
12
</th>
<td>
Ċ
</td>
<td>
(43, 44)
</td>
</tr>
<tr>
<th>
13
</th>
<td>
#
</td>
<td>
(44, 45)
</td>
</tr>
<tr>
<th>
14
</th>
<td>
ĠPrint
</td>
<td>
(45, 51)
</td>
</tr>
<tr>
<th>
15
</th>
<td>
Ġit
</td>
<td>
(51, 54)
</td>
</tr>
<tr>
<th>
16
</th>
<td>
Ċ
</td>
<td>
(54, 55)
</td>
</tr>
<tr>
<th>
17
</th>
<td>
say
</td>
<td>
(55, 58)
</td>
</tr>
<tr>
<th>
18
</th>
<td>
_
</td>
<td>
(58, 59)
</td>
</tr>
<tr>
<th>
19
</th>
<td>
hello
</td>
<td>
(59, 64)
</td>
</tr>
<tr>
<th>
20
</th>
<td>
()
</td>
<td>
(64, 66)
</td>
</tr>
<tr>
<th>
21
</th>
<td>
Ċ
</td>
<td>
(66, 67)
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>Consecutive spaces count as a single word.</li>
<li>Each space preceding a word is attached to and considered part of the following word.</li>
</ul>
<hr>
<p><strong>Check the size of the GPT-2 vocabulary</strong></p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Size of the vocabulary: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(tokenizer)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>    Size of the vocabulary: 50257</code></pre>
<p><strong>Note:</strong> The GPT-2 vocabulary consists of the base vocabulary with the 256 values of the bytes, 50,000 additional tokens created by repeatedly merging the most commonly occurring tokens, and a special character to represent document boundaries.</p>
<hr>
<p><strong>Run the GPT-2 tokenizer pipeline again</strong></p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">pd.DataFrame(tokenizer(python_code).tokens()).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
<th>
13
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
<th>
22
</th>
<th>
23
</th>
<th>
24
</th>
<th>
25
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
Ġsay
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
():
</td>
<td>
Ċ
</td>
<td>
Ġ
</td>
<td>
Ġ
</td>
<td>
Ġ
</td>
<td>
Ġprint
</td>
<td>
(“
</td>
<td>
Hello
</td>
<td>
,
</td>
<td>
ĠWorld
</td>
<td>
!“
</td>
<td>
)
</td>
<td>
Ċ
</td>
<td>
#
</td>
<td>
ĠPrint
</td>
<td>
Ġit
</td>
<td>
Ċ
</td>
<td>
say
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
()
</td>
<td>
Ċ
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>The tokenizer keeps most of the words but splits indentations into several consecutive spaces.</li>
<li>The training corpus for the tokenizer mostly contained text where consecutive spaces are rare.</li>
<li>The BPE model does not include a specific token for indentation, meaning it is not well suited for Python code.</li>
</ul>
<hr>
</section>
<section id="training-a-tokenizer" class="level3">
<h3 class="anchored" data-anchor-id="training-a-tokenizer">Training a Tokenizer</h3>
<ul>
<li>A tokenizer learns which letter combinations are the most frequent in a target corpus.</li>
<li>The corpus does not need to be very large, just representative of the target domain.</li>
<li>We can train a tokenizer on a target corpus using the <a href="https://huggingface.co/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator"><code>tokenizer.train_new_from_iterator()</code></a> method.</li>
<li>We need to specify a target vocab size and prepare an iterator to supply lists of input strings.</li>
<li>The tokenizer might store unusual character sequences depending on the vocab size and the exact texts in the corpus.</li>
</ul>
<p><strong>Check the longest words in the GPT-2 tokenizer vocabulary</strong></p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">tokens <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sorted</span>(tokenizer.vocab.items(), key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: <span class="bu" style="color: null;">len</span>(x[<span class="dv" style="color: #AD0000;">0</span>]), reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb56-2">pd.DataFrame([<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;">.</span>convert_tokens_to_string(t)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> t, _ <span class="kw" style="color: #003B4F;">in</span> tokens[:<span class="dv" style="color: #AD0000;">8</span>]]).style.hide(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto;">

<table id="T_72966">
<thead>
</thead>
<tbody>
<tr>
<th id="T_72966_level0_row0" class="row_heading level0 row0">
0
</th>
<td id="T_72966_row0_col0" class="data row0 col0">
ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ
</td>
</tr>
<tr>
<th id="T_72966_level0_row1" class="row_heading level0 row1">
1
</th>
<td id="T_72966_row1_col0" class="data row1 col0">
=================================================================
</td>
</tr>
<tr>
<th id="T_72966_level0_row2" class="row_heading level0 row2">
2
</th>
<td id="T_72966_row2_col0" class="data row2 col0">
—————————————————————-
</td>
</tr>
<tr>
<th id="T_72966_level0_row3" class="row_heading level0 row3">
3
</th>
<td id="T_72966_row3_col0" class="data row3 col0">
================================================================
</td>
</tr>
<tr>
<th id="T_72966_level0_row4" class="row_heading level0 row4">
4
</th>
<td id="T_72966_row4_col0" class="data row4 col0">
________________________________________________________________
</td>
</tr>
<tr>
<th id="T_72966_level0_row5" class="row_heading level0 row5">
5
</th>
<td id="T_72966_row5_col0" class="data row5 col0">
—————————————————————-
</td>
</tr>
<tr>
<th id="T_72966_level0_row6" class="row_heading level0 row6">
6
</th>
<td id="T_72966_row6_col0" class="data row6 col0">
ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ
</td>
</tr>
<tr>
<th id="T_72966_level0_row7" class="row_heading level0 row7">
7
</th>
<td id="T_72966_row7_col0" class="data row7 col0">
……………………………………………………….
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong> These tokens look like separator lines used on forums.</p>
<hr>
<p><strong>Check the least frequent words</strong></p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">tokens <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sorted</span>(tokenizer.vocab.items(), key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="dv" style="color: #AD0000;">1</span>], reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb57-2">pd.DataFrame([<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;">.</span>convert_tokens_to_string(t)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> t, _ <span class="kw" style="color: #003B4F;">in</span> tokens[:<span class="dv" style="color: #AD0000;">12</span>]])</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
&lt;|endoftext|&gt;
</td>
</tr>
<tr>
<th>
1
</th>
<td>
gazed
</td>
</tr>
<tr>
<th>
2
</th>
<td>
informants
</td>
</tr>
<tr>
<th>
3
</th>
<td>
Collider
</td>
</tr>
<tr>
<th>
4
</th>
<td>
regress
</td>
</tr>
<tr>
<th>
5
</th>
<td>
ominated
</td>
</tr>
<tr>
<th>
6
</th>
<td>
amplification
</td>
</tr>
<tr>
<th>
7
</th>
<td>
Compar
</td>
</tr>
<tr>
<th>
8
</th>
<td>
….”
</td>
</tr>
<tr>
<th>
9
</th>
<td>
(/
</td>
</tr>
<tr>
<th>
10
</th>
<td>
Commission
</td>
</tr>
<tr>
<th>
11
</th>
<td>
Hitman
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>The <code>&lt;|endoftext|&gt;</code> token specifies the end of a text sequence and is not from the training corpus.</li>
<li>The model has to learn an associated word embedding for each token.</li>
<li>This tokenizer embeds some highly time and space-specific knowledge of the world by granting these words separate tokens.</li>
<li>Overly specific tokens can indicate the target vocab size is too large or that the corpus contains peculiar tokens.</li>
<li>We don’t want the embedding matrix to contain too many noisy words.</li>
</ul>
<hr>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="im" style="color: #00769E;">from</span> tqdm.auto <span class="im" style="color: #00769E;">import</span> tqdm</span></code></pre></div>
<hr>
<p><strong>Train a fresh tokenizer on 100,000 documents</strong></p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">length <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100000</span></span>
<span id="cb59-2">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'transformersbook/codeparrot-train'</span></span>
<span id="cb59-3">dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(dataset_name, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>, streaming<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb59-4">iter_dataset <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(dataset)</span>
<span id="cb59-5"></span>
<span id="cb59-6"><span class="kw" style="color: #003B4F;">def</span> batch_iterator(batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb59-7">    <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> tqdm(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, length, batch_size)):</span>
<span id="cb59-8">        <span class="cf" style="color: #003B4F;">yield</span> [<span class="bu" style="color: null;">next</span>(iter_dataset)[<span class="st" style="color: #20794D;">'content'</span>] <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(batch_size)]</span>
<span id="cb59-9"></span>
<span id="cb59-10">new_tokenizer <span class="op" style="color: #5E5E5E;">=</span> tokenizer.train_new_from_iterator(batch_iterator(), </span>
<span id="cb59-11">                                                  vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12500</span>,</span>
<span id="cb59-12">                                                  initial_alphabet<span class="op" style="color: #5E5E5E;">=</span>base_vocab)</span></code></pre></div>
<hr>
<p><strong>Examine the first tokens added by the BPE algorithm</strong></p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">tokens <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sorted</span>(new_tokenizer.vocab.items(), key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="dv" style="color: #AD0000;">1</span>], reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb60-2">pd.DataFrame([<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;">.</span>convert_tokens_to_string(t)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> t, _ <span class="kw" style="color: #003B4F;">in</span> tokens[<span class="dv" style="color: #AD0000;">257</span>:<span class="dv" style="color: #AD0000;">280</span>]]).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
<th>
13
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
<th>
22
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
se
</td>
<td>
in
</td>
<td>
</td>
<td>
re
</td>
<td>
on
</td>
<td>
te
</td>
<td>

</td>
<td>

</td>
<td>
or
</td>
<td>
st
</td>
<td>
de
</td>
<td>

</td>
<td>
th
</td>
<td>
le
</td>
<td>
=
</td>
<td>
lf
</td>
<td>
self
</td>
<td>
me
</td>
<td>
al
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>There are various standard levels of indentation and whitespace tokens and short common Python keywords.</li>
<li>The BPE algorithm is working as intended.</li>
</ul>
<hr>
<p><strong>Examine the last tokens added by the BPE algorithm</strong></p>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">pd.DataFrame([<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>new_tokenizer<span class="sc" style="color: #5E5E5E;">.</span>convert_tokens_to_string(t)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> t,_ <span class="kw" style="color: #003B4F;">in</span> tokens[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">12</span>:]]).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
capt
</td>
<td>
embedded
</td>
<td>
regarding
</td>
<td>
Bundle
</td>
<td>
355
</td>
<td>
recv
</td>
<td>
dmp
</td>
<td>
vault
</td>
<td>
Mongo
</td>
<td>
possibly
</td>
<td>
implementation
</td>
<td>
Matches
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong></p>
<ul>
<li>There are still some relatively common words like the <a href="https://docs.python.org/3/library/socket.html#socket.socket.recv"><code>recv</code></a> method.</li>
<li>There are also some more noisy words potentially from comments.</li>
</ul>
<hr>
<p><strong>Test the custom tokenizer on the sample code</strong></p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">pd.DataFrame(new_tokenizer(python_code).tokens()).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
<th>
13
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
<th>
22
</th>
<th>
23
</th>
<th>
24
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
Ġs
</td>
<td>
ay
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
():
</td>
<td>
ĊĠĠĠ
</td>
<td>
Ġprint
</td>
<td>
(“
</td>
<td>
Hello
</td>
<td>
,
</td>
<td>
ĠWor
</td>
<td>
ld
</td>
<td>
!“)
</td>
<td>
Ċ
</td>
<td>
#
</td>
<td>
ĠPrint
</td>
<td>
Ġit
</td>
<td>
Ċ
</td>
<td>
s
</td>
<td>
ay
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
()
</td>
<td>
Ċ
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong> The tokenize splits common English words like “World” and “say.”</p>
<hr>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="im" style="color: #00769E;">import</span> keyword</span></code></pre></div>
<hr>
<section id="keyword" class="level4">
<h4 class="anchored" data-anchor-id="keyword"><code>keyword</code></h4>
<ul>
<li><a href="https://docs.python.org/3/library/keyword.html">Documentation</a></li>
<li>Determine if a string is a <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">keyword</a> or <a href="https://docs.python.org/3/reference/lexical_analysis.html#soft-keywords">soft keyword</a>.</li>
</ul>
<p><strong>Check if all the Python reserved words are in the vocabulary</strong></p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'There are in total </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(keyword.kwlist)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> Python keywords.'</span>)</span>
<span id="cb64-2"><span class="cf" style="color: #003B4F;">for</span> keyw <span class="kw" style="color: #003B4F;">in</span> keyword.kwlist:</span>
<span id="cb64-3">    <span class="cf" style="color: #003B4F;">if</span> keyw <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> new_tokenizer.vocab:</span>
<span id="cb64-4">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'No, keyword `</span><span class="sc" style="color: #5E5E5E;">{</span>keyw<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` is not in the vocabulary'</span>)</span></code></pre></div>
<pre class="text"><code>    There are in total 36 Python keywords.
    No, keyword `__peg_parser__` is not in the vocabulary
    No, keyword `await` is not in the vocabulary
    No, keyword `finally` is not in the vocabulary
    No, keyword `nonlocal` is not in the vocabulary</code></pre>
<p><strong>Note:</strong> Several frequent keywords like “finally” are not in the vocabulary.</p>
<hr>
<p><strong>Reset random seed</strong></p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">set_seed(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<hr>
<p><strong>Train a tokenizer using a larger target vocab size and dataset sample</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">length <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">200000</span></span>
<span id="cb67-2">new_tokenizer_larger <span class="op" style="color: #5E5E5E;">=</span> tokenizer.train_new_from_iterator(batch_iterator(),</span>
<span id="cb67-3">    vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32768</span>, initial_alphabet<span class="op" style="color: #5E5E5E;">=</span>base_vocab)</span></code></pre></div>
<hr>
<p><strong>Check the last tokens added</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">tokens <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sorted</span>(new_tokenizer_larger.vocab.items(), key<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb68-2">                reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb68-3">pd.DataFrame([<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;">.</span>convert_tokens_to_string(t)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> t, _ <span class="kw" style="color: #003B4F;">in</span> tokens[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">12</span>:]]).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
组
</td>
<td>
typically
</td>
<td>
ARGIN
</td>
<td>
Termination
</td>
<td>
StaticText
</td>
<td>
interesting
</td>
<td>
Circular
</td>
<td>
combinatorics
</td>
<td>
)([
</td>
<td>
969
</td>
<td>
EAR
</td>
<td>
Gap
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong> The group of least-frequent tokens does not contain any Python keywords.</p>
<hr>
<p><strong>Test the new tokenizer on the sample code</strong></p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">pd.DataFrame(new_tokenizer_larger(python_code).tokens()).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
<th>
13
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
Ġsay
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
():
</td>
<td>
ĊĠĠĠ
</td>
<td>
Ġprint
</td>
<td>
(“
</td>
<td>
Hello
</td>
<td>
,
</td>
<td>
ĠWorld
</td>
<td>
!“)
</td>
<td>
Ċ
</td>
<td>
#
</td>
<td>
ĠPrint
</td>
<td>
Ġit
</td>
<td>
Ċ
</td>
<td>
say
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
()
</td>
<td>
Ċ
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong> The new tokenizer keeps the indents in the vocabulary and does not split common English words.</p>
<hr>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="cf" style="color: #003B4F;">for</span> keyw <span class="kw" style="color: #003B4F;">in</span> keyword.kwlist:</span>
<span id="cb70-2">    <span class="cf" style="color: #003B4F;">if</span> keyw <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> new_tokenizer_larger.vocab:</span>
<span id="cb70-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'No, keyword `</span><span class="sc" style="color: #5E5E5E;">{</span>keyw<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">` is not in the vocabulary'</span>)</span></code></pre></div>
<pre class="text"><code>    No, keyword `__peg_parser__` is not in the vocabulary
    No, keyword `nonlocal` is not in the vocabulary</code></pre>
<p><strong>Note:</strong> * The new tokenizer vocabulary is still missing a couple of rare Python keywords, neither of which are relevant for most Python code. * The <code>__peg_parser__</code> keyword is an easter egg for the new <a href="https://peps.python.org/pep-0617/">PEG parser</a> and <a href="https://bugs.python.org/issue40939">will not be in Python 3.10</a>. * The <code>nonlocal</code> keyword causes listed identifiers to refer to previously bound variables in the nearest enclosing scope, excluding globals. * The new tokenizer is more efficient than the standard GPT-2 tokenizer as it uses fewer tokens to encode a given code sample.</p>
<hr>
<p><strong>Disable Tokenizers Parallelism</strong></p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="op" style="color: #5E5E5E;">%</span>env TOKENIZERS_PARALLELISM<span class="op" style="color: #5E5E5E;">=</span>false</span></code></pre></div>
<pre class="text"><code>    env: TOKENIZERS_PARALLELISM=false</code></pre>
<hr>
</section>
</section>
<section id="saving-a-custom-tokenizer-on-the-hub" class="level3">
<h3 class="anchored" data-anchor-id="saving-a-custom-tokenizer-on-the-hub">Saving a Custom Tokenizer on the Hub</h3>
<p><strong>Log into Hugging Face account</strong></p>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> notebook_login</span></code></pre></div>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">notebook_login()</span></code></pre></div>
<pre class="text"><code>    Login successful
    Your token has been saved to /home/innom-dt/.huggingface/token</code></pre>
<hr>
<p><strong>Push custom tokenizer to Hugging Face Hub</strong></p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">model_ckpt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"codeparrot"</span></span></code></pre></div>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;"># org = "transformersbook"</span></span>
<span id="cb78-2">new_tokenizer_larger.push_to_hub(model_ckpt)</span></code></pre></div>
<pre class="text"><code>    'https://huggingface.co/cj-mills/codeparrot/commit/97c7905ef55cb4139e88f9b9d17225c372fc8f55'</code></pre>
<hr>
<p><strong>Load the custom tokenizer from the Hub repository</strong></p>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;"># reloaded_tokenizer = AutoTokenizer.from_pretrained(org + "/" + model_ckpt)</span></span>
<span id="cb80-2">reloaded_tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_ckpt)</span>
<span id="cb80-3">pd.DataFrame(reloaded_tokenizer(python_code).tokens()).T</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
<th>
13
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
def
</td>
<td>
Ġsay
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
():
</td>
<td>
ĊĠĠĠ
</td>
<td>
Ġprint
</td>
<td>
(“
</td>
<td>
Hello
</td>
<td>
,
</td>
<td>
ĠWorld
</td>
<td>
!“)
</td>
<td>
Ċ
</td>
<td>
#
</td>
<td>
ĠPrint
</td>
<td>
Ġit
</td>
<td>
Ċ
</td>
<td>
say
</td>
<td>
_
</td>
<td>
hello
</td>
<td>
()
</td>
<td>
Ċ
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Push the smaller tokenizer to Hugging Face Hub</strong></p>
<div class="sourceCode" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">new_tokenizer.push_to_hub(model_ckpt<span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"-small-vocabulary"</span>)</span></code></pre></div>
<pre class="text"><code>    'https://huggingface.co/cj-mills/codeparrot-small-vocabulary/commit/b4efe8c9692ce772175b97b01cffc9f1924ae706'</code></pre>
<hr>
</section>
</section>
<section id="training-a-model-from-scratch" class="level2">
<h2 class="anchored" data-anchor-id="training-a-model-from-scratch">Training a Model from Scratch</h2>
<ul>
<li><a href="https://github.com/huggingface/transformers/tree/main/examples/research_projects/codeparrot">CodeParrot Trainng Script and Instructions</a></li>
</ul>
<section id="a-tale-of-pretraining-objectives" class="level3">
<h3 class="anchored" data-anchor-id="a-tale-of-pretraining-objectives">A Tale of Pretraining Objectives</h3>
<ul>
<li>The large-scale pretraining corpus allows us to tackle several downstream tasks.</li>
<li>The selected task will influence which pretraining objective we choose.</li>
</ul>
<section id="causal-language-modeling" class="level4">
<h4 class="anchored" data-anchor-id="causal-language-modeling">Causal language modeling</h4>
<ul>
<li>Causal language modeling is a self-supervised approach that does not require annotations.</li>
<li>Code autocompletion is a directly related downstream task.</li>
<li>We can provide a model with the beginning of a code sample and have it generate possible completions.</li>
<li>A decoder-only architecture like the GPT family is usually best suited for this task.</li>
</ul>
</section>
<section id="masked-language-modeling" class="level4">
<h4 class="anchored" data-anchor-id="masked-language-modeling">Masked language modeling</h4>
<ul>
<li>Masked language modeling (also called denoising) is a self-supervised training objective.</li>
<li>We can provide a model with a noisy code sample (e.g., by replacing a code instruction with a random or masked word) and have it reconstruct the original clean sequence.</li>
<li>Masked language modeling is not directly related to a downstream task like autocompletion, but it is a practical pretraining objective for learning general representations.</li>
<li>We can combine masked language modeling with fine-tuning the model on a downstream task.</li>
<li>Encoder architectures are best suited to this pretraining objective.</li>
</ul>
</section>
<section id="sequence-to-sequence-training" class="level4">
<h4 class="anchored" data-anchor-id="sequence-to-sequence-training">Sequence-to-sequence training</h4>
<ul>
<li>Sequence-to-sequence training is a supervised learning objective where one category serves as input while another serves as labels.</li>
<li>We can use a heuristic like regular expressions to separate comments or docstrings from code and build a large-scale annotated dataset of code-comment pairs.</li>
<li>We can then use this dataset to train a model to transcript comments in code or vice versa.</li>
<li>Document generation from code and code generation from comments are directly-related downstream tasks.</li>
<li>Encoder decoder architectures are best suited to sequence-to-sequence objectives.</li>
</ul>
</section>
</section>
<section id="initializing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="initializing-the-model">Initializing the Model</h3>
<blockquote class="blockquote">
<p><strong>NOTE</strong>: In the following code block, a large GPT-2 checkpoint is loaded into memory. On platforms like Colab and Kaggle, this can cause the instance to crash due to insufficient RAM or GPU memory. You can still run the example if you use the small checkpoint by replacing the configuration with <code>config = AutoConfig.from_pretrained("gpt2", vocab_size=len(tokenizer))</code>.</p>
</blockquote>
<hr>
<div class="sourceCode" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoConfig, AutoModelForCausalLM, AutoTokenizer</span></code></pre></div>
<hr>
<p><strong>Instantiate a tokenizer using the custom checkpoint</strong></p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_ckpt)</span></code></pre></div>
<hr>
<p><strong>Start with the hyperparameters for training the 1.5 billion-parameter GPT-2 variant</strong></p>
<div class="sourceCode" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">config <span class="op" style="color: #5E5E5E;">=</span> AutoConfig.from_pretrained(<span class="st" style="color: #20794D;">"gpt2-xl"</span>, vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(tokenizer))</span>
<span id="cb85-2">config</span></code></pre></div>
<pre class="text"><code>    GPT2Config {
      "_name_or_path": "gpt2-xl",
      "activation_function": "gelu_new",
      "architectures": [
        "GPT2LMHeadModel"
      ],
      "attn_pdrop": 0.1,
      "bos_token_id": 50256,
      "embd_pdrop": 0.1,
      "eos_token_id": 50256,
      "initializer_range": 0.02,
      "layer_norm_epsilon": 1e-05,
      "model_type": "gpt2",
      "n_ctx": 1024,
      "n_embd": 1600,
      "n_head": 25,
      "n_inner": null,
      "n_layer": 48,
      "n_positions": 1024,
      "output_past": true,
      "reorder_and_upcast_attn": false,
      "resid_pdrop": 0.1,
      "scale_attn_by_inverse_layer_idx": false,
      "scale_attn_weights": true,
      "summary_activation": null,
      "summary_first_dropout": 0.1,
      "summary_proj_to_labels": true,
      "summary_type": "cls_index",
      "summary_use_proj": true,
      "task_specific_params": {
        "text-generation": {
          "do_sample": true,
          "max_length": 50
        }
      },
      "transformers_version": "4.18.0",
      "use_cache": true,
      "vocab_size": 32768
    }</code></pre>
<hr>
<p><strong>Free unoccupied cached memory</strong></p>
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb87-2">torch.cuda.empty_cache()</span></code></pre></div>
<hr>
<p><strong>Initialize a GPT-2 XL model using the custom tokenizer</strong></p>
<div class="sourceCode" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_config(config)</span></code></pre></div>
<hr>
<p><strong>Check the model size</strong></p>
<div class="sourceCode" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'GPT-2 (xl) size: </span><span class="sc" style="color: #5E5E5E;">{</span>model_size(model)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1000</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">M parameters'</span>)</span></code></pre></div>
<pre class="text"><code>    GPT-2 (xl) size: 1529.6M parameters</code></pre>
<p><strong>Note:</strong> Large models are generally more efficient to train as long as the dataset is reasonably large.</p>
<hr>
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="op" style="color: #5E5E5E;">!</span>git lfs install</span></code></pre></div>
<pre class="text"><code>    Updated Git hooks.
    Git LFS initialized.</code></pre>
<hr>
<p><strong>Save the newly initialized model to the Hub</strong></p>
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">model.save_pretrained(<span class="st" style="color: #20794D;">"models/"</span> <span class="op" style="color: #5E5E5E;">+</span> model_ckpt<span class="op" style="color: #5E5E5E;">+</span><span class="st" style="color: #20794D;">"-large"</span>, push_to_hub<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<pre class="text"><code>    OSError: EOF
    error: failed to push some refs to 'https://user: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@huggingface.co/cj-mills/codeparrot-large'</code></pre>
<hr>
<p><strong>Initialize a smaller GPT-2 variant using the custom tokenizer</strong></p>
<div class="sourceCode" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_ckpt)</span>
<span id="cb95-2">config_small <span class="op" style="color: #5E5E5E;">=</span> AutoConfig.from_pretrained(<span class="st" style="color: #20794D;">"gpt2"</span>, vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(tokenizer))</span>
<span id="cb95-3">model_small <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_config(config_small)</span></code></pre></div>
<hr>
<p><strong>Check smaller model size</strong></p>
<div class="sourceCode" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'GPT-2 size: </span><span class="sc" style="color: #5E5E5E;">{</span>model_size(model_small)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1000</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:.1f}</span><span class="ss" style="color: #20794D;">M parameters'</span>)</span></code></pre></div>
<pre class="text"><code>GPT-2 size: 111.0M parameters</code></pre>
<hr>
<p><strong>Push the smaller model to the Hub</strong></p>
<div class="sourceCode" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">model_small.save_pretrained(<span class="st" style="color: #20794D;">"models/"</span> <span class="op" style="color: #5E5E5E;">+</span> model_ckpt <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"-small"</span>, push_to_hub<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<hr>
</section>
<section id="implementing-the-dataloader" class="level3">
<h3 class="anchored" data-anchor-id="implementing-the-dataloader">Implementing the Dataloader</h3>
<ul>
<li>We want to supply our model with sequences that fill its context length for maximal efficiency.</li>
<li>Some code examples might be shorter or longer than the 1,024 token context length.</li>
<li>We can concatenate several examples to create a long sequence using the EOS token as a separator.</li>
<li>We then split this sequence into equally sized chunks that fill the context length.</li>
</ul>
<div class="sourceCode" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">input_characters <span class="op" style="color: #5E5E5E;">=</span> number_of_sequences <span class="op" style="color: #5E5E5E;">*</span> sequence_length <span class="op" style="color: #5E5E5E;">*</span> characters_per_token</span></code></pre></div>
<ul>
<li><code>input_characters</code>: the number of characters in the string input to the tokenizer</li>
<li><code>number_of_seqeunces</code>: the number of (truncated) sequences returned by the tokenizer</li>
<li><code>sequence_length</code>: the number of tokens per sequence returned by the tokenizer</li>
<li><code>characters_per_token</code>: the average number of characters per output token that we first need to estimate</li>
</ul>
<p><strong>Estimate the average character length per token</strong></p>
<div class="sourceCode" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">examples, total_characters, total_tokens <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">500</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb100-2">dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">'transformersbook/codeparrot-train'</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>,</span>
<span id="cb100-3">                       streaming<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb100-4"></span>
<span id="cb100-5"><span class="cf" style="color: #003B4F;">for</span> _, example <span class="kw" style="color: #003B4F;">in</span> tqdm(<span class="bu" style="color: null;">zip</span>(<span class="bu" style="color: null;">range</span>(examples), <span class="bu" style="color: null;">iter</span>(dataset)), total<span class="op" style="color: #5E5E5E;">=</span>examples):</span>
<span id="cb100-6">    total_characters <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(example[<span class="st" style="color: #20794D;">'content'</span>])</span>
<span id="cb100-7">    total_tokens <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(tokenizer(example[<span class="st" style="color: #20794D;">'content'</span>]).tokens())</span>
<span id="cb100-8"></span>
<span id="cb100-9">characters_per_token <span class="op" style="color: #5E5E5E;">=</span> total_characters <span class="op" style="color: #5E5E5E;">/</span> total_tokens</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1"><span class="bu" style="color: null;">print</span>(characters_per_token)</span></code></pre></div>
<pre class="text"><code>3.621530410894045</code></pre>
<p><strong>Note:</strong> We’ll round this to <img src="https://latex.codecogs.com/png.latex?3.6">.</p>
<hr>
<div class="sourceCode" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb103-2"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> IterableDataset</span></code></pre></div>
<hr>
<p><strong>Define an IterableDataset class for preparing constant-length inputs</strong></p>
<div class="sourceCode" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="kw" style="color: #003B4F;">class</span> ConstantLengthDataset(IterableDataset):</span>
<span id="cb104-2">    </span>
<span id="cb104-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, tokenizer, dataset, seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1024</span>,</span>
<span id="cb104-4">                 num_of_sequences<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1024</span>, chars_per_token<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">3.6</span>):</span>
<span id="cb104-5">        <span class="va" style="color: #111111;">self</span>.tokenizer <span class="op" style="color: #5E5E5E;">=</span> tokenizer</span>
<span id="cb104-6">        <span class="va" style="color: #111111;">self</span>.concat_token_id <span class="op" style="color: #5E5E5E;">=</span> tokenizer.eos_token_id</span>
<span id="cb104-7">        <span class="va" style="color: #111111;">self</span>.dataset <span class="op" style="color: #5E5E5E;">=</span> dataset</span>
<span id="cb104-8">        <span class="va" style="color: #111111;">self</span>.seq_length <span class="op" style="color: #5E5E5E;">=</span> seq_length</span>
<span id="cb104-9">        <span class="va" style="color: #111111;">self</span>.input_characters <span class="op" style="color: #5E5E5E;">=</span> num_of_sequences <span class="op" style="color: #5E5E5E;">*</span> seq_length <span class="op" style="color: #5E5E5E;">*</span> chars_per_token</span>
<span id="cb104-10">    </span>
<span id="cb104-11">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__iter__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb104-12">        iterator <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(<span class="va" style="color: #111111;">self</span>.dataset)</span>
<span id="cb104-13">        more_examples <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb104-14">        <span class="cf" style="color: #003B4F;">while</span> more_examples:</span>
<span id="cb104-15">            <span class="bu" style="color: null;">buffer</span>, buffer_len <span class="op" style="color: #5E5E5E;">=</span> [], <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb104-16">            <span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb104-17">                <span class="co" style="color: #5E5E5E;"># Check if the buffer is full</span></span>
<span id="cb104-18">                <span class="cf" style="color: #003B4F;">if</span> buffer_len <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="va" style="color: #111111;">self</span>.input_characters:</span>
<span id="cb104-19">                    m<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"Buffer full: </span><span class="sc" style="color: #5E5E5E;">{</span>buffer_len<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">&gt;=</span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>input_characters<span class="sc" style="color: #5E5E5E;">:.0f}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb104-20">                    <span class="bu" style="color: null;">print</span>(m)</span>
<span id="cb104-21">                    <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb104-22">                <span class="co" style="color: #5E5E5E;"># Try to add the next code sample to the buffer</span></span>
<span id="cb104-23">                <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb104-24">                    m<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"Fill buffer: </span><span class="sc" style="color: #5E5E5E;">{</span>buffer_len<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">&lt;</span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>input_characters<span class="sc" style="color: #5E5E5E;">:.0f}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb104-25">                    <span class="bu" style="color: null;">print</span>(m)</span>
<span id="cb104-26">                    <span class="bu" style="color: null;">buffer</span>.append(<span class="bu" style="color: null;">next</span>(iterator)[<span class="st" style="color: #20794D;">"content"</span>])</span>
<span id="cb104-27">                    buffer_len <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">buffer</span>[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb104-28">                <span class="co" style="color: #5E5E5E;"># Reset iterator</span></span>
<span id="cb104-29">                <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">StopIteration</span>:</span>
<span id="cb104-30">                    iterator <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(<span class="va" style="color: #111111;">self</span>.dataset)</span>
<span id="cb104-31">            </span>
<span id="cb104-32">            all_token_ids <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb104-33">            <span class="co" style="color: #5E5E5E;"># Tokenize the code samples in the buffer</span></span>
<span id="cb104-34">            tokenized_inputs <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.tokenizer(<span class="bu" style="color: null;">buffer</span>, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb104-35">            <span class="co" style="color: #5E5E5E;"># Concatenate the tokenized code samples</span></span>
<span id="cb104-36">            <span class="cf" style="color: #003B4F;">for</span> tokenized_input <span class="kw" style="color: #003B4F;">in</span> tokenized_inputs[<span class="st" style="color: #20794D;">'input_ids'</span>]:</span>
<span id="cb104-37">                all_token_ids.extend(tokenized_input <span class="op" style="color: #5E5E5E;">+</span> [<span class="va" style="color: #111111;">self</span>.concat_token_id])</span>
<span id="cb104-38">            <span class="co" style="color: #5E5E5E;"># Split the sequence into equally sized chunks</span></span>
<span id="cb104-39">            <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(all_token_ids), <span class="va" style="color: #111111;">self</span>.seq_length):</span>
<span id="cb104-40">                input_ids <span class="op" style="color: #5E5E5E;">=</span> all_token_ids[i : i <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.seq_length]</span>
<span id="cb104-41">                <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(input_ids) <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.seq_length:</span>
<span id="cb104-42">                    <span class="cf" style="color: #003B4F;">yield</span> torch.tensor(input_ids)</span></code></pre></div>
<p><strong>Note:</strong> We don’t need attention masks here since all sequences precisely fill the context length of 1024 tokens.</p>
<hr>
<p><strong>Prepare the constant-length dataset</strong></p>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">shuffled_dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.shuffle(buffer_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb105-2">constant_length_dataset <span class="op" style="color: #5E5E5E;">=</span> ConstantLengthDataset(tokenizer, shuffled_dataset,</span>
<span id="cb105-3">                                                num_of_sequences<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<p><strong>Note:</strong> We can’t shuffle iterable datasets as a whole, so we need to use a buffer instead.</p>
<hr>
<p><strong>Verify the dataset yields equal length chunks</strong></p>
<div class="sourceCode" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">dataset_iterator <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">iter</span>(constant_length_dataset)</span>
<span id="cb106-2"></span>
<span id="cb106-3">lengths <span class="op" style="color: #5E5E5E;">=</span> [<span class="bu" style="color: null;">len</span>(b) <span class="cf" style="color: #003B4F;">for</span> _, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">5</span>), dataset_iterator)]</span>
<span id="cb106-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Lengths of the sequences: </span><span class="sc" style="color: #5E5E5E;">{</span>lengths<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<pre class="text"><code>    Fill buffer: 0&lt;36864
    Fill buffer: 4344&lt;36864
    Fill buffer: 5460&lt;36864
    Fill buffer: 7467&lt;36864
    Fill buffer: 13812&lt;36864
    Fill buffer: 16142&lt;36864
    Fill buffer: 17571&lt;36864
    Fill buffer: 25693&lt;36864
    Fill buffer: 27359&lt;36864
    Fill buffer: 28903&lt;36864
    Fill buffer: 32076&lt;36864
    Buffer full: 49996&gt;=36864
    Lengths of the sequences: [1024, 1024, 1024, 1024, 1024]</code></pre>
<hr>
</section>
<section id="defining-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="defining-the-training-loop">Defining the Training Loop</h3>
<ul>
<li>Even modern GPUs can’t train a model at GPT-2 scale in a reasonable time.</li>
<li>We need to use data parallelism to utilize several GPUs for training.</li>
<li>The Hugging Face Accelerate library makes distributed training and changing the underlying hardware for training easier.</li>
<li>Hugging Face Accelerate provides an API to make training scripts run with mixed precision and in any distributed setting.</li>
<li>The same code can run seamlessly on your local machine for debugging and a beefy training cluster for a final training run.</li>
</ul>
<hr>
<div class="sourceCode" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="im" style="color: #00769E;">from</span> argparse <span class="im" style="color: #00769E;">import</span> Namespace</span></code></pre></div>
<hr>
<p><strong>Define the hyperparameters</strong></p>
<div class="sourceCode" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1"><span class="co" style="color: #5E5E5E;"># Commented parameters correspond to the small model</span></span>
<span id="cb109-2">config <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"train_batch_size"</span>: <span class="dv" style="color: #AD0000;">2</span>, <span class="co" style="color: #5E5E5E;"># 12</span></span>
<span id="cb109-3">          <span class="st" style="color: #20794D;">"valid_batch_size"</span>: <span class="dv" style="color: #AD0000;">2</span>, <span class="co" style="color: #5E5E5E;"># 12</span></span>
<span id="cb109-4">          <span class="st" style="color: #20794D;">"weight_decay"</span>: <span class="fl" style="color: #AD0000;">0.1</span>,</span>
<span id="cb109-5">          <span class="st" style="color: #20794D;">"shuffle_buffer"</span>: <span class="dv" style="color: #AD0000;">1000</span>,</span>
<span id="cb109-6">          <span class="st" style="color: #20794D;">"learning_rate"</span>: <span class="fl" style="color: #AD0000;">2e-4</span>, <span class="co" style="color: #5E5E5E;"># 5e-4</span></span>
<span id="cb109-7">          <span class="st" style="color: #20794D;">"lr_scheduler_type"</span>: <span class="st" style="color: #20794D;">"cosine"</span>,</span>
<span id="cb109-8">          <span class="st" style="color: #20794D;">"num_warmup_steps"</span>: <span class="dv" style="color: #AD0000;">750</span>, <span class="co" style="color: #5E5E5E;"># 2000</span></span>
<span id="cb109-9">          <span class="st" style="color: #20794D;">"gradient_accumulation_steps"</span>: <span class="dv" style="color: #AD0000;">16</span>, <span class="co" style="color: #5E5E5E;"># 1</span></span>
<span id="cb109-10">          <span class="st" style="color: #20794D;">"max_train_steps"</span>: <span class="dv" style="color: #AD0000;">50000</span>, <span class="co" style="color: #5E5E5E;"># 150000</span></span>
<span id="cb109-11">          <span class="st" style="color: #20794D;">"max_eval_steps"</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb109-12">          <span class="st" style="color: #20794D;">"seq_length"</span>: <span class="dv" style="color: #AD0000;">1024</span>,</span>
<span id="cb109-13">          <span class="st" style="color: #20794D;">"seed"</span>: <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb109-14">          <span class="st" style="color: #20794D;">"save_checkpoint_steps"</span>: <span class="dv" style="color: #AD0000;">50000</span>} <span class="co" style="color: #5E5E5E;"># 15000</span></span>
<span id="cb109-15"></span>
<span id="cb109-16">args <span class="op" style="color: #5E5E5E;">=</span> Namespace(<span class="op" style="color: #5E5E5E;">**</span>config)</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="im" style="color: #00769E;">from</span> torch.utils.tensorboard <span class="im" style="color: #00769E;">import</span> SummaryWriter</span>
<span id="cb110-2"><span class="im" style="color: #00769E;">import</span> logging</span>
<span id="cb110-3"><span class="im" style="color: #00769E;">import</span> wandb</span></code></pre></div>
<hr>
<section id="logging.getlogger" class="level4">
<h4 class="anchored" data-anchor-id="logging.getlogger"><code>logging.getLogger()</code></h4>
<ul>
<li><a href="https://docs.python.org/3/library/logging.html#logging.getLogger">Documentation</a></li>
<li>Create a <a href="https://docs.python.org/3/library/logging.html#logger-objects">Logger object</a>.</li>
</ul>
</section>
<section id="torch.utils.tensorboard.writer.summarywriter" class="level4">
<h4 class="anchored" data-anchor-id="torch.utils.tensorboard.writer.summarywriter"><code>torch.utils.tensorboard.writer.SummaryWriter</code></h4>
<ul>
<li><a href="https://pytorch.org/docs/stable/tensorboard.html#torch.utils.tensorboard.writer.SummaryWriter">Documentation</a></li>
<li>Write entries directly to event files for <a href="https://github.com/tensorflow/tensorboard">TensorBoard</a></li>
</ul>
</section>
<section id="wandb" class="level4">
<h4 class="anchored" data-anchor-id="wandb"><code>wandb</code></h4>
<ul>
<li><a href="https://github.com/wandb/client">GitHub Repository</a></li>
<li><a href="https://docs.wandb.ai/">Documentation</a></li>
<li>A tool for visualizing and tracking machine learning experiements.</li>
</ul>
<hr>
<p><strong>Define a method to initialize the loggers for the training process</strong></p>
<div class="sourceCode" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1"><span class="kw" style="color: #003B4F;">def</span> setup_logging(project_name):</span>
<span id="cb111-2">    logger <span class="op" style="color: #5E5E5E;">=</span> logging.getLogger(<span class="va" style="color: #111111;">__name__</span>)</span>
<span id="cb111-3">    logging.basicConfig(</span>
<span id="cb111-4">        <span class="bu" style="color: null;">format</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%(asctime)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(levelname)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(name)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(message)s</span><span class="st" style="color: #20794D;">"</span>,</span>
<span id="cb111-5">        datefmt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"%m/</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">/%Y %H:%M:%S"</span>, level<span class="op" style="color: #5E5E5E;">=</span>logging.INFO, handlers<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb111-6">        logging.FileHandler(<span class="ss" style="color: #20794D;">f"log/debug_</span><span class="sc" style="color: #5E5E5E;">{</span>accelerator<span class="sc" style="color: #5E5E5E;">.</span>process_index<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.log"</span>),</span>
<span id="cb111-7">        logging.StreamHandler()])</span>
<span id="cb111-8">    <span class="cf" style="color: #003B4F;">if</span> accelerator.is_main_process: <span class="co" style="color: #5E5E5E;"># We only want to set up logging once</span></span>
<span id="cb111-9">        wandb.init(project<span class="op" style="color: #5E5E5E;">=</span>project_name, config<span class="op" style="color: #5E5E5E;">=</span>args)</span>
<span id="cb111-10">        run_name <span class="op" style="color: #5E5E5E;">=</span> wandb.run.name</span>
<span id="cb111-11">        tb_writer <span class="op" style="color: #5E5E5E;">=</span> SummaryWriter()</span>
<span id="cb111-12">        tb_writer.add_hparams(<span class="bu" style="color: null;">vars</span>(args), {<span class="st" style="color: #20794D;">'0'</span>: <span class="dv" style="color: #AD0000;">0</span>})</span>
<span id="cb111-13">        logger.setLevel(logging.INFO)</span>
<span id="cb111-14">        datasets.utils.logging.set_verbosity_debug()</span>
<span id="cb111-15">        transformers.utils.logging.set_verbosity_info()</span>
<span id="cb111-16">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb111-17">        tb_writer <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb111-18">        run_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb111-19">        logger.setLevel(logging.ERROR)</span>
<span id="cb111-20">        datasets.utils.logging.set_verbosity_error()</span>
<span id="cb111-21">        transformers.utils.logging.set_verbosity_error()</span>
<span id="cb111-22">    <span class="cf" style="color: #003B4F;">return</span> logger, tb_writer, run_name</span></code></pre></div>
<p><strong>Note:</strong> * Each worker gets a unique <code>accelerator.process_index</code>, which we use with the FileHandler to write the logs of each worker to an individual file. * We’ll use the unique <code>run_name</code> to name our experiment branch on the Hub.</p>
<hr>
<p><strong>Define function to log metrics with TensorBoard and Weights and Biases</strong></p>
<div class="sourceCode" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="kw" style="color: #003B4F;">def</span> log_metrics(step, metrics):</span>
<span id="cb112-2">    logger.info(<span class="ss" style="color: #20794D;">f"Step </span><span class="sc" style="color: #5E5E5E;">{</span>step<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>metrics<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb112-3">    <span class="cf" style="color: #003B4F;">if</span> accelerator.is_main_process:</span>
<span id="cb112-4">        wandb.log(metrics)</span>
<span id="cb112-5">        [tb_writer.add_scalar(k, v, step) <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> metrics.items()]</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1"><span class="im" style="color: #00769E;">from</span> torch.utils.data.dataloader <span class="im" style="color: #00769E;">import</span> DataLoader</span></code></pre></div>
<hr>
<p><strong>Define a function to create dataloaders for the training and validation sets</strong></p>
<div class="sourceCode" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1"><span class="kw" style="color: #003B4F;">def</span> create_dataloaders(dataset_name):</span>
<span id="cb114-2">    train_data <span class="op" style="color: #5E5E5E;">=</span> load_dataset(dataset_name<span class="op" style="color: #5E5E5E;">+</span><span class="st" style="color: #20794D;">'-train'</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>,</span>
<span id="cb114-3">                              streaming<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb114-4">    train_data <span class="op" style="color: #5E5E5E;">=</span> train_data.shuffle(buffer_size<span class="op" style="color: #5E5E5E;">=</span>args.shuffle_buffer,</span>
<span id="cb114-5">                                    seed<span class="op" style="color: #5E5E5E;">=</span>args.seed)</span>
<span id="cb114-6">    valid_data <span class="op" style="color: #5E5E5E;">=</span> load_dataset(dataset_name<span class="op" style="color: #5E5E5E;">+</span><span class="st" style="color: #20794D;">'-valid'</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"validation"</span>,</span>
<span id="cb114-7">                              streaming<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb114-8">    </span>
<span id="cb114-9">    train_dataset <span class="op" style="color: #5E5E5E;">=</span> ConstantLengthDataset(tokenizer, train_data,</span>
<span id="cb114-10">                                          seq_length<span class="op" style="color: #5E5E5E;">=</span>args.seq_length)</span>
<span id="cb114-11">    valid_dataset <span class="op" style="color: #5E5E5E;">=</span> ConstantLengthDataset(tokenizer, valid_data,</span>
<span id="cb114-12">                                          seq_length<span class="op" style="color: #5E5E5E;">=</span>args.seq_length)</span>
<span id="cb114-13">    </span>
<span id="cb114-14">    train_dataloader<span class="op" style="color: #5E5E5E;">=</span>DataLoader(train_dataset, batch_size<span class="op" style="color: #5E5E5E;">=</span>args.train_batch_size)</span>
<span id="cb114-15">    eval_dataloader<span class="op" style="color: #5E5E5E;">=</span>DataLoader(valid_dataset, batch_size<span class="op" style="color: #5E5E5E;">=</span>args.valid_batch_size)</span>
<span id="cb114-16">    <span class="cf" style="color: #003B4F;">return</span> train_dataloader, eval_dataloader</span></code></pre></div>
<p><strong>Note:</strong> Hugging Face Accelerate takes care of distributing batches to each worker.</p>
<hr>
<p><strong>Define a helper function to differentiate the parameters that should receive weight decay</strong></p>
<ul>
<li>Biases and LayerNorm weights are generally not subject to weight decay.</li>
</ul>
<div class="sourceCode" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="kw" style="color: #003B4F;">def</span> get_grouped_params(model, no_decay<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"bias"</span>, <span class="st" style="color: #20794D;">"LayerNorm.weight"</span>]):</span>
<span id="cb115-2">    params_with_wd, params_without_wd <span class="op" style="color: #5E5E5E;">=</span> [], []</span>
<span id="cb115-3">    <span class="cf" style="color: #003B4F;">for</span> n, p <span class="kw" style="color: #003B4F;">in</span> model.named_parameters():</span>
<span id="cb115-4">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">any</span>(nd <span class="kw" style="color: #003B4F;">in</span> n <span class="cf" style="color: #003B4F;">for</span> nd <span class="kw" style="color: #003B4F;">in</span> no_decay):</span>
<span id="cb115-5">            params_without_wd.append(p)</span>
<span id="cb115-6">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb115-7">            params_with_wd.append(p)</span>
<span id="cb115-8">    <span class="cf" style="color: #003B4F;">return</span> [{<span class="st" style="color: #20794D;">'params'</span>: params_with_wd, <span class="st" style="color: #20794D;">'weight_decay'</span>: args.weight_decay},</span>
<span id="cb115-9">            {<span class="st" style="color: #20794D;">'params'</span>: params_without_wd, <span class="st" style="color: #20794D;">'weight_decay'</span>: <span class="fl" style="color: #AD0000;">0.0</span>}]</span></code></pre></div>
<hr>
<p><strong>Define a function to evaluate the model on the validation set</strong></p>
<div class="sourceCode" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="kw" style="color: #003B4F;">def</span> evaluate():</span>
<span id="cb116-2">    model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb116-3">    losses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb116-4">    <span class="cf" style="color: #003B4F;">for</span> step, batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(eval_dataloader):</span>
<span id="cb116-5">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb116-6">            outputs <span class="op" style="color: #5E5E5E;">=</span> model(batch, labels<span class="op" style="color: #5E5E5E;">=</span>batch)</span>
<span id="cb116-7">        loss <span class="op" style="color: #5E5E5E;">=</span> outputs.loss.repeat(args.valid_batch_size)</span>
<span id="cb116-8">        losses.append(accelerator.gather(loss))</span>
<span id="cb116-9">        <span class="cf" style="color: #003B4F;">if</span> args.max_eval_steps <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="kw" style="color: #003B4F;">and</span> step <span class="op" style="color: #5E5E5E;">&gt;=</span> args.max_eval_steps: <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb116-10">    loss <span class="op" style="color: #5E5E5E;">=</span> torch.mean(torch.cat(losses))</span>
<span id="cb116-11">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb116-12">        perplexity <span class="op" style="color: #5E5E5E;">=</span> torch.exp(loss)</span>
<span id="cb116-13">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">OverflowError</span>:</span>
<span id="cb116-14">        perplexity <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(<span class="bu" style="color: null;">float</span>(<span class="st" style="color: #20794D;">"inf"</span>))</span>
<span id="cb116-15">    <span class="cf" style="color: #003B4F;">return</span> loss.item(), perplexity.item()</span></code></pre></div>
<p><strong>Note:</strong> * The perplexity measures how well the model’s output probability distributions predict the targeted tokens. * A lower perplexity corresponds to better performance. * We compute the perplexity by exponentiating the cross-entropy loss from the model’s output.</p>
<hr>
<p><strong>Training session</strong></p>
<div class="sourceCode" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="co" style="color: #5E5E5E;"># Reset random seed</span></span>
<span id="cb117-2">set_seed(args.seed)</span>
<span id="cb117-3"></span>
<span id="cb117-4"><span class="co" style="color: #5E5E5E;"># Accelerator</span></span>
<span id="cb117-5">accelerator <span class="op" style="color: #5E5E5E;">=</span> Accelerator()</span>
<span id="cb117-6">samples_per_step <span class="op" style="color: #5E5E5E;">=</span> accelerator.state.num_processes <span class="op" style="color: #5E5E5E;">*</span> args.train_batch_size</span>
<span id="cb117-7"></span>
<span id="cb117-8"><span class="co" style="color: #5E5E5E;"># Logging</span></span>
<span id="cb117-9">logger, tb_writer, run_name <span class="op" style="color: #5E5E5E;">=</span> setup_logging(project_name.split(<span class="st" style="color: #20794D;">"/"</span>)[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb117-10">logger.info(accelerator.state)</span>
<span id="cb117-11"></span>
<span id="cb117-12"><span class="co" style="color: #5E5E5E;"># Load model and tokenizer</span></span>
<span id="cb117-13"><span class="cf" style="color: #003B4F;">if</span> accelerator.is_main_process:</span>
<span id="cb117-14">    <span class="co" style="color: #5E5E5E;"># Check out a new branch for the current run</span></span>
<span id="cb117-15">    hf_repo <span class="op" style="color: #5E5E5E;">=</span> Repository(<span class="st" style="color: #20794D;">"./"</span>, clone_from<span class="op" style="color: #5E5E5E;">=</span>project_name, revision<span class="op" style="color: #5E5E5E;">=</span>run_name)</span>
<span id="cb117-16">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(<span class="st" style="color: #20794D;">"./"</span>, gradient_checkpointing<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb117-17">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"./"</span>)</span>
<span id="cb117-18"></span>
<span id="cb117-19"><span class="co" style="color: #5E5E5E;"># Load dataset and dataloader</span></span>
<span id="cb117-20">train_dataloader, eval_dataloader <span class="op" style="color: #5E5E5E;">=</span> create_dataloaders(dataset_name)</span>
<span id="cb117-21"></span>
<span id="cb117-22"><span class="co" style="color: #5E5E5E;"># Prepare the optimizer and learning rate scheduler</span></span>
<span id="cb117-23">optimizer <span class="op" style="color: #5E5E5E;">=</span> AdamW(get_grouped_params(model), lr<span class="op" style="color: #5E5E5E;">=</span>args.learning_rate)</span>
<span id="cb117-24">lr_scheduler <span class="op" style="color: #5E5E5E;">=</span> get_scheduler(name<span class="op" style="color: #5E5E5E;">=</span>args.lr_scheduler_type, optimizer<span class="op" style="color: #5E5E5E;">=</span>optimizer,</span>
<span id="cb117-25">                             num_warmup_steps<span class="op" style="color: #5E5E5E;">=</span>args.num_warmup_steps,</span>
<span id="cb117-26">                             num_training_steps<span class="op" style="color: #5E5E5E;">=</span>args.max_train_steps,)</span>
<span id="cb117-27"><span class="kw" style="color: #003B4F;">def</span> get_lr():</span>
<span id="cb117-28">    <span class="cf" style="color: #003B4F;">return</span> optimizer.param_groups[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'lr'</span>]</span>
<span id="cb117-29"></span>
<span id="cb117-30"><span class="co" style="color: #5E5E5E;"># Prepare everything with our `accelerator` (order of args is not important)</span></span>
<span id="cb117-31">model, optimizer, train_dataloader, eval_dataloader <span class="op" style="color: #5E5E5E;">=</span> accelerator.prepare(</span>
<span id="cb117-32">    model, optimizer, train_dataloader, eval_dataloader)</span>
<span id="cb117-33"></span>
<span id="cb117-34"><span class="co" style="color: #5E5E5E;"># Train model</span></span>
<span id="cb117-35">model.train()</span>
<span id="cb117-36">completed_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb117-37"><span class="cf" style="color: #003B4F;">for</span> step, batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(train_dataloader, start<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb117-38">    loss <span class="op" style="color: #5E5E5E;">=</span> model(batch, labels<span class="op" style="color: #5E5E5E;">=</span>batch).loss</span>
<span id="cb117-39">    log_metrics(step, {<span class="st" style="color: #20794D;">'lr'</span>: get_lr(), <span class="st" style="color: #20794D;">'samples'</span>: step<span class="op" style="color: #5E5E5E;">*</span>samples_per_step,</span>
<span id="cb117-40">                       <span class="st" style="color: #20794D;">'steps'</span>: completed_steps, <span class="st" style="color: #20794D;">'loss/train'</span>: loss.item()})</span>
<span id="cb117-41">    loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">/</span> args.gradient_accumulation_steps</span>
<span id="cb117-42">    accelerator.backward(loss)</span>
<span id="cb117-43">    <span class="co" style="color: #5E5E5E;"># Use gradient accumulation to imitate larger batch sizes</span></span>
<span id="cb117-44">    <span class="cf" style="color: #003B4F;">if</span> step <span class="op" style="color: #5E5E5E;">%</span> args.gradient_accumulation_steps <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb117-45">        optimizer.step()</span>
<span id="cb117-46">        lr_scheduler.step()</span>
<span id="cb117-47">        optimizer.zero_grad()</span>
<span id="cb117-48">        completed_steps <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb117-49">    <span class="cf" style="color: #003B4F;">if</span> step <span class="op" style="color: #5E5E5E;">%</span> args.save_checkpoint_steps <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb117-50">        logger.info(<span class="st" style="color: #20794D;">'Evaluating and saving model checkpoint'</span>)</span>
<span id="cb117-51">        <span class="co" style="color: #5E5E5E;"># Evaluate the model every time we save a new checkpoint</span></span>
<span id="cb117-52">        eval_loss, perplexity <span class="op" style="color: #5E5E5E;">=</span> evaluate()</span>
<span id="cb117-53">        log_metrics(step, {<span class="st" style="color: #20794D;">'loss/eval'</span>: eval_loss, <span class="st" style="color: #20794D;">'perplexity'</span>: perplexity})</span>
<span id="cb117-54">        <span class="co" style="color: #5E5E5E;"># Synchronize the model before storing the latest checkpoint</span></span>
<span id="cb117-55">        accelerator.wait_for_everyone()</span>
<span id="cb117-56">        unwrapped_model <span class="op" style="color: #5E5E5E;">=</span> accelerator.unwrap_model(model)</span>
<span id="cb117-57">        <span class="cf" style="color: #003B4F;">if</span> accelerator.is_main_process:</span>
<span id="cb117-58">            <span class="co" style="color: #5E5E5E;"># Save the latest checkpoint to disk</span></span>
<span id="cb117-59">            unwrapped_model.save_pretrained(<span class="st" style="color: #20794D;">"./"</span>)</span>
<span id="cb117-60">            <span class="co" style="color: #5E5E5E;"># Push the latest checkpoint to the Hub</span></span>
<span id="cb117-61">            hf_repo.push_to_hub(commit_message<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'step </span><span class="sc" style="color: #5E5E5E;">{</span>step<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb117-62">        model.train()</span>
<span id="cb117-63">    <span class="cf" style="color: #003B4F;">if</span> completed_steps <span class="op" style="color: #5E5E5E;">&gt;=</span> args.max_train_steps:</span>
<span id="cb117-64">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb117-65"></span>
<span id="cb117-66"><span class="co" style="color: #5E5E5E;"># Evaluate and save the last checkpoint</span></span>
<span id="cb117-67">logger.info(<span class="st" style="color: #20794D;">'Evaluating and saving model after training'</span>)</span>
<span id="cb117-68">eval_loss, perplexity <span class="op" style="color: #5E5E5E;">=</span> evaluate()</span>
<span id="cb117-69">log_metrics(step, {<span class="st" style="color: #20794D;">'loss/eval'</span>: eval_loss, <span class="st" style="color: #20794D;">'perplexity'</span>: perplexity})</span>
<span id="cb117-70">accelerator.wait_for_everyone()</span>
<span id="cb117-71">unwrapped_model <span class="op" style="color: #5E5E5E;">=</span> accelerator.unwrap_model(model)</span>
<span id="cb117-72"><span class="cf" style="color: #003B4F;">if</span> accelerator.is_main_process:</span>
<span id="cb117-73">    unwrapped_model.save_pretrained(<span class="st" style="color: #20794D;">"./"</span>)</span>
<span id="cb117-74">    hf_repo.push_to_hub(commit_message<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'final model'</span>)</span></code></pre></div>
<p><strong>Note:</strong> * here are several approaches to distributed training depending on the model size and volume of data. * Hugging Face Accelerate uses <a href="https://pytorch.org/tutorials/intermediate/ddp_tutorial.html">DataDistributedParalellism (DDP)</a>. * DDP allows you to train models faster with larger batch sizes that wouldn’t fit into any single GPU. * Hugging Face Accelerate prepares batches of data and sends them to the workers. * Each worker consists of a GPU and calculates the loss and their respective accumulated gradients from forward and backward passes with a local copy of the model. * We average the gradients from each node with a <code>reduce</code> pattern and send the average back to each worker. * We apply the gradients using the optimizer on each node to avoid transferring copies of the large models between nodes. * We repeat the process after updating the models for each worker. * DDP requires that the model fits on a single GPU. * <a href="https://medium.com/tensorflow/fitting-larger-networks-into-memory-583e3c758ff9">Fitting larger networks into memory.</a> * <a href="https://huggingface.co/docs/transformers/main/en/parallelism">Model Paralellism</a></p>
<hr>
</section>
</section>
<section id="the-training-run" class="level3">
<h3 class="anchored" data-anchor-id="the-training-run">The Training Run</h3>
<ul>
<li>We can save the training steps to a script and push them to a repository on the Hub.</li>
<li>We can then execute the training script on a training server using the <code>accelerate launch</code> command.</li>
</ul>
<div class="sourceCode" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb118-1"><span class="fu" style="color: #4758AB;">git</span> clone https://huggingface.co/transformerbook/codeparrot</span>
<span id="cb118-2"><span class="bu" style="color: null;">cd</span> codeparrot</span>
<span id="cb118-3"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-r</span> requirements.txt</span>
<span id="cb118-4"><span class="ex" style="color: null;">wandb</span> login</span>
<span id="cb118-5"><span class="ex" style="color: null;">accelerate</span> config</span>
<span id="cb118-6"><span class="ex" style="color: null;">accelerate</span> launch codparrot_training.py</span></code></pre></div>
<ul>
<li>The <code>accelerate config</code> command guides you through setting up the infrastructure.</li>
<li>Hugging Face uses <a href="https://cloud.google.com/blog/products/compute/announcing-google-cloud-a2-vm-family-based-on-nvidia-a100-gpu"><code>a2-megagpu-16g</code></a> instances on Google Cloud for experiments (<a href="https://www.economize.cloud/gcp/pricing/a2/a2-megagpu-16g">pricing</a>).</li>
<li><a href="https://spltech.co.uk/reducing-90-in-costs-with-spot-vms-for-machine-learning-on-google-kubernetes-engine-in-gcp/">Reducing 90% in costs with Spot VMs for Machine Learning on Google Kubernetes Engine in GCP</a></li>
</ul>
<p><strong>Configuration used to train CodeParrot models</strong></p>
<table class="table">
<thead>
<tr class="header">
<th>Setting</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Compute Environment?</td>
<td>multi-gpu</td>
</tr>
<tr class="even">
<td>How many machines?</td>
<td>1</td>
</tr>
<tr class="odd">
<td>DeepSpeed?</td>
<td>No</td>
</tr>
<tr class="even">
<td>How many processes?</td>
<td>16</td>
</tr>
<tr class="odd">
<td>Use FP16?</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<ul>
<li>Running the training script with the above settings takes about 24 hours for the small model and seven days for the large model.</li>
<li>Test the code on smaller infrastructure before using expensive cloud instances.</li>
<li>We can merge the experiment branch back into the main one after training completes.</li>
</ul>
<div class="sourceCode" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb119-1"><span class="fu" style="color: #4758AB;">git</span> checkout main</span>
<span id="cb119-2"><span class="fu" style="color: #4758AB;">git</span> merge <span class="op" style="color: #5E5E5E;">&lt;</span>RUN_NAME<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb119-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
</section>
</section>
<section id="results-and-analysis" class="level2">
<h2 class="anchored" data-anchor-id="results-and-analysis">Results and Analysis</h2>
<ul>
<li>The training loss and validation perplexity should go down continuously during training.</li>
<li>The large model converges with fewer processed tokens, but training takes longer overall.</li>
<li>Qualitative analysis involves looking at concrete examples and trying to better understand in which cases the model succeeds and fails.</li>
<li>Quantitative analysis involves evaluating model performance statistically on a large set of test cases.</li>
</ul>
<hr>
<div class="sourceCode" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> pipeline, set_seed</span></code></pre></div>
<hr>
<p><strong>Wrap the small model in a text generation pipeline</strong></p>
<div class="sourceCode" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">model_ckpt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'transformersbook/codeparrot-small'</span></span>
<span id="cb121-2">generation <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">'text-generation'</span>, model<span class="op" style="color: #5E5E5E;">=</span>model_ckpt, device<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb122-2"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> set_seed </span></code></pre></div>
<hr>
<p><strong>Define a function to extract the first code block from the model output</strong></p>
<div class="sourceCode" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1"><span class="kw" style="color: #003B4F;">def</span> first_block(string):</span>
<span id="cb123-2">    <span class="cf" style="color: #003B4F;">return</span> re.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">class|</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">def|</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">#|</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">@|</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">print|</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">if'</span>, string)[<span class="dv" style="color: #AD0000;">0</span>].rstrip()</span></code></pre></div>
<hr>
<p><strong>Define a function to print out generated code completions</strong></p>
<div class="sourceCode" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1"><span class="kw" style="color: #003B4F;">def</span> complete_code(pipe, prompt, max_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>, num_completions<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb124-2">    set_seed(seed)</span>
<span id="cb124-3">    gen_kwargs <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"temperature"</span>:<span class="fl" style="color: #AD0000;">0.4</span>, <span class="st" style="color: #20794D;">"top_p"</span>:<span class="fl" style="color: #AD0000;">0.95</span>, <span class="st" style="color: #20794D;">"top_k"</span>:<span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"num_beams"</span>:<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb124-4">                  <span class="st" style="color: #20794D;">"do_sample"</span>:<span class="va" style="color: #111111;">True</span>,}</span>
<span id="cb124-5">    code_gens <span class="op" style="color: #5E5E5E;">=</span> generation(prompt, num_return_sequences<span class="op" style="color: #5E5E5E;">=</span>num_completions, </span>
<span id="cb124-6">                            max_length<span class="op" style="color: #5E5E5E;">=</span>max_length, <span class="op" style="color: #5E5E5E;">**</span>gen_kwargs)</span>
<span id="cb124-7">    code_strings <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb124-8">    <span class="cf" style="color: #003B4F;">for</span> code_gen <span class="kw" style="color: #003B4F;">in</span> code_gens:</span>
<span id="cb124-9">        generated_code <span class="op" style="color: #5E5E5E;">=</span> first_block(code_gen[<span class="st" style="color: #20794D;">'generated_text'</span>][<span class="bu" style="color: null;">len</span>(prompt):])</span>
<span id="cb124-10">        code_strings.append(generated_code)</span>
<span id="cb124-11">    <span class="bu" style="color: null;">print</span>((<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span><span class="op" style="color: #5E5E5E;">+</span><span class="st" style="color: #20794D;">'='</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">80</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>).join(code_strings))</span></code></pre></div>
<hr>
<p><strong>Test the model on a simple task</strong></p>
<div class="sourceCode" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''def area_of_rectangle(a: float, b: float):</span></span>
<span id="cb125-2"><span class="st" style="color: #20794D;">    """Return the area of the rectangle."""'''</span></span>
<span id="cb125-3">complete_code(generation, prompt)</span></code></pre></div>
<pre class="text"><code>
        return math.sqrt(a * b)
    ================================================================================
    
        return a * b / 2.0
    ================================================================================
    
        return a * b
    ================================================================================
    
        return a * b / 2.0</code></pre>
<p><strong>Note:</strong> The generated outputs look convincing, but not all of them are correct.</p>
<hr>
<p><strong>Test the model on a more complex task</strong></p>
<div class="sourceCode" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''def get_urls_from_html(html):</span></span>
<span id="cb127-2"><span class="st" style="color: #20794D;">    """Get all embedded URLs in a HTML string."""'''</span></span>
<span id="cb127-3">complete_code(generation, prompt)</span></code></pre></div>
<pre class="text"><code>
        if not html:
            return []
        return [url for url in re.findall(r'&lt;a href="(/[^/]+/[^"]+?)"&gt;', html)]
    ================================================================================
    
        return [url for url in re.findall(r'&lt;a href="(.*?)"', html)
                if url]
    ================================================================================
    
        return [url for url in re.findall(r'&lt;a href="(.*?)"', html)]
    ================================================================================
    
        return re.findall(r'&lt;a href="([^"]+)"&gt;', html)</code></pre>
<p><strong>Note:</strong> The second attempt is not quite right, but the other three generations are correct.</p>
<hr>
<p><strong>Test the generated code</strong></p>
<div class="sourceCode" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb129-2"></span>
<span id="cb129-3"><span class="kw" style="color: #003B4F;">def</span> get_urls_from_html(html):</span>
<span id="cb129-4">    <span class="cf" style="color: #003B4F;">return</span> [url <span class="cf" style="color: #003B4F;">for</span> url <span class="kw" style="color: #003B4F;">in</span> re.findall(<span class="vs" style="color: #20794D;">r'&lt;a href="(.*?)"'</span>, html) <span class="cf" style="color: #003B4F;">if</span> url]</span>
<span id="cb129-5"></span>
<span id="cb129-6">pd.DataFrame(get_urls_from_html(requests.get(<span class="st" style="color: #20794D;">'https://hf.co/'</span>).text))</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
https://huggingface.co/bigscience/tr11-176B-ml-logs
</td>
</tr>
<tr>
<th>
1
</th>
<td>
https://github.com/huggingface/transformers
</td>
</tr>
<tr>
<th>
2
</th>
<td>
/join
</td>
</tr>
<tr>
<th>
3
</th>
<td>
/tasks
</td>
</tr>
<tr>
<th>
4
</th>
<td>
https://huggingface.co/transformers
</td>
</tr>
<tr>
<th>
5
</th>
<td>
/inference-api
</td>
</tr>
<tr>
<th>
6
</th>
<td>
/distilbert-base-uncased
</td>
</tr>
<tr>
<th>
7
</th>
<td>
/dbmdz/bert-large-cased-finetuned-conll03-english
</td>
</tr>
<tr>
<th>
8
</th>
<td>
https://bigscience.huggingface.co/
</td>
</tr>
<tr>
<th>
9
</th>
<td>
https://bigscience.huggingface.co/blog/t0
</td>
</tr>
<tr>
<th>
10
</th>
<td>
https://medium.com/huggingface/distilbert-8cf3380435b5
</td>
</tr>
<tr>
<th>
11
</th>
<td>
https://arxiv.org/abs/1811.06031
</td>
</tr>
<tr>
<th>
12
</th>
<td>
https://arxiv.org/abs/1803.10631
</td>
</tr>
<tr>
<th>
13
</th>
<td>
/coref
</td>
</tr>
<tr>
<th>
14
</th>
<td>
https://transformer.huggingface.co/
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Note:</strong> The URLs starting with <code>https</code> are external pages, while the others are subpages of the main website.</p>
<hr>
<p><strong>Wrap the large model in a text generation pipeline</strong></p>
<div class="sourceCode" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1">model_ckpt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'transformersbook/codeparrot'</span></span>
<span id="cb130-2">generation <span class="op" style="color: #5E5E5E;">=</span> pipeline(<span class="st" style="color: #20794D;">'text-generation'</span>, model<span class="op" style="color: #5E5E5E;">=</span>model_ckpt, device<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<hr>
<p><strong>Try to translate a function from pure Python to NumPy using the large model</strong></p>
<div class="sourceCode" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''# a function in native python:</span></span>
<span id="cb131-2"><span class="st" style="color: #20794D;">def mean(a):</span></span>
<span id="cb131-3"><span class="st" style="color: #20794D;">    return sum(a)/len(a)</span></span>
<span id="cb131-4"></span>
<span id="cb131-5"><span class="st" style="color: #20794D;"># the same function using numpy:</span></span>
<span id="cb131-6"><span class="st" style="color: #20794D;">import numpy as np</span></span>
<span id="cb131-7"><span class="st" style="color: #20794D;">def mean(a):'''</span></span>
<span id="cb131-8">complete_code(generation, prompt, max_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>)</span></code></pre></div>
<pre class="text"><code>
        return np.mean(a)
    ================================================================================
    
        return sum(a)/len(a)
    ================================================================================
    
        return np.mean(a)
    ================================================================================
    
        return sum(a)/len(a)</code></pre>
<p><strong>Note:</strong> It worked.</p>
<hr>
<p><strong>Try building a Scilit-learn model</strong></p>
<div class="sourceCode" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''X = np.random.randn(100, 100)</span></span>
<span id="cb133-2"><span class="st" style="color: #20794D;">y = np.random.randint(0, 1, 100)</span></span>
<span id="cb133-3"></span>
<span id="cb133-4"><span class="st" style="color: #20794D;"># fit random forest classifier with 20 estimators'''</span></span>
<span id="cb133-5">complete_code(generation, prompt, max_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">96</span>)</span></code></pre></div>
<pre class="text"><code>
    reg = DummyRegressor()
    
    forest = RandomForestClassifier(n_estimators=20)
    
    forest.fit(X, y)
    ================================================================================
    
    clf = ExtraTreesClassifier(n_estimators=100, max_features='sqrt')
    clf.fit(X, y)
    ================================================================================
    
    clf = RandomForestClassifier(n_estimators=20, n_jobs=n_jobs, random_state=1)
    clf.fit(X, y)
    ================================================================================
    
    clf = RandomForestClassifier(n_estimators=20, n_jobs=n_jobs, random_state=1)
    clf.fit(X, y)</code></pre>
<p><strong>Note:</strong> * The second attempt used an <a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesClassifier.html">extra-trees classifier</a>, but the other three generated what we asked. * The BLEU score is not well suited for measuring the quality of generated code as it would punish a generation that deviates from the reference naming. * The success of a program does not depend on the naming scheme as long as it is consistent. * We can use traditional software development methods like unit tests to measure the quality of generated code. * OpenAI evaluated Codex models by running several code generations for coding tasks through some unit tests and calculating the fraction that passes the tests. * <a href="https://arxiv.org/abs/2107.03374">Evaluating Large Language Models Trained on Code</a></p>
<hr>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://transformersbook.com/">Natural Language Processing with Transformers Book</a></li>
<li><a href="https://github.com/nlp-with-transformers/notebooks">The Transformers book GitHub Repository</a></li>
</ul>
<!-- Cloudflare Web Analytics -->
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon="{&quot;token&quot;: &quot;56b8d2f624604c4891327b3c0d9f6703&quot;}"></script>
<!-- End Cloudflare Web Analytics -->


</section>

 ]]></description>
  <category>ai</category>
  <category>huggingface</category>
  <category>nlp</category>
  <category>notes</category>
  <guid>christianjmills.com/posts/transformers-book-notes/chapter-10/index.html</guid>
  <pubDate>Mon, 25 Apr 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
