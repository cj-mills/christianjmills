<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<atom:link href="christianjmills.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Christian Mills&#39; personal Blog.</description>
<image>
<url>christianjmills.com/images/logo.png</url>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<height>142</height>
<width>144</width>
</image>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Thu, 28 Sep 2023 07:00:00 GMT</lastBuildDate>
<item>
  <title>Exporting YOLOX Models from PyTorch to TensorFlow.js</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/tfjs-export/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Converting the Model to TensorFlow</li>
<li>Exporting the Model to TensorFlow.js</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../"><strong>Training YOLOX Models for Real-Time Object Detection in Pytorch</strong></a>: Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
<li><a href="./"><strong>Exporting YOLOX Models from PyTorch to TensorFlow.js</strong></a><strong>:</strong> Learn how to export YOLOX models from PyTorch to TensorFlow.js using the nobuco conversion tool.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on training YOLOX models for real-time applications! <a href="../">Previously</a>, we demonstrated how to fine-tune a YOLOX model in PyTorch by creating a hand gesture detector. This tutorial builds on that by showing how to export the model to <a href="https://www.tensorflow.org/js">TensorFlow.js</a>.</p>
<p>TensorFlow.js is an open-source hardware-accelerated JavaScript library for training and deploying machine learning models in web browsers. Converting our YOLOX model to TensorFlow.js allows us to run and integrate it directly into web applications without server-side processing.</p>
<p>Check out a live demo using the YOLOX model in a Unity WebGL application at the link below:</p>
<ul>
<li><a href="https://cj-mills.github.io/unity-tfjs-inference-yolox-demo/">Unity TensorFlow.js Inference YOLOX Demo</a></li>
</ul>
<p>We’ll first use a tool called <a href="https://github.com/AlexanderLutsenko/nobuco">nobuco</a> to translate the PyTorch model to a <a href="https://www.tensorflow.org/guide/keras">TensorFlow Keras</a> model. We can then use the official TensorFlow.js conversion tool to export the Keras model to a TensorFlow.js Graph model.</p>
<p>By the end of this tutorial, you will have a TensorFlow.js version of our YOLOX model that you can deploy to web applications and have it run locally in web browsers.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../">Training YOLOX Models for Real-Time Object Detection in Pytorch</a></li>
</ul>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-nobuco-tfjs-export.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-nobuco-tfjs-export-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>We’ll need to add a couple of new packages to our <a href="../#setting-up-your-python-environment">Python environment</a>.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>nobuco</code></td>
<td>A tool that helps you translate pytorch models into TensorFlow graphs. (<a href="https://github.com/AlexanderLutsenko/nobuco">link</a>)</td>
</tr>
<tr class="even">
<td><code>tensorflowjs</code></td>
<td>A pip package that contains libraries and tools for TensorFlow.js (<a href="https://pypi.org/project/tensorflowjs/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional packages</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install nobuco tensorflowjs</span></code></pre></div>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment updated, we can dive into the code. First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import YOLOX package</span></span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> build_model</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.inference <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> YOLOXInferenceWrapper</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Nobuco dependencies</span></span>
<span id="cb2-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nobuco <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytorch_to_keras, ChannelOrder</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import TensorFlow.js dependencies</span></span>
<span id="cb2-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflowjs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> converters, quantization</span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we’ll set the folder locations for our project and training session with the PyTorch checkpoint.</p>
<section id="set-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="set-the-directory-paths">Set the Directory Paths</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb3-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-yolox-object-detector"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb3-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb3-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb3-11">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2023-08-17_16-14-43"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">pd.Series({</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb3-16">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_3c82a">
<thead>
</thead>
<tbody>
<tr>
<th id="T_3c82a_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_3c82a_row0_col0" class="data row0 col0">
pytorch-yolox-object-detector
</td>
</tr>
<tr>
<th id="T_3c82a_level0_row1" class="row_heading level0 row1">
Checkpoint Directory:
</th>
<td id="T_3c82a_row1_col0" class="data row1 col0">
pytorch-yolox-object-detector/2023-08-17_16-14-43
</td>
</tr>
</tbody>

</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="I made some model checkpoints available on Hugging Face Hub in the repository linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
I made some model checkpoints available on Hugging Face Hub in the repository linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://huggingface.co/cj-mills/yolox-hagrid-pytorch/tree/main">cj-mills/yolox-hagrid-pytorch</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the colormap and normalization stats used during training and initialize a YOLOX model with the saved checkpoint.</p>
<section id="load-the-colormap" class="level3">
<h3 class="anchored" data-anchor-id="load-the-colormap">Load the Colormap</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The colormap path</span></span>
<span id="cb4-2">colormap_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*colormap.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON colormap data</span></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(colormap_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-6">        colormap_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the JSON data to a dictionary        </span></span>
<span id="cb4-9">colormap_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]}</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the class names from the colormap</span></span>
<span id="cb4-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(colormap_dict.keys())</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the colormap in integer format</span></span>
<span id="cb4-15">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_dict.values()]</span></code></pre></div>
</section>
<section id="load-the-normalization-statistics" class="level3">
<h3 class="anchored" data-anchor-id="load-the-normalization-statistics">Load the Normalization Statistics</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The normalization stats path</span></span>
<span id="cb5-2">norm_stats_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm_stats.json'</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the normalization stats from the JSON file</span></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(norm_stats_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-6">    norm_stats_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(f)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the dictionary to a tuple</span></span>
<span id="cb5-9">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (norm_stats_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], norm_stats_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std_dev"</span>])</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the mean and standard deviation</span></span>
<span id="cb5-12">pd.DataFrame(norm_stats)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0.5
</td>
<td>
0.5
</td>
<td>
0.5
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1.0
</td>
<td>
1.0
</td>
<td>
1.0
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="load-the-model-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model-checkpoint">Load the Model Checkpoint</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb6-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.pth'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model checkpoint onto the CPU</span></span>
<span id="cb6-5">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(checkpoint_path, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</section>
<section id="load-the-trained-yolox-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-trained-yolox-model">Load the Trained YOLOX Model</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the YOLOX model configuration</span></span>
<span id="cb7-2">model_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_path.stem</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a YOLOX model with the number of output classes equal to the number of class names</span></span>
<span id="cb7-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_model(model_type, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model with the checkpoint parameters and buffers</span></span>
<span id="cb7-8">model.load_state_dict(model_checkpoint)</span></code></pre></div>
<pre class="text"><code>&lt;All keys matched successfully&gt;</code></pre>
</section>
</section>
<section id="converting-the-model-to-tensorflow" class="level2">
<h2 class="anchored" data-anchor-id="converting-the-model-to-tensorflow">Converting the Model to TensorFlow</h2>
<p>Before exporting the model, we’ll wrap it with the preprocessing steps as we did <a href="../#preparing-the-model-for-inference">previously</a>. These steps will be included in the TensorFlow.js model, reducing the code we need to write when deploying the model.</p>
<section id="prepare-the-model-for-inference" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-model-for-inference">Prepare the Model for Inference</h3>
<p>The <a href="https://cj-mills.github.io/cjm-yolox-pytorch/inference.html#yoloxinferencewrapper"><code>YOLOXInferenceWrapper</code></a> class has some optional settings we did not explore in the previous tutorial. The <code>scale_inp</code> parameter will scale pixel data from the range <code>[0,255]</code> to <code>[0,1]</code>, and <code>channels_last</code> sets the model to expect input tensors in channels-last format.</p>
<p>Image data in JavaScript tends to be in the range <code>[0,255]</code>, so we’ll want to enable the <code>scale_inp</code> setting. The nobuco conversion tool automatically sets the model to the channels-last format for TensorFlow.</p>
<p>Additionally, we can turn off the post-processing steps to compute the predicted bounding box information and probability scores. We’ll need to do this when converting the model to TensorFlow using the nobuco tool as it throws an error with them enabled.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the normalization stats to tensors</span></span>
<span id="cb9-2">mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-3">std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb9-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap the model with preprocessing and post-processing steps</span></span>
<span id="cb9-9">wrapped_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXInferenceWrapper(model, </span>
<span id="cb9-10">                                      mean_tensor, </span>
<span id="cb9-11">                                      std_tensor, </span>
<span id="cb9-12">                                      scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale input values from the rang [0,255] to [0,1]</span></span>
<span id="cb9-13">                                      channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have the model expect input in channels-last format</span></span>
<span id="cb9-14">                                      run_box_and_prob_calculation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable or disable post-processing steps</span></span>
<span id="cb9-15">                                     )</span></code></pre></div>
</section>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<p>We need a sample input tensor for the conversion process.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>The exported TensorFlow.js model will lock to this input resolution, so pick dimensions suitable for your intended use case.</p>
</div>
</div>
</section>
<section id="convert-the-pytorch-model-to-keras" class="level3">
<h3 class="anchored" data-anchor-id="convert-the-pytorch-model-to-keras">Convert the PyTorch Model to Keras</h3>
<p>We use the <code>pytorch_to_keras</code> function included with nobuco to convert the YOLOX model from PyTorch to a <a href="https://www.tensorflow.org/guide/keras">Keras</a> model. While we can stick with the default channel order for the model input, we need to maintain the output channel order from the original PyTorch model.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">keras_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytorch_to_keras(</span>
<span id="cb11-2">    wrapped_model, </span>
<span id="cb11-3">    args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[input_tensor],</span>
<span id="cb11-4">    outputs_channel_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ChannelOrder.PYTORCH, </span>
<span id="cb11-5">)</span></code></pre></div>
</section>
<section id="save-the-keras-model-in-savedmodel-format" class="level3">
<h3 class="anchored" data-anchor-id="save-the-keras-model-in-savedmodel-format">Save the Keras Model in SavedModel format</h3>
<p>Next, we save the Keras model in TensorFlow’s SavedModel format, the recommended format for exporting to TensorFlow.js.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the folder path for the SavedModel files</span></span>
<span id="cb12-2">savedmodel_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>colormap_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-colormap'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-tf"</span>)</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the TensorFlow model to disk</span></span>
<span id="cb12-4">keras_model.save(savedmodel_dir, save_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tf"</span>)</span></code></pre></div>
</section>
</section>
<section id="exporting-the-model-to-tensorflow.js" class="level2">
<h2 class="anchored" data-anchor-id="exporting-the-model-to-tensorflow.js">Exporting the Model to TensorFlow.js</h2>
<p>With our TensorFlow model saved to disk, we can use the TensorFlow.js conversion tool to export it to a TensorFlow.js Graph model.</p>
<p>Since the model will run locally in the browser, it must first download to the user’s device. The larger the model, the longer users must wait for it to download.</p>
<p>Fortunately, the TensorFlow.js conversion tool lets us quantize the model weights (i.e., convert them from 32-bit floating-point precision to 8-bit integers), significantly reducing their file size.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the path for TensorFlow.js model files</span></span>
<span id="cb13-2">tfjs_model_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>savedmodel_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">js-uint8"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the TensorFlow SavedModel to a TensorFlow.js Graph model</span></span>
<span id="cb13-5">converters.convert_tf_saved_model(saved_model_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(savedmodel_dir), </span>
<span id="cb13-6">                                  output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tfjs_model_dir, </span>
<span id="cb13-7">                                  quantization_dtype_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{quantization.QUANTIZATION_DTYPE_UINT8:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>}</span>
<span id="cb13-8">                                 )</span></code></pre></div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the archive file containing the TensorFlow.js model files from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial! We previously trained a YOLOX model in PyTorch for hand gesture detection, and now we’ve exported that model to TensorFlow.js. With it, we can deploy our model to the web and run it locally in users’ browsers.</p>
<p>If you found this guide helpful, consider sharing it with others.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>tensorflow</category>
  <category>tensorflow-js</category>
  <category>yolox</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/tfjs-export/index.html</guid>
  <pubDate>Thu, 28 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Exporting Mask R-CNN Models from PyTorch to ONNX</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/onnx-export/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Exporting the Model to ONNX</li>
<li>Performing Inference with ONNX Runtime</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../"><strong>Training Mask R-CNN Models with PyTorch</strong></a>: Learn how to train a Mask R-CNN model on a custom dataset with PyTorch.</li>
<li><a href="./"><strong>Exporting Mask R-CNN Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export Mask R-CNN models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on training Mask R-CNN models with PyTorch! Previously, we demonstrated how to fine-tune a Mask R-CNN model by training it on a small image dataset of Student ID cards.. This tutorial builds on that by showing how to export the model to <a href="https://onnx.ai/">ONNX</a> and perform inference using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a>.</p>
<p>ONNX (Open Neural Network Exchange) is an open format to represent machine learning models and make them portable across various platforms. ONNX Runtime is a cross-platform inference accelerator that provides interfaces to hardware-specific libraries. By exporting our model to ONNX, we can deploy it to multiple devices and leverage hardware acceleration for faster inference. The Mask R-CNN model is computationally intensive, so any improvements to inference speed are welcome.</p>
<p>Additionally, we’ll implement the functionality to annotate images with segmentation masks and bounding boxes without relying on PyTorch as a dependency. By the end of this tutorial, you will have an ONNX version of our Mask R-CNN model that you can deploy to servers and edge devices using ONNX Runtime.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-mask-rcnn-tutorial-code/blob/main/notebooks/pytorch-mask-r-cnn-onnx-export.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-mask-rcnn-tutorial-code/blob/main/notebooks/pytorch-mask-r-cnn-onnx-export-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>We’ll need to add a few new libraries to our <a href="../#setting-up-your-python-environment">Python environment</a> for working with ONNX models.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnx</code></td>
<td>This package provides a Python API for working with ONNX models. (<a href="https://pypi.org/project/onnx/">link</a>)</td>
</tr>
<tr class="even">
<td><code>onnxruntime</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://onnxruntime.ai/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>onnx-simplifier</code></td>
<td>This package helps simplify ONNX models. (<a href="https://pypi.org/project/onnx-simplifier/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX packages</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install onnx onnxruntime onnx-simplifier</span></code></pre></div>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment updated, we can dive into the code. First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb2-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw, ImageFont</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Mask R-CNN</span></span>
<span id="cb2-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> maskrcnn_resnet50_fpn_v2, MaskRCNN</span>
<span id="cb2-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaskRCNN_ResNet50_FPN_V2_Weights</span>
<span id="cb2-25"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.faster_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastRCNNPredictor</span>
<span id="cb2-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.mask_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaskRCNNPredictor</span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb2-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the onnx module</span></span>
<span id="cb2-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxsim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> simplify <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the method to simplify ONNX models</span></span>
<span id="cb2-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we’ll set the folder locations for our project and training session with the PyTorch checkpoint. Let’s also ensure we have a font file for annotating images.</p>
<section id="set-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="set-the-directory-paths">Set the Directory Paths</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb3-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-mask-r-cnn-instance-segmentation"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb3-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb3-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb3-11">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2023-09-19_15-17-57"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">pd.Series({</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb3-16">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_3c82a">
<thead>
</thead>
<tbody>
<tr>
<th id="T_3c82a_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_3c82a_row0_col0" class="data row0 col0">
pytorch-mask-r-cnn-instance-segmentation
</td>
</tr>
<tr>
<th id="T_3c82a_level0_row1" class="row_heading level0 row1">
Checkpoint Directory:
</th>
<td id="T_3c82a_row1_col0" class="data row1 col0">
pytorch-mask-r-cnn-instance-segmentation/2023-09-19_15-17-57
</td>
</tr>
</tbody>

</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="I made a model checkpoint available on Hugging Face Hub in the repository linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
I made a model checkpoint available on Hugging Face Hub in the repository linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://huggingface.co/cj-mills/mask-rcnn-student-id-pytorch/tree/main">cj-mills/mask-rcnn-student-id-pytorch</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. Keep in mind the model checkpoint has a large file size. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser. Keep in mind the model checkpoint has a large file size.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="download-a-font-file" class="level3">
<h3 class="anchored" data-anchor-id="download-a-font-file">Download a Font File</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb4-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb4-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the colormap used during training and initialize a Mask R-CNN model with the saved checkpoint.</p>
<section id="load-the-colormap" class="level3">
<h3 class="anchored" data-anchor-id="load-the-colormap">Load the Colormap</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The colormap path</span></span>
<span id="cb5-2">colormap_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*colormap.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON colormap data</span></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(colormap_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-6">        colormap_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the JSON data to a dictionary        </span></span>
<span id="cb5-9">colormap_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]}</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the class names from the colormap</span></span>
<span id="cb5-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(colormap_dict.keys())</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the colormap in integer format</span></span>
<span id="cb5-15">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_dict.values()]</span></code></pre></div>
</section>
<section id="load-the-model-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model-checkpoint">Load the Model Checkpoint</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb6-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.pth'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model checkpoint onto the CPU</span></span>
<span id="cb6-5">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(checkpoint_path, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</section>
<section id="load-the-trained-mask-r-cnn-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-trained-mask-r-cnn-model">Load the Trained Mask R-CNN Model</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a Mask R-CNN model</span></span>
<span id="cb7-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maskrcnn_resnet50_fpn_v2(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT'</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of input features for the classifier</span></span>
<span id="cb7-5">in_features_box <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.box_predictor.cls_score.in_features</span>
<span id="cb7-6">in_features_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.mask_predictor.conv5_mask.in_channels</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the box predictor</span></span>
<span id="cb7-9">model.roi_heads.box_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastRCNNPredictor(in_features_box, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the mask predictor</span></span>
<span id="cb7-12">model.roi_heads.mask_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MaskRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features_mask, dim_reduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model with the checkpoint parameters and buffers</span></span>
<span id="cb7-15">model.load_state_dict(model_checkpoint)</span></code></pre></div>
<pre class="text"><code>&lt;All keys matched successfully&gt;</code></pre>
</section>
</section>
<section id="exporting-the-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="exporting-the-model-to-onnx">Exporting the Model to ONNX</h2>
<p>Before exporting the model, let’s ensure the model is in evaluation mode.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<p>We need a sample input tensor for the export process.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
</section>
<section id="export-the-model-to-onnx" class="level3">
<h3 class="anchored" data-anchor-id="export-the-model-to-onnx">Export the Model to ONNX</h3>
<p>We can export the model using PyTorch’s <a href="https://pytorch.org/docs/stable/onnx.html#torch.onnx.export"><code>torch.onnx.export()</code></a> function. This function performs a single pass through the model and records all operations to generate a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript graph</a>. It then exports this graph to ONNX by decomposing each graph node (which contains a PyTorch operator) into a series of ONNX operators.</p>
<p>If we want the ONNX model to support different input sizes, we must set the width and height input axes as dynamic.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a filename for the ONNX model</span></span>
<span id="cb11-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>colormap_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-colormap'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb11-5">torch.onnx.export(model.cpu(),</span>
<span id="cb11-6">                  input_tensor.cpu(),</span>
<span id="cb11-7">                  onnx_file_path,</span>
<span id="cb11-8">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-9">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-10">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb11-11">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>],</span>
<span id="cb11-12">                  dynamic_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>}}</span>
<span id="cb11-13">                 )</span></code></pre></div>
<pre class="text"><code>============= Diagnostic Run torch.onnx.export version 2.0.1+cu118 =============
verbose: False, log level: Level.ERROR
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The export function may return some <code>UserWarning</code> messages when we export the model. We can ignore these warnings as the exported model functions as expected.</p>
</div>
</div>
</section>
<section id="simplify-the-onnx-model" class="level3">
<h3 class="anchored" data-anchor-id="simplify-the-onnx-model">Simplify the ONNX model</h3>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/"><code>onnx-simplifier</code></a> package to tidy up the exported model.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the ONNX model from the onnx_file_name</span></span>
<span id="cb13-2">onnx_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx.load(onnx_file_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplify the model</span></span>
<span id="cb13-5">model_simp, check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simplify(onnx_model)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the simplified model to the onnx_file_name</span></span>
<span id="cb13-8">onnx.save(model_simp, onnx_file_path)</span></code></pre></div>
</section>
</section>
<section id="performing-inference-with-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-onnx-runtime">Performing Inference with ONNX Runtime</h2>
<p>Now that we have our ONNX model, it’s time to test it with ONNX Runtime.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<p>We interact with models in ONNX Runtime through an <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#load-and-run-a-model"><code>InferenceSession</code></a> object. Here we can specify which Execution Providers to use for inference and other configuration information. <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> are the interfaces for hardware-specific inference engines like <a href="https://onnxruntime.ai/docs/execution-providers/TensorRT-ExecutionProvider.html">TensorRT</a> for NVIDIA and <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html">OpenVINO</a> for Intel. By default, the <code>InferenceSession</code> uses the generic <code>CPUExecutionProvider</code>.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb14-2">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path)</span></code></pre></div>
</section>
<section id="define-utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="define-utility-functions">Define Utility Functions</h3>
<p>In the previous tutorial, we used PyTorch to annotate images with segmentation masks and bounding boxes. Now, we will implement that functionality using <a href="https://numpy.org/">NumPy</a> and <a href="https://pillow.readthedocs.io/en/stable/">PIL</a>.</p>
<section id="define-a-function-to-annotate-an-image-with-segmentation-masks" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-annotate-an-image-with-segmentation-masks">Define a function to annotate an image with segmentation masks¶</h4>
<p>We can convert the grayscale segmentation masks produced by the model to color and paste them onto the input image. We can also adjust the transparency of the segmentation masks using an alpha parameter, as we did with PyTorch.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_masks_pil(image, masks, labels, colors, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Annotates an image with segmentation masks, labels, and optional alpha blending.</span></span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function draws segmentation masks on the provided image using the given mask arrays, </span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors, labels, and alpha values for transparency.</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image (PIL.Image): The input image on which annotations will be drawn.</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    masks (numpy.ndarray): A 3D numpy array of shape (n_masks, height, width) representing segmentation masks.</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels (list of str): A list of labels corresponding to each segmentation mask.</span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors (list of tuples): A list of RGB tuples for each segmentation mask and its corresponding label.</span></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    alpha (float, optional): The alpha value for mask transparency. Defaults to 0.3.</span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    threshold (float, optional): The threshold value to convert mask to binary. Defaults to 0.5.</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    annotated_image (PIL.Image): The image annotated with segmentation masks and labels.</span></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-19">    </span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the image</span></span>
<span id="cb15-21">    annotated_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.copy()</span>
<span id="cb15-22">    annotated_image.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGBA'</span>)</span>
<span id="cb15-23"></span>
<span id="cb15-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an ImageDraw object for drawing on the image</span></span>
<span id="cb15-25">    draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_image)</span>
<span id="cb15-26"></span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through the bounding boxes and labels in the 'annotation' DataFrame</span></span>
<span id="cb15-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)):</span>
<span id="cb15-29">        </span>
<span id="cb15-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the segmentation mask</span></span>
<span id="cb15-31">        mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> masks[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, :]</span>
<span id="cb15-32">        mask_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>colors[i], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>]</span>
<span id="cb15-33"></span>
<span id="cb15-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty 3D array with shape (height, width, 3)</span></span>
<span id="cb15-35">        rgb_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((mask.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], mask.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.uint8)</span>
<span id="cb15-36">        </span>
<span id="cb15-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use broadcasting to populate it with the mask color where the mask is 1</span></span>
<span id="cb15-38">        rgb_mask[mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_color</span>
<span id="cb15-39">        </span>
<span id="cb15-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the numpy array to a PIL Image</span></span>
<span id="cb15-41">        mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(rgb_mask)</span>
<span id="cb15-42">        </span>
<span id="cb15-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw segmentation mask on sample image</span></span>
<span id="cb15-44">        annotated_image.paste(mask_img, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask_img)</span>
<span id="cb15-45">        </span>
<span id="cb15-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> annotated_image</span></code></pre></div>
</section>
<section id="define-a-function-to-annotate-an-image-with-bounding-boxes" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-annotate-an-image-with-bounding-boxes">Define a function to annotate an image with bounding boxes</h4>
<p>Now, we only need to annotate images with bounding boxes and labels. PIL includes functionality to draw boxes and write text on images. The following function also scales the font size based on the image resolution to keep the relative size consistent across images.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_bboxes_pil(image, boxes, labels, colors, font, width:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font_size:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Annotates an image with bounding boxes, labels, and optional probability scores.</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function draws bounding boxes on the provided image using the given box coordinates, </span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors, and labels. If probabilities are provided, they will be added to the labels.</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image (PIL.Image): The input image on which annotations will be drawn.</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    boxes (list of tuples): A list of bounding box coordinates where each tuple is (x, y, w, h).</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels (list of str): A list of labels corresponding to each bounding box.</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors (list of str): A list of colors for each bounding box and its corresponding label.</span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    font (str): Path to the font file to be used for displaying the labels.</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    width (int, optional): Width of the bounding box lines. Defaults to 2.</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    font_size (int, optional): Size of the font for the labels. Defaults to 25.</span></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    probs (list of float, optional): A list of probability scores corresponding to each label. Defaults to None.</span></span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb16-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    annotated_image (PIL.Image): The image annotated with bounding boxes, labels, and optional probability scores.</span></span>
<span id="cb16-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-21">    </span>
<span id="cb16-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a reference diagonal</span></span>
<span id="cb16-23">    REFERENCE_DIAGONAL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb16-24">    </span>
<span id="cb16-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the font size using the hypotenuse of the image</span></span>
<span id="cb16-26">    font_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(font_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.hypot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>image.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> REFERENCE_DIAGONAL))</span>
<span id="cb16-27">    </span>
<span id="cb16-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add probability scores to labels</span></span>
<span id="cb16-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> probs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb16-30">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(labels, probs)]</span>
<span id="cb16-31">    </span>
<span id="cb16-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the image</span></span>
<span id="cb16-33">    annotated_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.copy()</span>
<span id="cb16-34"></span>
<span id="cb16-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an ImageDraw object for drawing on the image</span></span>
<span id="cb16-36">    draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_image)</span>
<span id="cb16-37"></span>
<span id="cb16-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through the bounding boxes and labels in the 'annotation' DataFrame</span></span>
<span id="cb16-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)):</span>
<span id="cb16-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the bounding box coordinates</span></span>
<span id="cb16-41">        x, y, x2, y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes[i]</span>
<span id="cb16-42"></span>
<span id="cb16-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tuple of coordinates for the bounding box</span></span>
<span id="cb16-44">        shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x, y, x2, y2)</span>
<span id="cb16-45"></span>
<span id="cb16-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the bounding box on the image</span></span>
<span id="cb16-47">        draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb16-48">        </span>
<span id="cb16-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the font file</span></span>
<span id="cb16-50">        fnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageFont.truetype(font, font_size)</span>
<span id="cb16-51">        </span>
<span id="cb16-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the label box on the image</span></span>
<span id="cb16-53">        label_w, label_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw.textbbox(xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels[i], font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fnt)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb16-54">        draw.rectangle((x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>label_h, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>label_w, y), outline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb16-55"></span>
<span id="cb16-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the label on the image</span></span>
<span id="cb16-57">        draw.multiline_text((x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>label_h), labels[i], font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.mean(colors[i]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">127.5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb16-58">        </span>
<span id="cb16-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> annotated_image</span></code></pre></div>
<p>With our utility functions taken care of, we can select an image to test our ONNX model.</p>
</section>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>We can download an image from the dataset repository to verify the exported model performs as expected.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10147.jpg"</span></span>
<span id="cb17-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://raw.githubusercontent.com/cj-mills/pytorch-for-information-extraction/master/code/datasets/detection/student-id/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb17-3"></span>
<span id="cb17-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-5"></span>
<span id="cb17-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb17-7">display(test_img)</span>
<span id="cb17-8"></span>
<span id="cb17-9">pd.Series({</span>
<span id="cb17-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb17-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/onnx-export/images/output_33_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_59825">
<thead>
</thead>
<tbody>
<tr>
<th id="T_59825_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_59825_row0_col0" class="data row0 col0">
(640, 480)
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set test image size</span></span>
<span id="cb18-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Resize the test image</span></span>
<span id="cb18-5">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb18-8">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(input_img.size)</span>
<span id="cb18-9"></span>
<span id="cb18-10">display(input_img)</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb18-13">pd.Series({</span>
<span id="cb18-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image Size:"</span>: test_img.size,</span>
<span id="cb18-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_img.size,</span>
<span id="cb18-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb18-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb18-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/onnx-export/images/output_35_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_7303c">
<thead>
</thead>
<tbody>
<tr>
<th id="T_7303c_level0_row0" class="row_heading level0 row0">
Source Image Size:
</th>
<td id="T_7303c_row0_col0" class="data row0 col0">
(640, 480)
</td>
</tr>
<tr>
<th id="T_7303c_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_7303c_row1_col0" class="data row1 col0">
(682, 512)
</td>
</tr>
<tr>
<th id="T_7303c_level0_row2" class="row_heading level0 row2">
Min Image Scale:
</th>
<td id="T_7303c_row2_col0" class="data row2 col0">
0.937500
</td>
</tr>
<tr>
<th id="T_7303c_level0_row3" class="row_heading level0 row3">
Input Image Size:
</th>
<td id="T_7303c_row3_col0" class="data row3 col0">
(682, 512)
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-the-input-tensor-1" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor-1">Prepare the Input Tensor</h3>
<p>When we convert the PIL input image to a NumPy array, we need to reorder the array values to channels-first format, scale the values from <code>[0,255]</code> to <code>[0,1]</code>, and add a batch dimension.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the input image to NumPy format</span></span>
<span id="cb19-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<p>Now we can finally perform inference with our ONNX model.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb20-2">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the confidence threshold</span></span>
<span id="cb20-5">threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the output based on the confidence threshold</span></span>
<span id="cb20-8">scores_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb20-9"></span>
<span id="cb20-10">bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][scores_mask])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span>
<span id="cb20-11">label_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(idx)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][scores_mask]]</span>
<span id="cb20-12">probs_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb20-13"></span>
<span id="cb20-14">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[class_names.index(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_list]</span>
<span id="cb20-15"></span>
<span id="cb20-16">annotated_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_masks_pil(input_img, model_output[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label_list, colors, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb20-17">annotated_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotated_img.resize(test_img.size)</span>
<span id="cb20-18"></span>
<span id="cb20-19">annotated_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes_pil(</span>
<span id="cb20-20">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_img, </span>
<span id="cb20-21">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bbox_list, </span>
<span id="cb20-22">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label_list,</span>
<span id="cb20-23">    probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probs_list,</span>
<span id="cb20-24">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, </span>
<span id="cb20-25">    font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file,</span>
<span id="cb20-26">)</span>
<span id="cb20-27"></span>
<span id="cb20-28">display(annotated_img)</span>
<span id="cb20-29"></span>
<span id="cb20-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas Series for easy formatting</span></span>
<span id="cb20-31">pd.Series({</span>
<span id="cb20-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(label_list, bbox_list.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))],</span>
<span id="cb20-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Scores:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(label_list, probs_list)]</span>
<span id="cb20-34">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/onnx-export/images/output_39_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_c5d40">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c5d40_level0_row0" class="row_heading level0 row0">
Predicted BBoxes:
</th>
<td id="T_c5d40_row0_col0" class="data row0 col0">
[‘student_id:[103.951 11.201 435.75 375.222]’, ‘student_id:[292.186 14.961 635.188 241.416]’, ‘student_id:[134.958 242.402 466.062 465.765]’]
</td>
</tr>
<tr>
<th id="T_c5d40_level0_row1" class="row_heading level0 row1">
Confidence Scores:
</th>
<td id="T_c5d40_row1_col0" class="data row1 col0">
[‘student_id: 99.98%’, ‘student_id: 99.97%’, ‘student_id: 99.96%’]
</td>
</tr>
</tbody>

</table>
</div>
<p>The model predictions should be virtually identical to the PyTorch model, but the probability scores can sometimes vary slightly.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the ONNX model from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial! We previously trained a Mask R-CNN model in PyTorch, and now we’ve exported that model to ONNX. With this, we can streamline our deployment process and leverage platform-specific hardware optimizations through ONNX Runtime.</p>
<p>As you move forward, consider exploring more about ONNX and its ecosystem. Check out the available <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> that provide flexible interfaces to different hardware acceleration libraries.</p>
<p>If you found this guide helpful, consider sharing it with others.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>onnx</category>
  <category>mask-rcnn</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/onnx-export/index.html</guid>
  <pubDate>Thu, 21 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Training Mask R-CNN Models with PyTorch</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading and Exploring the Dataset</li>
<li>Loading the Mask R-CNN Model</li>
<li>Preparing the Data</li>
<li>Fine-tuning the Model</li>
<li>Making Predictions with the Model</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="./"><strong>Training Mask R-CNN Models with PyTorch</strong></a>: Learn how to train a Mask R-CNN model on a custom dataset with PyTorch.</li>
<li><a href="./onnx-export/"><strong>Exporting Mask R-CNN Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export Mask R-CNN models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to training <a href="https://arxiv.org/abs/1703.06870">Mask R-CNN</a> models in PyTorch! Mask R-CNN models can identify and locate multiple objects within images and generate segmentation masks for each detected object.</p>
<p>For this tutorial, we will fine-tune a Mask R-CNN model from the <a href="https://pytorch.org/vision/stable/index.html"><code>torchvision</code></a> library on a small sample dataset of annotated student ID card images.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/student-id-sample-annotation.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This tutorial is suitable for anyone with rudimentary PyTorch experience. If you are new to PyTorch and want to start with a beginner-focused project, check out my tutorial on fine-tuning image classifiers.</p>
<ul>
<li><a href="../pytorch-train-image-classifier-timm-hf-tutorial/">Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</a></li>
</ul>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<ul>
<li><p><a href="../google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Platform</th>
<th>Jupyter Notebook</th>
<th>Utility File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Google Colab</td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-mask-rcnn-tutorial-code/blob/main/notebooks/pytorch-mask-r-cnn-training-colab.ipynb">Open In Colab</a></td>
<td></td>
</tr>
<tr class="even">
<td>Linux</td>
<td><a href="https://github.com/cj-mills/pytorch-mask-rcnn-tutorial-code/blob/main/notebooks/pytorch-mask-r-cnn-training.ipynb">GitHub Repository</a></td>
<td></td>
</tr>
<tr class="odd">
<td>Windows</td>
<td><a href="https://github.com/cj-mills/pytorch-mask-rcnn-tutorial-code/blob/main/notebooks/pytorch-mask-r-cnn-training-windows.ipynb">GitHub Repository</a></td>
<td><a href="https://github.com/cj-mills/pytorch-mask-rcnn-tutorial-code/blob/main/notebooks/windows_utils.py">windows_utils.py</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies. The dedicated Colab Notebook includes the code to install the required dependencies in Google Colab.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install PyTorch. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu118</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>torchtnt</code></td>
<td>A library for PyTorch training tools and utilities. (<a href="https://pytorch.org/tnt/stable/">link</a>)</td>
</tr>
<tr class="even">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tabulate</code></td>
<td>Pretty-print tabular data in Python. (<a href="https://pypi.org/project/tabulate/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow torchtnt tqdm tabulate</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We’ll also install some utility packages I made to help us handle images, interact with PyTorch, and work with Pandas DataFrames. These utility packages provide shortcuts for routine tasks and keep our code clean and readable.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pandas_utils</code></td>
<td>Some utility functions for working with Pandas. (<a href="https://cj-mills.github.io/cjm-pandas-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pandas_utils cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment set up, let’s dive into the code. First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Dict, Optional</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract, get_source_code</span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files, stack_imgs</span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pil_to_tensor, tensor_to_pil, get_torch_device, set_seed, denorm_img_tensor, move_data_to_device</span>
<span id="cb9-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas, convert_to_numeric, convert_to_string</span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set options for Pandas DataFrame display</span></span>
<span id="cb9-33">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells in the DataFrame</span></span>
<span id="cb9-34">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all rows in the DataFrame</span></span>
<span id="cb9-35">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all columns in the DataFrame</span></span>
<span id="cb9-36"></span>
<span id="cb9-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb9-43"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb9-44"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb9-46"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-47"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb9-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-49">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-50"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.datapoints <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBox, Mask</span>
<span id="cb9-51"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes, draw_segmentation_masks</span>
<span id="cb9-52"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-53"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms.v2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb9-54"></span>
<span id="cb9-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Mask R-CNN</span></span>
<span id="cb9-56"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> maskrcnn_resnet50_fpn_v2, MaskRCNN</span>
<span id="cb9-57"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaskRCNN_ResNet50_FPN_V2_Weights</span>
<span id="cb9-58"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.faster_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastRCNNPredictor</span>
<span id="cb9-59"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.mask_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaskRCNNPredictor</span>
<span id="cb9-60"></span>
<span id="cb9-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-62"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project, such as initializing random number generators, setting the PyTorch device to run the model, and preparing the folders for our project and datasets.</p>
<section id="setting-a-random-number-seed" class="level3">
<h3 class="anchored" data-anchor-id="setting-a-random-number-seed">Setting a Random Number Seed</h3>
<p>First, we set the seed for generating random numbers using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#set_seed">set_seed</a> function from the <code>cjm_pytorch_utils</code> package.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed for generating random numbers in PyTorch, NumPy, and Python's random module.</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb10-3">set_seed(seed)</span></code></pre></div>
</section>
<section id="setting-the-device-and-data-type" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-device-and-data-type">Setting the Device and Data Type</h3>
<p>Next, we determine the device to use for training using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#get_torch_device">get_torch_device</a> function from the <code>cjm_pytorch_utils</code> package and set the data type of our tensors.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb11-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb11-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
</section>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We can then set up a directory for our project to store our results and other related files. The following code creates the folder in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<p>We also need a place to store our dataset. Readers following the tutorial on their local machine should select a location with read-and-write access to store datasets. For a cloud service like Google Colab, you can set it to the current directory.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb13-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-mask-r-cnn-instance-segmentation"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb13-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb13-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb13-11">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb13-13">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-14"></span>
<span id="cb13-15">pd.Series({</span>
<span id="cb13-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir, </span>
<span id="cb13-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir</span>
<span id="cb13-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_68713">
<thead>
</thead>
<tbody>
<tr>
<th id="T_68713_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_68713_row0_col0" class="data row0 col0">
pytorch-mask-r-cnn-instance-segmentation
</td>
</tr>
<tr>
<th id="T_68713_level0_row1" class="row_heading level0 row1">
Dataset Directory:
</th>
<td id="T_68713_row1_col0" class="data row1 col0">
Datasets
</td>
</tr>
</tbody>

</table>
</div>
<p>Double-check the project and dataset directories exist in the specified paths and that you can add files to them before continuing. At this point, our project is set up and ready to go. In the next section, we will download and explore the dataset.</p>
</section>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>Now that we set up the project, we can start working with our dataset. The dataset is originally from the following GitHub repository:</p>
<ul>
<li><a href="https://github.com/MbassiJaphet/pytorch-for-information-extraction">pytorch-for-information-extraction</a></li>
</ul>
<p>I made a fork of the original repository with only the files needed for this tutorial, which takes up approximately 77 MB.</p>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>We first need to construct the name for the GitHub repository and define the path to the subfolder with the dataset.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb14-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pytorch-for-information-extraction'</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the GitHub repository name </span></span>
<span id="cb14-5">gh_repo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb14-8">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/code/datasets/detection/student-id/'</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10">pd.Series({</span>
<span id="cb14-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GitHub Repository:"</span>: gh_repo, </span>
<span id="cb14-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb14-13">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_e4eb3">
<thead>
</thead>
<tbody>
<tr>
<th id="T_e4eb3_level0_row0" class="row_heading level0 row0">
GitHub Repository:
</th>
<td id="T_e4eb3_row0_col0" class="data row0 col0">
cj-mills/pytorch-for-information-extraction
</td>
</tr>
<tr>
<th id="T_e4eb3_level0_row1" class="row_heading level0 row1">
Dataset Path:
</th>
<td id="T_e4eb3_row1_col0" class="data row1 col0">
Datasets/pytorch-for-information-extraction/code/datasets/detection/student-id
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now clone the repository to the dataset directory we defined earlier.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clone the dataset repository from GitHub</span></span>
<span id="cb15-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git clone {<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'https://github.com/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gh_repo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.git'</span>} {dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dataset_name}</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb16-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb16-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb16-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb16-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
10134.jpg
</td>
<td>
10134.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
10135.jpg
</td>
<td>
10135.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
10136.jpg
</td>
<td>
10136.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
10137.jpg
</td>
<td>
10137.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
10138.jpg
</td>
<td>
10138.json
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. Let’s make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb17-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb17-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb17-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 150</code></pre>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
10134
</th>
<td>
Datasets/pytorch-for-information-extraction/code/datasets/detection/student-id/10134.jpg
</td>
</tr>
<tr>
<th>
10135
</th>
<td>
Datasets/pytorch-for-information-extraction/code/datasets/detection/student-id/10135.jpg
</td>
</tr>
<tr>
<th>
10136
</th>
<td>
Datasets/pytorch-for-information-extraction/code/datasets/detection/student-id/10136.jpg
</td>
</tr>
<tr>
<th>
10137
</th>
<td>
Datasets/pytorch-for-information-extraction/code/datasets/detection/student-id/10137.jpg
</td>
</tr>
<tr>
<th>
10138
</th>
<td>
Datasets/pytorch-for-information-extraction/code/datasets/detection/student-id/10138.jpg
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the contents of the JSON annotation files into a Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb19-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb19-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb19-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb19-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb19-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
lineColor
</th>
<th>
fillColor
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
10134
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[83.7142857142857, 133.57142857142856], [86.57142857142856, 123.57142857142856], [95.14285714285714, 117.14285714285714], [595.1428571428571, 125.71428571428571], [604.4285714285713, 127.85714285714285], [607.2857142857142, 138.57142857142856], [619.4285714285713, 443.57142857142856], [612.2857142857142, 449.2857142857142], [97.99999999999997, 469.2857142857142], [85.14285714285714, 465.71428571428567], [78.0, 457.1428571428571]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10134.jpg
</td>
<td>
</td>
<td>
480
</td>
<td>
640
</td>
</tr>
<tr>
<th>
10135
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[125.85714285714283, 288.57142857142856], [391.57142857142856, 24.285714285714285], [459.4285714285714, 7.857142857142857], [612.2857142857142, 166.42857142857142], [612.2857142857142, 174.28571428571428], [334.4285714285714, 477.85714285714283], [321.57142857142856, 478.5714285714285], [127.99999999999997, 297.1428571428571]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10135.jpg
</td>
<td>
</td>
<td>
480
</td>
<td>
640
</td>
</tr>
<tr>
<th>
10136
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[62.28571428571428, 44.285714285714285], [70.85714285714285, 39.99999999999999], [571.5714285714286, 81.42857142857142], [582.9999999999999, 90.71428571428571], [634.4285714285713, 374.99999999999994], [634.4285714285713, 389.2857142857142], [622.9999999999999, 394.2857142857142], [46.571428571428555, 427.1428571428571], [35.85714285714285, 424.99999999999994], [30.857142857142847, 414.99999999999994]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10136.jpg
</td>
<td>
</td>
<td>
480
</td>
<td>
640
</td>
</tr>
<tr>
<th>
10137
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[81.57142857142856, 137.85714285714283], [84.42857142857142, 129.28571428571428], [273.71428571428567, 29.999999999999996], [284.4285714285714, 29.999999999999996], [549.4285714285713, 277.85714285714283], [550.8571428571428, 288.57142857142856], [362.2857142857142, 472.85714285714283], [354.4285714285714, 472.85714285714283], [345.1428571428571, 467.1428571428571]], ‘shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[324.4285714285714, 69.28571428571428], [340.1428571428571, 0.7142857142857141], [525.8571428571428, 27.857142857142854], [529.4285714285713, 177.14285714285714], [395.1428571428571, 135.0]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10137.jpg
</td>
<td>
</td>
<td>
480
</td>
<td>
640
</td>
</tr>
<tr>
<th>
10138
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[202.28571428571425, 12.142857142857142], [208.71428571428567, 2.857142857142856], [434.4285714285714, 70.0], [411.57142857142856, 392.1428571428571], [407.2857142857142, 445.71428571428567], [402.99999999999994, 453.57142857142856], [392.2857142857142, 454.99999999999994], [165.85714285714283, 470.71428571428567], [155.85714285714283, 467.85714285714283], [152.28571428571428, 459.2857142857142]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10138.jpg
</td>
<td>
</td>
<td>
480
</td>
<td>
640
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>The <code>shapes</code> column contains the point coordinates to draw the segmentation masks. We will also use this information to generate the associated bounding box annotations.</p>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>Now that we have the annotation data, we can extract the unique class names and inspect the class distribution. This small sample dataset only has one object class, but reviewing the class distribution is still good practice for other datasets.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'shapes' column to 'shapes'</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb20-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb21-2">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb21-5">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
student_id
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb22-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb22-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb22-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb22-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb22-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb22-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_names, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb22-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_27_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="add-a-background-class" class="level4">
<h4 class="anchored" data-anchor-id="add-a-background-class">Add a background class</h4>
<p>The Mask R-CNN model provided with the torchvision library expects datasets to have a <code>background</code> class. We can prepend one to the list of class names.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepend a `background` class to the list of class names</span></span>
<span id="cb23-2">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'background'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>class_names</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb23-5">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
background
</td>
</tr>
<tr>
<th>
1
</th>
<td>
student_id
</td>
</tr>
</tbody>

</table>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>Lastly, we will visualize the segmentation masks and bounding boxes for one of the sample images to demonstrate how to interpret the annotations.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to segmentation masks and bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb24-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb24-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb24-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_32_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb25-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb25-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>Let’s make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image’s file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb27-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>]</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb27-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb27-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb27-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (640, 480)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_39_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb29-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
10067
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
3.21.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[90.85714285714283, 22.142857142857142], [414.4285714285714, 17.857142857142854], [427.2857142857142, 19.285714285714285], [430.1428571428571, 24.999999999999996], [437.99999999999994, 222.85714285714283], [432.99999999999994, 227.1428571428571], [270.1428571428571, 231.42857142857142], [101.57142857142856, 234.28571428571428], [92.28571428571428, 232.85714285714283], [88.0, 227.85714285714283], [89.42857142857142, 44.99999999999999], [88.0, 31.428571428571427]], ‘shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[0.14285714285713802, 226.42857142857142], [85.85714285714283, 107.14285714285714], [87.28571428571428, 234.99999999999997], [101.57142857142856, 235.7142857142857], [266.57142857142856, 231.42857142857142], [91, 479], [38, 479], [0, 453]], ‘shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘student_id’, ‘line_color’: None, ‘fill_color’: None, ‘points’: [[287.99999999999994, 257.1428571428571], [293.71428571428567, 246.42857142857142], [314.4285714285714, 246.42857142857142], [615.1428571428571, 247.1428571428571], [621.5714285714286, 253.57142857142856], [626.5714285714286, 456.4285714285714], [617.9999999999999, 461.4285714285714], [311.57142857142856, 471.4285714285714], [297.2857142857143, 472.1428571428571], [290.1428571428571, 469.99999999999994], [285.1428571428571, 464.99999999999994]], ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
lineColor
</th>
<td>
[0, 255, 0, 128]
</td>
</tr>
<tr>
<th>
fillColor
</th>
<td>
[255, 0, 0, 128]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
10067.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
480
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
640
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>The lists of point coordinates in the shapes column are the vertices of a polygon for the individual segmentation masks. We can use these to generate images for each segmentation mask.</p>
</section>
<section id="define-a-function-to-convert-segmentation-polygons-to-images" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-segmentation-polygons-to-images">Define a function to convert segmentation polygons to images</h4>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_polygon_mask(image_size, vertices):</span>
<span id="cb30-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a grayscale image with a white polygonal area on a black background.</span></span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - image_size (tuple): A tuple representing the dimensions (width, height) of the image.</span></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - vertices (list): A list of tuples, each containing the x, y coordinates of a vertex</span></span>
<span id="cb30-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        of the polygon. Vertices should be in clockwise or counter-clockwise order.</span></span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - PIL.Image.Image: A PIL Image object containing the polygonal mask.</span></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-13"></span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new black image with the given dimensions</span></span>
<span id="cb30-15">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, image_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb30-16">    </span>
<span id="cb30-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the polygon on the image. The area inside the polygon will be white (255).</span></span>
<span id="cb30-18">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(vertices, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb30-19"></span>
<span id="cb30-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image with the drawn polygon</span></span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mask_img</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>The torchvision library provides a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_segmentation_masks.html#torchvision.utils.draw_segmentation_masks"><code>draw_segmentation_masks</code></a> function to annotate images with segmentation masks. We can use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes"><code>masks_to_boxes</code></a> function included with torchvision to generate bounding box annotations in the <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format from the segmentation masks. That is the same format the <code>draw_bounding_boxes</code> function expects so we can use the output directly.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb31-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb31-4">shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb31-6">xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb31-8">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb31-10">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb31-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb31-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb31-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb31-17">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>masks, </span>
<span id="cb31-18">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb31-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-20">)</span>
<span id="cb31-21"></span>
<span id="cb31-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb31-23">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-24">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb31-25">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes, </span>
<span id="cb31-26">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb31-27">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-28">)</span>
<span id="cb31-29"></span>
<span id="cb31-30">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_45_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We have explored the dataset and visualized the annotations for a sample image. In the next section, we will load and prepare our model.</p>
</section>
</section>
</section>
<section id="loading-the-mask-r-cnn-model" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-mask-r-cnn-model">Loading the Mask R-CNN Model</h2>
<p>TorchVision provides <a href="https://pytorch.org/vision/stable/models/generated/torchvision.models.detection.maskrcnn_resnet50_fpn_v2.html#torchvision.models.detection.MaskRCNN_ResNet50_FPN_V2_Weights">checkpoints</a> for the Mask R-CNN model trained on the <a href="https://cocodataset.org/">COCO</a> (Common Objects in Context) dataset. We can initialize a model with these pretrained weights using the <a href="https://pytorch.org/vision/stable/models/generated/torchvision.models.detection.maskrcnn_resnet50_fpn_v2.html#torchvision.models.detection.maskrcnn_resnet50_fpn_v2"><code>maskrcnn_resnet50_fpn_v2</code></a> function. We must then replace the bounding box and segmentation mask predictors for the pretrained model with new ones for our dataset.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a Mask R-CNN model with pretrained weights</span></span>
<span id="cb32-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maskrcnn_resnet50_fpn_v2(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT'</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of input features for the classifier</span></span>
<span id="cb32-5">in_features_box <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.box_predictor.cls_score.in_features</span>
<span id="cb32-6">in_features_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.mask_predictor.conv5_mask.in_channels</span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the numbner of output channels for the Mask Predictor</span></span>
<span id="cb32-9">dim_reduced <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.mask_predictor.conv5_mask.out_channels</span>
<span id="cb32-10"></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the box predictor</span></span>
<span id="cb32-12">model.roi_heads.box_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features_box, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb32-13"></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the mask predictor</span></span>
<span id="cb32-15">model.roi_heads.mask_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MaskRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features_mask, dim_reduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dim_reduced, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb32-16"></span>
<span id="cb32-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model's device and data type</span></span>
<span id="cb32-18">model.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-19"></span>
<span id="cb32-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add attributes to store the device and model name for later reference</span></span>
<span id="cb32-21">model.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb32-22">model.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maskrcnn_resnet50_fpn_v2'</span></span></code></pre></div>
<p>The model internally normalizes input using the mean and standard deviation values used during the pretraining process, so we do not need to keep track of them separately.</p>
<section id="summarizing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-the-model">Summarizing the Model</h3>
<p>Before moving on, let’s generate a summary of our model to get an overview of its performance characteristics. We can use this to gauge the computational requirements for deploying the model.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">test_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb33-2"></span>
<span id="cb33-3">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>(), [test_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Filter the summary to only contain Conv2d layers and the model</span></span>
<span id="cb33-6">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[summary_df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-7"></span>
<span id="cb33-8">summary_df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Out size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
MaskRCNN
</td>
<td>
45.9 M
</td>
<td>
45.7 M
</td>
<td>
183 M
</td>
<td>
331 G
</td>
</tr>
</tbody>

</table>
</div>
<p>The above table shows the model has approximately <code>45.7</code> million trainable parameters. It takes up <code>183</code> Megabytes and performs around <code>331</code> billion floating point operations for a single <code>256x256</code> RGB image. This model internally resizes input images and executes the same number of floating point operations for different input resolutions.</p>
<p>That completes the model setup. In the next section, we will prepare our dataset for training.</p>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>The data preparation involves several steps, such as applying data augmentation techniques, setting up the train-validation split for the dataset, resizing and padding the images, defining the training dataset class, and initializing DataLoaders to feed data to the model.</p>
<section id="training-validation-split" class="level3">
<h3 class="anchored" data-anchor-id="training-validation-split">Training-Validation Split</h3>
<p>Let’s begin by defining the training-validation split. We’ll randomly select 80% of the available samples for the training set and use the remaining 20% for the validation set.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of image IDs</span></span>
<span id="cb34-2">img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shuffle the image IDs</span></span>
<span id="cb34-5">random.shuffle(img_keys)</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for training</span></span>
<span id="cb34-8">train_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb34-9">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb34-10"></span>
<span id="cb34-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the index at which to split the subset of image paths into training and validation sets</span></span>
<span id="cb34-12">train_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>train_pct)</span>
<span id="cb34-13">val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(train_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>val_pct))</span>
<span id="cb34-14"></span>
<span id="cb34-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the subset of image paths into training and validation sets</span></span>
<span id="cb34-16">train_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[:train_split]</span>
<span id="cb34-17">val_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[train_split:]</span>
<span id="cb34-18"></span>
<span id="cb34-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb34-20">pd.Series({</span>
<span id="cb34-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_keys),</span>
<span id="cb34-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Validation Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_keys)</span>
<span id="cb34-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_ebe49">
<thead>
</thead>
<tbody>
<tr>
<th id="T_ebe49_level0_row0" class="row_heading level0 row0">
Training Samples:
</th>
<td id="T_ebe49_row0_col0" class="data row0 col0">
120
</td>
</tr>
<tr>
<th id="T_ebe49_level0_row1" class="row_heading level0 row1">
Validation Samples:
</th>
<td id="T_ebe49_row1_col0" class="data row1 col0">
30
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Next, we can define what data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>First, we’ll set the size to use for training. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax"><code>ResizeMax</code></a> transform will resize images so that the longest dimension equals this value while preserving the aspect ratio. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare"><code>PadSquare</code></a> transform will then pad the other side to make all the input squares.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb35-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</section>
<section id="initialize-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-the-transforms">Initialize the transforms</h4>
<p>Now, we can initialize the transform objects. The <code>jitter_factor</code> parameter for the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop"><code>CustomRandomIoUCrop</code></a> transform controls how much the center coordinates for the crop area can deviate from the center of a bounding box. Setting this to a value greater than zero allows the transform to crop into the bounding box area. We’ll keep this value small as cutting into the hand gestures too much will change their meaning.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb36-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb36-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb36-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb36-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb36-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb36-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb36-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span></code></pre></div>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb37-2">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb37-5">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We must use a scalar value for the <code>fill</code> parameter when applying the <code>PadSquare</code> transform to images with segmentation masks.</p>
</div>
</div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>We’ll pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb38-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb38-4">shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb38-6">xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb38-8">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb38-10">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb38-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBox(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, spatial_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb38-13"></span>
<span id="cb38-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb38-15">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb38-16"></span>
<span id="cb38-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare mask and bounding box targets</span></span>
<span id="cb38-18">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: Mask(masks), </span>
<span id="cb38-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: bboxes, </span>
<span id="cb38-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb38-22">}</span>
<span id="cb38-23"></span>
<span id="cb38-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb38-25">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb38-26"></span>
<span id="cb38-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb38-28">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb38-29"></span>
<span id="cb38-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb38-31">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb38-32"></span>
<span id="cb38-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb38-34">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-35">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb38-36">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBox()(resized_padded_img, targets)</span>
<span id="cb38-37"></span>
<span id="cb38-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb38-39">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb38-40">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb38-41">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb38-42">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb38-43">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb38-44">)</span>
<span id="cb38-45"></span>
<span id="cb38-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb38-47">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb38-48">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb38-49">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb38-50">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb38-51">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb38-52">)</span>
<span id="cb38-53"></span>
<span id="cb38-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Display the annotated image</span></span>
<span id="cb38-55">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb38-56"></span>
<span id="cb38-57">pd.Series({</span>
<span id="cb38-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb38-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb38-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb38-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb38-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb38-63">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_60_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_10683">
<thead>
</thead>
<tbody>
<tr>
<th id="T_10683_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_10683_row0_col0" class="data row0 col0">
(640, 480)
</td>
</tr>
<tr>
<th id="T_10683_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_10683_row1_col0" class="data row1 col0">
(286, 387)
</td>
</tr>
<tr>
<th id="T_10683_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_10683_row2_col0" class="data row2 col0">
(378, 511)
</td>
</tr>
<tr>
<th id="T_10683_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_10683_row3_col0" class="data row3 col0">
(511, 511)
</td>
</tr>
<tr>
<th id="T_10683_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_10683_row4_col0" class="data row4 col0">
(512, 512)
</td>
</tr>
</tbody>

</table>
</div>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>Now, we can define a custom dataset class to load images, extract the segmentation masks, generate the bounding box annotations, and apply the image transforms during training.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> StudentIDDataset(Dataset):</span>
<span id="cb39-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class represents a PyTorch Dataset for a collection of images and their annotations.</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The class is designed to load images along with their corresponding segmentation masks, bounding box annotations, and labels.</span></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb39-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb39-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Constructor for the HagridDataset class.</span></span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of unique identifiers for images.</span></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing the image annotations.</span></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image identifiers to image file paths.</span></span>
<span id="cb39-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class labels to indices.</span></span>
<span id="cb39-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb39-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb39-18">        </span>
<span id="cb39-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of image keys</span></span>
<span id="cb39-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame containing annotations</span></span>
<span id="cb39-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping image keys to image paths</span></span>
<span id="cb39-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping class names to class indices</span></span>
<span id="cb39-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image transforms to be applied</span></span>
<span id="cb39-24">        </span>
<span id="cb39-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb39-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the length of the dataset.</span></span>
<span id="cb39-28"></span>
<span id="cb39-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb39-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        int: The number of items in the dataset.</span></span>
<span id="cb39-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb39-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb39-33">        </span>
<span id="cb39-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb39-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fetch an item from the dataset at the specified index.</span></span>
<span id="cb39-37"></span>
<span id="cb39-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb39-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        index (int): Index of the item to fetch from the dataset.</span></span>
<span id="cb39-40"></span>
<span id="cb39-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb39-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and its associated target (annotations).</span></span>
<span id="cb39-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb39-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the key for the image at the specified index</span></span>
<span id="cb39-45">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb39-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotations for this image</span></span>
<span id="cb39-47">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb39-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image and its target (segmentation masks, bounding boxes and labels)</span></span>
<span id="cb39-49">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb39-50">        </span>
<span id="cb39-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the transformations, if any</span></span>
<span id="cb39-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb39-53">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb39-54">        </span>
<span id="cb39-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb39-56"></span>
<span id="cb39-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb39-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Load an image and its target (bounding boxes and labels).</span></span>
<span id="cb39-60"></span>
<span id="cb39-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb39-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation (pandas.Series): The annotations for an image.</span></span>
<span id="cb39-63"></span>
<span id="cb39-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb39-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and a dictionary with 'boxes' and 'labels' keys.</span></span>
<span id="cb39-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb39-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the file path of the image</span></span>
<span id="cb39-68">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb39-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image file and convert it to RGB</span></span>
<span id="cb39-70">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb39-71">        </span>
<span id="cb39-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the class labels to indices</span></span>
<span id="cb39-73">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb39-74">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb39-75">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64)</span>
<span id="cb39-76"></span>
<span id="cb39-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert polygons to mask images</span></span>
<span id="cb39-78">        shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb39-79">        xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb39-80">        mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(image.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb39-81">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs]))</span>
<span id="cb39-82"></span>
<span id="cb39-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb39-84">        bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBox(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, spatial_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb39-85">                </span>
<span id="cb39-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: masks,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>We’ll add additional data augmentations with the IoU crop transform to help the model generalize.</p>
<table class="table">
<thead>
<tr class="header">
<th>Transform</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ColorJitter</code></td>
<td>Randomly change the brightness, contrast, saturation and hue of an image or video. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.ColorJitter.html#torchvision.transforms.v2.ColorJitter">link</a>)</td>
</tr>
<tr class="even">
<td><code>RandomGrayscale</code></td>
<td>Randomly convert image or videos to grayscale with a probability of p (default 0.1). (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomGrayscale.html#torchvision.transforms.v2.RandomGrayscale">link</a>)</td>
</tr>
<tr class="odd">
<td><code>RandomEqualize</code></td>
<td>Equalize the histogram of the given image or video with a given probability. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomEqualize.html#torchvision.transforms.v2.RandomEqualize">link</a>)</td>
</tr>
<tr class="even">
<td><code>RandomPosterize</code></td>
<td>Randomly posterize an image by reducing the number of bits for each color channel. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomPosterize.html#torchvision.transforms.v2.RandomPosterize">link</a>)</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb40-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb40-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb40-4">        iou_crop,</span>
<span id="cb40-5">        transforms.ColorJitter(</span>
<span id="cb40-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb40-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb40-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb40-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb40-10">        ),</span>
<span id="cb40-11">        transforms.RandomGrayscale(),</span>
<span id="cb40-12">        transforms.RandomEqualize(),</span>
<span id="cb40-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb40-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb40-15">    ],</span>
<span id="cb40-16">)</span>
<span id="cb40-17"></span>
<span id="cb40-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb40-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb40-20">    resize_max, </span>
<span id="cb40-21">    pad_square,</span>
<span id="cb40-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb40-23">])</span>
<span id="cb40-24"></span>
<span id="cb40-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb40-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb40-27">    transforms.ToImageTensor(), </span>
<span id="cb40-28">    transforms.ConvertImageDtype(),</span>
<span id="cb40-29">    transforms.SanitizeBoundingBox(),</span>
<span id="cb40-30">])</span>
<span id="cb40-31"></span>
<span id="cb40-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb40-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb40-34">    data_aug_tfms, </span>
<span id="cb40-35">    resize_pad_tfm, </span>
<span id="cb40-36">    final_tfms</span>
<span id="cb40-37">])</span>
<span id="cb40-38">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([resize_pad_tfm, final_tfms])</span></code></pre></div>
<p>We do not need to include a <code>Normalize</code> transform as the model internally normalizes input.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBox.html#torchvision.transforms.v2.SanitizeBoundingBox"><code>SanitizeBoundingBox</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-datasets" class="level3">
<h3 class="anchored" data-anchor-id="initialize-datasets">Initialize Datasets</h3>
<p>Now, we can create our training and validation dataset objects using the dataset splits and transforms.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb41-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the datasets using the defined transformations</span></span>
<span id="cb41-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StudentIDDataset(train_keys, annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb41-6">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StudentIDDataset(val_keys, annotation_df, img_dict, class_to_idx, valid_tfms)</span>
<span id="cb41-7"></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb41-9">pd.Series({</span>
<span id="cb41-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb41-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Validation dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)}</span>
<span id="cb41-12">).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_71879">
<thead>
</thead>
<tbody>
<tr>
<th id="T_71879_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_71879_row0_col0" class="data row0 col0">
120
</td>
</tr>
<tr>
<th id="T_71879_level0_row1" class="row_heading level0 row1">
Validation dataset size:
</th>
<td id="T_71879_row1_col0" class="data row1 col0">
30
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>Let’s verify the dataset objects work correctly by inspecting the first samples from the training and validation sets.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb42-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb42-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks( </span>
<span id="cb42-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb42-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb42-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb42-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb42-12">)</span>
<span id="cb42-13"></span>
<span id="cb42-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb42-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb42-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb42-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb42-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb42-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb42-20">)</span>
<span id="cb42-21"></span>
<span id="cb42-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_69_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-validation-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-validation-set-sample">Inspect validation set sample</h4>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb43-2"></span>
<span id="cb43-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb43-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb43-5"></span>
<span id="cb43-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb43-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb43-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8),</span>
<span id="cb43-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb43-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb43-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb43-12">)</span>
<span id="cb43-13"></span>
<span id="cb43-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb43-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb43-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb43-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb43-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb43-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb43-20">)</span>
<span id="cb43-21"></span>
<span id="cb43-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_71_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="initialize-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataloaders">Initialize DataLoaders</h3>
<p>The last step before training is to instantiate the DataLoaders for the training and validation sets. Try decreasing the batch size if you encounter memory limitations.</p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the training batch size</span></span>
<span id="cb44-2">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data.</span></span>
<span id="cb44-5">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb44-6"></span>
<span id="cb44-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for DataLoader</span></span>
<span id="cb44-8">data_loader_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb44-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>: bs,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size for data loading</span></span>
<span id="cb44-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_workers'</span>: num_workers,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of subprocesses to use for data loading</span></span>
<span id="cb44-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'collate_fn'</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> batch: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch)),</span>
<span id="cb44-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb44-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory_device'</span>: device</span>
<span id="cb44-14">}</span>
<span id="cb44-15"></span>
<span id="cb44-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for training data. Data is shuffled for every epoch.</span></span>
<span id="cb44-17">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb44-18"></span>
<span id="cb44-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for validation data. Shuffling is not necessary for validation data.</span></span>
<span id="cb44-20">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params)</span>
<span id="cb44-21"></span>
<span id="cb44-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation DataLoaders</span></span>
<span id="cb44-23">pd.Series({</span>
<span id="cb44-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of batches in train DataLoader:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader),</span>
<span id="cb44-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of batches in validation DataLoader:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataloader)}</span>
<span id="cb44-26">).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_15fe8">
<thead>
</thead>
<tbody>
<tr>
<th id="T_15fe8_level0_row0" class="row_heading level0 row0">
Number of batches in train DataLoader:
</th>
<td id="T_15fe8_row0_col0" class="data row0 col0">
30
</td>
</tr>
<tr>
<th id="T_15fe8_level0_row1" class="row_heading level0 row1">
Number of batches in validation DataLoader:
</th>
<td id="T_15fe8_row1_col0" class="data row1 col0">
8
</td>
</tr>
</tbody>

</table>
</div>
<p>That completes the data preparation. Now, we can finally train our Mask R-CNN model.</p>
</section>
</section>
<section id="fine-tuning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the Model</h2>
<p>In this section, we will implement the training code and fine-tune our model.</p>
<section id="define-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="define-the-training-loop">Define the Training Loop</h3>
<p>The following function performs a single pass through the training or validation set.</p>
<p>The model has different behavior when in <code>training</code> mode versus <code>evaluation</code> mode. In training mode, it calculates the loss internally for the object detection and segmentation tasks and returns a dictionary with the individual loss values. We can sum up these separate values to get the total loss.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_epoch(model, dataloader, optimizer, lr_scheduler, device, scaler, is_training):</span>
<span id="cb45-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function to run a single training or evaluation epoch.</span></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb45-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train or evaluate.</span></span>
<span id="cb45-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A PyTorch DataLoader providing the data.</span></span>
<span id="cb45-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb45-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_func: The loss function used for training.</span></span>
<span id="cb45-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb45-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        scaler: Gradient scaler for mixed-precision training.</span></span>
<span id="cb45-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is_training: Boolean flag indicating whether the model is in training or evaluation mode.</span></span>
<span id="cb45-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb45-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb45-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The average loss for the epoch.</span></span>
<span id="cb45-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb45-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb45-18">    model.train()</span>
<span id="cb45-19">    </span>
<span id="cb45-20">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the total loss for this epoch</span></span>
<span id="cb45-21">    progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eval"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a progress bar</span></span>
<span id="cb45-22">    </span>
<span id="cb45-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over the data</span></span>
<span id="cb45-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch_id, (inputs, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb45-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move inputs and targets to the specified device</span></span>
<span id="cb45-26">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(inputs).to(device)</span>
<span id="cb45-27">        </span>
<span id="cb45-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass with Automatic Mixed Precision (AMP) context manager</span></span>
<span id="cb45-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(torch.device(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb45-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb45-31">                losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs.to(device), move_data_to_device(targets, device))</span>
<span id="cb45-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb45-33">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb45-34">                    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs.to(device), move_data_to_device(targets, device))</span>
<span id="cb45-35">        </span>
<span id="cb45-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the loss</span></span>
<span id="cb45-37">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([loss <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> losses.values()])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum up the losses</span></span>
<span id="cb45-38"></span>
<span id="cb45-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If in training mode, backpropagate the error and update the weights</span></span>
<span id="cb45-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb45-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> scaler:</span>
<span id="cb45-42">                scaler.scale(loss).backward()</span>
<span id="cb45-43">                scaler.step(optimizer)</span>
<span id="cb45-44">                old_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb45-45">                scaler.update()</span>
<span id="cb45-46">                new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb45-47">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> old_scaler:</span>
<span id="cb45-48">                    lr_scheduler.step()</span>
<span id="cb45-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb45-50">                loss.backward()</span>
<span id="cb45-51">                optimizer.step()</span>
<span id="cb45-52">                lr_scheduler.step()</span>
<span id="cb45-53">                </span>
<span id="cb45-54">            optimizer.zero_grad()</span>
<span id="cb45-55"></span>
<span id="cb45-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the total loss</span></span>
<span id="cb45-57">        loss_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item()</span>
<span id="cb45-58">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_item</span>
<span id="cb45-59">        </span>
<span id="cb45-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the progress bar</span></span>
<span id="cb45-61">        progress_bar_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_item, avg_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(batch_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb45-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb45-63">            progress_bar_dict.update(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb45-64">        progress_bar.set_postfix(progress_bar_dict)</span>
<span id="cb45-65">        progress_bar.update()</span>
<span id="cb45-66"></span>
<span id="cb45-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the loss is NaN or infinite, stop the training/evaluation process</span></span>
<span id="cb45-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> math.isnan(loss_item) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss_item):</span>
<span id="cb45-69">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'evaluation'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb45-70">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb45-71"></span>
<span id="cb45-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cleanup and close the progress bar </span></span>
<span id="cb45-73">    progress_bar.close()</span>
<span id="cb45-74">    </span>
<span id="cb45-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the average loss for this epoch</span></span>
<span id="cb45-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (batch_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Next, we define the <code>train_loop</code> function, which executes the main training loop. It iterates over each epoch, runs through the training and validation sets, and saves the best model based on the validation loss.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(model, </span>
<span id="cb46-2">               train_dataloader, </span>
<span id="cb46-3">               valid_dataloader, </span>
<span id="cb46-4">               optimizer,  </span>
<span id="cb46-5">               lr_scheduler, </span>
<span id="cb46-6">               device, </span>
<span id="cb46-7">               epochs, </span>
<span id="cb46-8">               checkpoint_path, </span>
<span id="cb46-9">               use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb46-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb46-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Main training loop.</span></span>
<span id="cb46-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb46-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb46-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train.</span></span>
<span id="cb46-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataloader: A PyTorch DataLoader providing the training data.</span></span>
<span id="cb46-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        valid_dataloader: A PyTorch DataLoader providing the validation data.</span></span>
<span id="cb46-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb46-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        lr_scheduler: The learning rate scheduler.</span></span>
<span id="cb46-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb46-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epochs: The number of epochs to train for.</span></span>
<span id="cb46-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        checkpoint_path: The path where to save the best model checkpoint.</span></span>
<span id="cb46-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        use_scaler: Whether to scale graidents when using a CUDA device</span></span>
<span id="cb46-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb46-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb46-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        None</span></span>
<span id="cb46-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb46-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a gradient scaler for mixed-precision training if the device is a CUDA GPU</span></span>
<span id="cb46-28">    scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.amp.GradScaler() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> use_scaler <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb46-29">    best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the best validation loss</span></span>
<span id="cb46-30"></span>
<span id="cb46-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over the epochs</span></span>
<span id="cb46-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>):</span>
<span id="cb46-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a training epoch and get the training loss</span></span>
<span id="cb46-34">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, train_dataloader, optimizer, lr_scheduler, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb46-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run an evaluation epoch and get the validation loss</span></span>
<span id="cb46-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb46-37">            valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, valid_dataloader, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb46-38"></span>
<span id="cb46-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the validation loss is lower than the best validation loss seen so far, save the model checkpoint</span></span>
<span id="cb46-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_loss:</span>
<span id="cb46-41">            best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span>
<span id="cb46-42">            torch.save(model.state_dict(), checkpoint_path)</span>
<span id="cb46-43"></span>
<span id="cb46-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save metadata about the training process</span></span>
<span id="cb46-45">            training_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb46-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: epoch,</span>
<span id="cb46-47">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: train_loss,</span>
<span id="cb46-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_loss'</span>: valid_loss, </span>
<span id="cb46-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb46-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_architecture'</span>: model.name</span>
<span id="cb46-51">            }</span>
<span id="cb46-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(Path(checkpoint_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training_metadata.json'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb46-53">                json.dump(training_metadata, f)</span>
<span id="cb46-54"></span>
<span id="cb46-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the training or validation loss is NaN or infinite, stop the training process</span></span>
<span id="cb46-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(math.isnan(loss) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [train_loss, valid_loss]):</span>
<span id="cb46-57">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span>)</span>
<span id="cb46-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb46-59"></span>
<span id="cb46-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is a GPU, empty the cache</span></span>
<span id="cb46-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>:</span>
<span id="cb46-62">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(torch, device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>).empty_cache()</span></code></pre></div>
</section>
<section id="set-the-model-checkpoint-path" class="level3">
<h3 class="anchored" data-anchor-id="set-the-model-checkpoint-path">Set the Model Checkpoint Path</h3>
<p>Before we proceed with training, let’s generate a timestamp for the training session and create a directory to save the checkpoints during training.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate timestamp for the training session (Year-Month-Day_Hour_Minute_Second)</span></span>
<span id="cb47-2">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H-%M-%S"</span>)</span>
<span id="cb47-3"></span>
<span id="cb47-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb47-5">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb47-6"></span>
<span id="cb47-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the checkpoint directory if it does not already exist</span></span>
<span id="cb47-8">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb47-9"></span>
<span id="cb47-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb47-11">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb47-12"></span>
<span id="cb47-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(checkpoint_path)</span></code></pre></div>
<pre class="text"><code>pytorch-mask-r-cnn-instance-segmentation/2023-09-19_15-17-57/maskrcnn_resnet50_fpn_v2.pth</code></pre>
<p>Let’s also save a copy of the colormap for the current dataset in the training folder for future use.</p>
</section>
<section id="save-the-color-map" class="level3">
<h3 class="anchored" data-anchor-id="save-the-color-map">Save the Color Map</h3>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a color map and write it to a JSON file</span></span>
<span id="cb49-2">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>: [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: color} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(class_names, colors)]}</span>
<span id="cb49-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb49-4">    json.dump(color_map, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the name of the file that the color map was written to</span></span>
<span id="cb49-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>)</span></code></pre></div>
<pre class="text"><code>pytorch-mask-r-cnn-instance-segmentation/2023-09-19_15-17-57/student-id-colormap.json</code></pre>
</section>
<section id="configure-the-training-parameters" class="level3">
<h3 class="anchored" data-anchor-id="configure-the-training-parameters">Configure the Training Parameters</h3>
<p>Now, we can configure the parameters for training. We must specify the learning rate and number of training epochs. We will also instantiate the optimizer and learning rate scheduler.</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb51-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-4</span></span>
<span id="cb51-3"></span>
<span id="cb51-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb51-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb51-6"></span>
<span id="cb51-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb51-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb51-9"></span>
<span id="cb51-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb51-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb51-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb51-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span></code></pre></div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>Finally, we can train the model using the <code>train_loop</code> function. Training time will depend on the available hardware.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Training usually takes around 13 minutes on the free GPU tier of Google Colab.</p>
</div>
</div>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">train_loop(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb52-2">           train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader,</span>
<span id="cb52-3">           valid_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_dataloader,</span>
<span id="cb52-4">           optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb52-5">           lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler, </span>
<span id="cb52-6">           device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.device(device), </span>
<span id="cb52-7">           epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, </span>
<span id="cb52-8">           checkpoint_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>checkpoint_path,</span>
<span id="cb52-9">           use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div style="height: 500px; overflow-y: auto;">
<pre class="text"><code>Epochs: 100%|██████████| 40/40 [03:22&lt;00:00, 5.04s/it]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.51it/s, loss=0.472, avg_loss=0.917, lr=2.82e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.23it/s, loss=0.346, avg_loss=0.421]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.10it/s, loss=0.134, avg_loss=0.35, lr=5.23e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.53it/s, loss=0.138, avg_loss=0.209]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.67it/s, loss=0.371, avg_loss=0.207, lr=9.07e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 10.86it/s, loss=0.0978, avg_loss=0.147]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.08it/s, loss=0.125, avg_loss=0.191, lr=0.000141]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 10.68it/s, loss=0.0925, avg_loss=0.182]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.17it/s, loss=0.17, avg_loss=0.227, lr=0.000199]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.88it/s, loss=0.0917, avg_loss=0.205]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.87it/s, loss=0.116, avg_loss=0.193, lr=0.000261]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.42it/s, loss=0.075, avg_loss=0.13]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.81it/s, loss=0.154, avg_loss=0.2, lr=0.000323]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 10.71it/s, loss=0.111, avg_loss=0.144]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.56it/s, loss=0.17, avg_loss=0.206, lr=0.000381]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 14.12it/s, loss=0.136, avg_loss=0.177]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.12it/s, loss=0.668, avg_loss=0.252, lr=0.000431]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.77it/s, loss=0.15, avg_loss=0.357]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.13it/s, loss=0.297, avg_loss=0.3, lr=0.000469]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.99it/s, loss=0.139, avg_loss=0.22]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.16it/s, loss=0.357, avg_loss=0.254, lr=0.000492]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.99it/s, loss=0.135, avg_loss=0.193]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.85it/s, loss=0.471, avg_loss=0.253, lr=0.0005]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.07it/s, loss=0.0909, avg_loss=0.165]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.19it/s, loss=0.454, avg_loss=0.216, lr=0.000498]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.56it/s, loss=0.104, avg_loss=0.172]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.03it/s, loss=0.165, avg_loss=0.225, lr=0.000494]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.85it/s, loss=0.0873, avg_loss=0.14]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.82it/s, loss=0.0918, avg_loss=0.215, lr=0.000486]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.76it/s, loss=0.0951, avg_loss=0.137]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.16it/s, loss=0.1, avg_loss=0.179, lr=0.000475]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.66it/s, loss=0.0898, avg_loss=0.131]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.03it/s, loss=0.205, avg_loss=0.164, lr=0.000461]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.70it/s, loss=0.103, avg_loss=0.131]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.20it/s, loss=0.118, avg_loss=0.201, lr=0.000445]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 10.57it/s, loss=0.0923, avg_loss=0.168]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.15it/s, loss=0.0848, avg_loss=0.197, lr=0.000426]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.11it/s, loss=0.0793, avg_loss=0.135]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.94it/s, loss=0.138, avg_loss=0.169, lr=0.000405]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.12it/s, loss=0.0741, avg_loss=0.134]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.00it/s, loss=0.3, avg_loss=0.195, lr=0.000382]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.81it/s, loss=0.133, avg_loss=0.163]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.09it/s, loss=0.29, avg_loss=0.126, lr=0.000358]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.96it/s, loss=0.0742, avg_loss=0.12]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.97it/s, loss=0.113, avg_loss=0.136, lr=0.000332]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 14.36it/s, loss=0.0749, avg_loss=0.116]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.12it/s, loss=0.0852, avg_loss=0.137, lr=0.000305]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.19it/s, loss=0.0689, avg_loss=0.114]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.16it/s, loss=0.118, avg_loss=0.142, lr=0.000277]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.83it/s, loss=0.0643, avg_loss=0.117]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.01it/s, loss=0.0898, avg_loss=0.134, lr=0.000249]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.22it/s, loss=0.0726, avg_loss=0.105]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.02it/s, loss=0.0792, avg_loss=0.122, lr=0.000221]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.67it/s, loss=0.0679, avg_loss=0.1]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.13it/s, loss=0.0842, avg_loss=0.127, lr=0.000193]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.75it/s, loss=0.0724, avg_loss=0.101]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.11it/s, loss=0.0794, avg_loss=0.126, lr=0.000167]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.94it/s, loss=0.0656, avg_loss=0.0925]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.02it/s, loss=0.0992, avg_loss=0.113, lr=0.000141]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.72it/s, loss=0.0586, avg_loss=0.0914]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.05it/s, loss=0.15, avg_loss=0.117, lr=0.000116]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.15it/s, loss=0.0593, avg_loss=0.089]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.06it/s, loss=0.23, avg_loss=0.107, lr=9.34e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.97it/s, loss=0.0559, avg_loss=0.0899]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.93it/s, loss=0.0678, avg_loss=0.0973, lr=7.26e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.98it/s, loss=0.0631, avg_loss=0.0831]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.11it/s, loss=0.0892, avg_loss=0.0847, lr=5.4e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.03it/s, loss=0.0587, avg_loss=0.0813]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.08it/s, loss=0.0662, avg_loss=0.0854, lr=3.78e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.68it/s, loss=0.06, avg_loss=0.0842]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.96it/s, loss=0.065, avg_loss=0.0936, lr=2.44e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.23it/s, loss=0.0532, avg_loss=0.0795]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 8.70it/s, loss=0.226, avg_loss=0.0877, lr=1.37e-5]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 12.32it/s, loss=0.0544, avg_loss=0.0792]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.10it/s, loss=0.0718, avg_loss=0.0849, lr=6.06e-6]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.96it/s, loss=0.0556, avg_loss=0.0769]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.03it/s, loss=0.0538, avg_loss=0.0903, lr=1.47e-6]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 10.89it/s, loss=0.0526, avg_loss=0.0778]
Train: 100%|██████████| 30/30 [00:04&lt;00:00, 9.13it/s, loss=0.0511, avg_loss=0.0853, lr=3.75e-9]
Eval: 100%|██████████| 8/8 [00:00&lt;00:00, 11.66it/s, loss=0.0526, avg_loss=0.0772]</code>
</pre>
</div>
<hr>
<p>At last, we have our fine-tuned Mask R-CNN model. To wrap up the tutorial, we can test our model by performing inference on individual images.</p>
</section>
</section>
<section id="making-predictions-with-the-model" class="level2">
<h2 class="anchored" data-anchor-id="making-predictions-with-the-model">Making Predictions with the Model</h2>
<p>In this final part of the tutorial, we will cover how to perform inference on individual images with our Mask R-CNN model and filter the predictions.</p>
<section id="preparing-input-data" class="level3">
<h3 class="anchored" data-anchor-id="preparing-input-data">Preparing Input Data</h3>
<p>Let’s use a random image from the validation set. That way, we have some ground truth annotation data to compare against. Unlike during training, we won’t stick to square input dimensions for inference.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random item from the validation set</span></span>
<span id="cb53-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(val_keys)</span>
<span id="cb53-3"></span>
<span id="cb53-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the image file path associated with the file ID</span></span>
<span id="cb53-5">test_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict[file_id]</span>
<span id="cb53-6"></span>
<span id="cb53-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the test file</span></span>
<span id="cb53-8">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_file).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb53-9"></span>
<span id="cb53-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the test image</span></span>
<span id="cb53-11">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb53-12"></span>
<span id="cb53-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb53-14">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(input_img.size)</span>
<span id="cb53-15"></span>
<span id="cb53-16">display(test_img)</span>
<span id="cb53-17"></span>
<span id="cb53-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb53-19">pd.Series({</span>
<span id="cb53-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image Size:"</span>: test_img.size,</span>
<span id="cb53-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_img.size,</span>
<span id="cb53-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb53-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb53-24">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_89_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_73deb">
<thead>
</thead>
<tbody>
<tr>
<th id="T_73deb_level0_row0" class="row_heading level0 row0">
Source Image Size:
</th>
<td id="T_73deb_row0_col0" class="data row0 col0">
(480, 640)
</td>
</tr>
<tr>
<th id="T_73deb_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_73deb_row1_col0" class="data row1 col0">
(512, 682)
</td>
</tr>
<tr>
<th id="T_73deb_level0_row2" class="row_heading level0 row2">
Min Image Scale:
</th>
<td id="T_73deb_row2_col0" class="data row2 col0">
0.937500
</td>
</tr>
<tr>
<th id="T_73deb_level0_row3" class="row_heading level0 row3">
Input Image Size:
</th>
<td id="T_73deb_row3_col0" class="data row3 col0">
(512, 682)
</td>
</tr>
</tbody>

</table>
</div>
<section id="get-the-target-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="get-the-target-annotation-data">Get the target annotation data</h4>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb54-2">target_shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb54-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb54-4">target_xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_shape_points]</span>
<span id="cb54-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb54-6">target_mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(test_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_xy_coords]</span>
<span id="cb54-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb54-8">target_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_mask_imgs]))</span>
<span id="cb54-9"></span>
<span id="cb54-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the target labels and bounding boxes</span></span>
<span id="cb54-11">target_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb54-12">target_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBox(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(target_masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, spatial_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</section>
<section id="pass-the-input-data-to-the-model" class="level4">
<h4 class="anchored" data-anchor-id="pass-the-input-data-to-the-model">Pass the input data to the model</h4>
<p>Now, we can convert the test image to a tensor and pass it to the model. Ensure the model is set to evaluation mode to get predictions instead of loss values.</p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb55-2">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb55-3"></span>
<span id="cb55-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the model and input data are on the same device</span></span>
<span id="cb55-5">model.to(device)</span>
<span id="cb55-6">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToImageTensor(), transforms.ConvertImageDtype()])(input_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].to(device)</span>
<span id="cb55-7"></span>
<span id="cb55-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb55-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb55-10">    model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_tensor)</span></code></pre></div>
</section>
<section id="filter-the-model-output" class="level4">
<h4 class="anchored" data-anchor-id="filter-the-model-output">Filter the model output</h4>
<p>The model performs most post-processing steps internally, so we only need to filter the output based on the desired confidence threshold. The model returns predictions as a list of dictionaries. Each dictionary stores bounding boxes, label indices, confidence scores, and segmentation masks for a single sample in the input batch.</p>
<p>Since we resized the test image, we must scale the bounding boxes and segmentation masks to the source resolution.</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the confidence threshold</span></span>
<span id="cb56-2">threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb56-3"></span>
<span id="cb56-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move model output to the CPU</span></span>
<span id="cb56-5">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> move_data_to_device(model_output, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb56-6"></span>
<span id="cb56-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the output based on the confidence threshold</span></span>
<span id="cb56-8">scores_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb56-9"></span>
<span id="cb56-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the predicted bounding boxes</span></span>
<span id="cb56-11">pred_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBox(model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>][scores_mask]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, spatial_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb56-12"></span>
<span id="cb56-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class names for the predicted label indices</span></span>
<span id="cb56-14">pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>][scores_mask]]</span>
<span id="cb56-15"></span>
<span id="cb56-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the confidence scores</span></span>
<span id="cb56-17">pred_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>]</span>
<span id="cb56-18"></span>
<span id="cb56-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale and stack the predicted segmentation masks</span></span>
<span id="cb56-20">pred_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>][scores_mask], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb56-21">pred_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(torch.where(mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> threshold, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pred_masks])</span></code></pre></div>
</section>
<section id="annotate-the-image-using-the-model-predictions" class="level4">
<h4 class="anchored" data-anchor-id="annotate-the-image-using-the-model-predictions">Annotate the image using the model predictions</h4>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotation colors for the targets and predictions</span></span>
<span id="cb57-2">target_colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_labels]]</span>
<span id="cb57-3">pred_colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pred_labels]]</span>
<span id="cb57-4"></span>
<span id="cb57-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the test images to a tensor</span></span>
<span id="cb57-6">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(test_img)</span>
<span id="cb57-7"></span>
<span id="cb57-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the target segmentation masks</span></span>
<span id="cb57-9">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>img_tensor, masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_masks, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_colors)</span>
<span id="cb57-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the target bounding boxes</span></span>
<span id="cb57-11">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_bboxes, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_labels, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_colors)</span>
<span id="cb57-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated test image</span></span>
<span id="cb57-13">annotated_test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor_to_pil(annotated_tensor)</span>
<span id="cb57-14"></span>
<span id="cb57-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the predicted segmentation masks</span></span>
<span id="cb57-16">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>img_tensor, masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_masks, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_colors)</span>
<span id="cb57-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the predicted labels and bounding boxes</span></span>
<span id="cb57-18">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb57-19">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb57-20">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_bboxes, </span>
<span id="cb57-21">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_scores)],</span>
<span id="cb57-22">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_colors</span>
<span id="cb57-23">)</span>
<span id="cb57-24"></span>
<span id="cb57-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated test image with the predicted bounding boxes</span></span>
<span id="cb57-26">display(stack_imgs([annotated_test_img, tensor_to_pil(annotated_tensor)]))</span>
<span id="cb57-27"></span>
<span id="cb57-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb57-29">pd.Series({</span>
<span id="cb57-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_labels, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(target_bboxes.numpy(), decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))],</span>
<span id="cb57-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_bboxes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).numpy())],</span>
<span id="cb57-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Scores:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_scores)]</span>
<span id="cb57-33">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/images/output_97_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_da99b">
<thead>
</thead>
<tbody>
<tr>
<th id="T_da99b_level0_row0" class="row_heading level0 row0">
Target BBoxes:
</th>
<td id="T_da99b_row0_col0" class="data row0 col0">
[‘student_id:[ 11. 164. 451. 455.]’]
</td>
</tr>
<tr>
<th id="T_da99b_level0_row1" class="row_heading level0 row1">
Predicted BBoxes:
</th>
<td id="T_da99b_row1_col0" class="data row1 col0">
[‘student_id:[ 10.621 162.709 452.722 453.537]’]
</td>
</tr>
<tr>
<th id="T_da99b_level0_row2" class="row_heading level0 row2">
Confidence Scores:
</th>
<td id="T_da99b_row2_col0" class="data row2 col0">
[‘student_id: 99.94%’]
</td>
</tr>
</tbody>

</table>
</div>
<p>The segmentation mask has a few rough spots, but the model appears to have learned to detect and segment ID cards as desired.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the model checkpoint and class labels from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
<li>Once you finish training and download the files, turn off hardware acceleration for the Colab Notebook to save GPU time. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#using-hardware-acceleration">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on completing this tutorial for training Mask R-CNN models in PyTorch! The skills and knowledge you’ve acquired here serve as a solid foundation for future projects.</p>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="./onnx-export/"><strong>Exporting Mask R-CNN Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export Mask R-CNN models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>mask-rcnn</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-mask-rcnn-tutorial/index.html</guid>
  <pubDate>Wed, 20 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Testing Intel’s Arc A770 GPU for Deep Learning Pt. 4</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/arc-a770-testing/part-4/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting the Extension Running on Windows</li>
<li>Training Image Classification Models</li>
<li>Generating Images with 🤗 Diffusers</li>
<li>Training YOLOX Object Detection Models</li>
<li>Reproducibility Issues on Windows</li>
<li>Closing Thoughts</li>
</ul>
<section id="series-links" class="level2">
<h2 class="anchored" data-anchor-id="series-links">Series Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: I tested inference performance with OpenVINO and DirectML on the A770 and attempted to train models using PyTorch-DirectML.</li>
<li><a href="../part-2/">Part 2</a>: I trained image classification models with Intel’s PyTorch extension on the Arc A770 GPU.</li>
<li><a href="../part-3/">Part 3</a>: I trained style transfer models and ran Stable Diffusion 2.1 using 🤗 Diffusers with Intel’s PyTorch extension on the Arc A770.</li>
<li><a href="../part-4/">Part 4</a>: I tested the first version of Intel’s PyTorch extension to support PyTorch 2.0 on native Ubuntu and Windows.</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Ubuntu</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Ubuntu to train models with Arc GPUs</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-windows/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Windows</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Windows to train models with Arc GPUs.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../part-3/">Part 3</a> of this series, I tested the Arc A770 with Intel’s PyTorch extension by training style transfer models and performing inference with Stable Diffusion using the 🤗 Diffusers library.</p>
<p>Training time for the style transfer models was approximately <code>19%</code> slower than a Titan RTX. However, there was an over <code>2.6x</code> performance gap in inference speed for Stable Diffusion 2.1 between the two GPUs. The testing environment for the Titan RTX used PyTorch <code>2.0</code>, while the Arc GPU used PyTorch <code>1.13</code>. At the time, I thought the different PyTorch versions might account for the increased performance gap.</p>
<p>Since then, Intel has released a version of the extension for PyTorch <code>2.0</code> and added support for native Windows.</p>
<p>This post covers my experience getting the extension running on native Windows and my initial findings for training and inference on both Windows and Ubuntu.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The results in this post are with version <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/2.0.110+xpu/"><code>2.0.110+xpu</code></a> of Intel’s PyTorch extension.</p>
</div>
</div>
</section>
<section id="getting-the-extension-running-on-windows" class="level2">
<h2 class="anchored" data-anchor-id="getting-the-extension-running-on-windows">Getting the Extension Running on Windows</h2>
<p>Getting the extension to work on native Windows was a bit of a hassle, but the final process is relatively straightforward. However, the storage requirements for the oneAPI toolkit and Visual Studio, which the oneAPI toolkit depends on, are noteworthy. The required packages from the oneAPI toolkit take up approximately 13 GB, and Visual Studio also requires a decent amount of storage space.</p>
<p>As with Ubuntu, the extension requires us to activate the oneAPI environment for each Command Prompt session. The Windows version of the oneAPI toolkit contains a batch file, which makes it easy to initialize the environment.</p>
<p>One issue that took a little while to resolve was that I kept getting the following error when trying to execute models in PyTorch:</p>
<pre class="text"><code>RuntimeError: Native API failed. Native API returns: -997 (Command failed to enqueue/execute) -997 (Command failed to enqueue/execute)</code></pre>
<p>Eventually, I discovered that I needed to disable the iGPU in the Windows Device Manager for PyTorch to use the Arc GPU. The extension detects the Arc GPU and the iGPU but only seems to work with the first GPU it detects. Manually setting PyTorch to use the second <code>xpu</code> device does not work. Deactivating the iGPU appears to be the only way to make the Arc GPU the first.</p>
<p>Intel does not currently provide a precompiled version of torchvision for use with the extension. You can install torchvision by compiling it from the source code. However, compiling takes a long time, and the standard version of torchvision from Pip performed the same in my testing. Also, there seems to be a compatibility issue with the latest version of oneAPI (2023.2) and the latest version of Visual Studio 2022 that causes the compilation process for the extension to fail. I was able to compile it using Visual Studio 2019.</p>
<p>I also discovered that setting the <code>IPEX_XPU_ONEDNN_LAYOUT</code> environment variable to <code>1</code> provides similar performance improvements on Windows as on Ubuntu.</p>
<p>I provide detailed instructions for setting up the extension on Windows in a dedicated post:</p>
<ul>
<li><a href="../../intel-pytorch-extension-tutorial/native-windows/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Windows</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Windows to train models with Arc GPUs.</li>
</ul>
</section>
<section id="training-image-classification-models" class="level2">
<h2 class="anchored" data-anchor-id="training-image-classification-models">Training Image Classification Models</h2>
<p>First, I tested performance with the image classification notebook I used <a href="../part-2/#training-performance-on-native-ubuntu">previously</a>. Training times on Ubuntu were within a few percentage points of version <code>1.13.120+xpu</code> of the extension. The new version supports Python 3.11, but there were no notable performance improvements over Python 3.10. On the contrary, training time was consistently slightly slower (a few seconds per epoch) with Python 3.11 compared to Python 3.10.</p>
<p>The total training time for the image classification notebook was approximately <code>13%</code> slower on native Windows than <a href="../part-2/#training-performance-on-native-ubuntu">on Ubuntu</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-4/images/arc-a770-pytorch-training-session-native-windows.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">arc-a770-pytorch-training-session-native-windows</figcaption>
</figure>
</div>
<p>That is a worthwhile improvement over the <code>34%</code> <a href="..part-2/#training-performance-on-wsl">performance gap</a> between WSL and native Ubuntu.</p>
<p>The performance gap between Windows and Ubuntu is about the same as what I’ve come to expect with Nvidia GPUs. PyTorch on native Windows tends to be slower than Ubuntu, and Python multiprocessing takes longer to start on Windows.</p>
<p>The final validation accuracy was identical on Windows and Ubuntu.</p>
</section>
<section id="generating-images-with-diffusers" class="level2">
<h2 class="anchored" data-anchor-id="generating-images-with-diffusers">Generating Images with 🤗 Diffusers</h2>
<p>Next, I tested the inference speed for Stable Diffusion 2.1 with the Hugging Face Diffusers notebook I used in <a href="../part-3/#generating-images-with-diffusers">part 3</a>. Inference speed when using bloat16 is approximately <code>25%</code> faster at <code>7.45 it/s</code> than with version <code>1.13.120+xpu</code>. That is still less than half the speed with the Titan RTX at <code>15.76 it/s</code>.</p>
<p>Using float16 has the same inference speed, but the model produces NaN values. The torch compile() method seems to expect CUDA to be enabled, and the compiled model throws an error when I try to use it.</p>
<p>There was no notable difference in inference speed between Windows and Ubuntu.</p>
</section>
<section id="training-yolox-object-detection-models" class="level2">
<h2 class="anchored" data-anchor-id="training-yolox-object-detection-models">Training YOLOX Object Detection Models</h2>
<p>Last, I tried to run the training notebook for my recent <a href="https://christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/">YOLOX object detection tutorial</a>. This notebook was the only one that did not work as expected.</p>
<p>First, I had to replace some <a href="https://pytorch.org/docs/stable/generated/torch.Tensor.view.html">view</a> operations in the loss function with <a href="https://pytorch.org/docs/stable/generated/torch.Tensor.reshape.html">reshape</a> operations to handle non-contiguous data.</p>
<p>The training code ran with those changes, but the loss decreased much more slowly than on Nvidia GPUs and never reached usable performance.</p>
<p>I tested inference performance with model checkpoints trained on my Nvidia GPU and got identical inference predictions, so the issue does not appear to be with the model itself. The training code also achieved usable accuracy when using the CPU.</p>
<p>Training time was about 11 minutes for a single pass through the training set on the Arc GPU. For reference, the same takes about 2 minutes on an RTX 4090.</p>
<p>I needed to replace the same view operations with reshape operations in the loss function for the YOLOX training code on Windows and had the same (lack of) training results as on Ubuntu. The training loop also took several minutes to get going. The extension and Python’s multiprocessing seem to contribute to this slow start time.</p>
</section>
<section id="reproducibility-issues-on-windows" class="level2">
<h2 class="anchored" data-anchor-id="reproducibility-issues-on-windows">Reproducibility Issues on Windows</h2>
<p>When I first got the extension working on Windows, I had different results with the YOLOX training notebook and the Stable Diffusion inference notebook.</p>
<p>The YOLOX notebook produced a model that was comparably accurate to one trained on Nvidia GPUs, and the Stable Diffusion notebook was faster at around <code>9 it/s</code>. That is notably faster than my results on Ubuntu.</p>
<p>However, when I uninstalled and reinstalled everything related to the extension, I got results comparable to those on Ubuntu. I have since been unable to reproduce my initial results on Windows.</p>
<p>I might previously have had something installed that was not part of the setup process for the extension that caused the different behavior. If that is the case, I have been unable to identify it.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>I’m glad we now have the option to run PyTorch on Windows with the Arc GPUs without WSL. The performance gap between native Windows and Ubuntu does not seem too bad either.</p>
<p>However, the fact the YOLOX training notebook does not reach usable performance on the Arc GPU is incredibly disappointing and concerning. That it temporarily worked on Windows only makes it more frustrating. I’d honestly rather it just fail outright and throw an error. That way, I would at least have a better idea of what is causing the problem.</p>
<p>It’s quite the opposite of how I expected things to turn out. I thought the first Windows version of the extension would have more problems and that the YOLOX training code would work without issue.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-4/index.html</guid>
  <pubDate>Mon, 11 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting Started with Intel’s PyTorch Extension for Arc GPUs on Windows</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Enable Resizable BAR in BIOS</li>
<li>Install Drivers</li>
<li>Install Visual Studio</li>
<li>Install oneAPI Base Toolkit</li>
<li>Disable Integrated Graphics</li>
<li>Set Up a Python Environment</li>
<li>Modify PyTorch Code</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I’ll guide you through setting up Intel’s <a href="https://github.com/intel/intel-extension-for-pytorch">PyTorch extension</a> on <a href="https://www.microsoft.com/en-us/windows">Windows</a> to train models with their <a href="https://www.intel.com/content/www/us/en/products/docs/discrete-gpus/arc/desktop/a-series/overview.html">Arc GPUs</a>. The extension provides Intel’s latest feature optimizations and hardware support before they get added to PyTorch. Most importantly for our case, it now includes <code>experimental</code> support for Intel’s Arc GPUs and optimizations to take advantage of their Xe Matrix Extensions (XMX).</p>
<p>The XMX engines are dedicated hardware for performing matrix operations like those in deep-learning workloads. Intel’s PyTorch extension allows us to leverage this hardware with minimal changes to existing PyTorch code.</p>
<p>To illustrate this, we’ll adapt the training code from my <a href="https://christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/">beginner-level PyTorch tutorial</a>, where we fine-tune an image classification model from the <a href="https://github.com/huggingface/pytorch-image-models">timm library</a> for hand gesture recognition. By the end of this tutorial, you’ll know all steps required to set up Windows for training PyTorch models using Arc GPUs.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The current setup process is for version <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/2.0.110+xpu/"><code>2.0.110+xpu</code></a> of Intel’s PyTorch extension.</p>
</div>
</div>
</section>
<section id="enable-resizable-bar-in-bios" class="level2">
<h2 class="anchored" data-anchor-id="enable-resizable-bar-in-bios">Enable Resizable BAR in BIOS</h2>
<p>If you have an Arc GPU, one of the first things you should do is enable Resizable BAR. Resizable BAR allows a computer’s processor to access the graphics card’s entire memory instead of in small chunks. The Arc GPUs currently require this feature to perform as intended. You can enable the feature in your motherboard’s BIOS.</p>
<p>Here are links on how to do this for some of the popular motherboard manufacturers:</p>
<ul>
<li><a href="https://www.asrock.com/support/faq.asp?id=498">ASRock</a></li>
<li><a href="https://www.asus.com/support/FAQ/1046107/">Asus</a></li>
<li><a href="https://www.evga.com/support/faq/FAQdetails.aspx?faqid=59772">EVGA</a></li>
<li><a href="https://www.gigabyte.com/WebPage/785/NVIDIA_resizable_bar.html">Gigabyte</a></li>
<li><a href="https://www.msi.com/blog/unlock-system-performance-to-extreme-resizable-bar">MSI</a></li>
</ul>
<p>With Resizable BAR enabled, let’s ensure we have the latest drivers for our Arc GPU.</p>
</section>
<section id="install-drivers" class="level2">
<h2 class="anchored" data-anchor-id="install-drivers">Install Drivers</h2>
<p>We can download the latest Arc GPU drivers from Intel’s website at the link below:</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/download/785597/intel-arc-iris-xe-graphics-windows.html?">Intel® Arc™ &amp; Iris® Xe Graphics - Windows</a></li>
</ul>
<p>The latest driver version available was <code>31.0.101.4676</code> at the time of writing. Click the <code>Download</code> button under <code>Available Downloads</code> to download the installer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/download-intel-graphics-driver-installer-windows.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once downloaded, double-click the installer executable and follow the prompts to install the drivers.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-graphics-driver-installer-begin-installation.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>You don’t need to agree to join the Intel Computing Improvement program to install the drivers.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-graphics-driver-installer-intel-computing-improvement-program.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once the installation completes, click the <code>Reboot Recommended</code> button to reboot the computer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-graphics-driver-installer-installation-complete-reboot.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can continue with the next step once we’re back in Windows.</p>
</section>
<section id="install-visual-studio" class="level2">
<h2 class="anchored" data-anchor-id="install-visual-studio">Install Visual Studio</h2>
<p>The <a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit.html#gs.ztyvfm">oneAPI Base Toolkit</a>, which Intel’s extension depends on, requires <a href="https://visualstudio.microsoft.com/#vs-section">Visual Studio</a> with the <code>Desktop development with C++</code> workload for some of its packages to function. We can download the installer for the free <code>Community</code> version of Visual Studio at the link below:</p>
<ul>
<li><a href="https://visualstudio.microsoft.com/downloads/">Visual Studio 2022 Downloads</a></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Installing the extension via compiling from source
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There is a compatibility issue with the latest version of oneAPI (2023.2) and the latest version of Visual Studio 2022 that causes the compilation process for the extension to fail. You can download a version of Visual Studio 2019 from the link below if you want to compile the extension from its source code.</p>
<ul>
<li><a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&amp;rel=16">Visual Studio 2019 Download</a></li>
</ul>
</div>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/visual-studio-2022-community-download.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once downloaded, double-click the installer executable and click <code>Continue</code> in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/visual-studio-installer-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Select the <code>Desktop development with C++</code> workload under <code>Desktop &amp; Mobile</code> and click <code>Install</code> in the bottom-right corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/visual-studio-installer-install-desktop-development-with-c++.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once the installation finishes, Visual Studio will launch and prompt you to sign in. We can either skip that step or exit Visual Studio completely.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/visual-studio-sign-in.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, Visual Studio will prompt us to personalize the theme and development settings. We don’t need to use Visual Studio directly, so we stick with the defaults and exit the application once finished.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/visual-studio-select-theme.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="install-oneapi-base-toolkit" class="level2">
<h2 class="anchored" data-anchor-id="install-oneapi-base-toolkit">Install oneAPI Base Toolkit</h2>
<p>With the prerequisites satisfied, we can install the oneAPI Base Toolkit. The required packages in the toolkit will take up approximately 13GB of disk space.</p>
<section id="download-the-oneapi-toolkit-installer" class="level3">
<h3 class="anchored" data-anchor-id="download-the-oneapi-toolkit-installer">Download the oneAPI Toolkit Installer</h3>
<p>We’ll install the toolkit using the offline Windows installer available at the link below:</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html?operatingsystem=window&amp;distributions=offline&amp;version=2023.2.0">oneAPI Base Toolkit 2023.2 Windows Offline Installer</a></li>
</ul>
<p>The download page has a form to register with an email address. We can skip this by clicking the <code>Continue without signing up</code> text below the <code>Sign Up &amp; Download</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-windows-download-page.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once downloaded, double-click the installer executable and click the <code>Extract</code> button in the popup window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-extract-package.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once extracted, click the <code>Continue</code> button in the installer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-check-system-requirements.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Tick the checkbox on the next page to accept the license agreement and select the <code>Custom Installation</code> option. We can save a decent amount of space by only installing the necessary components.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-select-custom-installation.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>For Intel’s PyTorch extension to function, we need the following components:</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compatibility-tool.html#gs.4m6nmn">Intel DPC++ Compatibility Tool</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-library.html#gs.4m6ndt">Intel oneAPI DPC++ Library</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compiler.html#gs.4m6nc1">Intel oneAPI DPC++/C++ Compiler</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html#gs.4m6n49">Intel oneAPI Math Kernel Library</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/distribution-for-gdb.html#gs.4m6muy">Intel Distribution for GDB</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/onetbb.html#gs.4m6q0f">Intel oneAPI Threading Building Blocks</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-select-packages.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The next page allows us to integrate the oneAPI toolkit with installations of Visual Studio. We don’t need to make any changes here.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-select-ide-integrations.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>As with the Intel Computing Improvement program for the Graphics drivers, we don’t need to consent to the Intel Software Improvement program to use the toolkit. Go ahead and click the Install button to start the installation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-software-improvement-program.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The installation process will likely take several minutes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-installation-in-progress.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click the Finish button in the popup window once the toolkit successfully installs and exit the installer window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/intel-oneapi-base-toolkit-installer-finish.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="disable-integrated-graphics" class="level2">
<h2 class="anchored" data-anchor-id="disable-integrated-graphics">Disable Integrated Graphics</h2>
<p>I encountered the following error when I first attempted to use Intel’s PyTorch extension on Windows:</p>
<pre class="text"><code>RuntimeError: Native API failed. Native API returns: -997 (Command failed to enqueue/execute) -997 (Command failed to enqueue/execute)</code></pre>
<p>I could only resolve the issue by deactivating the iGPU in the Windows Device Manager. Future versions of the extension will likely eliminate this bug, but I’ll include the steps to turn off the iGPUs for now.</p>
<p>Type Device Manager into the Windows search bar and click Open.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/windows-search-device-manager.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>You will see the following popup message if you are not using an Administrator account. Click <code>OK</code> to continue.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/windows-device-manager-standard-user-warning.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In the Device Manager window, open the <code>Display adapters</code> dropdown. There should be at least two options: the Arc GPU and the iGPU included with the CPU. Double-click the iGPU listing to open its properties window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/windows-device-manager-select-integrated-graphics.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Non-Administrator users must click the <code>Change settings</code> button to enable changes to the iGPU device properties.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/windows-device-manager-integrated-graphics-properties-change-settings.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Next, select the <code>Driver</code> tab and click the <code>Disable Device</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/windows-device-manager-integrated-graphics-properties-disable-device.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Click <code>Yes</code> in the popup window to confirm the changes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/windows-device-manager-integrated-graphics-properties-disable-device-confirm.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>You will need to repeat this step when you install new graphics drivers in the future, assuming future releases of Intel’s extension do not resolve the issue.</p>
</div>
</div>
</section>
<section id="set-up-a-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-a-python-environment">Set Up a Python Environment</h2>
<p>Now, we can create a Python environment to run the training code. We’ll install a patched version of PyTorch needed for Intel’s extension, the extension itself, and the other dependencies for the training code.</p>
<section id="install-mamba-package-manager" class="level3">
<h3 class="anchored" data-anchor-id="install-mamba-package-manager">Install Mamba Package Manager</h3>
<p>We’ll use the <a href="https://mamba.readthedocs.io/en/latest/">Mamba</a> package manager to create the Python environment. I have a dedicated tutorial for setting up Mamba on Windows:</p>
<ul>
<li><a href="https://christianjmills.com/posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></li>
</ul>
<p>Open a command prompt window with the mamba environment active and navigate to a folder to store the training notebooks. For convenience, here is the command to activate the mamba environment from any command prompt window:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%USERPROFILE%\mambaforge\Scripts\activate</span></span></code></pre></div>
</section>
<section id="create-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="create-a-python-environment">Create a Python Environment</h3>
<p>Next, we’ll create a Python environment and activate it. The current version of the extension supports Python 3.11, so we’ll use that.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-arc python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-arc</span></code></pre></div>
</section>
<section id="activate-the-oneapi-environment" class="level3">
<h3 class="anchored" data-anchor-id="activate-the-oneapi-environment">Activate the oneAPI Environment</h3>
<p>Run the following command to activate the oneAPI environment for this command prompt session:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">call</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:\Program Files (x86)\Intel\oneAPI\setvars.bat"</span></span></code></pre></div>
<p>We must reactivate the oneAPI environment whenever we open a new command prompt. It does not carry over from one terminal window to another.</p>
</section>
<section id="install-training-code-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="install-training-code-dependencies">Install Training Code Dependencies</h3>
<p>After that, we’ll install the training code dependencies. You can learn about these dependencies (<a href="https://christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/#installing-additional-libraries">here</a>).</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyter matplotlib pandas pillow timm torcheval torchtnt tqdm</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install cjm_pandas_utils cjm_psl_utils cjm_pil_utils cjm_pytorch_utils</span></code></pre></div>
</section>
<section id="install-prerequisite-packages" class="level3">
<h3 class="anchored" data-anchor-id="install-prerequisite-packages">Install Prerequisite Packages</h3>
<p>The package for Intel’s PyTorch extension requires a couple of conda packages:</p>
<ul>
<li><a href="https://anaconda.org/conda-forge/pkg-config/">pkg-config</a></li>
<li><a href="https://anaconda.org/conda-forge/libuv">libuv</a></li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pkg-config libuv <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</section>
<section id="install-pytorch-and-intels-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="install-pytorch-and-intels-pytorch-extension">Install PyTorch and Intel’s PyTorch extension</h3>
<p>The following command will install the patched version of PyTorch and the extension itself:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> torch==2.0.0a0 intel_extension_for_pytorch==2.0.110+gitba7f6c1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://developer.intel.com/ipex-whl-stable-xpu</span></code></pre></div>
<p>Intel does not currently have a pre-compiled version of TorchVision available for Windows. We can compile a patched version of TorchVision from the source code using the instructions below:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Installing From Source Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<section id="install-additional-dependencies-for-torchvision" class="level3">
<h3 class="anchored" data-anchor-id="install-additional-dependencies-for-torchvision">Install Additional Dependencies for TorchVision</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install libpng <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</section>
<section id="download-the-compilation-batch-file" class="level3">
<h3 class="anchored" data-anchor-id="download-the-compilation-batch-file">Download the Compilation Batch File</h3>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> compile_bundle.bat https://raw.githubusercontent.com/intel/intel-extension-for-pytorch/release/xpu/2.0.110/scripts/compile_bundle.bat</span></code></pre></div>
</section>
<section id="run-the-batch-file" class="level3">
<h3 class="anchored" data-anchor-id="run-the-batch-file">Run the Batch File</h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">compile_bundle.bat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:\Program Files (x86)\Intel\oneAPI\compiler\latest"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:\Program Files (x86)\Intel\oneAPI\mkl\2023.2.0"</span></span></code></pre></div>
</section>
</div>
</div>
</div>
<p>However, I did not notice any differences in performance between the standard version of TorchVision and the version I compiled from the source code The only thing of note is that pip complained when installing the patched version of PyTorch with the standard torchvision package.</p>
<p>Compiling PyTorch, TorchVision, and Intel’s Extension can take a long time. Therefore, I would stick with the standard version of TorchVision and ignore the warning from pip.</p>
</section>
<section id="set-onednn-memory-layout" class="level3">
<h3 class="anchored" data-anchor-id="set-onednn-memory-layout">Set oneDNN Memory Layout</h3>
<p>We can improve training speed by setting an environment variable for the oneDNN memory layout. The following commands will add the appropriate value for the current command line session and save it for future sessions.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> IPEX_XPU_ONEDNN_LAYOUT=1</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">setx</span> IPEX_XPU_ONEDNN_LAYOUT 1</span></code></pre></div>
</section>
</section>
<section id="modify-pytorch-code" class="level2">
<h2 class="anchored" data-anchor-id="modify-pytorch-code">Modify PyTorch Code</h2>
<p>It’s finally time to train a model. The Jupyter Notebooks with the original and modified training code are available on GitHub at the links below.</p>
<ul>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training-windows-without-hf-datasets.ipynb">pytorch-timm-image-classifier-training-windows-without-hf-datasets.ipynb</a></li>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/intel-arc-pytorch-timm-image-classifier-training-windows-without-hf-datasets.ipynb">intel-arc-pytorch-timm-image-classifier-training-windows-without-hf-datasets.ipynb</a></li>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/windows_utils_without_hf.py">windows_utils_without_hf.py</a></li>
</ul>
<p>You can also download the notebooks to the current directory by running the following commands:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> pytorch-timm-image-classifier-training-windows-without-hf-datasets.ipynb https://raw.githubusercontent.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/main/notebooks/pytorch-timm-image-classifier-training.ipynb</span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> intel-arc-pytorch-timm-image-classifier-training-windows-without-hf-datasets.ipynb https://raw.githubusercontent.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/main/notebooks/intel-arc-pytorch-timm-image-classifier-training-windows.ipynb</span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> windows_utils_without_hf.py https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/windows_utils_without_hf.py</span></code></pre></div>
<p>Once downloaded, run the following command to launch the Jupyter Notebook Environment:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<section id="import-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="import-pytorch-extension">Import PyTorch Extension</h3>
<p>We import Intel’s PyTorch extension with the following code:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> intel_extension_for_pytorch as ipex</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PyTorch Version: {torch.__version__}'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Intel PyTorch Extension Version: {ipex.__version__}'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</section>
<section id="update-pytorch-imports" class="level3">
<h3 class="anchored" data-anchor-id="update-pytorch-imports">Update PyTorch Imports</h3>
<p>We don’t want to re-import <code>torch</code> after the extension, so we’ll remove that line from the <code>Import PyTorch dependencies</code> section.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb17-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb17-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb17-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb17-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb17-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb17-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb18-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb18-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb18-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb18-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb18-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb18-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb18-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="verify-arc-gpu-availability" class="level3">
<h3 class="anchored" data-anchor-id="verify-arc-gpu-availability">Verify Arc GPU Availability</h3>
<p>We can double-check that the extension can use the Arc GPU by getting the properties of the available <code>xpu</code> devices.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_public_properties(obj):</span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb19-3">        prop: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(obj, prop)</span>
<span id="cb19-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(obj)</span>
<span id="cb19-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> prop.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">callable</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(obj, prop))</span>
<span id="cb19-6">    }</span>
<span id="cb19-7"></span>
<span id="cb19-8">xpu_device_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.xpu.device_count()</span>
<span id="cb19-9">dict_properties_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [get_public_properties(torch.xpu.get_device_properties(i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(xpu_device_count)]</span>
<span id="cb19-10">pd.DataFrame(dict_properties_list)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
dev_type
</th>
<th>
gpu_eu_count
</th>
<th>
max_compute_units
</th>
<th>
max_num_sub_groups
</th>
<th>
max_work_group_size
</th>
<th>
name
</th>
<th>
platform_name
</th>
<th>
sub_group_sizes
</th>
<th>
support_fp64
</th>
<th>
total_memory
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
gpu
</td>
<td>
512
</td>
<td>
512
</td>
<td>
128
</td>
<td>
1024
</td>
<td>
Intel(R) Arc(TM) A770 Graphics
</td>
<td>
Intel(R) Level-Zero
</td>
<td>
[8, 16, 32]
</td>
<td>
False
</td>
<td>
16704737280
</td>
</tr>
</tbody>

</table>
</div>
<p>In this case, the A770 is the only device listed since we deactivated the integrated graphics on the CPU.</p>
</section>
<section id="update-the-device-name" class="level3">
<h3 class="anchored" data-anchor-id="update-the-device-name">Update the Device Name</h3>
<p>Next, we’ll manually set the device name to <code>xpu</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xpu'</span></span>
<span id="cb20-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb20-3">device, dtype</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb21-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb21-3">device, dtype</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="optimize-the-model-and-optimizer-objects" class="level3">
<h3 class="anchored" data-anchor-id="optimize-the-model-and-optimizer-objects">Optimize the <code>model</code> and <code>optimizer</code> Objects</h3>
<p>Before we run the <code>train_loop</code> function, we’ll use Intel’s PyTorch extension to apply optimizations to the model and optimizer objects. We’ll also cast the model to the <code>bfloat16</code> data type, so we can train using mixed precision. Intel’s PyTorch extension only supports the <code>bloat16</code> data type for mixed-precision training currently.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb22-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb22-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb22-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimize the model and optimizer objects</span></span>
<span id="cb22-11">model, optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipex.optimize(model, optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16)</span>
<span id="cb22-12"></span>
<span id="cb22-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb22-14">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb22-15">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb22-16">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb22-17"></span>
<span id="cb22-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance metric: Multiclass Accuracy</span></span>
<span id="cb22-19">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MulticlassAccuracy()</span>
<span id="cb22-20"></span>
<span id="cb22-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for CUDA-capable GPU availability</span></span>
<span id="cb22-22">use_grad_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.is_available()</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb23-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb23-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb23-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb23-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb23-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb23-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb23-14"></span>
<span id="cb23-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance metric: Multiclass Accuracy</span></span>
<span id="cb23-16">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MulticlassAccuracy()</span>
<span id="cb23-17"></span>
<span id="cb23-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for CUDA-capable GPU availability</span></span>
<span id="cb23-19">use_grad_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.is_available()</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>That’s it for the required changes to the training code. We can now run the <code>train_loop</code> function. With the A770 and the dataset on an SSD, training takes between twelve and twelve and a half minutes to complete.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/images/arc-a770-pytorch-training-session-native-windows.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="update-the-inference-code" class="level3">
<h3 class="anchored" data-anchor-id="update-the-inference-code">Update the Inference Code</h3>
<p>Since we cast the model to <code>bloat16</code>, we must ensure input data use the same type. We can update the inference code using the auto-cast context manager as shown below:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb24-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb24-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.xpu.amp.autocast(enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16, cache_enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb24-4">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb25-3">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we set up Intel’s PyTorch extension for the Windows OS and trained an image classification model using an Arc GPU. The exact setup steps may change with new versions, so check the <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/latest/tutorials/installation.html">documentation</a> for the latest version to see if there are any changes. I’ll try to keep this tutorial updated with any significant changes to the process.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>windows</category>
  <category>image-classification</category>
  <category>arc-gpu</category>
  <category>getting-started</category>
  <guid>christianjmills.com/posts/intel-pytorch-extension-tutorial/native-windows/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting Started with Intel’s PyTorch Extension for Arc GPUs on Ubuntu</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Enable Resizable BAR in BIOS</li>
<li>Install Ubuntu</li>
<li>Verify Resizable BAR</li>
<li>Install Drivers</li>
<li>Install oneAPI Base Toolkit</li>
<li>Update the Bash Run Commands File</li>
<li>Set Up a Python Environment</li>
<li>Modify PyTorch Code</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I’ll guide you through setting up Intel’s <a href="https://github.com/intel/intel-extension-for-pytorch">PyTorch extension</a> on <a href="https://ubuntu.com/download/desktop">Ubuntu</a> to train models with their <a href="https://www.intel.com/content/www/us/en/products/docs/discrete-gpus/arc/desktop/a-series/overview.html">Arc GPUs</a>. The extension provides Intel’s latest feature optimizations and hardware support before they get added to PyTorch. Most importantly for our case, it now includes <code>experimental</code> support for Intel’s Arc GPUs and optimizations to take advantage of their Xe Matrix Extensions (XMX).</p>
<p>The XMX engines are dedicated hardware for performing matrix operations like those in deep-learning workloads. Intel’s PyTorch extension allows us to leverage this hardware with minimal changes to existing PyTorch code.</p>
<p>To illustrate this, we’ll adapt the training code from my <a href="https://christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/">beginner-level PyTorch tutorial</a>, where we fine-tune an image classification model from the <a href="https://github.com/huggingface/pytorch-image-models">timm library</a> for hand gesture recognition. By the end of this tutorial, you’ll know all the steps required to set up Ubuntu for training PyTorch models using Arc GPUs.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The current setup process is for version <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/2.0.110+xpu/"><code>2.0.110+xpu</code></a> of Intel’s PyTorch extension.</p>
</div>
</div>
</section>
<section id="enable-resizable-bar-in-bios" class="level2">
<h2 class="anchored" data-anchor-id="enable-resizable-bar-in-bios">Enable Resizable BAR in BIOS</h2>
<p>If you have an Arc GPU, one of the first things you should do is enable Resizable BAR. Resizable BAR allows a computer’s processor to access the graphics card’s entire memory instead of in small chunks. The Arc GPUs currently require this feature to perform as intended. You can enable the feature in your motherboard’s BIOS.</p>
<p>Here are links on how to do this for some of the popular motherboard manufacturers:</p>
<ul>
<li><a href="https://www.asrock.com/support/faq.asp?id=498">ASRock</a></li>
<li><a href="https://www.asus.com/support/FAQ/1046107/">Asus</a></li>
<li><a href="https://www.evga.com/support/faq/FAQdetails.aspx?faqid=59772">EVGA</a></li>
<li><a href="https://www.gigabyte.com/WebPage/785/NVIDIA_resizable_bar.html">Gigabyte</a></li>
<li><a href="https://www.msi.com/blog/unlock-system-performance-to-extreme-resizable-bar">MSI</a></li>
</ul>
</section>
<section id="install-ubuntu" class="level2">
<h2 class="anchored" data-anchor-id="install-ubuntu">Install Ubuntu</h2>
<p>Intel’s <a href="https://dgpu-docs.intel.com/driver/client/overview.html#client-install-options">documentation</a> recommends Ubuntu 22.04 LTS or newer. The <a href="https://ubuntu.com/blog/what-is-an-ubuntu-lts-release">LTS</a> releases have the minimum required Linux kernel version as of 22.04.3, so we can stick with that. If you already have Ubuntu 22.04 LTS installed, ensure it’s fully updated.</p>
<ul>
<li><a href="https://ubuntu.com/download/desktop">Download Ubuntu Desktop Download Page</a></li>
</ul>
<p>The Ubuntu website provides <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">a step-by-step guide</a> to installing Ubuntu on your PC, and you can install it alongside an existing operating system.</p>
<ul>
<li><strong>Tutorial:</strong> <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">Install Ubuntu with a Bootable USB Stick</a></li>
</ul>
<p>That tutorial calls for at least 25GB of free storage space, but I recommend at least 80 GB for our case. The <a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit.html#gs.ztyvfm">oneAPI Base Toolkit</a> used by Intel’s PyTorch extension alone takes up approximately 15GB. Additional packages, applications, models, and datasets can quickly fill space.</p>
</section>
<section id="verify-resizable-bar" class="level2">
<h2 class="anchored" data-anchor-id="verify-resizable-bar">Verify Resizable BAR</h2>
<p>Once you log into Ubuntu, you can verify Resizable BAR is active by opening a terminal (<code>Ctrl+Alt+T</code>) and running the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lspci</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A8</span> VGA</span></code></pre></div>
<p>Here is the output for the Arc A770 16GB card:</p>
<pre class="text"><code>$ lspci -v |grep -A8 VGA
00:02.0 VGA compatible controller: Intel Corporation RocketLake-S GT1 [UHD Graphics 750] (rev 04) (prog-if 00 [VGA controller])
    Subsystem: ASRock Incorporation RocketLake-S GT1 [UHD Graphics 750]
    Flags: bus master, fast devsel, latency 0, IRQ 172
    Memory at 6401000000 (64-bit, non-prefetchable) [size=16M]
    Memory at 4000000000 (64-bit, prefetchable) [size=256M]
    I/O ports at 3000 [size=64]
    Expansion ROM at 000c0000 [virtual] [disabled] [size=128K]
    Capabilities: &lt;access denied&gt;
    Kernel driver in use: i915
--
03:00.0 VGA compatible controller: Intel Corporation DG2 [Arc A770] (rev 08) (prog-if 00 [VGA controller])
    Subsystem: Intel Corporation DG2 [Arc A770]
    Flags: bus master, fast devsel, latency 0, IRQ 173
    Memory at a1000000 (64-bit, non-prefetchable) [size=16M]
    Memory at 6000000000 (64-bit, prefetchable) [size=16G]
    Expansion ROM at a2000000 [disabled] [size=2M]
    Capabilities: &lt;access denied&gt;
    Kernel driver in use: i915
    Kernel modules: i915</code></pre>
<hr>
<p>Note that the <code>[size=16GB]</code> matches the total memory for the GPU. If you have the A750 8GB variant, it should read <code>[size=8GB]</code> for your GPU.</p>
</section>
<section id="install-drivers" class="level2">
<h2 class="anchored" data-anchor-id="install-drivers">Install Drivers</h2>
<p>Next, we will install the compute, media, and display runtimes.</p>
<section id="add-intel-graphics-drivers-repository" class="level3">
<h3 class="anchored" data-anchor-id="add-intel-graphics-drivers-repository">Add Intel Graphics drivers Repository</h3>
<p>Run the following bash commands to add the Intel Graphics drivers repository:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-qO</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> https://repositories.intel.com/graphics/intel-graphics.key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> gpg <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dearmor</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> /usr/share/keyrings/intel-graphics.gpg <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/graphics/ubuntu jammy arc"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tee /etc/apt/sources.list.d/intel-gpu-jammy.list <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get update</span></code></pre></div>
<p>The above bash commands perform the following steps:</p>
<ol type="1">
<li>Refresh sudo access to avoid multiple password prompts.</li>
<li>Download the Intel graphics repository’s public key.</li>
<li>Convert the downloaded key to binary and save it.</li>
<li>Add the Intel graphics repository to the APT’s list of package sources.</li>
<li>Update the package list from all configured repositories, including the newly added Intel repository.</li>
</ol>
</section>
<section id="install-packages" class="level3">
<h3 class="anchored" data-anchor-id="install-packages">Install packages</h3>
<p>Now, we can install the required packages.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-2">  intel-opencl-icd intel-level-zero-gpu level-zero <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-3">  intel-media-va-driver-non-free libmfx1 libmfxgen1 libvpl2 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-4">  libegl-mesa0 libegl1-mesa libegl1-mesa-dev libgbm1 libgl1-mesa-dev libgl1-mesa-dri <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5">  libglapi-mesa libgles2-mesa-dev libglx-mesa0 libigdgmm12 libxatracker2 mesa-va-drivers <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-6">  mesa-vdpau-drivers mesa-vulkan-drivers va-driver-all vainfo hwinfo clinfo mesa-utils</span></code></pre></div>
</section>
<section id="verify-the-installations" class="level3">
<h3 class="anchored" data-anchor-id="verify-the-installations">Verify the Installations</h3>
<p>We can verify everything is installed correctly by running the following commands.</p>
<section id="verify-the-device-is-working-with-the-i915-driver" class="level4">
<h4 class="anchored" data-anchor-id="verify-the-device-is-working-with-the-i915-driver">Verify the device is working with the <code>i915</code> driver</h4>
<p>Run the following command to confirm the device is using Intel’s graphics driver:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hwinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--display</span></span></code></pre></div>
<p>Here is the expected output for the A770:</p>
<pre class="text"><code>$ hwinfo --display
06: PCI 300.0: 0300 VGA compatible controller (VGA)             
  [Created at pci.386]
  Unique ID: svHJ.nDfmnmUHKH4
  Parent ID: GA8e.mr2N3fBJq5F
  SysFS ID: /devices/pci0000:00/0000:00:01.0/0000:01:00.0/0000:02:01.0/0000:03:00.0
  SysFS BusID: 0000:03:00.0
  Hardware Class: graphics card
  Model: "Intel VGA compatible controller"
  Vendor: pci 0x8086 "Intel Corporation"
  Device: pci 0x56a0 
  SubVendor: pci 0x8086 "Intel Corporation"
  SubDevice: pci 0x1020 
  Revision: 0x08
  Driver: "i915"
  Driver Modules: "i915"
  Memory Range: 0xa1000000-0xa1ffffff (rw,non-prefetchable)
  Memory Range: 0x6000000000-0x63ffffffff (ro,non-prefetchable)
  Memory Range: 0xa2000000-0xa21fffff (ro,non-prefetchable,disabled)
  IRQ: 173 (701506 events)
  Module Alias: "pci:v00008086d000056A0sv00008086sd00001020bc03sc00i00"
  Driver Info #0:
    Driver Status: i915 is active
    Driver Activation Cmd: "modprobe i915"
  Config Status: cfg=new, avail=yes, need=no, active=unknown
  Attached to: #25 (PCI bridge)</code></pre>
<hr>
</section>
<section id="verify-media-drivers-installation" class="level4">
<h4 class="anchored" data-anchor-id="verify-media-drivers-installation">Verify Media drivers installation</h4>
<p>Run the following commands to verify the media drivers installation:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DISPLAY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>:0.0<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vainfo</span></span></code></pre></div>
<p>Here is a snippet of the expected output for the A770:</p>
<pre class="text"><code>$ export DISPLAY=:0.0; vainfo
Trying display: wayland
libva info: VA-API version 1.18.0
libva info: Trying to open /usr/lib/x86_64-linux-gnu/dri/iHD_drv_video.so
libva info: Found init function __vaDriverInit_1_18
libva info: va_openDriver() returns 0
vainfo: VA-API version: 1.18 (libva 2.17.0)
vainfo: Driver version: Intel iHD driver for Intel(R) Gen Graphics - 23.1.4 (12e141d)
vainfo: Supported profile and entrypoints
      VAProfileNone                   : VAEntrypointVideoProc
      VAProfileNone                   : VAEntrypointStats
...</code></pre>
<hr>
</section>
<section id="verify-computing-drivers-installation" class="level4">
<h4 class="anchored" data-anchor-id="verify-computing-drivers-installation">Verify Computing drivers installation</h4>
<p>Run the following command to get a list of available OpenCL platforms and devices:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span></span></code></pre></div>
<p>The Arc GPU should show as one of the available devices. On my computer, the Arc GPU is device 0 for platform 2:</p>
<pre class="text"><code>$ clinfo -l
Platform #0: Intel(R) FPGA Emulation Platform for OpenCL(TM)
 `-- Device #0: Intel(R) FPGA Emulation Device
Platform #1: Intel(R) OpenCL
 `-- Device #0: 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz
Platform #2: Intel(R) OpenCL HD Graphics
 `-- Device #0: Intel(R) Arc(TM) A770 Graphics
Platform #3: Intel(R) OpenCL HD Graphics
 `-- Device #0: Intel(R) UHD Graphics 750</code></pre>
<hr>
<p>We can run the following command to get the properties for that device:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> 2:0</span></code></pre></div>
<p>The command will output a lot of information. Here is the top section of the output for the A770:</p>
<pre class="text"><code>$ clinfo -d 2:0
  Platform Name                                   Intel(R) OpenCL HD Graphics
  Device Name                                     Intel(R) Arc(TM) A770 Graphics
  Device Vendor                                   Intel(R) Corporation
  Device Vendor ID                                0x8086
  Device Version                                  OpenCL 3.0 NEO 
  Device UUID                                     8680a056-0800-0000-0300-000000000000
  Driver UUID                                     32332e30-352e-3235-3539-332e31380000
  Valid Device LUID                               No
  Device LUID                                     400f-ca04fd7f0000
  Device Node Mask                                0
  Device Numeric Version                          0xc00000 (3.0.0)
  Driver Version                                  23.05.25593.18
  Device OpenCL C Version                         OpenCL C 1.2 
  Device OpenCL C all versions                    OpenCL C                                 
...</code></pre>
<hr>
</section>
<section id="verify-3d-drivers-installation" class="level4">
<h4 class="anchored" data-anchor-id="verify-3d-drivers-installation">Verify 3D drivers installation</h4>
<p>Lastly, we can run the following command to verify the 3D drivers’ installation:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">glxinfo</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> OpenGL</span></code></pre></div>
<p>Here is the output for the A770:</p>
<pre class="text"><code>$ glxinfo |grep OpenGL
OpenGL vendor string: Intel
OpenGL renderer string: Mesa Intel(R) Arc(tm) A770 Graphics (DG2)
OpenGL core profile version string: 4.6 (Core Profile) Mesa 23.1.0-devel (git-722bcd7973)
OpenGL core profile shading language version string: 4.60
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 4.6 (Compatibility Profile) Mesa 23.1.0-devel (git-722bcd7973)
OpenGL shading language version string: 4.60
OpenGL context flags: (none)
OpenGL profile mask: compatibility profile
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 23.1.0-devel (git-722bcd7973)
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:</code></pre>
<hr>
</section>
</section>
</section>
<section id="install-oneapi-base-toolkit" class="level2">
<h2 class="anchored" data-anchor-id="install-oneapi-base-toolkit">Install oneAPI Base Toolkit</h2>
<p>Next, we install the <a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit.html#gs.ztyvfm">oneAPI Base Toolkit</a>, which Intel’s PyTorch extension depends on. As mentioned earlier, the toolkit will take up approximately 15GB of disk space. We’ll install the toolkit using the APT package manager.</p>
<p>Run the following commands to add the package repository and install the toolkit:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span></span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O-</span> https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gpg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dearmor</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tee /usr/share/keyrings/oneapi-archive-keyring.gpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/null</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tee /etc/apt/sources.list.d/oneAPI.list</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span></code></pre></div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install intel-basekit</span></code></pre></div>
<p>The above bash commands perform the following steps:</p>
<ol type="1">
<li>Refresh sudo access to avoid multiple password prompts.</li>
<li>Download the system keyring for the repository.</li>
<li>Add the signed entry to APT sources and configure the APT client to use the Intel repository.</li>
<li>Update the list of available packages.</li>
<li>Install the toolkit.</li>
</ol>
</section>
<section id="update-the-bash-run-commands-file" class="level2">
<h2 class="anchored" data-anchor-id="update-the-bash-run-commands-file">Update the Bash Run Commands File</h2>
<p>We need to add the following lines to the end of the bash run commands file (<code>.bashrc</code>) for Intel’s extension to use the oneAPI toolkit:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ONEAPI_ROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/opt/intel/oneapi</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DPCPPROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ONEAPI_ROOT}</span>/compiler/latest</span>
<span id="cb20-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MKLROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ONEAPI_ROOT}</span>/mkl/latest</span>
<span id="cb20-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">IPEX_XPU_ONEDNN_LAYOUT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb20-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ONEAPI_ROOT}</span>/setvars.sh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/null</span></code></pre></div>
<p>The above lines perform the following steps:</p>
<ol type="1">
<li>Add the installation location for the oneAPI toolkit as an environment variable.</li>
<li>Add the installation location for the DPC++ Compiler as an environment variable.</li>
<li>Add the installation for the Math Kernel Library as an environment variable.</li>
<li>Set the oneDNN memory layout to improve training speed.</li>
<li>Initialize the oneAPI environment.</li>
</ol>
<p>You can run the following commands to add the above lines to the <code>.bashrc</code> file and apply the changes to the current shell:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\nexport ONEAPI_ROOT=/opt/intel/oneapi\nexport DPCPPROOT=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{ONEAPI_ROOT}/compiler/latest\nexport MKLROOT=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{ONEAPI_ROOT}/mkl/latest\nexport IPEX_XPU_ONEDNN_LAYOUT=1\nsource </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{ONEAPI_ROOT}/setvars.sh &gt; /dev/null"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.bashrc <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-2">source ~/.bashrc</span></code></pre></div>
</section>
<section id="set-up-a-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-a-python-environment">Set Up a Python Environment</h2>
<p>Now, we can create a Python environment to run the training code. We’ll install a patched version of PyTorch needed for Intel’s extension, the extension itself, and the other dependencies for the training code.</p>
<section id="install-mamba-package-manager" class="level3">
<h3 class="anchored" data-anchor-id="install-mamba-package-manager">Install Mamba Package Manager</h3>
<p>We’ll use the <a href="https://mamba.readthedocs.io/en/latest/">Mamba</a> package manager to create the Python environment. You can learn more about it in my <a href="https://christianjmills.com/posts/mamba-getting-started-tutorial-windows/">getting started</a> tutorial.</p>
<p>The following bash commands will download the latest release, install it, and relaunch the current bash shell to apply the relevant changes:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.sh"</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> Mambaforge-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>.sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span></span>
<span id="cb22-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/mambaforge/bin/mamba</span> init</span>
<span id="cb22-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span></span></code></pre></div>
</section>
<section id="create-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="create-a-python-environment">Create a Python Environment</h3>
<p>Next, we’ll create a Python environment and activate it. The current version of the extension supports Python 3.11, so we’ll use that.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-arc python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-arc</span></code></pre></div>
</section>
<section id="install-pytorch-and-intels-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="install-pytorch-and-intels-pytorch-extension">Install PyTorch and Intel’s PyTorch extension</h3>
<p>The following command will install the required versions of PyTorch and torchvision, along with the extension itself:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install torch==2.0.1a0 torchvision==0.15.2a0 intel_extension_for_pytorch==2.0.110+xpu <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://developer.intel.com/ipex-whl-stable-xpu</span></code></pre></div>
</section>
<section id="install-additional-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="install-additional-dependencies">Install additional dependencies</h3>
<p>Lastly, we’ll install the other training code dependencies. You can learn about these dependencies (<a href="https://christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/#installing-additional-libraries">here</a>).</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb25-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install datasets jupyter matplotlib pandas pillow timm torcheval torchtnt tqdm</span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install utility packages</span></span>
<span id="cb25-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install cjm_pandas_utils cjm_pil_utils cjm_pytorch_utils</span></code></pre></div>
</section>
</section>
<section id="modify-pytorch-code" class="level2">
<h2 class="anchored" data-anchor-id="modify-pytorch-code">Modify PyTorch Code</h2>
<p>It’s finally time to train a model. The Jupyter Notebooks with the original and modified training code are available on GitHub at the links below.</p>
<ul>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training.ipynb">pytorch-timm-image-classifier-training.ipynb</a></li>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/intel-arc-pytorch-timm-image-classifier-training.ipynb">intel-arc-pytorch-timm-image-classifier-training.ipynb</a></li>
</ul>
<p>You can also download the notebooks to the current directory by running the following commands:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://raw.githubusercontent.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/main/notebooks/pytorch-timm-image-classifier-training.ipynb <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb26-2">wget https://raw.githubusercontent.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/main/notebooks/intel-arc-pytorch-timm-image-classifier-training.ipynb</span></code></pre></div>
<p>Once downloaded, run the following command to launch the Jupyter Notebook Environment:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<section id="import-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="import-pytorch-extension">Import PyTorch Extension</h3>
<p>We import Intel’s PyTorch extension with the following code:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb28-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> intel_extension_for_pytorch as ipex</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PyTorch Version: {torch.__version__}'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb28-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Intel PyTorch Extension Version: {ipex.__version__}'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Note that we need to import PyTorch before the extension. Also, if you get the following user warning, don’t worry. It’s normal.</p>
<pre class="text"><code>UserWarning: Failed to load image Python extension: 
  warn(f"Failed to load image Python extension: {e}")</code></pre>
<hr>
</section>
<section id="update-pytorch-imports" class="level3">
<h3 class="anchored" data-anchor-id="update-pytorch-imports">Update PyTorch Imports</h3>
<p>We don’t want to re-import <code>torch</code> after the extension, so we’ll remove that line from the <code>Import PyTorch dependencies</code> section.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb30-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb30-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb30-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb30-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb30-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb30-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb30-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb30-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb31-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb31-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb31-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb31-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb31-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb31-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb31-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb31-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="verify-arc-gpu-availability" class="level3">
<h3 class="anchored" data-anchor-id="verify-arc-gpu-availability">Verify Arc GPU Availability</h3>
<p>We can double-check that the extension can use the Arc GPU by getting the properties of the available <code>xpu</code> devices.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_public_properties(obj):</span>
<span id="cb32-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb32-3">        prop: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(obj, prop)</span>
<span id="cb32-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(obj)</span>
<span id="cb32-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> prop.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">callable</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(obj, prop))</span>
<span id="cb32-6">    }</span>
<span id="cb32-7"></span>
<span id="cb32-8">xpu_device_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.xpu.device_count()</span>
<span id="cb32-9">dict_properties_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [get_public_properties(torch.xpu.get_device_properties(i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(xpu_device_count)]</span>
<span id="cb32-10">pd.DataFrame(dict_properties_list)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
dev_type
</th>
<th>
max_compute_units
</th>
<th>
name
</th>
<th>
platform_name
</th>
<th>
support_fp64
</th>
<th>
total_memory
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
gpu
</td>
<td>
512
</td>
<td>
Intel(R) Arc(TM) A770 Graphics
</td>
<td>
Intel(R) Level-Zero
</td>
<td>
False
</td>
<td>
16225243136
</td>
</tr>
<tr>
<th>
1
</th>
<td>
gpu
</td>
<td>
32
</td>
<td>
Intel(R) UHD Graphics 750
</td>
<td>
Intel(R) Level-Zero
</td>
<td>
False
</td>
<td>
26589642752
</td>
</tr>
</tbody>

</table>
</div>
<p>In this case, the A770 is the default <code>xpu</code> device, and the integrated graphics on the CPU is available as the second device. The <code>total_memory</code> value for the integrated graphics is higher because it uses system memory.</p>
</section>
<section id="update-the-device-name" class="level3">
<h3 class="anchored" data-anchor-id="update-the-device-name">Update the Device Name</h3>
<p>Next, we’ll manually set the device name to <code>xpu</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xpu'</span></span>
<span id="cb33-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb33-3">device, dtype</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb34-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb34-3">device, dtype</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="optimize-the-model-and-optimizer-objects" class="level3">
<h3 class="anchored" data-anchor-id="optimize-the-model-and-optimizer-objects">Optimize the <code>model</code> and <code>optimizer</code> Objects</h3>
<p>Before we run the <code>train_loop</code> function, we’ll use Intel’s PyTorch extension to apply optimizations to the model and optimizer objects. We’ll also cast the model to the <code>bfloat16</code> data type, so we can train using mixed precision. Intel’s PyTorch extension only supports the <code>bloat16</code> data type for mixed-precision training currently.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb35-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb35-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb35-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb35-9"></span>
<span id="cb35-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimize the model and optimizer objects</span></span>
<span id="cb35-11">model, optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipex.optimize(model, optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16)</span>
<span id="cb35-12"></span>
<span id="cb35-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb35-14">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb35-15">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb35-16">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb35-17"></span>
<span id="cb35-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance metric: Multiclass Accuracy</span></span>
<span id="cb35-19">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MulticlassAccuracy()</span>
<span id="cb35-20"></span>
<span id="cb35-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for CUDA-capable GPU availability</span></span>
<span id="cb35-22">use_grad_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.is_available()</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb36-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb36-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb36-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb36-9"></span>
<span id="cb36-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb36-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb36-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb36-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb36-14"></span>
<span id="cb36-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance metric: Multiclass Accuracy</span></span>
<span id="cb36-16">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MulticlassAccuracy()</span>
<span id="cb36-17"></span>
<span id="cb36-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for CUDA-capable GPU availability</span></span>
<span id="cb36-19">use_grad_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.is_available()</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>That’s it for the required changes to the training code. We can now run the <code>train_loop</code> function. With the A770 and the dataset on an SSD, training takes between twelve and twelve and a half minutes to complete.</p>
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/images/arc-a770-pytorch-training-session-ubuntu.png" class="img-fluid"></p>
</section>
<section id="update-the-inference-code" class="level3">
<h3 class="anchored" data-anchor-id="update-the-inference-code">Update the Inference Code</h3>
<p>Since we cast the model to <code>bloat16</code>, we must ensure input data use the same type. We can update the inference code using the auto-cast context manager as shown below:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb37-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb37-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.xpu.amp.autocast(enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16, cache_enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb37-4">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb38-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb38-3">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we set up Intel’s PyTorch extension on Ubuntu and trained an image classification model using an Arc GPU. The exact setup steps may change with new versions, so check the <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/latest/tutorials/installation.html">documentation</a> for the latest version to see if there are any changes. I’ll try to keep this tutorial updated with any significant changes to the process.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>image-classification</category>
  <category>arc-gpu</category>
  <category>getting-started</category>
  <guid>christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Exporting timm Image Classifiers from Pytorch to ONNX</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/onnx-export/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Exporting the Model to ONNX</li>
<li>Performing Inference with ONNX Runtime</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../"><strong>Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</strong></a>: Learn how to fine-tune image classification models with PyTorch and the timm library by creating a hand gesture recognizer in this easy-to-follow guide for beginners.</li>
<li><a href="./"><strong>Exporting timm Image Classifiers from Pytorch to ONNX</strong></a><strong>:</strong> Learn how to export timm image classification models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on fine-tuning image classifiers with PyTorch and the timm library! <a href="../">Previously</a>, we demonstrated how to fine-tune a ResNet18-D model from the timm library in PyTorch by creating a hand gesture classifier. This tutorial builds on that by showing how to export the model to <a href="https://onnx.ai/">ONNX</a> and perform inference using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a>.</p>
<p>ONNX (Open Neural Network Exchange) is an open format to represent machine learning models and make them portable across various platforms. ONNX Runtime is a cross-platform inference accelerator that provides interfaces to hardware-specific libraries. By exporting our model to ONNX, we can deploy it to multiple devices and leverage hardware acceleration for faster inference.</p>
<p>Additionally, we’ll wrap the PyTorch model with the required preprocessing and post-processing steps to include them in the ONNX model. By the end of this tutorial, you will have an ONNX version of our ResNet18-D model that you can deploy to servers and edge devices using ONNX Runtime.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../">Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</a></li>
</ul>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-onnx-export.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-onnx-export.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>We’ll need to add a few new libraries to our <a href="../#setting-up-your-python-environment">Python environment</a> for working with ONNX models.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnx</code></td>
<td>This package provides a Python API for working with ONNX models. (<a href="https://pypi.org/project/onnx/">link</a>)</td>
</tr>
<tr class="even">
<td><code>onnxruntime</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://onnxruntime.ai/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>onnx-simplifier</code></td>
<td>This package helps simplify ONNX models. (<a href="https://pypi.org/project/onnx-simplifier/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX packages</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install onnx onnxruntime onnx-simplifier</span></code></pre></div>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment updated, we can dive into the code. First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, get_source_code</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb2-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import timm library</span></span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb2-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb2-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the onnx module</span></span>
<span id="cb2-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxsim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> simplify <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the method to simplify ONNX models</span></span>
<span id="cb2-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we’ll set the folder locations for our project and training session with the PyTorch checkpoint.</p>
<section id="set-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="set-the-directory-paths">Set the Directory Paths</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb3-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-timm-image-classifier"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb3-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb3-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb3-11">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2023-08-12_15-21-16"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">pd.Series({</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb3-16">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_2c96e">
<thead>
</thead>
<tbody>
<tr>
<th id="T_2c96e_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_2c96e_row0_col0" class="data row0 col0">
pytorch-timm-image-classifier
</td>
</tr>
<tr>
<th id="T_2c96e_level0_row1" class="row_heading level0 row1">
Checkpoint Directory:
</th>
<td id="T_2c96e_row1_col0" class="data row1 col0">
pytorch-timm-image-classifier/2023-08-12_15-21-16
</td>
</tr>
</tbody>

</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the class labels and initialize a ResNet18-D model with the saved checkpoint.</p>
<section id="load-the-class-labels" class="level3">
<h3 class="anchored" data-anchor-id="load-the-class-labels">Load the Class Labels</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The class labels path</span></span>
<span id="cb4-2">class_labels_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*classes.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON class labels data</span></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(class_labels_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-6">        class_labels_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of classes</span></span>
<span id="cb4-9">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_labels_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classes'</span>]</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the list of classes</span></span>
<span id="cb4-12">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="load-the-model-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model-checkpoint">Load the Model Checkpoint</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb5-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.pth'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model checkpoint onto the CPU</span></span>
<span id="cb5-5">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(checkpoint_path, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</section>
<section id="load-the-finetuned-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-finetuned-model">Load the Finetuned Model</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the model configuration</span></span>
<span id="cb6-2">model_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_path.stem</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a model with the number of output classes equal to the number of class names</span></span>
<span id="cb6-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timm.create_model(model_type, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model with the checkpoint parameters and buffers</span></span>
<span id="cb6-8">model.load_state_dict(model_checkpoint)</span></code></pre></div>
<pre class="text"><code>&lt;All keys matched successfully&gt;</code></pre>
</section>
<section id="get-the-normalization-stats" class="level3">
<h3 class="anchored" data-anchor-id="get-the-normalization-stats">Get the Normalization Stats</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the resnet module</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resnet</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the default configuration of the chosen model</span></span>
<span id="cb8-5">model_cfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet.default_cfgs[model_type].default.to_dict()</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve normalization statistics (mean and std) specific to the pretrained model</span></span>
<span id="cb8-8">mean, std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_cfg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>], model_cfg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>]</span>
<span id="cb8-9">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mean, std)</span>
<span id="cb8-10">norm_stats</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
</section>
</section>
<section id="exporting-the-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="exporting-the-model-to-onnx">Exporting the Model to ONNX</h2>
<p>Before exporting the model, we will wrap it with the preprocessing and post-processing steps. These steps will be included in the ONNX model, reducing the code we need to write when deploying the model to other platforms.</p>
<section id="prepare-the-model-for-inference" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-model-for-inference">Prepare the Model for Inference</h3>
<p>Whenever we make predictions with the model, we must normalize the input data and pass the model output through a <a href="https://pytorch.org/docs/stable/generated/torch.nn.Softmax.html">Softmax</a> function. We can define a wrapper class that automatically performs these steps.</p>
<p>Additionally, we can include options to scale pixel data from the range <code>[0,255]</code> to <code>[0,1]</code> and set the model to expect input tensors in channels-last format. These settings can be helpful when deploying to platforms where tensor operations are less convenient.</p>
<section id="define-model-export-wrapper" class="level4">
<h4 class="anchored" data-anchor-id="define-model-export-wrapper">Define model export wrapper</h4>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> InferenceWrapper(nn.Module):</span>
<span id="cb10-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, normalize_mean, normalize_std, scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb10-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb10-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normalize_mean"</span>, normalize_mean)</span>
<span id="cb10-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normalize_std"</span>, normalize_std)</span>
<span id="cb10-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scale_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale_inp</span>
<span id="cb10-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.channels_last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> channels_last</span>
<span id="cb10-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.softmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> preprocess_input(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb10-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scale_inp:</span>
<span id="cb10-13">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb10-14"></span>
<span id="cb10-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.channels_last:</span>
<span id="cb10-16">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-17"></span>
<span id="cb10-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize_std</span>
<span id="cb10-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span>
<span id="cb10-20"></span>
<span id="cb10-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb10-22">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preprocess_input(x)</span>
<span id="cb10-23">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(x)</span>
<span id="cb10-24">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.softmax(x)</span>
<span id="cb10-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
</section>
<section id="wrap-model-with-preprocessing-and-post-processing-steps" class="level4">
<h4 class="anchored" data-anchor-id="wrap-model-with-preprocessing-and-post-processing-steps">Wrap model with preprocessing and post-processing steps</h4>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Default Settings</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Inverse</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the normalization mean and standard deviation</span></span>
<span id="cb11-2">mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-3">std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb11-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap the model with preprocessing and post-processing steps</span></span>
<span id="cb11-9">wrapped_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InferenceWrapper(model, </span>
<span id="cb11-10">                                 mean_tensor, </span>
<span id="cb11-11">                                 std_tensor, </span>
<span id="cb11-12">                                 scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale input values from the rang [0,255] to [0,1]</span></span>
<span id="cb11-13">                                 channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have the model expect input in channels-last format</span></span>
<span id="cb11-14">                                )</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the normalization mean and standard deviation</span></span>
<span id="cb12-2">mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-3">std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb12-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap the model with preprocessing and post-processing steps</span></span>
<span id="cb12-9">wrapped_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InferenceWrapper(model, </span>
<span id="cb12-10">                                 mean_tensor, </span>
<span id="cb12-11">                                 std_tensor, </span>
<span id="cb12-12">                                 scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale input values from the rang [0,255] to [0,1]</span></span>
<span id="cb12-13">                                 channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have the model expect input in channels-last format</span></span>
<span id="cb12-14">                                )</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Settings for Unity's Barracuda Inference Library:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Settings for Unity’s Barracuda Inference Library:
</div>
</div>
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-2">channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
</div>
</section>
</section>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<p>We need a sample input tensor for the export process.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Channels-Last</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="export-the-model-to-onnx" class="level3">
<h3 class="anchored" data-anchor-id="export-the-model-to-onnx">Export the Model to ONNX</h3>
<p>We can export the model using the <a href="https://pytorch.org/docs/stable/onnx.html#torch.onnx.export"><code>torch.onnx.export()</code></a> function. This function performs a single pass through the model and records all operations to generate a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript graph</a>. It then exports this graph to ONNX by decomposing each graph node (which contains a PyTorch operator) into a series of ONNX operators.</p>
<p>If we want the ONNX model to support different input sizes, we must set the width and height input axes as dynamic. However, attempting to do this with the ResNet18-D model causes the export function to throw an error. Therefore, we’ll need to modify the exported ONNX model directly.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Channels-Last</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a filename for the ONNX model</span></span>
<span id="cb16-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_labels_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-classes'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb16-5">torch.onnx.export(wrapped_model.cpu(),</span>
<span id="cb16-6">                  input_tensor.cpu(),</span>
<span id="cb16-7">                  onnx_file_path,</span>
<span id="cb16-8">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb16-9">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb16-10">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb16-11">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>],</span>
<span id="cb16-12">                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dynamic_axes={'input': {2 : 'height', 3 : 'width'}}</span></span>
<span id="cb16-13">                 )</span></code></pre></div>
<pre class="text"><code>============= Diagnostic Run torch.onnx.export version 2.0.1+cu118 =============
verbose: False, log level: Level.ERROR
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================</code></pre>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a filename for the ONNX model</span></span>
<span id="cb18-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_labels_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-classes'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb18-5">torch.onnx.export(wrapped_model.cpu(),</span>
<span id="cb18-6">                  input_tensor.cpu(),</span>
<span id="cb18-7">                  onnx_file_path,</span>
<span id="cb18-8">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-9">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb18-10">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb18-11">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>],</span>
<span id="cb18-12">                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dynamic_axes={'input': {1 : 'height', 2 : 'width'}}</span></span>
<span id="cb18-13">                 )</span></code></pre></div>
<pre class="text"><code>============= Diagnostic Run torch.onnx.export version 2.0.1+cu118 =============
verbose: False, log level: Level.ERROR
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================</code></pre>
</div>
</div>
</div>
</section>
<section id="enable-dynamic-input-dimensions" class="level3">
<h3 class="anchored" data-anchor-id="enable-dynamic-input-dimensions">Enable Dynamic Input Dimensions</h3>
<p>We can enable dynamic input dimensions for the ONNX model by changing the appropriate values in the input shape to <code>-1</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Channels-Last</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the ONNX model from the onnx_file_name</span></span>
<span id="cb20-2">onnx_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx.load(onnx_file_path)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first input node for the ONNX model</span></span>
<span id="cb20-5">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx_model.graph.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the height and width dimensions to dynamic values (using -1)</span></span>
<span id="cb20-8">height_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_tensor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.tensor_type.shape.dim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb20-9">height_dim.dim_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-10"></span>
<span id="cb20-11">width_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_tensor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.tensor_type.shape.dim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb20-12">width_dim.dim_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the ONNX model from the onnx_file_name</span></span>
<span id="cb21-2">onnx_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx.load(onnx_file_path)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume the first input needs its dimensions modified</span></span>
<span id="cb21-5">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx_model.graph.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the height and width dimensions to dynamic values (using -1)</span></span>
<span id="cb21-8">height_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_tensor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.tensor_type.shape.dim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-9">height_dim.dim_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-10"></span>
<span id="cb21-11">width_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_tensor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.tensor_type.shape.dim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb21-12">width_dim.dim_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>We then save the updated ONNX model back to disk for later. Before we do so, we’ll perform one more modification.</p>
</section>
<section id="simplify-the-onnx-model" class="level3">
<h3 class="anchored" data-anchor-id="simplify-the-onnx-model">Simplify the ONNX Model</h3>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/"><code>onnx-simplifier</code></a> package to tidy up the exported model.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplify the model</span></span>
<span id="cb22-2">model_simp, check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simplify(onnx_model)</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the simplified model to the onnx_file_name</span></span>
<span id="cb22-5">onnx.save(model_simp, onnx_file_path)</span></code></pre></div>
</section>
</section>
<section id="performing-inference-with-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-onnx-runtime">Performing Inference with ONNX Runtime</h2>
<p>Now that we have our ONNX model, it’s time to test it with ONNX Runtime.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<p>We interact with models in ONNX Runtime through an <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#load-and-run-a-model"><code>InferenceSession</code></a> object. Here, we can specify which Execution Providers to use for inference and other configuration information. <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> are the interfaces for hardware-specific inference engines like <a href="https://onnxruntime.ai/docs/execution-providers/TensorRT-ExecutionProvider.html">TensorRT</a> for NVIDIA and <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html">OpenVINO</a> for Intel. By default, the <code>InferenceSession</code> uses the generic <code>CPUExecutionProvider</code>.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb23-2">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path)</span></code></pre></div>
<p>With our inference session initialized, we can select an image to test our ONNX model.</p>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>Let’s use the same test image and input size from the <a href="../#testing-the-model-on-new-data">previous tutorial</a> to compare the results with the PyTorch model.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb24-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb24-3"></span>
<span id="cb24-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb24-5"></span>
<span id="cb24-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb24-7">display(test_img)</span>
<span id="cb24-8"></span>
<span id="cb24-9">target_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rock"</span></span>
<span id="cb24-10"></span>
<span id="cb24-11">pd.Series({</span>
<span id="cb24-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb24-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target Class:"</span>: target_cls</span>
<span id="cb24-14">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/onnx-export/images/output_41_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_47ce0">
<thead>
</thead>
<tbody>
<tr>
<th id="T_47ce0_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_47ce0_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
<tr>
<th id="T_47ce0_level0_row1" class="row_heading level0 row1">
Target Class:
</th>
<td id="T_47ce0_row1_col0" class="data row1 col0">
rock
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set test image size</span></span>
<span id="cb25-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize image without cropping to multiple of the max stride</span></span>
<span id="cb25-5">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img.copy(), target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz)</span>
<span id="cb25-6"></span>
<span id="cb25-7">display(input_img)</span>
<span id="cb25-8"></span>
<span id="cb25-9">pd.Series({</span>
<span id="cb25-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb25-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/onnx-export/images/output_43_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_3ba23">
<thead>
</thead>
<tbody>
<tr>
<th id="T_3ba23_level0_row0" class="row_heading level0 row0">
Input Image Size:
</th>
<td id="T_3ba23_row0_col0" class="data row0 col0">
(288, 416)
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-the-input-tensor-1" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor-1">Prepare the Input Tensor</h3>
<p>When we convert the PIL input image to a NumPy array, we need to reorder the array values to channels-first format, scale the values from <code>[0,255]</code> to <code>[0,1]</code>, and add a batch dimension. When we enable the <code>scale_inp</code> and <code>channels_last</code> options, we only need to add a batch dimension.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">Scaled &amp; Channels-Last</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the existing input image to NumPy format</span></span>
<span id="cb26-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the existing input image to NumPy format</span></span>
<span id="cb27-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<p>Now, we can finally perform inference with our ONNX model.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb28-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the highest confidence score</span></span>
<span id="cb28-5">confidence_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class index with the highest confidence score and convert it to the class name</span></span>
<span id="cb28-8">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_names[outputs.argmax()]</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb28-11">display(test_img)</span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the prediction data in a Pandas Series for easy formatting</span></span>
<span id="cb28-14">pd.Series({</span>
<span id="cb28-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Size:"</span>: input_img.size,</span>
<span id="cb28-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target Class:"</span>: target_cls,</span>
<span id="cb28-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class:"</span>: pred_class,</span>
<span id="cb28-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Score:"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>confidence_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb28-19">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/onnx-export/images/output_47_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_effd1">
<thead>
</thead>
<tbody>
<tr>
<th id="T_effd1_level0_row0" class="row_heading level0 row0">
Input Size:
</th>
<td id="T_effd1_row0_col0" class="data row0 col0">
(288, 416)
</td>
</tr>
<tr>
<th id="T_effd1_level0_row1" class="row_heading level0 row1">
Target Class:
</th>
<td id="T_effd1_row1_col0" class="data row1 col0">
rock
</td>
</tr>
<tr>
<th id="T_effd1_level0_row2" class="row_heading level0 row2">
Predicted Class:
</th>
<td id="T_effd1_row2_col0" class="data row2 col0">
rock
</td>
</tr>
<tr>
<th id="T_effd1_level0_row3" class="row_heading level0 row3">
Confidence Score:
</th>
<td id="T_effd1_row3_col0" class="data row3 col0">
79.93%
</td>
</tr>
</tbody>

</table>
</div>
<p>The model predictions should be virtually identical to the PyTorch model, but the confidence scores can sometimes vary slightly.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the ONNX model from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial! We previously fine-tuned a model from the timm library in PyTorch for hand gesture classification and now exported that model to ONNX. With this, we can streamline our deployment process and leverage platform-specific hardware optimizations through ONNX Runtime.</p>
<p>As you move forward, consider exploring more about ONNX and its ecosystem. Check out the available <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> that provide flexible interfaces to different hardware acceleration libraries.</p>
<p>If you found this guide helpful, consider sharing it with others.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>onnx</category>
  <category>image-classification</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/onnx-export/index.html</guid>
  <pubDate>Wed, 23 Aug 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Exporting YOLOX Models from PyTorch to ONNX</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Exporting the Model to ONNX</li>
<li>Performing Inference with ONNX Runtime</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../"><strong>Training YOLOX Models for Real-Time Object Detection in Pytorch</strong></a>: Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
<li><a href="./"><strong>Exporting YOLOX Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export YOLOX models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on training YOLOX models for real-time applications! <a href="../">Previously</a>, we demonstrated how to fine-tune a YOLOX model in PyTorch by creating a hand gesture detector. This tutorial builds on that by showing how to export the model to <a href="https://onnx.ai/">ONNX</a> and perform inference using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a>.</p>
<p>ONNX (Open Neural Network Exchange) is an open format to represent machine learning models and make them portable across various platforms. ONNX Runtime is a cross-platform inference accelerator that provides interfaces to hardware-specific libraries. By exporting our model to ONNX, we can deploy it to multiple devices and leverage hardware acceleration for faster inference. When it comes to real-time applications, even minor speedups have a noticeable impact.</p>
<p>Additionally, we’ll implement the functionality to handle post-processing and draw bounding boxes without relying on PyTorch as a dependency. By the end of this tutorial, you will have an ONNX version of our YOLOX model that you can deploy to servers and edge devices using ONNX Runtime.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../">Training YOLOX Models for Real-Time Object Detection in Pytorch</a></li>
</ul>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-onnx-export.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-onnx-export-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>We’ll need to add a few new libraries to our <a href="../#setting-up-your-python-environment">Python environment</a> for working with ONNX models.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnx</code></td>
<td>This package provides a Python API for working with ONNX models. (<a href="https://pypi.org/project/onnx/">link</a>)</td>
</tr>
<tr class="even">
<td><code>onnxruntime</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://onnxruntime.ai/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>onnx-simplifier</code></td>
<td>This package helps simplify ONNX models. (<a href="https://pypi.org/project/onnx-simplifier/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX packages</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install onnx onnxruntime onnx-simplifier</span></code></pre></div>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment updated, we can dive into the code. First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import YOLOX package</span></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> build_model</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.inference <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> YOLOXInferenceWrapper</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb2-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb2-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb2-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw, ImageFont</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb2-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb2-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the onnx module</span></span>
<span id="cb2-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxsim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> simplify <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the method to simplify ONNX models</span></span>
<span id="cb2-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we’ll set the folder locations for our project and training session with the PyTorch checkpoint. Let’s also ensure we have a font file for annotating images.</p>
<section id="set-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="set-the-directory-paths">Set the Directory Paths</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb3-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-yolox-object-detector"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb3-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb3-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb3-11">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2023-08-17_16-14-43"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">pd.Series({</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb3-16">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_3c82a">
<thead>
</thead>
<tbody>
<tr>
<th id="T_3c82a_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_3c82a_row0_col0" class="data row0 col0">
pytorch-yolox-object-detector
</td>
</tr>
<tr>
<th id="T_3c82a_level0_row1" class="row_heading level0 row1">
Checkpoint Directory:
</th>
<td id="T_3c82a_row1_col0" class="data row1 col0">
pytorch-yolox-object-detector/2023-08-17_16-14-43
</td>
</tr>
</tbody>

</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="I made some model checkpoints available on Hugging Face Hub in the repository linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
I made some model checkpoints available on Hugging Face Hub in the repository linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://huggingface.co/cj-mills/yolox-hagrid-pytorch/tree/main">cj-mills/yolox-hagrid-pytorch</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="download-a-font-file" class="level3">
<h3 class="anchored" data-anchor-id="download-a-font-file">Download a Font File</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb4-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb4-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now we can load the colormap and normalization stats used during training and initialize a YOLOX model with the saved checkpoint.</p>
<section id="load-the-colormap" class="level3">
<h3 class="anchored" data-anchor-id="load-the-colormap">Load the Colormap</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The colormap path</span></span>
<span id="cb5-2">colormap_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*colormap.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON colormap data</span></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(colormap_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-6">        colormap_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the JSON data to a dictionary        </span></span>
<span id="cb5-9">colormap_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]}</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the class names from the colormap</span></span>
<span id="cb5-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(colormap_dict.keys())</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the colormap in integer format</span></span>
<span id="cb5-15">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_dict.values()]</span></code></pre></div>
</section>
<section id="load-the-normalization-statistics" class="level3">
<h3 class="anchored" data-anchor-id="load-the-normalization-statistics">Load the Normalization Statistics</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The normalization stats path</span></span>
<span id="cb6-2">norm_stats_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm_stats.json'</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the normalization stats from the JSON file</span></span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(norm_stats_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb6-6">    norm_stats_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(f)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the dictionary to a tuple</span></span>
<span id="cb6-9">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (norm_stats_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], norm_stats_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std_dev"</span>])</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the mean and standard deviation</span></span>
<span id="cb6-12">pd.DataFrame(norm_stats)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0.5
</td>
<td>
0.5
</td>
<td>
0.5
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1.0
</td>
<td>
1.0
</td>
<td>
1.0
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="load-the-model-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model-checkpoint">Load the Model Checkpoint</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb7-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.pth'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model checkpoint onto the CPU</span></span>
<span id="cb7-5">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(checkpoint_path, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</section>
<section id="load-the-trained-yolox-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-trained-yolox-model">Load the Trained YOLOX Model</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the YOLOX model configuration</span></span>
<span id="cb8-2">model_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_path.stem</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a YOLOX model with the number of output classes equal to the number of class names</span></span>
<span id="cb8-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_model(model_type, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get stride values for processing output</span></span>
<span id="cb8-8">strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.bbox_head.strides</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model with the checkpoint parameters and buffers</span></span>
<span id="cb8-11">model.load_state_dict(model_checkpoint)</span></code></pre></div>
<pre class="text"><code>&lt;All keys matched successfully&gt;</code></pre>
</section>
</section>
<section id="exporting-the-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="exporting-the-model-to-onnx">Exporting the Model to ONNX</h2>
<p>Before exporting the model, we’ll wrap it with the preprocessing and post-processing steps as we did <a href="../#preparing-the-model-for-inference">previously</a>. These steps will be included in the ONNX model, reducing the code we need to write when deploying the model to other platforms.</p>
<section id="prepare-the-model-for-inference" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-model-for-inference">Prepare the Model for Inference</h3>
<p>The <a href="https://cj-mills.github.io/cjm-yolox-pytorch/inference.html#yoloxinferencewrapper"><code>YOLOXInferenceWrapper</code></a> class has some optional settings we did not explore in the previous tutorial. The <code>scale_inp</code> setting will scale pixel data from the range <code>[0,255]</code> to<code>[0,1]</code>, and the <code>channels_last</code> setting sets the model to expect input tensors in channels-last format. These settings can be helpful when deploying to platforms where tensor operations are less convenient.</p>
<p>Additionally, we can turn off the post-processing steps if we plan to deploy the model using tools that do not support those operations, like the <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> inference library for the <a href="https://unity.com/">Unity</a> game engine.</p>
<p>The post-processing steps require the width and height of the input tensor. The indices for accessing those values depend on the format for the input tensor, so we’ll store the <a href="https://docs.python.org/3/library/functions.html#slice"><code>slice</code></a> to access them for later.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Default Settings</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Inverse</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the normalization stats to tensors</span></span>
<span id="cb10-2">mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-3">std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb10-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap the model with preprocessing and post-processing steps</span></span>
<span id="cb10-9">wrapped_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXInferenceWrapper(model, </span>
<span id="cb10-10">                                      mean_tensor, </span>
<span id="cb10-11">                                      std_tensor, </span>
<span id="cb10-12">                                      scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale input values from the rang [0,255] to [0,1]</span></span>
<span id="cb10-13">                                      channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have the model expect input in channels-last format</span></span>
<span id="cb10-14">                                      run_box_and_prob_calculation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable or disable post-processing steps</span></span>
<span id="cb10-15">                                     )</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the slice object for extracting the input dimensions</span></span>
<span id="cb10-18">input_dim_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrapped_model.input_dim_slice</span>
<span id="cb10-19">input_dim_slice</span></code></pre></div>
<pre class="text"><code>slice(2, 4, None)</code></pre>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the normalization stats to tensors</span></span>
<span id="cb12-2">mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-3">std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb12-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap the model with preprocessing and post-processing steps</span></span>
<span id="cb12-9">wrapped_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXInferenceWrapper(model, </span>
<span id="cb12-10">                                      mean_tensor, </span>
<span id="cb12-11">                                      std_tensor, </span>
<span id="cb12-12">                                      scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale input values from the rang [0,255] to [0,1]</span></span>
<span id="cb12-13">                                      channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have the model expect input in channels-first format</span></span>
<span id="cb12-14">                                      run_box_and_prob_calculation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable or disable post-processing steps</span></span>
<span id="cb12-15">                                     )</span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the slice object for extracting the input dimensions</span></span>
<span id="cb12-18">input_dim_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrapped_model.input_dim_slice</span>
<span id="cb12-19">input_dim_slice</span></code></pre></div>
<pre class="text"><code>slice(1, 3, None)</code></pre>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Settings for Unity's Barracuda Inference Library:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Settings for Unity’s Barracuda Inference Library:
</div>
</div>
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">scale_inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-2">channels_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-3">run_box_and_prob_calculation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
</div>
</section>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<p>We need a sample input tensor for the export process.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Channels-Last</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="export-the-model-to-onnx" class="level3">
<h3 class="anchored" data-anchor-id="export-the-model-to-onnx">Export the Model to ONNX</h3>
<p>We can export the model using PyTorch’s <a href="https://pytorch.org/docs/stable/onnx.html#torch.onnx.export"><code>torch.onnx.export()</code></a> function. This function performs a single pass through the model and records all operations to generate a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript graph</a>. It then exports this graph to ONNX by decomposing each graph node (which contains a PyTorch operator) into a series of ONNX operators.</p>
<p>If we want the ONNX model to support different input sizes, we must set the width and height input axes as dynamic. These axes again depend on the input format, so we’ll use the slice object we saved earlier.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a filename for the ONNX model</span></span>
<span id="cb17-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>colormap_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-colormap'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb17-5">torch.onnx.export(wrapped_model.cpu(),</span>
<span id="cb17-6">                  input_tensor.cpu(),</span>
<span id="cb17-7">                  onnx_file_path,</span>
<span id="cb17-8">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb17-9">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb17-10">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb17-11">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>],</span>
<span id="cb17-12">                  dynamic_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: {input_dim_slice.start : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, input_dim_slice.stop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>}}</span>
<span id="cb17-13">                 )</span></code></pre></div>
<pre class="text"><code>============= Diagnostic Run torch.onnx.export version 2.0.1+cu118 =============
verbose: False, log level: Level.ERROR
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The export function will return a <code>TracerWarning</code> when we export the model with the post-processing steps enabled. The post-processing steps involve iterating over the list of stride values for the YOLOX model, and the exported ONNX model will not support dynamic sizes for that list. We can ignore this warning as the stride values will not change during inference.</p>
</div>
</div>
</section>
<section id="simplify-the-onnx-model" class="level3">
<h3 class="anchored" data-anchor-id="simplify-the-onnx-model">Simplify the ONNX model</h3>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/"><code>onnx-simplifier</code></a> package to tidy up the exported model.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>This step is usually optional but is necessary for the ONNX model to work with the Barracuda inference library.</p>
</div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the ONNX model from the onnx_file_name</span></span>
<span id="cb19-2">onnx_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx.load(onnx_file_path)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplify the model</span></span>
<span id="cb19-5">model_simp, check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simplify(onnx_model)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the simplified model to the onnx_file_name</span></span>
<span id="cb19-8">onnx.save(model_simp, onnx_file_path)</span></code></pre></div>
</section>
</section>
<section id="performing-inference-with-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-onnx-runtime">Performing Inference with ONNX Runtime</h2>
<p>Now that we have our ONNX model, it’s time to test it with ONNX Runtime.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<p>We interact with models in ONNX Runtime through an <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#load-and-run-a-model"><code>InferenceSession</code></a> object. Here we can specify which Execution Providers to use for inference and other configuration information. <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> are the interfaces for hardware-specific inference engines like <a href="https://onnxruntime.ai/docs/execution-providers/TensorRT-ExecutionProvider.html">TensorRT</a> for NVIDIA and <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html">OpenVINO</a> for Intel. By default, the <code>InferenceSession</code> uses the generic <code>CPUExecutionProvider</code>.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb20-2">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path)</span></code></pre></div>
</section>
<section id="define-utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="define-utility-functions">Define Utility Functions</h3>
<p>In the previous tutorial, we used PyTorch to <a href="../#wrap-the-model-with-preprocessing-and-post-processing-steps">process the model output</a>, <a href="../#filtering-model-output">filter the predictions</a>, and <a href="../#annotate-image-using-bounding-box-proposals">annotate images with bounding boxes</a>. Now we will implement that functionality using <a href="https://numpy.org/">NumPy</a> and <a href="https://pillow.readthedocs.io/en/stable/">PIL</a>.</p>
<section id="define-a-function-to-generate-the-output-grids" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-generate-the-output-grids">Define a function to generate the output grids</h4>
<p>The YOLOX model uses information from different parts of its <a href="https://cj-mills.github.io/cjm-yolox-pytorch/model.html#cspdarknet">backbone model</a> to make predictions. In our case, it uses features from three sections, with one early, in the middle, and at the end of the backbone model. This approach helps the YOLOX model detect objects of different sizes in the image.</p>
<p>We use the stride values to scale predictions from these sections back to the input resolution. Here, we can see the difference in results when using a single stride value in isolation with a YOLOX model trained on the <a href="https://cocodataset.org/#home">COCO</a> dataset.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Stride 8</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Stride 16</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false">Stride 32</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/images/stride_8_demo.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/images/stride_16_demo.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/images/stride_32_demo.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<p>The following function generates grids of values using the input dimensions and stride values to scale bounding box predictions to the input resolution.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_output_grids_np(height, width, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>]):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate a numpy array containing grid coordinates and strides for a given height and width.</span></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        height (int): The height of the image.</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        width (int): The width of the image.</span></span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        np.ndarray: A numpy array containing grid coordinates and strides.</span></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-12"></span>
<span id="cb21-13">    all_coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-14"></span>
<span id="cb21-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> stride <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strides:</span>
<span id="cb21-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the grid height and width</span></span>
<span id="cb21-17">        grid_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> stride</span>
<span id="cb21-18">        grid_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> stride</span>
<span id="cb21-19"></span>
<span id="cb21-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate grid coordinates</span></span>
<span id="cb21-21">        g1, g0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.arange(grid_height), np.arange(grid_width), indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb21-22"></span>
<span id="cb21-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an array of strides</span></span>
<span id="cb21-24">        s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.full((grid_height, grid_width), stride)</span>
<span id="cb21-25"></span>
<span id="cb21-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stack the coordinates along with the stride</span></span>
<span id="cb21-27">        coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack((g0.flatten(), g1.flatten(), s.flatten()), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-28"></span>
<span id="cb21-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append to the list</span></span>
<span id="cb21-30">        all_coordinates.append(coordinates)</span>
<span id="cb21-31"></span>
<span id="cb21-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate all arrays in the list along the first dimension</span></span>
<span id="cb21-33">    output_grids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate(all_coordinates, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb21-34"></span>
<span id="cb21-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output_grids</span></code></pre></div>
</section>
<section id="define-a-function-to-calculate-bounding-boxes-and-probabilities" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-calculate-bounding-boxes-and-probabilities">Define a function to calculate bounding boxes and probabilities</h4>
<p>Next, we’ll scale the bounding box predictions and extract the predicted class and corresponding confidence score.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calculate_boxes_and_probs(model_output:np.ndarray, output_grids:np.ndarray) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the bounding boxes and their probabilities.</span></span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    model_output (numpy.ndarray): The output of the model.</span></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    output_grids (numpy.ndarray): The output grids.</span></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    numpy.ndarray: The array containing the bounding box coordinates, class labels, and maximum probabilities.</span></span>
<span id="cb22-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb22-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the bounding box coordinates</span></span>
<span id="cb22-13">    box_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[..., :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> output_grids[..., :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output_grids[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb22-14">    box_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(model_output[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output_grids[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb22-15"></span>
<span id="cb22-16">    x0, y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.squeeze(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.split(box_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> box_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb22-17">    w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.squeeze(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.split(box_sizes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb22-18"></span>
<span id="cb22-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the probabilities for each class</span></span>
<span id="cb22-20">    box_objectness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb22-21">    box_cls_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span>
<span id="cb22-22">    box_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(box_objectness, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> box_cls_scores</span>
<span id="cb22-23"></span>
<span id="cb22-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the maximum probability and corresponding class for each proposal</span></span>
<span id="cb22-25">    max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(box_probs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-26">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(box_probs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-27"></span>
<span id="cb22-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array([x0, y0, w, h, labels, max_probs]).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</section>
<section id="define-a-function-to-calculate-the-intersection-over-union" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-calculate-the-intersection-over-union">Define a function to calculate the intersection-over-union</h4>
<p>Previously, we used the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.nms.html#torchvision.ops.nms">nms</a> function included with torchvision to filter bounding box proposals using Non-Maximum Suppression. This approach filters bounding box proposals when they overlap too much with another bounding box with a higher confidence score.</p>
<p>We determine how much a pair of bounding boxes overlap by computing the Intersection over Union (IoU). The following function shows how to do this in NumPy.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_iou(proposals:np.ndarray) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb23-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculates the Intersection over Union (IoU) for all pairs of bounding boxes (x,y,w,h) in 'proposals'.</span></span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The IoU is a measure of overlap between two bounding boxes. It is calculated as the area of</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    intersection divided by the area of union of the two boxes.</span></span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    proposals (2D np.array): A NumPy array of bounding boxes, where each box is an array [x, y, width, height].</span></span>
<span id="cb23-10"></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb23-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    iou (2D np.array): The IoU matrix where each element i,j represents the IoU of boxes i and j.</span></span>
<span id="cb23-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-14"></span>
<span id="cb23-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate coordinates for the intersection rectangles</span></span>
<span id="cb23-16">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb23-17">    y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb23-18">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], (proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb23-19">    y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], (proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb23-20">    </span>
<span id="cb23-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate intersection areas</span></span>
<span id="cb23-22">    intersections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.maximum(y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb23-23"></span>
<span id="cb23-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate union areas</span></span>
<span id="cb23-25">    areas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb23-26">    unions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> areas[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> areas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> intersections</span>
<span id="cb23-27"></span>
<span id="cb23-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IoUs</span></span>
<span id="cb23-29">    iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intersections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> unions</span>
<span id="cb23-30"></span>
<span id="cb23-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the iou matrix</span></span>
<span id="cb23-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iou</span></code></pre></div>
</section>
<section id="define-a-function-to-filter-bounding-box-proposals-using-non-maximum-suppression" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-filter-bounding-box-proposals-using-non-maximum-suppression">Define a function to filter bounding box proposals using Non-Maximum Suppression</h4>
<p>Now we create a function to determine which proposal indices to keep using the calculated IoU values.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> nms_sorted_boxes(iou:np.ndarray, iou_thresh:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb24-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Applies non-maximum suppression (NMS) to sorted bounding boxes.</span></span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It suppresses boxes that have high overlap (as defined by the IoU threshold) with a box that </span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    has a higher score.</span></span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    iou (np.ndarray): An IoU matrix where each element i,j represents the IoU of boxes i and j.</span></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    iou_thresh (float): The IoU threshold for suppression. Boxes with IoU &gt; iou_thresh are suppressed.</span></span>
<span id="cb24-11"></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb24-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keep (np.ndarray): The indices of the boxes to keep after applying NMS.</span></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb24-15"></span>
<span id="cb24-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a boolean mask to keep track of boxes</span></span>
<span id="cb24-17">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>)</span>
<span id="cb24-18"></span>
<span id="cb24-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply non-max suppression</span></span>
<span id="cb24-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb24-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mask[i]:</span>
<span id="cb24-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Suppress boxes with higher index and IoU &gt; threshold</span></span>
<span id="cb24-23">            mask[(iou[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> iou_thresh) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (np.arange(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> i)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb24-24"></span>
<span id="cb24-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the indices of the boxes to keep</span></span>
<span id="cb24-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.arange(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])[mask]</span></code></pre></div>
</section>
<section id="define-a-function-to-annotate-an-image-with-bounding-boxes" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-annotate-an-image-with-bounding-boxes">Define a function to annotate an image with bounding boxes</h4>
<p>Now that we have implemented the functionality to process and filter the model output, we only need to annotate images with bounding boxes and labels. PIL includes functionality to draw boxes and write text on images. The following function also scales the font size based on the image resolution to keep the relative size consistent across images.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_bboxes_pil(image, boxes, labels, colors, font, width:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font_size:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb25-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Annotates an image with bounding boxes, labels, and optional probability scores.</span></span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function draws bounding boxes on the provided image using the given box coordinates, </span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors, and labels. If probabilities are provided, they will be added to the labels.</span></span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image (PIL.Image): The input image on which annotations will be drawn.</span></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    boxes (list of tuples): A list of bounding box coordinates where each tuple is (x, y, w, h).</span></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels (list of str): A list of labels corresponding to each bounding box.</span></span>
<span id="cb25-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors (list of str): A list of colors for each bounding box and its corresponding label.</span></span>
<span id="cb25-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    font (str): Path to the font file to be used for displaying the labels.</span></span>
<span id="cb25-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    width (int, optional): Width of the bounding box lines. Defaults to 2.</span></span>
<span id="cb25-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    font_size (int, optional): Size of the font for the labels. Defaults to 25.</span></span>
<span id="cb25-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    probs (list of float, optional): A list of probability scores corresponding to each label. Defaults to None.</span></span>
<span id="cb25-17"></span>
<span id="cb25-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb25-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    annotated_image (PIL.Image): The image annotated with bounding boxes, labels, and optional probability scores.</span></span>
<span id="cb25-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb25-21">    </span>
<span id="cb25-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a reference diagonal</span></span>
<span id="cb25-23">    REFERENCE_DIAGONAL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb25-24">    </span>
<span id="cb25-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the font size using the hypotenuse of the image</span></span>
<span id="cb25-26">    font_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(font_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.hypot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>image.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> REFERENCE_DIAGONAL))</span>
<span id="cb25-27">    </span>
<span id="cb25-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add probability scores to labels</span></span>
<span id="cb25-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> probs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb25-30">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(labels, probs)]</span>
<span id="cb25-31">    </span>
<span id="cb25-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the image</span></span>
<span id="cb25-33">    annotated_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.copy()</span>
<span id="cb25-34"></span>
<span id="cb25-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an ImageDraw object for drawing on the image</span></span>
<span id="cb25-36">    draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_image)</span>
<span id="cb25-37"></span>
<span id="cb25-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through the bounding boxes and labels in the 'annotation' DataFrame</span></span>
<span id="cb25-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)):</span>
<span id="cb25-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the bounding box coordinates</span></span>
<span id="cb25-41">        x, y, w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes[i]</span>
<span id="cb25-42"></span>
<span id="cb25-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tuple of coordinates for the bounding box</span></span>
<span id="cb25-44">        shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x, y, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>w, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>h)</span>
<span id="cb25-45"></span>
<span id="cb25-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the bounding box on the image</span></span>
<span id="cb25-47">        draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb25-48">        </span>
<span id="cb25-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the font file</span></span>
<span id="cb25-50">        fnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageFont.truetype(font, font_size)</span>
<span id="cb25-51">        </span>
<span id="cb25-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the label box on the image</span></span>
<span id="cb25-53">        label_w, label_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw.textbbox(xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels[i], font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fnt)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb25-54">        draw.rectangle((x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>label_h, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>label_w, y), outline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb25-55"></span>
<span id="cb25-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the label on the image</span></span>
<span id="cb25-57">        draw.multiline_text((x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>label_h), labels[i], font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.mean(int_colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">127.5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-58">        </span>
<span id="cb25-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> annotated_image</span></code></pre></div>
<p>With our utility functions taken care of, we can select an image to test our ONNX model.</p>
</section>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>Let’s use the same test image and input size from the <a href="../#testing-the-model-on-new-data">previous tutorial</a> to compare the results with the PyTorch model.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb26-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb26-3"></span>
<span id="cb26-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb26-7">display(test_img)</span>
<span id="cb26-8"></span>
<span id="cb26-9">pd.Series({</span>
<span id="cb26-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb26-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/images/output_45_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_59825">
<thead>
</thead>
<tbody>
<tr>
<th id="T_59825_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_59825_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set test image size</span></span>
<span id="cb27-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize image without cropping to multiple of the max stride</span></span>
<span id="cb27-5">resized_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating the input dimensions that multiples of the max stride</span></span>
<span id="cb27-8">input_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(strides) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> resized_img.size]</span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the offsets from the resized image dimensions to the input dimensions</span></span>
<span id="cb27-11">offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(resized_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> input_dims)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb27-12"></span>
<span id="cb27-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb27-14">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(resized_img.size)</span>
<span id="cb27-15"></span>
<span id="cb27-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the resized image to the input dimensions</span></span>
<span id="cb27-17">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resized_img.crop(box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>resized_img.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offsets])</span>
<span id="cb27-18"></span>
<span id="cb27-19">display(input_img)</span>
<span id="cb27-20"></span>
<span id="cb27-21">pd.Series({</span>
<span id="cb27-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image Size:"</span>: resized_img.size,</span>
<span id="cb27-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_dims,</span>
<span id="cb27-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Offsets:"</span>: offsets,</span>
<span id="cb27-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb27-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb27-27">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/images/output_47_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_90177">
<thead>
</thead>
<tbody>
<tr>
<th id="T_90177_level0_row0" class="row_heading level0 row0">
Resized Image Size:
</th>
<td id="T_90177_row0_col0" class="data row0 col0">
(384, 576)
</td>
</tr>
<tr>
<th id="T_90177_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_90177_row1_col0" class="data row1 col0">
[384, 576]
</td>
</tr>
<tr>
<th id="T_90177_level0_row2" class="row_heading level0 row2">
Offsets:
</th>
<td id="T_90177_row2_col0" class="data row2 col0">
[0. 0.]
</td>
</tr>
<tr>
<th id="T_90177_level0_row3" class="row_heading level0 row3">
Min Image Scale:
</th>
<td id="T_90177_row3_col0" class="data row3 col0">
1.666667
</td>
</tr>
<tr>
<th id="T_90177_level0_row4" class="row_heading level0 row4">
Input Image Size:
</th>
<td id="T_90177_row4_col0" class="data row4 col0">
(384, 576)
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="prepare-the-input-tensor-1" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor-1">Prepare the Input Tensor</h3>
<p>When we convert the PIL input image to a NumPy array, we need to reorder the array values to channels-first format, scale the values from <code>[0,255]</code> to <code>[0,1]</code>, and add a batch dimension. When we enable the <code>scale_inp</code> and <code>channels_last</code> options, we only need to add a batch dimension.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Scaled &amp; Channels-Last</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the existing input image to NumPy format</span></span>
<span id="cb28-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the existing input image to NumPy format</span></span>
<span id="cb29-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<p>Now we can finally perform inference with our ONNX model.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb30-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process the model output</span></span>
<span id="cb30-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> wrapped_model.run_box_and_prob_calculation:</span>
<span id="cb30-6">    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_boxes_and_probs(outputs, generate_output_grids_np(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>input_tensor_np.shape[input_dim_slice]))</span>
<span id="cb30-7"></span>
<span id="cb30-8">bbox_conf_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb30-9">iou_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb30-10"></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the proposals based on the confidence threshold</span></span>
<span id="cb30-12">max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[:, : ,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-13">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bbox_conf_thresh</span>
<span id="cb30-14">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[mask]</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the proposals by probability in descending order</span></span>
<span id="cb30-17">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposals[..., <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].argsort()][::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply non-max suppression to the proposals with the specified threshold</span></span>
<span id="cb30-20">proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nms_sorted_boxes(calc_iou(proposals[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]), iou_thresh)</span>
<span id="cb30-21">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposal_indices]</span>
<span id="cb30-22"></span>
<span id="cb30-23">bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (proposals[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span>
<span id="cb30-24">label_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(idx)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span>
<span id="cb30-25">probs_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb30-26"></span>
<span id="cb30-27">draw_bboxes_pil(</span>
<span id="cb30-28">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_img, </span>
<span id="cb30-29">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bbox_list, </span>
<span id="cb30-30">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label_list,</span>
<span id="cb30-31">    probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probs_list,</span>
<span id="cb30-32">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[class_names.index(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_list], </span>
<span id="cb30-33">    font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file,</span>
<span id="cb30-34">)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/images/output_51_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_5637a">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5637a_level0_row0" class="row_heading level0 row0">
Predicted BBoxes:
</th>
<td id="T_5637a_row0_col0" class="data row0 col0">
[‘rock:[341.796 242.258 112.071 113.383]’, ‘no_gesture:[196.331 521.538 100.786 78.511]’]
</td>
</tr>
<tr>
<th id="T_5637a_level0_row1" class="row_heading level0 row1">
Confidence Scores:
</th>
<td id="T_5637a_row1_col0" class="data row1 col0">
[‘rock: 93.49%’, ‘no_gesture: 86.02%’]
</td>
</tr>
</tbody>

</table>
</div>
<p>The model predictions should be virtually identical to the PyTorch model, but the probability scores can sometimes vary slightly.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the ONNX model from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial! We previously trained a YOLOX model in PyTorch for hand gesture detection, and now we’ve exported that model to ONNX. With this, we can streamline our deployment process and leverage platform-specific hardware optimizations through ONNX Runtime.</p>
<p>As you move forward, consider exploring more about ONNX and its ecosystem. Check out the available <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> that provide flexible interfaces to different hardware acceleration libraries.</p>
<p>If you found this guide helpful, consider sharing it with others.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>onnx</category>
  <category>object-detection</category>
  <category>yolox</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/onnx-export/index.html</guid>
  <pubDate>Tue, 22 Aug 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Training YOLOX Models for Real-Time Object Detection in Pytorch</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading and Exploring the Dataset</li>
<li>Selecting a Model</li>
<li>Preparing the Data</li>
<li>Fine-tuning the Model</li>
<li>Making Predictions with the Model</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="./"><strong>Training YOLOX Models for Real-Time Object Detection in Pytorch</strong></a>: Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
<li><a href="./onnx-export/"><strong>Exporting YOLOX Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export YOLOX models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
<li><a href="./tfjs-export/"><strong>Exporting YOLOX Models from PyTorch to TensorFlow.js</strong></a><strong>:</strong> Learn how to export YOLOX models from PyTorch to TensorFlow.js using the nobuco conversion tool.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to training real-time object detection models in <a href="https://pytorch.org/">PyTorch</a>! Object detectors can identify and locate multiple objects within images and videos, allowing you to quantify them and track their location. The <a href="https://arxiv.org/abs/2107.08430">YOLOX</a> model we’ll use is fast and accurate, making it well-suited for real-time applications.</p>
<p>In this tutorial, we create a hand gesture detector that identifies and locates various hand gestures within images. Real-time gesture detection has many applications ranging from human-computer interaction and sign-language interpretation to augmented reality and interactive gaming experiences.</p>
<p>After completing the tutorial, you will have a real-time gesture detector, plus a blueprint for training YOLOX models on other object detection tasks. You can then deploy models trained with this tutorial’s code in real-time applications. For an example, check out the demo video below from a <a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">project</a> made with the <a href="https://unity.com/">Unity game engine</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./video/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./video/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>This tutorial is suitable for anyone with rudimentary PyTorch experience. If you are new to PyTorch and want to start with a beginner-focused project, check out my tutorial on fine-tuning image classifiers.</p>
<ul>
<li><a href="../pytorch-train-image-classifier-timm-hf-tutorial/">Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</a></li>
</ul>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<ul>
<li><p><a href="../google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Platform</th>
<th>Jupyter Notebook</th>
<th>Utility File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Google Colab</td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-training-colab.ipynb">Open In Colab</a></td>
<td></td>
</tr>
<tr class="even">
<td>Linux</td>
<td><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-training.ipynb">GitHub Repository</a></td>
<td></td>
</tr>
<tr class="odd">
<td>Windows</td>
<td><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-training-windows.ipynb">GitHub Repository</a></td>
<td><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/windows_utils.py">windows_utils.py</a></td>
</tr>
</tbody>
</table>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>I’ve added a notebook for training models on the <a href="https://cocodataset.org/#home">COCO dataset</a> to this tutorial’s GitHub repository. You can modify it to train models on other datasets that follow the COCO annotation format.</p>
<ul>
<li><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/pytorch-yolox-object-detector-training-coco.ipynb">pytorch-yolox-object-detector-training-coco.ipynb</a></li>
</ul>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies. The dedicated Colab Notebook includes the code to install the required dependencies in Google Colab.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install PyTorch. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu118</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>torchtnt</code></td>
<td>A library for PyTorch training tools and utilities. (<a href="https://pytorch.org/tnt/stable/">link</a>)</td>
</tr>
<tr class="even">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tabulate</code></td>
<td>Pretty-print tabular data in Python. (<a href="https://pypi.org/project/tabulate/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pyarrow</code></td>
<td>This library provides a Python API for functionality provided by the <a href="https://arrow.apache.org/">Arrow</a> C++ libraries, along with tools for Arrow integration and interoperability with pandas. (<a href="https://pypi.org/project/pyarrow/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>fastparquet</code></td>
<td>A python implementation of the parquet format, used implicitly by Pandas. (<a href="https://pypi.org/project/fastparquet/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow torchtnt tqdm</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install extra dependencies for pandas</span></span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install tabulate pyarrow fastparquet</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>Walking through the code for the YOLOX model and the code for computing loss values during training would make this tutorial unreasonably long. Therefore, I included that code in a dedicated <a href="https://pypi.org/project/cjm-yolox-pytorch/">pip package.</a> A link to the documentation is available in the table below.</p>
<p>We’ll also install some additional packages I made to help us handle images, interact with PyTorch, and work with Pandas DataFrames. These utility packages provide shortcuts for routine tasks and keep our code clean and readable.</p>
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pandas_utils</code></td>
<td>Some utility functions for working with Pandas. (<a href="https://cj-mills.github.io/cjm-pandas-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_yolox_pytorch</code></td>
<td>A PyTorch implementation of the <a href="https://arxiv.org/abs/2107.08430">YOLOX</a> object detection model based on <a href="https://github.com/open-mmlab">OpenMMLab</a>’s implementation in the <a href="https://github.com/open-mmlab/mmdetection">mmdetection</a> library. (<a href="https://cj-mills.github.io/cjm-yolox-pytorch/">link</a>)</td>
</tr>
</tbody>
</table>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install YOLOX utility package</span></span>
<span id="cb8-2">pip install cjm_yolox_pytorch</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-5">pip install cjm_pandas_utils cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment set up, let’s dive into the code. First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Dict, Optional</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract, get_source_code</span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files, stack_imgs</span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pil_to_tensor, tensor_to_pil, get_torch_device, set_seed, denorm_img_tensor</span>
<span id="cb9-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas, convert_to_numeric, convert_to_string</span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import YOLOX package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> build_model, MODEL_CFGS, NORM_STATS</span>
<span id="cb9-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> generate_output_grids</span>
<span id="cb9-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.loss <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> YOLOXLoss</span>
<span id="cb9-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_yolox_pytorch.inference <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> YOLOXInferenceWrapper</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-34"></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-37"></span>
<span id="cb9-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set options for Pandas DataFrame display</span></span>
<span id="cb9-39">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells in the DataFrame</span></span>
<span id="cb9-40">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all rows in the DataFrame</span></span>
<span id="cb9-41">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all columns in the DataFrame</span></span>
<span id="cb9-42"></span>
<span id="cb9-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-44"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-45"></span>
<span id="cb9-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-47"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb9-49"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb9-50"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-51"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb9-52"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-53"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb9-54"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-55">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-56"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-57"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-58"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-59"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms.v2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb9-60"></span>
<span id="cb9-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-62"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project, such as initializing random number generators, setting the PyTorch device to run the model, and preparing the folders for our project and datasets.</p>
<section id="setting-a-random-number-seed" class="level3">
<h3 class="anchored" data-anchor-id="setting-a-random-number-seed">Setting a Random Number Seed</h3>
<p>First, we set the seed for generating random numbers using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#set_seed">set_seed</a> function from the <code>cjm_pytorch_utils</code> package.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed for generating random numbers in PyTorch, NumPy, and Python's random module.</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb10-3">set_seed(seed)</span></code></pre></div>
</section>
<section id="setting-the-device-and-data-type" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-device-and-data-type">Setting the Device and Data Type</h3>
<p>Next, we determine the device to use for training and set the data type of our tensors using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#get_torch_device">get_torch_device</a> function from the <code>cjm_pytorch_utils</code> package.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb11-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb11-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
</section>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We can then set up a directory for our project to store our results and other related files. The following code creates the folder in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<p>We also need a place to store our datasets and a location to download the zip file containing the dataset. Readers following the tutorial on their local machine should select locations with read and write access to store archive files and datasets. For a cloud service like Google Colab, you can set it to the current directory.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb13-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-yolox-object-detector"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb13-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb13-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb13-11">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/980_1TB_2/Datasets/"</span>)</span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb13-13">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb13-16">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb13-18">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-19"></span>
<span id="cb13-20">pd.Series({</span>
<span id="cb13-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir, </span>
<span id="cb13-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb13-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb13-24">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_574bb">
<thead>
</thead>
<tbody>
<tr>
<th id="T_574bb_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_574bb_row0_col0" class="data row0 col0">
pytorch-yolox-object-detector
</td>
</tr>
<tr>
<th id="T_574bb_level0_row1" class="row_heading level0 row1">
Dataset Directory:
</th>
<td id="T_574bb_row1_col0" class="data row1 col0">
/mnt/980_1TB_2/Datasets
</td>
</tr>
<tr>
<th id="T_574bb_level0_row2" class="row_heading level0 row2">
Archive Directory:
</th>
<td id="T_574bb_row2_col0" class="data row2 col0">
/mnt/980_1TB_2/Datasets/../Archive
</td>
</tr>
</tbody>

</table>
</div>
<p>Double-check the project and dataset directories exist in the specified paths and that you can add files to them before continuing. At this point, our project is set up and ready to go. In the next section, we will download and explore the dataset.</p>
</section>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>Now that we set up the project, we can start working with our dataset. The dataset is a downscaled subset of <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset), which contains 18 distinct hand gestures and an additional <code>no_gesture</code> class for idle hands.</p>
<p>I made four subsets of different sizes available on Hugging Face Hub. The most compact subset of the dataset is approximately 1 GB, with 31,833 samples. You will need about 2 GB to store the archive file and extracted dataset.</p>
<p>We will download and access the dataset directly rather than through Hugging Face’s <a href="https://huggingface.co/docs/datasets/index">Datasets</a> library.</p>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>We first need to construct the name for the chosen Hugging Face Hub dataset and define where to download and extract the dataset.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb14-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hagrid-sample-30k-384p'</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataset_name = 'hagrid-sample-120k-384p'</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataset_name = 'hagrid-sample-250k-384p'</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataset_name = 'hagrid-sample-500k-384p'</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb14-8">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb14-11">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb14-14">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-15"></span>
<span id="cb14-16">pd.Series({</span>
<span id="cb14-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb14-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb14-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb14-20">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_52612">
<thead>
</thead>
<tbody>
<tr>
<th id="T_52612_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_52612_row0_col0" class="data row0 col0">
cj-mills/hagrid-sample-30k-384p
</td>
</tr>
<tr>
<th id="T_52612_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_52612_row1_col0" class="data row1 col0">
/mnt/980_1TB_2/Datasets/../Archive/hagrid-sample-30k-384p.zip
</td>
</tr>
<tr>
<th id="T_52612_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_52612_row2_col0" class="data row2 col0">
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the dataset archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb15-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb15-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb15-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb15-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb15-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb15-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb15-14">    </span>
<span id="cb15-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb15-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-folders" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-folders">Getting the Image and Annotation Folders</h3>
<p>The dataset has two folders containing the sample images and annotation files. The image folder organizes samples for each gesture class into separate subfolders. Each image subfolder has a corresponding JSON annotation file.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list of the items in the 'dataset_path' directory</span></span>
<span id="cb16-2">dir_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_path.iterdir() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> item.is_dir()]</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the path of the 'ann_train_val' directory</span></span>
<span id="cb16-5">annotation_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ann_train_val'</span></span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the 'ann_train_val' directory from the list of items</span></span>
<span id="cb16-8">dir_content.remove(annotation_dir)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the path of the remaining directory, which is assumed to be the image directory</span></span>
<span id="cb16-11">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dir_content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-12"></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the paths of the annotation and image directories</span></span>
<span id="cb16-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Annotation Directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annotation_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of files in the 'annotation_dir' directory</span></span>
<span id="cb16-18">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(annotation_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb16-19"></span>
<span id="cb16-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of folders in the 'img_dir' directory</span></span>
<span id="cb16-21">img_folder_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [folder <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_dir.iterdir() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> folder.is_dir()]</span>
<span id="cb16-22"></span>
<span id="cb16-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb16-24">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: [folder.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_folder_paths], </span>
<span id="cb16-25">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]})</span></code></pre></div>
<pre class="text"><code>Annotation Directory: /mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/ann_train_val
Image Directory: /mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k</code></pre>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image Folder
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
train_val_call
</td>
<td>
call.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
train_val_dislike
</td>
<td>
dislike.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
train_val_fist
</td>
<td>
fist.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
train_val_four
</td>
<td>
four.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
train_val_like
</td>
<td>
like.json
</td>
</tr>
<tr>
<th>
5
</th>
<td>
train_val_mute
</td>
<td>
mute.json
</td>
</tr>
<tr>
<th>
6
</th>
<td>
train_val_ok
</td>
<td>
ok.json
</td>
</tr>
<tr>
<th>
7
</th>
<td>
train_val_one
</td>
<td>
one.json
</td>
</tr>
<tr>
<th>
8
</th>
<td>
train_val_palm
</td>
<td>
palm.json
</td>
</tr>
<tr>
<th>
9
</th>
<td>
train_val_peace
</td>
<td>
peace.json
</td>
</tr>
<tr>
<th>
10
</th>
<td>
train_val_peace_inverted
</td>
<td>
peace_inverted.json
</td>
</tr>
<tr>
<th>
11
</th>
<td>
train_val_rock
</td>
<td>
rock.json
</td>
</tr>
<tr>
<th>
12
</th>
<td>
train_val_stop
</td>
<td>
stop.json
</td>
</tr>
<tr>
<th>
13
</th>
<td>
train_val_stop_inverted
</td>
<td>
stop_inverted.json
</td>
</tr>
<tr>
<th>
14
</th>
<td>
train_val_three
</td>
<td>
three.json
</td>
</tr>
<tr>
<th>
15
</th>
<td>
train_val_three2
</td>
<td>
three2.json
</td>
</tr>
<tr>
<th>
16
</th>
<td>
train_val_two_up
</td>
<td>
two_up.json
</td>
</tr>
<tr>
<th>
17
</th>
<td>
train_val_two_up_inverted
</td>
<td>
two_up_inverted.json
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. Let’s make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb18-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_folder_paths <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through each image folder</span></span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(folder) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in each image folder</span></span>
<span id="cb18-6">}</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb18-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb18-12">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 31833</code></pre>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00005c9c-3548-4a8f-9d0b-2dd4aff37fc9.jpg
</td>
</tr>
<tr>
<th>
0020a3db-82d8-47aa-8642-2715d4744db5
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/0020a3db-82d8-47aa-8642-2715d4744db5.jpg
</td>
</tr>
<tr>
<th>
004ac93f-0f7c-49a4-aadc-737e0ad4273c
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/004ac93f-0f7c-49a4-aadc-737e0ad4273c.jpg
</td>
</tr>
<tr>
<th>
006cac69-d3f0-47f9-aac9-38702d038ef1
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/006cac69-d3f0-47f9-aac9-38702d038ef1.jpg
</td>
</tr>
<tr>
<th>
00973fac-440e-4a56-b60c-2a06d5fb155d
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00973fac-440e-4a56-b60c-2a06d5fb155d.jpg
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="get-bounding-box-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-bounding-box-annotations">Get Bounding Box Annotations</h3>
<p>Next, we read the contents of the JSON annotation files into a Pandas DataFrame so we can easily query the annotations. Reading each JSON file can be slow, so I added a <a href="https://parquet.apache.org/">parquet</a> file with a premade annotation DataFrame.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the file path for the annotations DataFrame</span></span>
<span id="cb20-2">annotation_df_pq_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations_df.parquet'</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> annotation_df_pq_path.is_file():</span>
<span id="cb20-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the annotations DataFrame if present</span></span>
<span id="cb20-6">    annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(annotation_df_pq_path)</span>
<span id="cb20-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb20-9">    cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb20-10"></span>
<span id="cb20-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb20-12">    annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-13"></span>
<span id="cb20-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb20-15">    annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb20-16"></span>
<span id="cb20-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the annotations DataFrame to disk</span></span>
<span id="cb20-18">    annotation_df.to_parquet(annotation_df_pq_path)</span>
<span id="cb20-19"></span>
<span id="cb20-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb20-21">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
bboxes
</th>
<th>
labels
</th>
<th>
leading_hand
</th>
<th>
leading_conf
</th>
<th>
user_id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
<td>
[[0.23925175, 0.28595301, 0.25055143, 0.20777627]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1.0
</td>
<td>
5a389ffe1bed6660a59f4586c7d8fe2770785e5bf79b09334aa951f6f119c024
</td>
</tr>
<tr>
<th>
0020a3db-82d8-47aa-8642-2715d4744db5
</th>
<td>
[[0.5801012999999999, 0.53265105, 0.14562138, 0.12286348]]
</td>
<td>
[call]
</td>
<td>
left
</td>
<td>
1.0
</td>
<td>
0d6da2c87ef8eabeda2dcfee2dc5b5035e878137a91b149c754a59804f3dce32
</td>
</tr>
<tr>
<th>
004ac93f-0f7c-49a4-aadc-737e0ad4273c
</th>
<td>
[[0.46294793, 0.26419774, 0.13834939000000002, 0.10784189]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1.0
</td>
<td>
d50f05d9d6ca9771938cec766c3d621ff863612f9665b0e4d991c086ec04acc9
</td>
</tr>
<tr>
<th>
006cac69-d3f0-47f9-aac9-38702d038ef1
</th>
<td>
[[0.38799208, 0.44643898, 0.27068787, 0.18277858]]
</td>
<td>
[call]
</td>
<td>
right
</td>
<td>
1.0
</td>
<td>
998f6ad69140b3a59cb9823ba680cce62bf2ba678058c2fc497dbbb8b22b29fe
</td>
</tr>
<tr>
<th>
00973fac-440e-4a56-b60c-2a06d5fb155d
</th>
<td>
[[0.40980118, 0.38144198, 0.08338464, 0.06229785], [0.6122035100000001, 0.6780825500000001, 0.04700606, 0.07640522]]
</td>
<td>
[call, no_gesture]
</td>
<td>
right
</td>
<td>
1.0
</td>
<td>
4bb3ee1748be58e05bd1193939735e57bb3c0ca59a7ee38901744d6b9e94632e
</td>
</tr>
</tbody>

</table>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that one of the samples contains a <code>no_gesture</code> label to identify an idle hand in the image.</p>
</div>
</div>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>Now that we have the annotation data, we can get the unique class names and inspect the distribution of samples among the gesture classes.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb21-2">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].explode().unique().tolist()</span>
<span id="cb21-3">class_names.sort()</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb21-6">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb22-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].explode().value_counts().sort_index()</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb22-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb22-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb22-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb22-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb22-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_names, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb22-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_26_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Each class, excluding <code>no_gesture</code>, has roughly the same number of samples. There are approximately four times as many <code>no_gesture</code> samples because of the immense variety of non-matching hand positions.</p>
</section>
</section>
<section id="visualizing-bounding-box-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-bounding-box-annotations">Visualizing Bounding Box Annotations</h3>
<p>Lastly, we will visualize the bounding box for one of the sample images to demonstrate how to interpret the annotations.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb23-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb23-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb23-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_29_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the filename of the font file</span></span>
<span id="cb24-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb24-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>Let’s make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image’s file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb26-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb26-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb26-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-9"></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb26-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (384, 512)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_36_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb28-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
00005c9c-3548-4a8f-9d0b-2dd4aff37fc9
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
bboxes
</th>
<td>
[[0.23925175, 0.28595301, 0.25055143, 0.20777627]]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[call]
</td>
</tr>
<tr>
<th>
leading_hand
</th>
<td>
right
</td>
</tr>
<tr>
<th>
leading_conf
</th>
<td>
1.0
</td>
</tr>
<tr>
<th>
user_id
</th>
<td>
5a389ffe1bed6660a59f4586c7d8fe2770785e5bf79b09334aa951f6f119c024
</td>
</tr>
</tbody>

</table>
</div>
<p>The bounding box annotations are in the format <code>[top-left X, top-left Y, width, height]</code>. The HaGRID dataset also normalizes bounding box annotations for this dataset to the range <code>[0,1]</code> based on the image dimensions. Therefore, we need to scale the <code>top-left X</code> and <code>width</code> values by the image width and the <code>top-left Y</code> and <code>height</code> values by the image height.</p>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we’ll use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert"><code>box_convert</code></a> function included with torchvision to convert the bounding box annotations from <code>[x,y,w,h]</code> to <code>[x,y,x,y]</code> format.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb29-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]</span>
<span id="cb29-3">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>]</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the bounding boxes in the image size scale</span></span>
<span id="cb29-6">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.size</span>
<span id="cb29-7">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>width, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>height, w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>width, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>height] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x, y, w, h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bboxes]</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb29-10">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb29-11">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb29-12">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb29-13">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb29-14">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb29-15">)</span>
<span id="cb29-16"></span>
<span id="cb29-17">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_40_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the bounding box annotations for a sample image. In the next section, we will select and load our model.</p>
</section>
</section>
</section>
<section id="selecting-a-model" class="level2">
<h2 class="anchored" data-anchor-id="selecting-a-model">Selecting a Model</h2>
<p>I provide five predefined model configurations of different sizes in the <a href="https://cj-mills.github.io/cjm-yolox-pytorch/"><code>cjm_yolox_pytorch</code></a> package. Each predefined config comes with a model checkpoint trained on the <a href="https://cocodataset.org">COCO</a> (Common Objects in Context) dataset.</p>
<section id="exploring-available-models" class="level3">
<h3 class="anchored" data-anchor-id="exploring-available-models">Exploring Available Models</h3>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pd.DataFrame(MODEL_CFGS).transpose()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
deepen_factor
</th>
<th>
widen_factor
</th>
<th>
neck_in_channels
</th>
<th>
neck_out_channels
</th>
<th>
neck_num_csp_blocks
</th>
<th>
head_in_channels
</th>
<th>
head_feat_channels
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
yolox_tiny
</th>
<td>
0.33
</td>
<td>
0.375
</td>
<td>
[96, 192, 384]
</td>
<td>
96
</td>
<td>
1
</td>
<td>
96
</td>
<td>
96
</td>
</tr>
<tr>
<th>
yolox_s
</th>
<td>
0.33
</td>
<td>
0.5
</td>
<td>
[128, 256, 512]
</td>
<td>
128
</td>
<td>
1
</td>
<td>
128
</td>
<td>
128
</td>
</tr>
<tr>
<th>
yolox_m
</th>
<td>
0.67
</td>
<td>
0.75
</td>
<td>
[192, 384, 768]
</td>
<td>
192
</td>
<td>
2
</td>
<td>
192
</td>
<td>
192
</td>
</tr>
<tr>
<th>
yolox_l
</th>
<td>
1.0
</td>
<td>
1.0
</td>
<td>
[256, 512, 1024]
</td>
<td>
256
</td>
<td>
3
</td>
<td>
256
</td>
<td>
256
</td>
</tr>
<tr>
<th>
yolox_x
</th>
<td>
1.33
</td>
<td>
1.25
</td>
<td>
[320, 640, 1280]
</td>
<td>
320
</td>
<td>
4
</td>
<td>
320
</td>
<td>
320
</td>
</tr>
</tbody>

</table>
</div>
<p>We’ll go with the <code>yolox_tiny</code> configuration as it is the most efficient and sufficiently accurate on this dataset.</p>
</section>
<section id="loading-the-yolox-tiny-model" class="level3">
<h3 class="anchored" data-anchor-id="loading-the-yolox-tiny-model">Loading the YOLOX-Tiny Model</h3>
<p>We can initialize a <code>yolox_tiny</code> model with the pretrained weights and the appropriate number of output classes using the <a href="https://cj-mills.github.io/cjm-yolox-pytorch/model.html#build_model"><code>build_model</code></a> function included with the <code>cjm_yolox_pytorch</code> package.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the YOLOX model configuration</span></span>
<span id="cb31-2">model_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yolox_tiny'</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_type = 'yolox_s'</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_type = 'yolox_m'</span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_type = 'yolox_l'</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_type = 'yolox_x'</span></span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to initialize the model with pretrained weights</span></span>
<span id="cb31-9">pretrained <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb31-10"></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a YOLOX model with the number of output classes equal to the number of class names</span></span>
<span id="cb31-12">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_model(model_type, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names), pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pretrained).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add attributes to store the device and model name for later reference</span></span>
<span id="cb31-15">model.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb31-16">model.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type</span>
<span id="cb31-17"></span>
<span id="cb31-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get stride values for processing output</span></span>
<span id="cb31-19">strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.bbox_head.strides</span></code></pre></div>
</section>
<section id="get-normalization-statistics" class="level3">
<h3 class="anchored" data-anchor-id="get-normalization-statistics">Get Normalization Statistics</h3>
<p>Next, we need the normalization stats used during the pretraining process.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve normalization statistics (mean and std) specific to the pretrained checkpoints</span></span>
<span id="cb32-2">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>NORM_STATS[model_type].values()] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pretrained <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> ([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the mean and standard deviation</span></span>
<span id="cb32-5">pd.DataFrame(norm_stats)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0.5
</td>
<td>
0.5
</td>
<td>
0.5
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1.0
</td>
<td>
1.0
</td>
<td>
1.0
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="summarizing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-the-model">Summarizing the Model</h3>
<p>Before moving on, let’s generate a summary of our model to get an overview of its performance characteristics. We can use this to gauge the difference in computational requirements between the model configs.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the input to the model</span></span>
<span id="cb33-2">backbone_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb33-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): neck_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.backbone(backbone_inp)</span>
<span id="cb33-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): head_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.neck(neck_inp)</span>
<span id="cb33-5"></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a summary of the model as a Pandas DataFrame</span></span>
<span id="cb33-7">backbone_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model.backbone, [backbone_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-8">neck_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model.neck, [neck_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-9">head_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model.bbox_head, [head_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-10">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([backbone_summary, neck_summary, head_summary], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).transpose()</span>
<span id="cb33-11"></span>
<span id="cb33-12">parameters_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'# Parameters'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(convert_to_numeric)</span>
<span id="cb33-13">trainable_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'# Trainable Parameters'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(convert_to_numeric)</span>
<span id="cb33-14">size_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Size (bytes)'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(convert_to_numeric)</span>
<span id="cb33-15">forward_flops_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Forward FLOPs'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(convert_to_numeric)</span>
<span id="cb33-16"></span>
<span id="cb33-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute sums and add a new row</span></span>
<span id="cb33-18">total_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb33-19">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'# Parameters'</span>: convert_to_string(parameters_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()),</span>
<span id="cb33-20">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'# Trainable Parameters'</span>: convert_to_string(trainable_parameters.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()),</span>
<span id="cb33-21">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Size (bytes)'</span>: convert_to_string(size_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()),</span>
<span id="cb33-22">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Forward FLOPs'</span>: convert_to_string(forward_flops_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()), </span>
<span id="cb33-23">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In size'</span>: backbone_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In size'</span>], </span>
<span id="cb33-24">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Out size'</span>: head_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Out size'</span>]}</span>
<span id="cb33-25"></span>
<span id="cb33-26">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([pd.DataFrame([total_row]), summary_df], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-27"></span>
<span id="cb33-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove extra columns</span></span>
<span id="cb33-29">summary_df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Out size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
yolox_tiny
</td>
<td>
5.1 M
</td>
<td>
5.1 M
</td>
<td>
20.2 M
</td>
<td>
1.206 G
</td>
</tr>
<tr>
<th>
1
</th>
<td>
CSPDarknet
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.5 M
</td>
<td>
500 M
</td>
</tr>
<tr>
<th>
2
</th>
<td>
YOLOXPAFPN
</td>
<td>
1.7 M
</td>
<td>
1.7 M
</td>
<td>
6.7 M
</td>
<td>
257 M
</td>
</tr>
<tr>
<th>
3
</th>
<td>
YOLOXHead
</td>
<td>
1.0 M
</td>
<td>
1.0 M
</td>
<td>
4.0 M
</td>
<td>
449 M
</td>
</tr>
</tbody>

</table>
</div>
<p>The above table shows the summary for the entire <code>yolox_tiny</code> model and the model’s backbone, neck, and head individually. The model has approximately <code>5.1</code> million trainable parameters. It takes up <code>20.2</code> Megabytes of space and performs around <code>1.2</code> billion floating point operations for a single <code>256x256</code> RGB image.</p>
<p>For reference, the <code>yolox_x</code> model has about <code>99</code> million trainable parameters, takes up over <code>395</code> MB, and performs around <code>22.5</code> billion floating point operations for the same input.</p>
<p>That completes the model selection and setup. In the next section, we will prepare our dataset for training.</p>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>The data preparation involves several steps, such as applying data augmentation techniques, setting up the train-validation split for the dataset, resizing and padding the images, defining the training dataset class, and initializing DataLoaders to feed data to the model.</p>
<section id="training-validation-split" class="level3">
<h3 class="anchored" data-anchor-id="training-validation-split">Training-Validation Split</h3>
<p>Let’s begin by defining the training-validation split. We’ll randomly select 90% of the available samples for the training set and use the remaining 10% for the validation set.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of image IDs</span></span>
<span id="cb34-2">img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shuffle the image IDs</span></span>
<span id="cb34-5">random.shuffle(img_keys)</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for training</span></span>
<span id="cb34-8">train_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb34-9">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb34-10"></span>
<span id="cb34-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the index at which to split the subset of image paths into training and validation sets</span></span>
<span id="cb34-12">train_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>train_pct)</span>
<span id="cb34-13">val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(train_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>val_pct))</span>
<span id="cb34-14"></span>
<span id="cb34-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the subset of image paths into training and validation sets</span></span>
<span id="cb34-16">train_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[:train_split]</span>
<span id="cb34-17">val_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[train_split:]</span>
<span id="cb34-18"></span>
<span id="cb34-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb34-20">pd.Series({</span>
<span id="cb34-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_keys),</span>
<span id="cb34-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Validation Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_keys)</span>
<span id="cb34-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_475ce">
<thead>
</thead>
<tbody>
<tr>
<th id="T_475ce_level0_row0" class="row_heading level0 row0">
Training Samples:
</th>
<td id="T_475ce_row0_col0" class="data row0 col0">
28649
</td>
</tr>
<tr>
<th id="T_475ce_level0_row1" class="row_heading level0 row1">
Validation Samples:
</th>
<td id="T_475ce_row1_col0" class="data row1 col0">
3184
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Next, we can define what data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>First, we’ll set the size to use for training. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax"><code>ResizeMax</code></a> transform will resize images so that the longest dimension equals this value while preserving the aspect ratio. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare"><code>PadSquare</code></a> transform will then pad the other side to make all the input squares. The input width and height must be multiples of the max stride value.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show a list of potential input resolutions</span></span>
<span id="cb35-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(strides)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>)])</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size to a multiple of the max stride value</span></span>
<span id="cb35-5">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
<pre class="text"><code>[224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640]</code></pre>
</section>
<section id="initialize-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-the-transforms">Initialize the transforms</h4>
<p>Now we can initialize the transform objects. The <code>jitter_factor</code> parameter for the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop"><code>CustomRandomIoUCrop</code></a> transform controls how much the center coordinates for the crop area can deviate from the center of a bounding box. Setting this to a value greater than zero allows the transform to crop into the bounding box area. We’ll keep this value small as cutting into the hand gestures too much will change their meaning.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb37-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb37-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb37-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb37-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb37-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb37-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb37-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span></code></pre></div>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb38-2">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb38-5">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>We’ll pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code>, and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb39-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb39-3">                                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb39-4">                                canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb39-5">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb39-8">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb39-11">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb39-12"></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb39-14">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb39-15"></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb39-17">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-18">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb39-19"></span>
<span id="cb39-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb39-21">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb39-22">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(resized_padded_img), </span>
<span id="cb39-23">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb39-24">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>], </span>
<span id="cb39-25">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb39-26">)</span>
<span id="cb39-27"></span>
<span id="cb39-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb39-29">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb39-30"></span>
<span id="cb39-31">pd.Series({</span>
<span id="cb39-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb39-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb39-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb39-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb39-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb39-37">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_60_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_271f1">
<thead>
</thead>
<tbody>
<tr>
<th id="T_271f1_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_271f1_row0_col0" class="data row0 col0">
(384, 512)
</td>
</tr>
<tr>
<th id="T_271f1_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_271f1_row1_col0" class="data row1 col0">
(294, 228)
</td>
</tr>
<tr>
<th id="T_271f1_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_271f1_row2_col0" class="data row2 col0">
(382, 297)
</td>
</tr>
<tr>
<th id="T_271f1_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_271f1_row3_col0" class="data row3 col0">
(382, 382)
</td>
</tr>
<tr>
<th id="T_271f1_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_271f1_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>

</table>
</div>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>Now we can define a custom dataset class to load images, extract the bounding box annotation, and apply the image transforms during training.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> HagridDataset(Dataset):</span>
<span id="cb40-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class represents a PyTorch Dataset for a collection of images and their annotations.</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The class is designed to load images along with their corresponding bounding box annotations and labels.</span></span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb40-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb40-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Constructor for the HagridDataset class.</span></span>
<span id="cb40-9"></span>
<span id="cb40-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb40-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of unique identifiers for images.</span></span>
<span id="cb40-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing the image annotations.</span></span>
<span id="cb40-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image identifiers to image file paths.</span></span>
<span id="cb40-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class labels to indices.</span></span>
<span id="cb40-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb40-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb40-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb40-18">        </span>
<span id="cb40-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of image keys</span></span>
<span id="cb40-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame containing annotations</span></span>
<span id="cb40-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping image keys to image paths</span></span>
<span id="cb40-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping class names to class indices</span></span>
<span id="cb40-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image transforms to be applied</span></span>
<span id="cb40-24">        </span>
<span id="cb40-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb40-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the length of the dataset.</span></span>
<span id="cb40-28"></span>
<span id="cb40-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb40-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        int: The number of items in the dataset.</span></span>
<span id="cb40-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb40-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb40-33">        </span>
<span id="cb40-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb40-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fetch an item from the dataset at the specified index.</span></span>
<span id="cb40-37"></span>
<span id="cb40-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb40-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        index (int): Index of the item to fetch from the dataset.</span></span>
<span id="cb40-40"></span>
<span id="cb40-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb40-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and its associated target (annotations).</span></span>
<span id="cb40-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb40-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the key for the image at the specified index</span></span>
<span id="cb40-45">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb40-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotations for this image</span></span>
<span id="cb40-47">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb40-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image and its target (bounding boxes and labels)</span></span>
<span id="cb40-49">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb40-50">        </span>
<span id="cb40-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the transformations, if any</span></span>
<span id="cb40-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb40-53">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb40-54">        </span>
<span id="cb40-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb40-56"></span>
<span id="cb40-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb40-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Load an image and its target (bounding boxes and labels).</span></span>
<span id="cb40-60"></span>
<span id="cb40-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb40-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation (pandas.Series): The annotations for an image.</span></span>
<span id="cb40-63"></span>
<span id="cb40-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb40-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and a dictionary with 'boxes' and 'labels' keys.</span></span>
<span id="cb40-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb40-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the file path of the image</span></span>
<span id="cb40-68">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb40-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image file and convert it to RGB</span></span>
<span id="cb40-70">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb40-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the bounding boxes in the image size scale</span></span>
<span id="cb40-72">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(image.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation.bboxes])</span>
<span id="cb40-73">        </span>
<span id="cb40-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert bounding box coordinates from [xmin, ymin, width, height] to [xmin, ymin, xmax, ymax]</span></span>
<span id="cb40-75">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(torch.Tensor(bbox_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb40-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a BoundingBoxes object with the bounding boxes</span></span>
<span id="cb40-77">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb40-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the class labels to indices</span></span>
<span id="cb40-79">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation.labels])</span>
<span id="cb40-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>We’ll add additional data augmentations with the IoU crop transform to help the model generalize.</p>
<table class="table">
<thead>
<tr class="header">
<th>Transform</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>RandomZoomOut</code></td>
<td>Randomly pad images, videos, bounding boxes and masks creating a zoom out effect. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomZoomOut.html#torchvision.transforms.v2.RandomZoomOut">link</a>)</td>
</tr>
<tr class="even">
<td><code>ColorJitter</code></td>
<td>Randomly change the brightness, contrast, saturation and hue of an image or video. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.ColorJitter.html#torchvision.transforms.v2.ColorJitter">link</a>)</td>
</tr>
<tr class="odd">
<td><code>RandomGrayscale</code></td>
<td>Randomly convert image or videos to grayscale with a probability of p (default 0.1). (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomGrayscale.html#torchvision.transforms.v2.RandomGrayscale">link</a>)</td>
</tr>
<tr class="even">
<td><code>RandomEqualize</code></td>
<td>Equalize the histogram of the given image or video with a given probability. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomEqualize.html#torchvision.transforms.v2.RandomEqualize">link</a>)</td>
</tr>
<tr class="odd">
<td><code>RandomPosterize</code></td>
<td>Randomly posterize an image by reducing the number of bits for each color channel. (<a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomPosterize.html#torchvision.transforms.v2.RandomPosterize">link</a>)</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb41-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb41-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb41-4">        transforms.RandomChoice([</span>
<span id="cb41-5">            transforms.RandomZoomOut(fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>), side_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)), </span>
<span id="cb41-6">            iou_crop</span>
<span id="cb41-7">        ], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>]),</span>
<span id="cb41-8">        transforms.ColorJitter(</span>
<span id="cb41-9">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb41-10">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb41-11">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb41-12">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb41-13">        ),</span>
<span id="cb41-14">        transforms.RandomGrayscale(),</span>
<span id="cb41-15">        transforms.RandomEqualize(),</span>
<span id="cb41-16">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb41-17">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb41-18">    ],</span>
<span id="cb41-19">)</span>
<span id="cb41-20"></span>
<span id="cb41-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb41-22">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb41-23">    resize_max, </span>
<span id="cb41-24">    pad_square,</span>
<span id="cb41-25">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-26">])</span>
<span id="cb41-27"></span>
<span id="cb41-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb41-29">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb41-30">    transforms.ToImage(), </span>
<span id="cb41-31">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb41-32">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb41-33">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb41-34">])</span>
<span id="cb41-35"></span>
<span id="cb41-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb41-37">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb41-38">    data_aug_tfms, </span>
<span id="cb41-39">    resize_pad_tfm, </span>
<span id="cb41-40">    final_tfms</span>
<span id="cb41-41">])</span>
<span id="cb41-42">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([resize_pad_tfm, final_tfms])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-datasets" class="level3">
<h3 class="anchored" data-anchor-id="initialize-datasets">Initialize Datasets</h3>
<p>Now we can create our training and validation dataset objects using the dataset splits and transforms.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb42-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the datasets using the defined transformations</span></span>
<span id="cb42-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HagridDataset(train_keys, annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb42-6">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HagridDataset(val_keys, annotation_df, img_dict, class_to_idx, valid_tfms)</span>
<span id="cb42-7"></span>
<span id="cb42-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb42-9">pd.Series({</span>
<span id="cb42-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb42-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Validation dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)}</span>
<span id="cb42-12">).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_1219d">
<thead>
</thead>
<tbody>
<tr>
<th id="T_1219d_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_1219d_row0_col0" class="data row0 col0">
28649
</td>
</tr>
<tr>
<th id="T_1219d_level0_row1" class="row_heading level0 row1">
Validation dataset size:
</th>
<td id="T_1219d_row1_col0" class="data row1 col0">
3184
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>Let’s verify the dataset objects work properly by inspecting the first samples from the training and validation sets.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb43-2"></span>
<span id="cb43-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb43-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(denorm_img_tensor(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb43-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb43-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb43-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb43-8">)</span>
<span id="cb43-9"></span>
<span id="cb43-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_69_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-validation-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-validation-set-sample">Inspect validation set sample</h4>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb44-2"></span>
<span id="cb44-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb44-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(denorm_img_tensor(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb44-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb44-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb44-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb44-8">)</span>
<span id="cb44-9"></span>
<span id="cb44-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_71_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="initialize-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataloaders">Initialize DataLoaders</h3>
<p>The last step before training is to instantiate the DataLoaders for the training and validation sets. Try decreasing the <code>bs</code> and <code>prefetch_factor</code> values if you encounter memory limitations.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the training batch size</span></span>
<span id="cb45-2">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data.</span></span>
<span id="cb45-5">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb45-6"></span>
<span id="cb45-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for DataLoader</span></span>
<span id="cb45-8">data_loader_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb45-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>: bs,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size for data loading</span></span>
<span id="cb45-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_workers'</span>: num_workers,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of subprocesses to use for data loading</span></span>
<span id="cb45-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'collate_fn'</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> batch: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch)),</span>
<span id="cb45-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop_last'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb45-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prefetch_factor'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb45-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb45-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory_device'</span>: device</span>
<span id="cb45-16">}</span>
<span id="cb45-17"></span>
<span id="cb45-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for training data. Data is shuffled for every epoch.</span></span>
<span id="cb45-19">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb45-20"></span>
<span id="cb45-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for validation data. Shuffling is not necessary for validation data.</span></span>
<span id="cb45-22">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params)</span>
<span id="cb45-23"></span>
<span id="cb45-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation DataLoaders</span></span>
<span id="cb45-25">pd.Series({</span>
<span id="cb45-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of batches in train DataLoader:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader),</span>
<span id="cb45-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of batches in validation DataLoader:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataloader)}</span>
<span id="cb45-28">).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_b5faf">
<thead>
</thead>
<tbody>
<tr>
<th id="T_b5faf_level0_row0" class="row_heading level0 row0">
Number of batches in train DataLoader:
</th>
<td id="T_b5faf_row0_col0" class="data row0 col0">
895
</td>
</tr>
<tr>
<th id="T_b5faf_level0_row1" class="row_heading level0 row1">
Number of batches in validation DataLoader:
</th>
<td id="T_b5faf_row1_col0" class="data row1 col0">
99
</td>
</tr>
</tbody>

</table>
</div>
<p>That completes the data preparation. Now we can finally train our hand gesture detector.</p>
</section>
</section>
<section id="fine-tuning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the Model</h2>
<p>In this section, we will implement the training code and fine-tune our model.</p>
<section id="define-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="define-the-training-loop">Define the Training Loop</h3>
<p>The following function performs a single pass through the training or validation set.</p>
<p>The model takes in a batch of images and returns a tuple containing three variables. The first variable stores the image classification predictions for each proposed bounding box, which we use to determine the object type for a given bounding box. The second holds the coordinates and dimensions for all potential bounding boxes. The third variable contains probability scores for each proposed detection, indicating the likelihood it is an object.</p>
<p>The model always makes the same number of predictions for a given image size. Given a <code>384x384</code> image, the model will make <code>(384/8)*(384/8) + (384/16)*(384/16) + (384/32)*(384/32) = 3024</code> predictions. However, many of those predictions get filtered out when performing inference.</p>
<p>During training, we must determine which of the model’s predictions to pair with the ground truth annotations from our dataset before calculating the loss. YOLOX uses an approach called <a href="https://cj-mills.github.io/cjm-yolox-pytorch/simota.html#simotaassigner">SimOTA</a> for this step. The <a href="https://cj-mills.github.io/cjm-yolox-pytorch/loss.html#yoloxloss">YOLOXLoss</a> class performs this assignment automatically when <a href="https://cj-mills.github.io/cjm-yolox-pytorch/loss.html#yoloxloss.__call__">called</a>.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_epoch(model, dataloader, optimizer, lr_scheduler, loss_func, device, scaler, is_training):</span>
<span id="cb46-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function to run a single training or evaluation epoch.</span></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb46-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train or evaluate.</span></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A PyTorch DataLoader providing the data.</span></span>
<span id="cb46-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb46-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_func: The loss function used for training.</span></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb46-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        scaler: Gradient scaler for mixed-precision training.</span></span>
<span id="cb46-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is_training: Boolean flag indicating whether the model is in training or evaluation mode.</span></span>
<span id="cb46-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb46-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb46-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The average loss for the epoch.</span></span>
<span id="cb46-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb46-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode if is_training is True, otherwise set it to evaluation mode</span></span>
<span id="cb46-18">    model.train() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb46-19">    </span>
<span id="cb46-20">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the total loss for this epoch</span></span>
<span id="cb46-21">    progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eval"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a progress bar</span></span>
<span id="cb46-22">    </span>
<span id="cb46-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over the data</span></span>
<span id="cb46-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch_id, (inputs, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb46-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move inputs and targets to the specified device</span></span>
<span id="cb46-26">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(inputs).to(device)</span>
<span id="cb46-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the ground truth bounding boxes and labels</span></span>
<span id="cb46-28">        gt_bboxes, gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[(d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>].to(device), d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].to(device)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets])</span>
<span id="cb46-29"></span>
<span id="cb46-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass with Automatic Mixed Precision (AMP) context manager</span></span>
<span id="cb46-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(torch.device(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb46-32">            cls_scores, bbox_preds, objectnesses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb46-33">        </span>
<span id="cb46-34">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the loss</span></span>
<span id="cb46-35">            losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(cls_scores, bbox_preds, objectnesses, gt_bboxes, gt_labels)</span>
<span id="cb46-36">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([loss <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> losses.values()])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum up the losses</span></span>
<span id="cb46-37"></span>
<span id="cb46-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If in training mode, backpropagate the error and update the weights</span></span>
<span id="cb46-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb46-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> scaler:</span>
<span id="cb46-41">                scaler.scale(loss).backward()</span>
<span id="cb46-42">                scaler.step(optimizer)</span>
<span id="cb46-43">                old_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb46-44">                scaler.update()</span>
<span id="cb46-45">                new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb46-46">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> old_scaler:</span>
<span id="cb46-47">                    lr_scheduler.step()</span>
<span id="cb46-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb46-49">                loss.backward()</span>
<span id="cb46-50">                optimizer.step()</span>
<span id="cb46-51">                lr_scheduler.step()</span>
<span id="cb46-52">                </span>
<span id="cb46-53">            optimizer.zero_grad()</span>
<span id="cb46-54"></span>
<span id="cb46-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the total loss</span></span>
<span id="cb46-56">        loss_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item()</span>
<span id="cb46-57">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_item</span>
<span id="cb46-58">        </span>
<span id="cb46-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the progress bar</span></span>
<span id="cb46-60">        progress_bar_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_item, avg_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(batch_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb46-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb46-62">            progress_bar_dict.update(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb46-63">        progress_bar.set_postfix(progress_bar_dict)</span>
<span id="cb46-64">        progress_bar.update()</span>
<span id="cb46-65"></span>
<span id="cb46-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the loss is NaN or infinite, stop the training/evaluation process</span></span>
<span id="cb46-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> math.isnan(loss_item) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss_item):</span>
<span id="cb46-68">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'evaluation'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb46-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb46-70"></span>
<span id="cb46-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cleanup and close the progress bar </span></span>
<span id="cb46-72">    progress_bar.close()</span>
<span id="cb46-73">    </span>
<span id="cb46-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the average loss for this epoch</span></span>
<span id="cb46-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (batch_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Next, we define the <code>train_loop</code> function, which executes the main training loop. It iterates over each epoch, runs through the training and validation sets, and saves the best model based on the validation loss.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(model, </span>
<span id="cb47-2">               train_dataloader, </span>
<span id="cb47-3">               valid_dataloader, </span>
<span id="cb47-4">               optimizer, </span>
<span id="cb47-5">               loss_func, </span>
<span id="cb47-6">               lr_scheduler, </span>
<span id="cb47-7">               device, </span>
<span id="cb47-8">               epochs, </span>
<span id="cb47-9">               checkpoint_path, </span>
<span id="cb47-10">               use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb47-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb47-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Main training loop.</span></span>
<span id="cb47-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb47-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb47-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train.</span></span>
<span id="cb47-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataloader: A PyTorch DataLoader providing the training data.</span></span>
<span id="cb47-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        valid_dataloader: A PyTorch DataLoader providing the validation data.</span></span>
<span id="cb47-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb47-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_func: The loss function used for training.</span></span>
<span id="cb47-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        lr_scheduler: The learning rate scheduler.</span></span>
<span id="cb47-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb47-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epochs: The number of epochs to train for.</span></span>
<span id="cb47-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        checkpoint_path: The path where to save the best model checkpoint.</span></span>
<span id="cb47-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        use_scaler: Whether to scale graidents when using a CUDA device</span></span>
<span id="cb47-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb47-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb47-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        None</span></span>
<span id="cb47-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb47-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a gradient scaler for mixed-precision training if the device is a CUDA GPU</span></span>
<span id="cb47-30">    scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.amp.GradScaler() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> use_scaler <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb47-31">    best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the best validation loss</span></span>
<span id="cb47-32"></span>
<span id="cb47-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over the epochs</span></span>
<span id="cb47-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>):</span>
<span id="cb47-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a training epoch and get the training loss</span></span>
<span id="cb47-36">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, train_dataloader, optimizer, lr_scheduler, loss_func, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb47-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run an evaluation epoch and get the validation loss</span></span>
<span id="cb47-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb47-39">            valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, valid_dataloader, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, loss_func, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb47-40"></span>
<span id="cb47-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the validation loss is lower than the best validation loss seen so far, save the model checkpoint</span></span>
<span id="cb47-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_loss:</span>
<span id="cb47-43">            best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span>
<span id="cb47-44">            torch.save(model.state_dict(), checkpoint_path)</span>
<span id="cb47-45"></span>
<span id="cb47-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save metadata about the training process</span></span>
<span id="cb47-47">            training_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb47-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: epoch,</span>
<span id="cb47-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: train_loss,</span>
<span id="cb47-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_loss'</span>: valid_loss, </span>
<span id="cb47-51">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb47-52">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_architecture'</span>: model.name</span>
<span id="cb47-53">            }</span>
<span id="cb47-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(Path(checkpoint_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training_metadata.json'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb47-55">                json.dump(training_metadata, f)</span>
<span id="cb47-56"></span>
<span id="cb47-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the training or validation loss is NaN or infinite, stop the training process</span></span>
<span id="cb47-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(math.isnan(loss) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [train_loss, valid_loss]):</span>
<span id="cb47-59">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span>)</span>
<span id="cb47-60">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb47-61"></span>
<span id="cb47-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is a GPU, empty the cache</span></span>
<span id="cb47-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>:</span>
<span id="cb47-64">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(torch, device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>).empty_cache()</span></code></pre></div>
</section>
<section id="set-the-model-checkpoint-path" class="level3">
<h3 class="anchored" data-anchor-id="set-the-model-checkpoint-path">Set the Model Checkpoint Path</h3>
<p>Before we proceed with training, let’s generate a timestamp for the training session and create a directory to save the checkpoints during training.</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate timestamp for the training session (Year-Month-Day_Hour_Minute_Second)</span></span>
<span id="cb48-2">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H-%M-%S"</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb48-5">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the checkpoint directory if it does not already exist</span></span>
<span id="cb48-8">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb48-9"></span>
<span id="cb48-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb48-11">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb48-12"></span>
<span id="cb48-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(checkpoint_path)</span></code></pre></div>
<pre class="text"><code>pytorch-yolox-object-detector/2023-08-17_16-14-43/yolox_tiny.pth</code></pre>
<p>Let’s save a copy of the normalization stats and the colormap for the current dataset in the training folder for future use.</p>
</section>
<section id="save-the-normalization-stats" class="level3">
<h3 class="anchored" data-anchor-id="save-the-normalization-stats">Save the Normalization Stats</h3>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert tuples to dictionaries for easier JSON representation</span></span>
<span id="cb50-2">norm_stats_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std_dev"</span>: norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]}</span>
<span id="cb50-3"></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export to JSON</span></span>
<span id="cb50-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/norm_stats.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb50-6">    json.dump(norm_stats_dict, f)</span>
<span id="cb50-7"></span>
<span id="cb50-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the name of the file that the normalization stats were written to</span></span>
<span id="cb50-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/norm_stats.json"</span>)</span></code></pre></div>
<pre class="text"><code>pytorch-yolox-object-detector/2023-08-17_16-14-43/norm_stats.json</code></pre>
</section>
<section id="save-the-color-map" class="level3">
<h3 class="anchored" data-anchor-id="save-the-color-map">Save the Color Map</h3>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a color map and write it to a JSON file</span></span>
<span id="cb52-2">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>: [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: color} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(class_names, colors)]}</span>
<span id="cb52-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb52-4">    json.dump(color_map, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb52-5"></span>
<span id="cb52-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the name of the file that the color map was written to</span></span>
<span id="cb52-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>)</span></code></pre></div>
<pre class="text"><code>pytorch-yolox-object-detector/2023-08-17_16-14-43/hagrid-sample-30k-384p-colormap.json</code></pre>
</section>
<section id="configure-the-training-parameters" class="level3">
<h3 class="anchored" data-anchor-id="configure-the-training-parameters">Configure the Training Parameters</h3>
<p>Now, we can configure the parameters for training. We must define the learning rate, the number of training epochs and instantiate the optimizer, learning rate scheduler, and a <code>YOLOXLoss</code> object.</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb54-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-4</span></span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb54-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb54-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># epochs = 20</span></span>
<span id="cb54-7"></span>
<span id="cb54-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb54-9">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb54-10"></span>
<span id="cb54-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb54-12">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb54-13">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb54-14">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb54-15"></span>
<span id="cb54-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the loss function for evaluating model predictions</span></span>
<span id="cb54-17">yolox_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXLoss(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.bbox_head.cls_out_channels, bbox_loss_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, use_l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>Finally, we can train the model using the <code>train_loop</code> function. Training time will depend on the available hardware.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Training usually takes around 3 hours and 6 minutes on the free GPU tier of Google Colab.</p>
</div>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">train_loop(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb55-2">           train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader,</span>
<span id="cb55-3">           valid_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_dataloader,</span>
<span id="cb55-4">           optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb55-5">           loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yolox_loss, </span>
<span id="cb55-6">           lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler, </span>
<span id="cb55-7">           device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.device(device), </span>
<span id="cb55-8">           epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, </span>
<span id="cb55-9">           checkpoint_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>checkpoint_path,</span>
<span id="cb55-10">           use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<pre class="text"><code>Epochs:   100%|██████████| 10/10 [21:14&lt;00:00, 126.73s/it]
Train:   100%|██████████| 895/895 [01:57&lt;00:00, 11.01it/s, loss=7.48, avg_loss=13, lr=0.000139]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 13.75it/s, loss=6.72, avg_loss=6.56]
Train:   100%|██████████| 895/895 [01:58&lt;00:00, 10.77it/s, loss=5.92, avg_loss=6.19, lr=0.000379]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 14.25it/s, loss=5.03, avg_loss=4.73]
Train:   100%|██████████| 895/895 [02:01&lt;00:00, 10.70it/s, loss=4.76, avg_loss=5.14, lr=0.0005]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 13.20it/s, loss=4.51, avg_loss=4.23]
Train:   100%|██████████| 895/895 [02:00&lt;00:00, 10.72it/s, loss=4.32, avg_loss=4.63, lr=0.000475]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 13.60it/s, loss=4.16, avg_loss=3.86]
Train:   100%|██████████| 895/895 [01:57&lt;00:00, 11.12it/s, loss=4.35, avg_loss=4.31, lr=0.000406]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 14.25it/s, loss=4.03, avg_loss=3.62]
Train:   100%|██████████| 895/895 [01:54&lt;00:00, 11.15it/s, loss=3.64, avg_loss=4, lr=0.000306]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 14.10it/s, loss=3.75, avg_loss=3.37]
Train:   100%|██████████| 895/895 [01:54&lt;00:00, 11.08it/s, loss=3.35, avg_loss=3.71, lr=0.000195]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 14.07it/s, loss=3.72, avg_loss=3.13]
Train:   100%|██████████| 895/895 [01:54&lt;00:00, 11.10it/s, loss=3.1, avg_loss=3.44, lr=9.47e-5]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 14.24it/s, loss=3.35, avg_loss=2.9]
Train:   100%|██████████| 895/895 [01:54&lt;00:00, 11.16it/s, loss=2.93, avg_loss=3.24, lr=2.51e-5]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 14.15it/s, loss=3.46, avg_loss=2.8]
Train:   100%|██████████| 895/895 [01:58&lt;00:00, 10.89it/s, loss=3.03, avg_loss=3.14, lr=3.54e-9]
Eval:   100%|██████████| 99/99 [00:10&lt;00:00, 13.65it/s, loss=3.28, avg_loss=2.77]</code></pre>
<p>At last, we have our hand gesture detector. To wrap up the tutorial, we can test our model by performing inference on individual images.</p>
</section>
</section>
<section id="making-predictions-with-the-model" class="level2">
<h2 class="anchored" data-anchor-id="making-predictions-with-the-model">Making Predictions with the Model</h2>
<p>In this final part of the tutorial, we will cover how to perform inference on individual images with our YOLOX model and filter the predictions.</p>
<section id="preparing-the-model-for-inference" class="level3">
<h3 class="anchored" data-anchor-id="preparing-the-model-for-inference">Preparing the Model for Inference</h3>
<p>Whenever we make predictions with the model, we must normalize the input data, scale the predicted bounding boxes, and calculate the associated confidence scores. Since these steps are always required, I included a <a href="https://cj-mills.github.io/cjm-yolox-pytorch/inference.html#yoloxinferencewrapper">wrapper class</a> with the <code>cjm_yolox_pytorch</code> package.</p>
<section id="wrap-the-model-with-preprocessing-and-post-processing-steps" class="level4">
<h4 class="anchored" data-anchor-id="wrap-the-model-with-preprocessing-and-post-processing-steps">Wrap the model with preprocessing and post-processing steps</h4>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the normalization stats to tensors</span></span>
<span id="cb57-2">mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb57-3">std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(norm_stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb57-4"></span>
<span id="cb57-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb57-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb57-7"></span>
<span id="cb57-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap the model with preprocessing and post-processing steps</span></span>
<span id="cb57-9">wrapped_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXInferenceWrapper(model, mean_tensor, std_tensor).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span></code></pre></div>
<p>With our model prepped with the preprocessing and post-processing steps, we only need to prepare some input data.</p>
</section>
</section>
<section id="preparing-input-data" class="level3">
<h3 class="anchored" data-anchor-id="preparing-input-data">Preparing Input Data</h3>
<p>Let’s start with a random image from the validation set. That way, we have some ground truth bounding boxes to compare against. Unlike during training, we won’t stick to square input dimensions for inference. However, we still need to ensure both input dimensions are multiples of the max stride value.</p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random item from the validation set</span></span>
<span id="cb58-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(val_keys)</span>
<span id="cb58-3"></span>
<span id="cb58-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the image file path associated with the file ID</span></span>
<span id="cb58-5">test_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict[file_id]</span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the test file</span></span>
<span id="cb58-8">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_file).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb58-9"></span>
<span id="cb58-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the test image</span></span>
<span id="cb58-11">resized_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb58-12"></span>
<span id="cb58-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the input dimensions are multiples of the max stride</span></span>
<span id="cb58-14">input_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(strides) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> resized_img.size]</span>
<span id="cb58-15"></span>
<span id="cb58-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the offsets from the resized image dimensions to the input dimensions</span></span>
<span id="cb58-17">offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(resized_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> input_dims)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb58-18"></span>
<span id="cb58-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb58-20">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(resized_img.size)</span>
<span id="cb58-21"></span>
<span id="cb58-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the resized image to the input dimensions</span></span>
<span id="cb58-23">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resized_img.crop(box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>resized_img.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offsets])</span>
<span id="cb58-24"></span>
<span id="cb58-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the target labels and bounding boxes</span></span>
<span id="cb58-26">target_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]</span>
<span id="cb58-27">target_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>]</span>
<span id="cb58-28"></span>
<span id="cb58-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale bounding boxes according to image dimensions</span></span>
<span id="cb58-30">target_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(resized_img.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_bboxes]</span>
<span id="cb58-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Offset bounding boxes according to input dimensions</span></span>
<span id="cb58-32">target_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>min_img_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_bboxes])</span>
<span id="cb58-33"></span>
<span id="cb58-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tensor from the test image and annotate it</span></span>
<span id="cb58-35">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb58-36">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(input_img), </span>
<span id="cb58-37">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(target_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb58-38">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_labels, </span>
<span id="cb58-39">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_labels]]</span>
<span id="cb58-40">)</span>
<span id="cb58-41"></span>
<span id="cb58-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated test image</span></span>
<span id="cb58-43">annotated_test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor_to_pil(annotated_tensor)</span>
<span id="cb58-44">display(annotated_test_img)</span>
<span id="cb58-45"></span>
<span id="cb58-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb58-47">pd.Series({</span>
<span id="cb58-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image Size:"</span>: resized_img.size,</span>
<span id="cb58-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_dims,</span>
<span id="cb58-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Offsets:"</span>: offsets,</span>
<span id="cb58-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb58-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size, </span>
<span id="cb58-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_labels, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(target_bboxes, decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))]</span>
<span id="cb58-54">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_92_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_a5b54">
<thead>
</thead>
<tbody>
<tr>
<th id="T_a5b54_level0_row0" class="row_heading level0 row0">
Resized Image Size:
</th>
<td id="T_a5b54_row0_col0" class="data row0 col0">
(384, 511)
</td>
</tr>
<tr>
<th id="T_a5b54_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_a5b54_row1_col0" class="data row1 col0">
[384, 480]
</td>
</tr>
<tr>
<th id="T_a5b54_level0_row2" class="row_heading level0 row2">
Offsets:
</th>
<td id="T_a5b54_row2_col0" class="data row2 col0">
[ 0. 15.5]
</td>
</tr>
<tr>
<th id="T_a5b54_level0_row3" class="row_heading level0 row3">
Min Image Scale:
</th>
<td id="T_a5b54_row3_col0" class="data row3 col0">
1.000000
</td>
</tr>
<tr>
<th id="T_a5b54_level0_row4" class="row_heading level0 row4">
Input Image Size:
</th>
<td id="T_a5b54_row4_col0" class="data row4 col0">
(384, 480)
</td>
</tr>
<tr>
<th id="T_a5b54_level0_row5" class="row_heading level0 row5">
Target BBoxes:
</th>
<td id="T_a5b54_row5_col0" class="data row5 col0">
[‘palm:[208.828 180.933 117.177 151.437]’]
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="pass-the-input-data-to-the-model" class="level3">
<h3 class="anchored" data-anchor-id="pass-the-input-data-to-the-model">Pass the input data to the model</h3>
<p>Now we can convert the test image to a tensor and pass it to the wrapped model.</p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the model and input data are on the same device</span></span>
<span id="cb59-2">wrapped_model.to(device)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb59-3">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToImage(), </span>
<span id="cb59-4">                                   transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)])(input_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].to(device)</span>
<span id="cb59-5"></span>
<span id="cb59-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb59-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb59-8">    model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrapped_model(input_tensor)</span>
<span id="cb59-9"></span>
<span id="cb59-10">model_output.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3780, 6])</code></pre>
<p>With an input resolution of <code>384x480</code>, there are <code>3780</code> bounding box proposals. Each contains the top-left X and Y coordinates and dimensions for a bounding box, plus the class index and the associated confidence score. Most of these proposals are useless, so we’ll filter them out.</p>
</section>
<section id="filtering-model-output" class="level3">
<h3 class="anchored" data-anchor-id="filtering-model-output">Filtering Model Output</h3>
<p>We first use a threshold value to remove proposals the model is not confident about. Then, we can use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.nms.html#torchvision.ops.nms"><code>nms</code></a> function included with torchvision to remove overlapping bounding boxes using non-maximum suppression.</p>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the bounding box confidence threshold</span></span>
<span id="cb61-2">bbox_conf_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb61-3"></span>
<span id="cb61-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move model output to the CPU</span></span>
<span id="cb61-5">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb61-6"></span>
<span id="cb61-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the proposals based on the confidence threshold</span></span>
<span id="cb61-8">max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[:, : ,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb61-9">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bbox_conf_thresh</span>
<span id="cb61-10">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[mask]</span>
<span id="cb61-11"></span>
<span id="cb61-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the proposals by probability in descending order</span></span>
<span id="cb61-13">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposals[..., <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].argsort(descending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)]</span>
<span id="cb61-14"></span>
<span id="cb61-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the non-max suppression threshold</span></span>
<span id="cb61-16">iou_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb61-17"></span>
<span id="cb61-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter bouning box proposals using NMS</span></span>
<span id="cb61-19">proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.nms(</span>
<span id="cb61-20">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(proposals[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb61-21">    scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>proposals[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb61-22">    iou_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iou_thresh</span>
<span id="cb61-23">)</span>
<span id="cb61-24">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposal_indices]</span>
<span id="cb61-25"></span>
<span id="cb61-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the proposals to a Pandas DataFrame</span></span>
<span id="cb61-27">proposals_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([</span>
<span id="cb61-28">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x0'</span>: x0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y0'</span>: y0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: w, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: h, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prob'</span>: prob} </span>
<span id="cb61-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x0, y0, w, h, label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> proposals.numpy()</span>
<span id="cb61-30">])</span>
<span id="cb61-31"></span>
<span id="cb61-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(proposals_df) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb61-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the label names to the DataFrame</span></span>
<span id="cb61-34">    proposals_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x)])</span>
<span id="cb61-35"></span>
<span id="cb61-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the proposals Dataframe</span></span>
<span id="cb61-37">proposals_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
x0
</th>
<th>
y0
</th>
<th>
width
</th>
<th>
height
</th>
<th>
label
</th>
<th>
prob
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
210.370773
</td>
<td>
181.496429
</td>
<td>
113.071388
</td>
<td>
148.285553
</td>
<td>
palm
</td>
<td>
0.958708
</td>
</tr>
</tbody>

</table>
</div>
<p>By the end, we have a single <code>palm</code> gesture proposal. All that’s left is to see how it compares to the ground-truth bounding box for this sample.</p>
<section id="annotate-image-using-bounding-box-proposals" class="level4">
<h4 class="anchored" data-anchor-id="annotate-image-using-bounding-box-proposals">Annotate image using bounding box proposals</h4>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract x0, y0, width, height columns</span></span>
<span id="cb62-2">pred_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:,:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb62-3"></span>
<span id="cb62-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract label and prob columns as lists</span></span>
<span id="cb62-5">pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(idx)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span>
<span id="cb62-6">pred_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb62-7"></span>
<span id="cb62-8">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb62-9">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(input_img), </span>
<span id="cb62-10">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(pred_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb62-11">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_probs)], </span>
<span id="cb62-12">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[class_names.index(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pred_labels]</span>
<span id="cb62-13">)</span>
<span id="cb62-14"></span>
<span id="cb62-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated test image with the predicted bounding boxes</span></span>
<span id="cb62-16">display(stack_imgs([annotated_test_img, tensor_to_pil(annotated_tensor)]))</span>
<span id="cb62-17"></span>
<span id="cb62-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb62-19">pd.Series({</span>
<span id="cb62-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_labels, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(target_bboxes, decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))],</span>
<span id="cb62-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_bboxes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).numpy())],</span>
<span id="cb62-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Scores:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_probs)]</span>
<span id="cb62-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_98_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_5ea2f">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5ea2f_level0_row0" class="row_heading level0 row0">
Target BBoxes:
</th>
<td id="T_5ea2f_row0_col0" class="data row0 col0">
[‘palm:[208.828 180.933 117.177 151.437]’]
</td>
</tr>
<tr>
<th id="T_5ea2f_level0_row1" class="row_heading level0 row1">
Predicted BBoxes:
</th>
<td id="T_5ea2f_row1_col0" class="data row1 col0">
[‘palm:[210.371 181.496 113.071 148.286]’]
</td>
</tr>
<tr>
<th id="T_5ea2f_level0_row2" class="row_heading level0 row2">
Confidence Scores:
</th>
<td id="T_5ea2f_row2_col0" class="data row2 col0">
[‘palm: 95.87%’]
</td>
</tr>
</tbody>

</table>
</div>
<p>The predicted bounding box is not a perfect match to the ground-truth values, but it’s pretty close. Now let’s test the model on a brand-new image.</p>
</section>
</section>
<section id="testing-the-model-on-new-data" class="level3">
<h3 class="anchored" data-anchor-id="testing-the-model-on-new-data">Testing the Model on New Data</h3>
<p>If we deploy the model in a real-world setting, we might want to scale predicted bounding boxes back up to a high-resolution source image. Below, we’ll show how to do this using an input image with a different aspect ratio than the source image. The test image is from the free stock photo site, <a href="https://www.pexels.com/photo/man-doing-rock-and-roll-sign-2769554/">Pexels</a>.</p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb63-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb63-3"></span>
<span id="cb63-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb63-5"></span>
<span id="cb63-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb63-7"></span>
<span id="cb63-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop test image so it's height is not a multiple of the max stride</span></span>
<span id="cb63-9">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_img.crop(box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, test_img.width, test_img.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb63-10">display(test_img)</span>
<span id="cb63-11"></span>
<span id="cb63-12">pd.Series({</span>
<span id="cb63-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb63-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image Size:"</span>: test_img.size</span>
<span id="cb63-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_100_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_9e9ba">
<thead>
</thead>
<tbody>
<tr>
<th id="T_9e9ba_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_9e9ba_row0_col0" class="data row0 col0">
(640, 958)
</td>
</tr>
<tr>
<th id="T_9e9ba_level0_row1" class="row_heading level0 row1">
Cropped Image Size:
</th>
<td id="T_9e9ba_row1_col0" class="data row1 col0">
(640, 958)
</td>
</tr>
</tbody>

</table>
</div>
<p>Since the input and source images have different aspect ratios, we’ll offset any predicted bounding box coordinates.</p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize image without cropping to multiple of the max stride</span></span>
<span id="cb64-2">resized_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb64-3"></span>
<span id="cb64-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating the input dimensions that multiples of the max stride</span></span>
<span id="cb64-5">input_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(strides) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> resized_img.size]</span>
<span id="cb64-6"></span>
<span id="cb64-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the offsets from the resized image dimensions to the input dimensions</span></span>
<span id="cb64-8">offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(resized_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> input_dims)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb64-9"></span>
<span id="cb64-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb64-11">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(resized_img.size)</span>
<span id="cb64-12"></span>
<span id="cb64-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the resized image to the input dimensions</span></span>
<span id="cb64-14">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resized_img.crop(box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>resized_img.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offsets])</span>
<span id="cb64-15"></span>
<span id="cb64-16">display(input_img)</span>
<span id="cb64-17"></span>
<span id="cb64-18">pd.Series({</span>
<span id="cb64-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image Size:"</span>: resized_img.size,</span>
<span id="cb64-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_dims,</span>
<span id="cb64-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Offsets:"</span>: offsets,</span>
<span id="cb64-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb64-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb64-24">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_101_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_59a8a">
<thead>
</thead>
<tbody>
<tr>
<th id="T_59a8a_level0_row0" class="row_heading level0 row0">
Resized Image Size:
</th>
<td id="T_59a8a_row0_col0" class="data row0 col0">
(384, 574)
</td>
</tr>
<tr>
<th id="T_59a8a_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_59a8a_row1_col0" class="data row1 col0">
[384, 544]
</td>
</tr>
<tr>
<th id="T_59a8a_level0_row2" class="row_heading level0 row2">
Offsets:
</th>
<td id="T_59a8a_row2_col0" class="data row2 col0">
[ 0. 15.]
</td>
</tr>
<tr>
<th id="T_59a8a_level0_row3" class="row_heading level0 row3">
Min Image Scale:
</th>
<td id="T_59a8a_row3_col0" class="data row3 col0">
1.666667
</td>
</tr>
<tr>
<th id="T_59a8a_level0_row4" class="row_heading level0 row4">
Input Image Size:
</th>
<td id="T_59a8a_row4_col0" class="data row4 col0">
(384, 544)
</td>
</tr>
</tbody>

</table>
</div>
<p>With our input image prepared, we can pass it through the model and perform the same filtering steps. But this time, we’ll offset the <code>(x,y)</code> coordinates for the predicted bounding boxes and scale the dimensions to the source resolution.</p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToImage(), </span>
<span id="cb65-2">                                   transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)])(input_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].to(device)</span>
<span id="cb65-3">wrapped_model.to(device)</span>
<span id="cb65-4"></span>
<span id="cb65-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb65-6">    model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrapped_model(input_tensor).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb65-7"></span>
<span id="cb65-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the proposals based on the confidence threshold</span></span>
<span id="cb65-9">max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[:, : ,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb65-10">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bbox_conf_thresh</span>
<span id="cb65-11">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[mask]</span>
<span id="cb65-12"></span>
<span id="cb65-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the proposals by probability in descending order</span></span>
<span id="cb65-14">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposals[..., <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].argsort(descending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)]</span>
<span id="cb65-15"></span>
<span id="cb65-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter bouning box proposals using NMS</span></span>
<span id="cb65-17">proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.nms(</span>
<span id="cb65-18">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(proposals[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb65-19">    scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>proposals[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb65-20">    iou_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iou_thresh</span>
<span id="cb65-21">)</span>
<span id="cb65-22">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposal_indices]</span>
<span id="cb65-23"></span>
<span id="cb65-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Offset and scale the predicted bounding boxes</span></span>
<span id="cb65-25">pred_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (proposals[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>torch.Tensor([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span>
<span id="cb65-26"></span>
<span id="cb65-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract label and prob columns as lists</span></span>
<span id="cb65-28">pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(idx)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span>
<span id="cb65-29">pred_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb65-30"></span>
<span id="cb65-31">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb65-32">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(test_img), </span>
<span id="cb65-33">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(pred_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb65-34">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_probs)], </span>
<span id="cb65-35">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[class_names.index(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pred_labels]</span>
<span id="cb65-36">)</span>
<span id="cb65-37"></span>
<span id="cb65-38">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb65-39"></span>
<span id="cb65-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas Series for easy formatting</span></span>
<span id="cb65-41">pd.Series({</span>
<span id="cb65-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_bboxes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).numpy())],</span>
<span id="cb65-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Scores:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pred_labels, pred_probs)]</span>
<span id="cb65-44">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/images/output_102_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">

<table id="T_1ad00">
<thead>
</thead>
<tbody>
<tr>
<th id="T_1ad00_level0_row0" class="row_heading level0 row0">
Predicted BBoxes:
</th>
<td id="T_1ad00_row0_col0" class="data row0 col0">
[‘rock:[341.466 240.903 112.367 113.142]’, ‘no_gesture:[197.428 520.04 100.073 77.791]’]
</td>
</tr>
<tr>
<th id="T_1ad00_level0_row1" class="row_heading level0 row1">
Confidence Scores:
</th>
<td id="T_1ad00_row1_col0" class="data row1 col0">
[‘rock: 93.36%’, ‘no_gesture: 84.87%’]
</td>
</tr>
</tbody>

</table>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the model checkpoint and class labels from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
<li>Once you finish training and download the files, turn off hardware acceleration for the Colab Notebook to save GPU time. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#using-hardware-acceleration">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on completing this tutorial for training real-time object detection models in PyTorch! By now, you have successfully built a hand gesture detector that can identify and locate various gestures within images. The skills and knowledge you’ve acquired here serve as a solid foundation for future object detection projects.</p>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="./onnx-export/"><strong>Exporting YOLOX Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export YOLOX models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
<li><a href="./tfjs-export/"><strong>Exporting YOLOX Models from PyTorch to TensorFlow.js</strong></a><strong>:</strong> Learn how to export YOLOX models from PyTorch to TensorFlow.js using the nobuco conversion tool.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>object-detection</category>
  <category>yolox</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Testing Intel’s Arc A770 GPU for Deep Learning Pt. 3</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/arc-a770-testing/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Training Style Transfer Models</li>
<li>Generating Images with 🤗 Diffusers</li>
<li>No Luck Fine-tuning LLMs</li>
<li>Closing Thoughts</li>
</ul>
<section id="series-links" class="level2">
<h2 class="anchored" data-anchor-id="series-links">Series Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: I tested inference performance with OpenVINO and DirectML on the A770 and attempted to train models using PyTorch-DirectML.</li>
<li><a href="../part-2/">Part 2</a>: I trained image classification models with Intel’s PyTorch extension on the Arc A770 GPU.</li>
<li><a href="../part-3/">Part 3</a>: I trained style transfer models and ran Stable Diffusion 2.1 using 🤗 Diffusers with Intel’s PyTorch extension on the Arc A770.</li>
<li><a href="../part-4/">Part 4</a>: I tested the first version of Intel’s PyTorch extension to support PyTorch 2.0 on native Ubuntu and Windows.</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Ubuntu</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Ubuntu to train models with Arc GPUs</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-windows/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Windows</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Windows to train models with Arc GPUs.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../part-2/">Part 2</a> of this series, I successfully fine-tuned an image classification model with Intel’s PyTorch extension on the Arc A770 GPU. Total training time was within <code>10%</code> of the Titan RTX using mixed precision.</p>
<p>I started with an image classification task to give the A770 and Intel’s extension the best chance of success. Image classification is a common task in deep learning, and the ResNet family of models is a popular choice for such tasks.</p>
<p>Once I knew that this baseline scenario worked, I wanted to try something slightly more complex. I decided to start with one of my style transfer training notebooks. I also tested running Stable Diffusion 2.1 using the 🤗 Diffusers library.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The results in this post are with version <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/"><code>1.13.120+xpu</code></a> of Intel’s PyTorch extension.</p>
</div>
</div>
</section>
<section id="training-style-transfer-models" class="level2">
<h2 class="anchored" data-anchor-id="training-style-transfer-models">Training Style Transfer Models</h2>
<p>My style transfer training notebook uses a custom style transfer model and a custom class for perceptual style loss to extract features from a pre-trained computer vision model. There is nothing exotic about the training code, but it is slightly non-standard compared to the image classification task. You can find the original training notebook on GitHub at the link below:</p>
<ul>
<li><a href="https://github.com/cj-mills/fastai-2022p2-notes/blob/main/notebooks/fast_neural_style-baseline.ipynb">fast_neural_style-baseline.ipynb</a></li>
</ul>
<p>Once I swapped the <code>cuda</code> backend references for Intel’s <code>xpu</code> backend, the notebook mostly worked as intended. I only needed to make one change to the style transfer model. The current version (<a href="https://github.com/intel/intel-extension-for-pytorch/releases/tag/v1.13.120%2Bxpu">1.13.120+xpu</a>) of Intel’s extension does not fully implement the <a href="https://pytorch.org/docs/stable/generated/torch.nn.ReflectionPad2d.html">ReflectionPad2D</a> layer in <code>bloat16</code> precision.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RuntimeError:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reflection_pad2d_out_template"</span> not implemented for <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BFloat16'</span></span></code></pre></div>
<p>It does for <code>float32</code> precision, but training without mixed precision takes much longer. Fortunately, the <a href="https://pytorch.org/docs/stable/generated/torch.nn.ZeroPad2d.html">ZeroPad2D</a> layer works just fine in mixed precision. The <a href="https://pytorch.org/docs/stable/generated/torch.nn.ReplicationPad2d.html">ReplicationPad2D</a> layer also works but is slower.</p>
<p>Here is a sample output from a model trained on the A770 using <a href="https://www.vangoghgallery.com/painting/starry-night.html">Van Gogh’s Starry Night</a> painting as the style image:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-3/images/intel-arc-style-transfer-notebook-sample-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The output images are similar in quality to those generated with the original notebook on the Titan RTX. However, using a ZeroPad2D layer might require slightly more training as the borders are noticeable on some of the images. Below is a comparison of the total training time for the Arc A770 and the Titan RTX:</p>
<table class="table">
<thead>
<tr class="header">
<th>Device</th>
<th>Training Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Arc A770</td>
<td>1 hour 55 minutes</td>
</tr>
<tr class="even">
<td>Titan RTX</td>
<td>1 hour 37 minutes</td>
</tr>
</tbody>
</table>
<p>There is a more significant percentage gap in total training time than with the image classification notebook at approximately <code>18.6%</code>. I’ll need to conduct further testing to see if that difference is due to calculating the perceptual loss or some other part of the training process.</p>
</section>
<section id="generating-images-with-diffusers" class="level2">
<h2 class="anchored" data-anchor-id="generating-images-with-diffusers">Generating Images with 🤗 Diffusers</h2>
<p>Next, I modified one of my <a href="https://github.com/cj-mills/fastai-2022p2-notes/blob/main/notebooks/inference-sd-text2img.ipynb">text-to-image notebooks</a> to try running Stable Diffusion 2.1 with Intel’s PyTorch extension.</p>
<p>I only encountered one issue with the original notebook code. I use PyTorch’s <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html">Generator</a> class to save and load the state of the random number generation algorithms when generating images in the original notebook. The Generator class does not appear to support <code>xpu</code> devices in the current version of Intel’s extension, so I had to remove those sections from the notebook. Other than that, everything worked without issue.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-3/images/intel-arc-hf-diffusers-sd-2-1-sample.png" class="img-fluid figure-img"></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Prompt:</strong> “monet oil painting, a puppy”</p>
</blockquote>
<p>I compared the performance of the A770 and Titan RTX by generating <code>512x512</code> images at <code>float16</code> precision. Since the <a href="https://github.com/facebookresearch/xformers"><code>xformers</code></a> library does not support Arc GPUs, I did not enable it when benchmarking the inference speed on the Titan RTX for this comparison. Although, I did use PyTorch <code>2.0</code> for the Titan RTX runs.</p>
<table class="table">
<thead>
<tr class="header">
<th>Device</th>
<th>Model Compilation</th>
<th>Iterations/second</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Arc A770</td>
<td>N/A</td>
<td>5.97it/s</td>
</tr>
<tr class="even">
<td>Titan RTX</td>
<td>None</td>
<td>15.76it/s</td>
</tr>
<tr class="odd">
<td>Titan RTX</td>
<td><code>default</code></td>
<td>18.88it/s</td>
</tr>
<tr class="even">
<td>Titan RTX</td>
<td><code>reduce-overhead</code></td>
<td>19.37it/s</td>
</tr>
<tr class="odd">
<td>Titan RTX</td>
<td><code>max-autotune</code></td>
<td>19.68it/s</td>
</tr>
</tbody>
</table>
<p>Even without model compilation, the Titan RTX is over twice as fast as the A770. With model compilation, it’s over <code>3x</code> faster. Still, the A770’s performance is far from unusable. I’ll rerun the comparison once Intel’s extension supports PyTorch <code>&gt;=2.0</code>.</p>
</section>
<section id="no-luck-fine-tuning-llms" class="level2">
<h2 class="anchored" data-anchor-id="no-luck-fine-tuning-llms">No Luck Fine-tuning LLMs</h2>
<p>I’ve been excited about the recent developments for fine-tuning LLMs on local machines, and I think the relatively affordable A770 16GB card has a lot of potential for that use case. Unfortunately, projects like <a href="https://github.com/tloen/alpaca-lora">Alpaca-LoRA</a> and <a href="https://github.com/artidoro/qlora">QLoRA</a> have dependencies, such as the <a href="https://github.com/TimDettmers/bitsandbytes"><code>bitsandbytes</code></a> package, that require CUDA devices. The <code>bitsandbytes</code> package provides the quantization capability that lowers the memory requirements to run LLMs. It provides this functionality using custom CUDA functions. I don’t know of any plans to add support for Intel GPUs to the <code>bitsandbytes</code> package, so perhaps Intel will provide an alternative.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>At the end of Part 2, I stated that I believe Arc GPUs are now credible options for deep learning. My experience testing the A770 on some more complicated use cases mostly reaffirms that. Running the style transfer and Diffusers notebooks with Intel’s PyTorch extension only took a couple of changes.</p>
<p>However, Nvidia GPUs have been dominant for a long time and will likely continue to get priority for cutting-edge developments like the quantization methods used in QLoRA. Anyone considering an Arc GPU for deep learning should keep that in mind and verify the dependencies needed for their target use case support Arc GPUs.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-3/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Testing Intel’s Arc A770 GPU for Deep Learning Pt. 2</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/arc-a770-testing/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Initial Headaches</li>
<li>Training Performance on Native Ubuntu</li>
<li>Training Performance on WSL</li>
<li>Closing Thoughts</li>
</ul>
<section id="series-links" class="level2">
<h2 class="anchored" data-anchor-id="series-links">Series Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: I tested inference performance with OpenVINO and DirectML on the A770 and attempted to train models using PyTorch-DirectML.</li>
<li><a href="../part-2/">Part 2</a>: I trained image classification models with Intel’s PyTorch extension on the Arc A770 GPU.</li>
<li><a href="../part-3/">Part 3</a>: I trained style transfer models and ran Stable Diffusion 2.1 using 🤗 Diffusers with Intel’s PyTorch extension on the Arc A770.</li>
<li><a href="../part-4/">Part 4</a>: I tested the first version of Intel’s PyTorch extension to support PyTorch 2.0 on native Ubuntu and Windows.</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Ubuntu</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Ubuntu to train models with Arc GPUs</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-windows/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Windows</a>: This tutorial provides a step-by-step guide to setting up Intel’s PyTorch extension on Windows to train models with Arc GPUs.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><a href="../part-1/">Last October</a>, I wrote about my findings from testing the inference performance of Intel’s <a href="https://www.intel.com/content/www/us/en/products/sku/229151/intel-arc-a770-graphics-16gb/specifications.html">Arc A770</a> GPU using <a href="https://docs.openvino.ai/2022.3/home.html">OpenVINO</a> and <a href="https://learn.microsoft.com/en-us/windows/ai/directml/dml">DirectML</a>. I also attempted to train various models with the <a href="https://pypi.org/project/pytorch-directml/">PyTorch-DirectML</a> package. The card did well on inference, especially with Intel’s OpenVINO library. However, the PyTorch-DirectML package was incomplete, and I could not adequately test the card’s training performance.</p>
<p>Shortly after that post, Intel released an <a href="https://github.com/intel/intel-extension-for-pytorch/releases/tag/v1.10.200%2Bgpu">extension for PyTorch</a>, which added support for Intel GPUs. Based on my initial testing, I decided the extension was not in a state that warranted a follow-up post. In hindsight, I don’t believe the initial release officially supported Arc GPUs. The <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.10.200+gpu/tutorials/installation.html#hardware-requirement">installation guide</a> for that version only mentions data center GPUs.</p>
<p>Since then, Intel has released a couple of updates for the extension, the most <a href="https://github.com/intel/intel-extension-for-pytorch/releases/tag/v1.13.120%2Bxpu">recent</a> being about a month ago at the time of writing. Unlike the initial release, this version lists Arc GPUs as having <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/tutorials/installation.html#hardware-requirement">experimental support</a>. Given that and the driver improvements for Windows and Linux, I decided to pop the A770 back into my desktop and give it another shot. In short, it works now.</p>
<p>In this post, I discuss my experience getting Intel’s PyTorch extension running on Ubuntu and Windows Subsystem for Linux (WSL). I also cover my initial findings from training models. I’ll provide a tutorial for setting up and using the extension in a dedicated post.</p>
<ul>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel’s PyTorch Extension for Arc GPUs on Ubuntu</a></li>
</ul>
</section>
<section id="initial-headaches" class="level2">
<h2 class="anchored" data-anchor-id="initial-headaches">Initial Headaches</h2>
<p>To be blunt, my initial attempts to get this working were a bit of a nightmare. The instructions required to enable support for Arc GPUs on Ubuntu and set up Intel’s PyTorch extension span across multiple sites and are sometimes contradictory. The instructions on some sites are outdated to the point of being impossible to follow.</p>
<p>For example, Intel’s Arc Graphics Driver for Ubuntu <a href="https://www.intel.com/content/www/us/en/download/747008/intel-arc-graphics-driver-ubuntu.html">page</a> provided a link to a separate documentation site with driver installation instructions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-arc-graphics-driver-ubuntu-page.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The instructions on the documentation site say to <a href="https://dgpu-docs.intel.com/installation-guides/ubuntu/ubuntu-jammy-arc.html#step-2-install-linux-kernel">install a specific Linux kernel</a>, <code>5.19.0-35</code>, which is <a href="https://www.ubuntuupdates.org/package/core/jammy/main/updates/linux-image-5.19.0-35-generic">no longer available</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-dgpu-docs-ubuntu-driver-installation-instructions-install-kernel.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Still, I attempted to follow the instructions on a new Ubuntu 22.04 install and a more recent <code>5.19</code> kernel. Trying to boot into Ubuntu on the Arc card with the <code>5.19</code> kernel results in the following error:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">snd_hda_intel</span> 0000:04:00.0 hsw/bdw hd-audio hdmi/dp requires binding with gfx driver</span></code></pre></div>
<p>The error is a known issue, and Intel even has a <a href="https://www.intel.com/content/www/us/en/support/articles/000092607/graphics.html">troubleshooting page</a> with a proposed workaround. Unfortunately, disabling the “Integrated graphics Multi-Monitor” BIOS option, as the page recommends, did not resolve the issue.</p>
<p>I decided to continue following the instructions on integrated graphics and see if I could use the Arc card once I installed all the driver packages. That attempt went so poorly that I had to pop out the motherboard’s CMOS battery to reset the BIOS.</p>
<p>I made several more attempts, which failed at various stages. Fortunately, I eventually got everything working, and my current setup process is pretty straightforward.</p>
<p>I ended up needing Linux kernel <code>6.2</code> or newer. That kernel version <a href="https://www.phoronix.com/news/Linux-6.2-Released">supports the Arc card</a> out of the box. You can install that kernel on Ubuntu 22.04, but I recommend just going with Ubuntu 23.04 (or newer) if starting from a fresh install. Ubuntu 23.04 already has a kernel version <code>≥6.2</code>, and I verified it works with Intel’s PyTorch extension.</p>
<p>As mentioned earlier, I’ll provide detailed instructions for the setup process in a dedicated post.</p>
</section>
<section id="training-performance-on-native-ubuntu" class="level2">
<h2 class="anchored" data-anchor-id="training-performance-on-native-ubuntu">Training Performance on Native Ubuntu</h2>
<p>I used the training notebook from my recent <a href="../../pytorch-train-image-classifier-timm-hf-tutorial/">beginner PyTorch tutorial</a> for testing. That tutorial covers fine-tuning image classification models with PyTorch and the timm library by creating a hand gesture recognizer. Using the training notebook simplifies directly comparing the Arc A770 and my Titan RTX, which I used to create the tutorial. Nearly everything is identical for the testing environment down to the dataset location.</p>
<p>The one additional variable is that the tutorial uses PyTorch 2.0, while Intel’s PyTorch extension currently requires a <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/latest/tutorials/installation.html#pytorch-intel-extension-for-pytorch-version-mapping">patched version</a> of PyTorch 1.13. However, I don’t use model compilation in the tutorial, so this should not be a significant factor.</p>
<p>The training notebook only required a few tweaks to use Intel’s PyTorch extension, with most of the code remaining unchanged. The extension even supports PyTorch’s <code>autocast()</code> context manager for mixed-precision training.</p>
<p>The first training session was alarmingly slow, with the first pass through the training set taking around 42 minutes and 30 seconds. However, the loss and accuracy values were comparable to those with the Titan RTX, so I let it run for a while. After the first epoch, passes through the training set fell to approximately 16 minutes and 50 seconds. The total training time was only a few minutes less than the free GPU tier on Google Colab. Strangely, the inference speed on the validation set was nearly identical to the Titan RTX.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-ubuntu-bad-memory-layout.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can get more insight into using the <code>intel-gpu-top</code> command-line tool. Below are the readouts from the first and third passes through the training set:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">First Pass</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Third Pass</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-gpu-top-arc-a770-usage-training-bad-memory-layout.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-gpu-top-arc-a770-usage-training-bad-memory-layout-third-epoch.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Note that the memory throughput for the first training pass is particularly low. Although, the third pass is not great, either.</p>
<p>After some investigation on the <a href="https://github.com/intel/intel-extension-for-pytorch/issues/296#issuecomment-1426537682">extension’s GitHub repository</a>, it appears the slow training time is due to the backward pass for some operations. Fortunately, the fix involved setting a <a href="https://github.com/intel/intel-extension-for-pytorch/issues/296#issuecomment-1461118993">single environment variable</a>.</p>
<p>After setting <code>IPEX_XPU_ONEDNN_LAYOUT=1</code>, the total training time is within 10% of my Titan RTX on the same system. The gap would be slightly wider if I compiled the model on the Titan with PyTorch 2.0.</p>
<p>We can see the difference with <code>intel-gpu-top</code>, which shows much higher memory throughput.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-gpu-top-arc-a770-usage-training.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The final loss and accuracy values fluctuate slightly, even when using fixed seed values for PyTorch, NumPy, and Python. However, they stay pretty close to the results on my Nvidia GPU.</p>
<p>Here is a screenshot of the training session with the Arc A770:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-ubuntu.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Here is a link to the training session with the Titan RTX:</p>
<ul>
<li><a href="../../pytorch-train-image-classifier-timm-hf-tutorial/#train-the-model">Titan RTX training session</a></li>
</ul>
<pre class="text"><code>Epochs: 100%|█████████| 3/3 [11:15&lt;00:00, 224.96s/it]
Train: 100%|██████████| 4324/4324 [03:29&lt;00:00, 21.75it/s, accuracy=0.894, avg_loss=0.374, loss=0.0984, lr=0.000994]
Eval: 100%|██████████| 481/481 [00:17&lt;00:00, 50.42it/s, accuracy=0.975, avg_loss=0.081, loss=0.214, lr=]
Train: 100%|██████████| 4324/4324 [03:28&lt;00:00, 22.39it/s, accuracy=0.968, avg_loss=0.105, loss=0.0717, lr=0.000462]
Eval: 100%|██████████| 481/481 [00:16&lt;00:00, 55.14it/s, accuracy=0.988, avg_loss=0.0354, loss=0.02, lr=]
Train: 100%|██████████| 4324/4324 [03:28&lt;00:00, 21.94it/s, accuracy=0.99, avg_loss=0.0315, loss=0.00148, lr=4.03e-9]
Eval: 100%|██████████| 481/481 [00:16&lt;00:00, 53.87it/s, accuracy=0.995, avg_loss=0.0173, loss=0.000331, lr=]</code></pre>
<p>The training sessions for the A770 and the Titan both used mixed precision.</p>
<p>I also tested training on the Arc card with the newer 6.3 Linux kernel but did not see a notable performance difference versus the 6.2 Linux kernel.</p>
<p>Since Intel’s extension only recently added support for Arc cards, more performance may get unlocked in future updates. However, getting so close to the Titan RTX was already more than I had hoped.</p>
<p>I decided to move on and see how the extension performed in WSL.</p>
</section>
<section id="training-performance-on-wsl" class="level2">
<h2 class="anchored" data-anchor-id="training-performance-on-wsl">Training Performance on WSL</h2>
<p>Now that I had a streamlined process for setting everything up on Ubuntu, getting WSL up and running was easy. It only required a subset of the steps compared to a bare-metal Ubuntu installation. I used the default <a href="https://apps.microsoft.com/store/detail/ubuntu/9PDXGNCFSCZV">Ubuntu terminal environment</a> and stuck with the included kernel.</p>
<p>Total training time in WSL is <code>≈34%</code> slower than in native Ubuntu with the dataset in the same virtual hard disk (VHD) that stores the WSL-Ubuntu install.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-wsl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I remember getting a similar performance hit the last time I used WSL with the Titan RTX. It’s one of the reasons I prefer to dual-boot Windows and Ubuntu.</p>
<p>Here is a screenshot of the GPU usage when running the training notebook on the A770 in WSL:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/task-manager-pytorch-arc-a770-wsl-gpu-usage.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>There is an additional <code>≈20%</code> increase in training time when storing the dataset outside the VHD with the WSL-Ubuntu install.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-wsl-external-dataset.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>One workaround is to <a href="https://woshub.com/move-wsl-another-drive-windows/">move the WSL installation</a> to a larger drive if your <code>C</code> drive has limited space.</p>
<p>The performance hit makes it hard to recommend WSL for deep learning tasks. On top of that, the <a href="https://christianjmills.com/posts/pytorch-cuda-wsl2/#the-headaches">issues</a> I encountered when I first tested using PyTorch on WSL2 in 2020 are still present, at least on Windows 10.</p>
<p>Therefore, I recommend using a bare-metal installation to get the most out of your hardware. The Ubuntu website provides <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">a step-by-step guide</a> to installing Ubuntu on your PC, and you can install it alongside an existing operating system.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>My experience with the PyTorch-DirectML package and the first version of Intel’s extension left me thinking it would be a while before the Arc GPUs became viable options for deep learning.</p>
<p>Several months later, my initial attempts to get everything working last week had me thinking it would be even longer still. Fortunately, once you know the proper steps, setting everything up is relatively straightforward.</p>
<p>While there is much more testing to do, I believe the Arc GPUs are now credible options for deep learning.</p>
<p>There are likely still edge cases or certain operations that cause problems, and I’ll make updates to this post if I encounter any. I’ll also try to keep the <a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">setup tutorial</a> updated as new versions of Intel’s PyTorch extension come out.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>wsl2</category>
  <category>image-classification</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-2/index.html</guid>
  <pubDate>Tue, 30 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading and Exploring the Dataset</li>
<li>Selecting a Model</li>
<li>Preparing the Data</li>
<li>Fine-tuning the Model</li>
<li>Making Predictions with the Model</li>
<li>Exploring the In-Browser Demo</li>
<li>Conclusion</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="./"><strong>Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</strong></a>: Learn how to fine-tune image classification models with PyTorch and the timm library by creating a hand gesture recognizer in this easy-to-follow guide for beginners.</li>
<li><a href="./onnx-export/"><strong>Exporting timm Image Classifiers from Pytorch to ONNX</strong></a><strong>:</strong> Learn how to export timm image classification models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to fine-tuning image classifiers with <a href="https://pytorch.org/">PyTorch</a> and the <a href="https://github.com/huggingface/pytorch-image-models">timm library</a>! Fine-tuning refers to taking a pre-trained model and adjusting its parameters using a new dataset to enhance its performance on a specific task. We can leverage pre-trained models to achieve high performance even when working with limited data and computational resources. The timm library further aids our goal with its wide range of pre-trained models, catering to diverse needs and use cases.</p>
<p>In this tutorial, we develop a hand gesture recognizer. Hand gesture recognition has many real-world applications, ranging from human-computer interaction and sign-language translation to creating immersive gaming experiences. By the end of this tutorial, you will have a practical hand gesture recognizer and a solid foundation to apply to other image classification tasks. You’ll also be able to interact with a model trained with this tutorial’s code through an in-browser demo that runs locally on your computer. Check out the video below for a quick preview.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./video/pytorch-timm-gesture-recognition-tutorial-demo.mp4" class="img-fluid" controls=""><a href="./video/pytorch-timm-gesture-recognition-tutorial-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>This guide is structured so that you don’t need a deep understanding of deep learning to complete it. If you follow the instructions, you can make it through! Yet, if you are eager to delve deeper into machine learning and deep learning, I recommend fast.ai’s <a href="https://course.fast.ai/">Practical Deep Learning for Coders</a> course. The course employs a hands-on approach that starts you off training models from the get-go and gradually digs deeper into the foundational concepts.</p>
<p>Let’s dive in and start training our hand gesture classifier!</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. If you’re new to these platforms or need some guidance setting up, I’ve created dedicated tutorials to help you:</p>
<ul>
<li><p><a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a><strong>:</strong> This tutorial introduces you to Google Colab, a free, cloud-based Jupyter Notebook service. You’ll learn to write, run, and share Python code directly in your browser.</p></li>
<li><p><a href="https://christianjmills.com/posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a><strong>:</strong> This tutorial guides you through installing the Mamba package manager on Windows, setting up a local Python environment, and installing PyTorch and Jupyter for machine learning projects.</p></li>
</ul>
<p>No matter your choice of environment, you’ll be well-prepared to follow along with the rest of this tutorial. You can download the notebook from the tutorial’s GitHub repository or open the notebook directly in Google Colab using the links below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Platform</th>
<th>Jupyter Notebook</th>
<th>Utility File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Google Colab</td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training-colab.ipynb">Open In Colab</a></td>
<td></td>
</tr>
<tr class="even">
<td>Linux</td>
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training.ipynb">GitHub Repository</a></td>
<td></td>
</tr>
<tr class="odd">
<td>Linux (Intel Arc)</td>
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/intel-arc-pytorch-timm-image-classifier-training.ipynb">GitHub Repository</a></td>
<td></td>
</tr>
<tr class="even">
<td>Windows</td>
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training-windows.ipynb">GitHub Repository</a></td>
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/windows_utils_hf.py">windows_utils_hf.py</a></td>
</tr>
<tr class="odd">
<td>Windows (Intel Arc)</td>
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/intel-arc-pytorch-timm-image-classifier-training-windows.ipynb">GitHub Repository</a></td>
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/windows_utils_hf.py">windows_utils_hf.py</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll create a Python environment and install the necessary libraries. Creating a dedicated environment will ensure our project has all its dependencies in one place and does not interfere with other Python projects you may have.</p>
<p>Please note that this section is for readers setting up a local Python environment on their machines. If you’re following this tutorial on a cloud-based platform like Google Colab, the platform already provides an isolated environment with many Python libraries pre-installed. In that case, you may skip this section and directly proceed to the code sections. However, you may still need to install certain libraries specific to this tutorial using similar <code>pip install</code> commands within your notebook. The dedicated Colab Notebook contains the instructions for running it in Google Colab.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>. Conda is a package manager that can create isolated Python environments. These environments are like sandboxed spaces where you can install Python libraries without affecting the rest of your system.</p>
<p>To create a new Python environment, open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
<p>The first command creates a new Python environment named <code>pytorch-env</code> using Python 3.10. The <code>-y</code> flag confirms that we want to proceed with the installation. After building the environment, the second command activates it, setting it as the active Python environment.</p>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>PyTorch is a popular open-source machine learning framework that enables users to perform tensor computations, build dynamic computational graphs, and implement custom machine learning architectures. To install PyTorch with CUDA support (which allows PyTorch to leverage NVIDIA GPUs for faster training), we’ll use the following command:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Windows (CUDA)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu118</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu118</span></code></pre></div>
</div>
</div>
</div>
<p>Installation instructions for specific hardware and operating systems are available in the “Get Started” section of the PyTorch website.</p>
<ul>
<li><a href="https://pytorch.org/get-started/locally/">PyTorch: Get Started</a></li>
</ul>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project. If you’re new to Python or haven’t used some of these packages before, don’t worry.</p>
<p>Here’s a brief overview:</p>
<ul>
<li><a href="https://huggingface.co/docs/datasets/index"><code>datasets</code></a>: A library for accessing and sharing datasets for Audio, Computer Vision, and Natural Language Processing (NLP) tasks.</li>
<li><a href="https://jupyter.org/"><code>jupyter</code></a>: An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text.</li>
<li><a href="https://matplotlib.org/"><code>matplotlib</code></a>: This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation.</li>
<li><a href="https://pandas.pydata.org/"><code>pandas</code></a>: This package provides fast, powerful, and flexible data analysis and manipulation tools.</li>
<li><a href="https://pillow.readthedocs.io/en/stable/"><code>pillow</code></a>: The Python Imaging Library adds image processing capabilities.</li>
<li><a href="https://github.com/huggingface/pytorch-image-models"><code>timm</code></a>: The timm library provides state-of-the-art (SOTA) computer vision models, layers, utilities, optimizers, schedulers, data loaders, augmentations, and training/evaluation scripts.</li>
<li><a href="https://pytorch.org/torcheval/stable/"><code>torcheval</code></a>: A library with simple and straightforward tooling for model evaluations.</li>
<li><a href="https://pytorch.org/tnt/stable/"><code>torchtnt</code></a>: A library for PyTorch training tools and utilities.</li>
<li><a href="https://tqdm.github.io/"><code>tqdm</code></a>: A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python.</li>
<li><a href="https://jupyter-client.readthedocs.io/en/stable/"><code>Jupyter Client</code></a>: This package contains the reference implementation of the <a href="https://jupyter-client.readthedocs.io/en/latest/messaging.html">Jupyter protocol</a>. It also provides client and kernel management APIs for working with kernels. We will install an older version than the one included with Jupyter (&lt;8) to avoid an issue that causes the training notebook to freeze during training (<a href="https://discourse.jupyter.org/t/jupyter-notebook-zmq-message-arrived-on-closed-channel-error/17869">link</a>).</li>
<li><a href="https://pyzmq.readthedocs.io/en/latest/"><code>PyZMQ</code></a>: This package provides Python bindings for ZeroMQ, a lightweight and fast messaging implementation used by Jupyter Notebooks. We will install an older version than the one included with Jupyter (&lt;25) to avoid an issue that causes the training notebook to freeze during training (<a href="https://discourse.jupyter.org/t/jupyter-notebook-zmq-message-arrived-on-closed-channel-error/17869">link</a>).</li>
</ul>
<p>To install these additional libraries, we’ll use the following command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install datasets jupyter matplotlib pandas pillow timm torcheval torchtnt tqdm</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install older pyzmq and jupyter client versions</span></span>
<span id="cb6-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter_client&lt;8"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyzmq&lt;25"</span></span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>Finally, we will install some utility packages I made to help us handle images (<a href="https://cj-mills.github.io/cjm-pil-utils/"><code>cjm_pil_utils</code></a>), interact with PyTorch (<a href="https://cj-mills.github.io/cjm-pytorch-utils/"><code>cjm_pytorch_utils</code></a>), and work with pandas DataFrames (<a href="https://cj-mills.github.io/cjm-pandas-utils/"><code>cjm_pandas_utils</code></a>):</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install utility packages</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install cjm_pandas_utils cjm_pil_utils cjm_pytorch_utils</span></code></pre></div>
<p>Now, our environment is all setup and ready to go! Remember, these libraries are just tools. If you don’t fully understand them yet, don’t worry. As we go through the tutorial, we’ll learn more about these tools and see them in action.</p>
</section>
<section id="launching-jupyter-notebook" class="level3">
<h3 class="anchored" data-anchor-id="launching-jupyter-notebook">Launching Jupyter Notebook</h3>
<p>Now that our environment is ready, it’s time to launch Jupyter Notebook. Jupyter Notebooks provide an interactive coding environment where we’ll work for the rest of this tutorial. To launch Jupyter Notebook, navigate to the location where you have stored the tutorial notebook (if you downloaded it) from a terminal with the <code>pytorch-env</code> environment active, and type the following command:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<p>This command will open a new tab in your default web browser, showing the Jupyter file browser. From the Jupyter file browser, you can open the tutorial notebook or create a new one to start the next section. Remember: If you close your terminal, the Jupyter Notebook server will stop. So, keep your terminal running while you’re working on the tutorial.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment set up, it’s time to start the coding part of this tutorial. First, we will import the necessary Python packages into our Jupyter Notebook. Here’s a brief overview of how we’ll use these packages:</p>
<ul>
<li><strong>HuggingFace Datasets dependencies</strong>: I host the dataset on <a href="https://huggingface.co/datasets/cj-mills/hagrid-classification-512p-no-gesture-150k-zip">HuggingFace Hub</a>, and this package allows us to load our dataset with a single line of code.</li>
<li><strong>matplotlib</strong>: We use the matplotlib package to explore the dataset samples and class distribution.</li>
<li><strong>NumPy</strong>: We’ll use it to store PIL Images as arrays of pixel values.</li>
<li><strong>pandas</strong>: We use Pandas <code>DataFrame</code> and <code>Series</code> objects to format data as tables.</li>
<li><strong>PIL (Pillow)</strong>: We’ll use it for opening and working with image files.</li>
<li><strong>Python Standard Library dependencies</strong>: These are built-in modules that come with Python. We’ll use them for various tasks like handling file paths (<a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path"><code>pathlib.Path</code></a>), manipulating JSON files (<a href="https://docs.python.org/3/library/json.html"><code>json</code></a>), random number generation (<a href="https://docs.python.org/3/library/random.html"><code>random</code></a>), multiprocessing (<a href="https://docs.python.org/3/library/multiprocessing.html"><code>multiprocessing</code></a>), mathematical operations (<a href="https://docs.python.org/3/library/math.html"><code>math</code></a>), copying Python objects (<a href="https://docs.python.org/3/library/copy.html"><code>copy</code></a>), file matching patterns (<a href="https://docs.python.org/3/library/glob.html"><code>glob</code></a>), working with dates and times (<a href="https://docs.python.org/3/library/datetime.html"><code>datetime</code></a>), and interacting with the operating system (<a href="https://docs.python.org/3/library/os.html"><code>os</code></a>).</li>
<li><strong>PyTorch dependencies</strong>: We’ll use PyTorch’s various modules for building our model, processing data, and training.</li>
<li><strong>timm library</strong>: We’ll use the timm library to download and prepare a pre-trained model for fine-tuning.</li>
<li><strong>tqdm</strong>: We use the library to track the progress of longer processes like training.</li>
<li><strong>Utility functions</strong>: These are helper functions from the packages we installed earlier. They provide shortcuts for routine tasks and keep our code clean and readable.</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> copy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas</span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> set_seed, pil_to_tensor, tensor_to_pil, get_torch_device, denorm_img_tensor</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import HuggingFace Datasets dependencies</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy </span></span>
<span id="cb9-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import pandas module for data manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set options for Pandas DataFrame display</span></span>
<span id="cb9-30">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells in the DataFrame</span></span>
<span id="cb9-31">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all rows in the DataFrame</span></span>
<span id="cb9-32">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all columns in the DataFrame</span></span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-36"></span>
<span id="cb9-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import timm library</span></span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-43"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb9-44"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb9-46"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb9-47"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb9-49"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span>
<span id="cb9-50"></span>
<span id="cb9-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-52"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Having successfully imported the dependencies, we are ready to move to the next step.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Update August 24, 2023">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Update August 24, 2023
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <a href="https://pytorch.org/tnt/stable/utils/utils.html#torchtnt.utils.get_module_summary">get_module_summary</a> function moved from the <a href="https://pytorch.org/torcheval/stable/">torcheval</a> package to <a href="https://pytorch.org/tnt/stable/index.html">torchtnt</a>.</p>
</div>
</div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project. First, we set a seed for generating random numbers using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#set_seed"><code>set_seed</code></a> function from the <code>cjm_pytorch_utils</code> package.</p>
<section id="setting-a-random-number-seed" class="level3">
<h3 class="anchored" data-anchor-id="setting-a-random-number-seed">Setting a Random Number Seed</h3>
<p>A fixed seed value is helpful when training deep-learning models for reproducibility, debugging, and comparison. Having reproducible results allows others to confirm your findings. Using a fixed seed can make it easier to find bugs as it ensures the same inputs produce the same outputs. Likewise, using fixed seed values lets you compare performance between models and training parameters. That said, it’s often a good idea to test different seed values to see how your model’s performance varies between them. Also, don’t use a fixed seed value when you deploy the final model.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed for generating random numbers in PyTorch, NumPy, and Python's random module.</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb10-3">set_seed(seed)</span></code></pre></div>
</section>
<section id="setting-the-device-and-data-type" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-device-and-data-type">Setting the Device and Data Type</h3>
<p>Next, we determine the device to run our computations on and the data type of our tensors using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#get_torch_device"><code>get_torch_device</code></a> function from the <code>cjm_pytorch_utils</code> package.</p>
<p>PyTorch can run on either a CPU or a GPU. The <code>get_torch_device</code> function will automatically check if a supported Nvidia or Mac GPU is available. Otherwise, it will use the CPU. We’ll use the device and type variables to ensure all tensors and model weights are on the correct device and have the same data type. Otherwise, we might get errors.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb11-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb11-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
<hr>
</section>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We’ll then set up a directory for our project to store our results and other related files. The code currently creates the folder in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb13-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-timm-image-classifier"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb13-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb13-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(project_dir)</span></code></pre></div>
<pre class="text"><code>pytorch-timm-image-classifier</code></pre>
<hr>
<p>We also need a place to store our datasets. We’re going to create a directory for this purpose. If running locally, select a suitable folder location to store the dataset. For a cloud service like Google Colab, you can set it to the current directory.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb15-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/980_1TB_1/Datasets/"</span>)</span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb15-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dataset Directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Dataset Directory: /mnt/980_1TB_1/Datasets</code></pre>
<hr>
<p>Double-check the project and dataset directories exist in the specified paths and that you can add files to them before continuing.</p>
<p>At this point, our environment is set up and ready to go. We’ve set our random seed, determined our computation device, and set up directories for our project and dataset. In the next section, we will download and explore the dataset.</p>
</section>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>Now that we set up our project, we can start working with our dataset. The dataset we’ll use is a downscaled subset of <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset) that I modified for image classification tasks. The dataset contains images for <code>18</code> distinct hand gestures and an additional <code>no_gesture</code> class for idle hands. The dataset is approximately <code>3.8 GB</code>, but you will need about <code>7.6 GB</code> to store the archive file and extracted dataset.</p>
<ul>
<li><strong>HuggingFace Hub Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/hagrid-classification-512p-no-gesture-150k-zip">cj-mills/hagrid-classification-512p-no-gesture-150k-zip</a></li>
</ul>
<p>The following steps demonstrate how to load the dataset from the HuggingFace Hub, inspect the dataset, and visualize some sample images.</p>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>We’ll first set up the path for our dataset. We’ll construct the HuggingFace Hub dataset name by combining the username and the dataset name. We then define where to cache the dataset locally.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb17-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hagrid-classification-512p-no-gesture-150k-zip'</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb17-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb17-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be cached</span></span>
<span id="cb17-9">cache_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dataset Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cache_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>HuggingFace Dataset: cj-mills/hagrid-classification-512p-no-gesture-150k-zip
Dataset Path: /mnt/980_1TB_1/Datasets/hagrid-classification-512p-no-gesture-150k-zip</code></pre>
<hr>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We’ll now download the dataset from the HuggingFace Hub using the <code>load_dataset</code> function. We’ll set the number of worker processes for loading data to the number of CPU cores available on your machine.</p>
<p>If you are following the tutorial on a Windows machine, you might need to enable longer file path lengths for the <code>load_dataset</code> function to work:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Enable Long File Paths in Windows
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Type “Registry Editor” into the Windows search bar and click <code>Run as administrator</code>.</p>
<img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/windows-search-registry-editor.png" class="img-fluid" alt="windows-search-registry-editor"></li>
<li><p>In the Registry Editor, input the following location into the text box and press <code>Enter</code>.</p>
<pre class="text"><code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem</code></pre>
<img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/windows-registry-editor-enter-location.png" class="img-fluid" alt="windows-registry-editor-enter-location"></li>
<li><p>Double-click the entry named <code>LongPathsEnabled</code>.</p>
<img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/windows-registry-editor-select-longpathsenabled.png" class="img-fluid" alt="windows-registry-editor-select-longpathsenabled"></li>
<li><p>Update the <code>Value data:</code> value to <code>1</code>.</p>
<img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/windows-registry-editor-longpathsenabled-update-value.png" class="img-fluid" alt="windows-registry-editor-longpathsenabled-update-value"></li>
<li><p>You may now close the Registry Editor and continue with the tutorial.</p></li>
</ol>
</div>
</div>
</div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data. This should be the number of CPUs available.</span></span>
<span id="cb20-2">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dataset from Hugging Face Hub</span></span>
<span id="cb20-5">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(hf_dataset, </span>
<span id="cb20-6">                       split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, </span>
<span id="cb20-7">                       cache_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cache_dir, </span>
<span id="cb20-8">                       num_proc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers)</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print dataset summary</span></span>
<span id="cb20-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dataset)</span></code></pre></div>
<pre class="text"><code>Dataset({
    features: ['image', 'label'],
    num_rows: 153735
})</code></pre>
<hr>
<p>The dataset summary indicates there are 153,735 samples. Each sample has an image and a label. The label values for each dataset sample are index values corresponding to class names. For example, the label value <code>0</code> corresponds to the <code>call</code> gesture.</p>
</section>
<section id="deleting-the-archive-file" class="level3">
<h3 class="anchored" data-anchor-id="deleting-the-archive-file">Deleting the Archive File</h3>
<p>After loading the dataset, we can delete the downloaded archive file to free up some space. We define a helper function, <code>delete_files_in_directory</code>, which deletes all files in a specified directory.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> delete_files_in_directory(directory: Path):</span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Delete all files in a given directory.</span></span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        directory (Path): The directory in which to delete files.</span></span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Raises:</span></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Exception: If there's an error when trying to delete a file, an exception is raised and caught.</span></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The exception is then logged and the process continues with the remaining files.</span></span>
<span id="cb22-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb22-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> directory.exists():</span>
<span id="cb22-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Directory </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>directory<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist."</span>)</span>
<span id="cb22-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb22-15">    </span>
<span id="cb22-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> directory.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>):</span>
<span id="cb22-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> item.is_file():</span>
<span id="cb22-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb22-19"></span>
<span id="cb22-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb22-21">            item.unlink()</span>
<span id="cb22-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb22-23">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unable to delete file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>We’ll then use this function to delete the archive file.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">download_directory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(os.path.join(cache_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"downloads"</span>))</span>
<span id="cb23-2">delete_files_in_directory(download_directory)</span></code></pre></div>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>Next, we get the names of all the classes in our dataset and inspect the distribution of images among these classes. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].names</span>
<span id="cb24-2"></span>
<span id="cb24-3">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]).value_counts().sort_index()</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb25-4">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb25-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb25-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb25-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb25-8">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_names)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb25-9">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb25-10"></span>
<span id="cb25-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate x-axis labels</span></span>
<span id="cb25-12">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_27_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Each class, excluding the <code>no_gesture</code> class, has roughly the same number of samples. The <code>no_gesture</code> class contains approximately four times as many images because of the immense variety of non-matching hand positions.</p>
</section>
</section>
<section id="visualizing-sample-images" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-sample-images">Visualizing Sample Images</h3>
<p>Lastly, we will visualize the first sample image of each class in our dataset. Visualizing the samples helps us get a feel for the kind of images we’re working with and whether they’re suitable for the task at hand.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get indices for the first sample in the dataset for each class</span></span>
<span id="cb26-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].index(value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]]</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of rows and columns</span></span>
<span id="cb26-5">grid_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.floor(math.sqrt(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(indices)))</span>
<span id="cb26-6">n_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(indices) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb26-7">n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_size</span>
<span id="cb26-8"></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list to store the first image found for each class</span></span>
<span id="cb26-10">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[indices][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb26-11">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[indices][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span>
<span id="cb26-12"></span>
<span id="cb26-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a figure for the grid</span></span>
<span id="cb26-14">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(n_rows, n_cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb26-15"></span>
<span id="cb26-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(axs.flatten()):</span>
<span id="cb26-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If we have an image for this subplot</span></span>
<span id="cb26-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> images[i]:</span>
<span id="cb26-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the image to the subplot</span></span>
<span id="cb26-20">        ax.imshow(np.array(images[i]))</span>
<span id="cb26-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the title to the corresponding class name</span></span>
<span id="cb26-22">        ax.set_title(class_names[labels[i]])</span>
<span id="cb26-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the axis</span></span>
<span id="cb26-24">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb26-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb26-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If no image, hide the subplot</span></span>
<span id="cb26-27">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb26-28"></span>
<span id="cb26-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the grid</span></span>
<span id="cb26-30">plt.tight_layout()</span>
<span id="cb26-31">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_29_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized some sample images. In the next section, we will select and load our model.</p>
</section>
</section>
<section id="selecting-a-model" class="level2">
<h2 class="anchored" data-anchor-id="selecting-a-model">Selecting a Model</h2>
<p>Choosing a suitable model for your task is crucial for the success of your machine learning project. The model you select will depend on several factors, including the size and nature of your dataset, the problem you’re trying to solve, and the computational resources you have at your disposal.</p>
<section id="exploring-available-models" class="level3">
<h3 class="anchored" data-anchor-id="exploring-available-models">Exploring Available Models</h3>
<p>You can explore the pretrained models available in the timm library using the <code>timm.list_models()</code> method. The library has hundreds of models, so we’ll narrow our search to the <a href="https://arxiv.org/abs/1512.03385">ResNet18</a> family of models. ResNet 18 models are popular for image classification tasks due to their balance of accuracy and speed.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet18*'</span>, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
resnet18.a1_in1k
</td>
</tr>
<tr>
<th>
1
</th>
<td>
resnet18.a2_in1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
resnet18.a3_in1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
resnet18.fb_ssl_yfcc100m_ft_in1k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
resnet18.fb_swsl_ig1b_ft_in1k
</td>
</tr>
<tr>
<th>
5
</th>
<td>
resnet18.gluon_in1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
resnet18.tv_in1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
resnet18d.ra2_in1k
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="choosing-the-resnet18-d-model" class="level3">
<h3 class="anchored" data-anchor-id="choosing-the-resnet18-d-model">Choosing the ResNet18-D Model</h3>
<p>For this tutorial, I went with the pretrained <a href="https://github.com/huggingface/pytorch-image-models/blob/4b8cfa6c0a355a9b3cb2a77298b240213fb3b921/timm/models/resnet.py#L869">ResNet 18-D</a> model. This model’s balance of accuracy and speed makes it suitable for real-time applications, such as hand gesture recognition. While this model is a good all-rounder, others may work better for specific applications. For example, some models are designed to run on mobile devices and may sacrifice some accuracy for improved performance. Whatever your requirements are, the timm library likely has a suitable model for your needs. Feel free to try different models and see how they compare.</p>
</section>
<section id="inspecting-the-resnet18-d-model-configuration" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-resnet18-d-model-configuration">Inspecting the ResNet18-D Model Configuration</h3>
<p>Next, we will inspect the configuration of our chosen model. The model config gives us information about the pretraining process for the model.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the resnet module</span></span>
<span id="cb28-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resnet</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the ResNet model variant to use</span></span>
<span id="cb28-5">resnet_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet18d'</span></span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the default configuration of the chosen model</span></span>
<span id="cb28-8">model_cfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet.default_cfgs[resnet_model].default.to_dict()</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the default configuration values</span></span>
<span id="cb28-11">pd.DataFrame.from_dict(model_cfg, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/resnet18d_ra2-48a79e06.pth
</td>
</tr>
<tr>
<th>
hf_hub_id
</th>
<td>
timm/
</td>
</tr>
<tr>
<th>
custom_load
</th>
<td>
False
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
test_input_size
</th>
<td>
(3, 288, 288)
</td>
</tr>
<tr>
<th>
fixed_input_size
</th>
<td>
False
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
test_crop_pct
</th>
<td>
0.95
</td>
</tr>
<tr>
<th>
crop_mode
</th>
<td>
center
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv1.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
fc
</td>
</tr>
<tr>
<th>
origin_url
</th>
<td>
https://github.com/huggingface/pytorch-image-models
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="retrieving-normalization-statistics" class="level3">
<h3 class="anchored" data-anchor-id="retrieving-normalization-statistics">Retrieving Normalization Statistics</h3>
<p>Before we can use the ResNet18-D model, we need to normalize our dataset. Normalization is a process that changes the range of pixel intensity values to make the neural network converge faster during training. It is performed by subtracting the mean from the pixel values and dividing by the standard deviation of the dataset. The mean and standard deviation values specific to the dataset used in the pretraining process of our model are called normalization statistics. To do this, we will retrieve the normalization statistics (mean and std) specific to our pretrained model.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve normalization statistics (mean and std) specific to the pretrained model</span></span>
<span id="cb29-2">mean, std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_cfg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>], model_cfg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>]</span>
<span id="cb29-3">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mean, std)</span>
<span id="cb29-4">norm_stats</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<hr>
</section>
<section id="loading-the-resnet18-d-model" class="level3">
<h3 class="anchored" data-anchor-id="loading-the-resnet18-d-model">Loading the ResNet18-D Model</h3>
<p>We can now load our model. We’ll set the number of output classes equal to the number of image classes in our dataset. We’ll also specify the device and data type for the model.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pretrained ResNet model with the number of output classes equal to the number of class names</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'timm.create_model' function automatically downloads and initializes the pretrained weights</span></span>
<span id="cb31-3">resnet18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timm.create_model(resnet_model, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the device and data type for the model</span></span>
<span id="cb31-6">resnet18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet18.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add attributes to store the device and model name for later reference</span></span>
<span id="cb31-9">resnet18.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb31-10">resnet18.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet_model</span></code></pre></div>
</section>
<section id="selecting-the-model" class="level3">
<h3 class="anchored" data-anchor-id="selecting-the-model">Selecting the Model</h3>
<p>With our model loaded, we can now select it for training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet18</span></code></pre></div>
</section>
<section id="summarizing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-the-model">Summarizing the Model</h3>
<p>Finally, let’s generate a summary of our model. The summary gives us an overview of its structure and performance characteristics.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the input to the model</span></span>
<span id="cb33-2">test_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a summary of the model as a Pandas DataFrame</span></span>
<span id="cb33-5">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model, [test_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the summary to only contain Conv2d layers and the model</span></span>
<span id="cb33-8">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[(summary_df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Conv2d'</span>)]</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the column "Contains Uninitialized Parameters?"</span></span>
<span id="cb33-11">summary_df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
<th>
Backward FLOPs
</th>
<th>
In size
</th>
<th>
Out size
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
ResNet
</td>
<td>
11.2 M
</td>
<td>
11.2 M
</td>
<td>
44.9 M
</td>
<td>
2.7 G
</td>
<td>
5.3 G
</td>
<td>
[1, 3, 256, 256]
</td>
<td>
[1, 19]
</td>
</tr>
<tr>
<th>
2
</th>
<td>
Conv2d
</td>
<td>
864
</td>
<td>
864
</td>
<td>
3.5 K
</td>
<td>
14.2 M
</td>
<td>
14.2 M
</td>
<td>
[1, 3, 256, 256]
</td>
<td>
[1, 32, 128, 128]
</td>
</tr>
<tr>
<th>
5
</th>
<td>
Conv2d
</td>
<td>
9.2 K
</td>
<td>
9.2 K
</td>
<td>
36.9 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 32, 128, 128]
</td>
<td>
[1, 32, 128, 128]
</td>
</tr>
<tr>
<th>
8
</th>
<td>
Conv2d
</td>
<td>
18.4 K
</td>
<td>
18.4 K
</td>
<td>
73.7 K
</td>
<td>
301 M
</td>
<td>
603 M
</td>
<td>
[1, 32, 128, 128]
</td>
<td>
[1, 64, 128, 128]
</td>
</tr>
<tr>
<th>
14
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
19
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
23
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
28
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
33
</th>
<td>
Conv2d
</td>
<td>
73.7 K
</td>
<td>
73.7 K
</td>
<td>
294 K
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
38
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
43
</th>
<td>
Conv2d
</td>
<td>
8.2 K
</td>
<td>
8.2 K
</td>
<td>
32.8 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 64, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
46
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
51
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
56
</th>
<td>
Conv2d
</td>
<td>
294 K
</td>
<td>
294 K
</td>
<td>
1.2 M
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
61
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
66
</th>
<td>
Conv2d
</td>
<td>
32.8 K
</td>
<td>
32.8 K
</td>
<td>
131 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 128, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
69
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
74
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
79
</th>
<td>
Conv2d
</td>
<td>
1.2 M
</td>
<td>
1.2 M
</td>
<td>
4.7 M
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
84
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
89
</th>
<td>
Conv2d
</td>
<td>
131 K
</td>
<td>
131 K
</td>
<td>
524 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 256, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
92
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
97
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>We can see from the summary that the ResNet18-D model is about <code>45 MB</code> in size and needs to perform about <code>2.7 billion</code> floating-point operations to process a single <code>256x256</code> input image. For context, the larger mid-size ResNet50-D model is about <code>95 MB</code> and performs about <code>5.7 billion</code> floating-point ops for the same image. On the other end, the tiniest variant of the mobile-optimized MobileNetV3 model is <code>2.4 MB</code> and only takes about <code>30 million</code> floating-point operations.</p>
<p>That is valuable information when considering how we will deploy the fine-tuned model. For example, the in-browser demo I mentioned will first download the model to your local machine. The larger the model, the longer it will take for the demo to start. Likewise, the number of floating-point operations will influence what hardware can run the model smoothly. For real-time applications, even milliseconds can matter for inference speed. Inference involves making predictions with a trained model on new, unseen data.</p>
<p>The model architecture also influences inference speed beyond the raw number of floating-point operations. The MobileNetv3 architecture is tuned to mobile phone CPUs, while the ResNet architectures can better leverage larger GPUs.</p>
<p>That completes the model selection and setup. In the next section, we will prepare our dataset for training.</p>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>Next, we will prepare our data for the model training process. The data preparation involves several steps, such as applying data augmentation techniques, setting up the train-validation split for the dataset, resizing and padding the images, defining the training dataset class, and initializing DataLoaders to feed data to the model.</p>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>Let’s begin by selecting a random image from the dataset to visualize the data preparation steps.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select a random item from the dataset</span></span>
<span id="cb34-2">item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(dataset)</span>
<span id="cb34-3"></span>
<span id="cb34-4">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_names[item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]]</span>
<span id="cb34-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb34-6">    </span>
<span id="cb34-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-8">    </span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb34-10">sample_img</span></code></pre></div>
<pre class="text"><code>Image Label: stop</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_47_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Next, we’ll define what data augmentations to apply to images during training. Data augmentation is a technique that effectively expands the size and diversity of a dataset by creating variations of existing samples. It helps the model learn general features instead of memorizing specific examples.</p>
<p>We’ll use <a href="https://arxiv.org/abs/2103.10158">trivial augmentation</a>, which applies a single, random transform to each image. This simple method can be highly effective for data augmentation.</p>
<p>However, we’ll need to create a custom version of the <a href="https://pytorch.org/vision/main/generated/torchvision.transforms.TrivialAugmentWide.html">TrivialAugmentWide</a> class from PyTorch’s transforms module, as some of the default parameters are not ideal for this dataset. This custom class defines a dictionary of operations for augmenting the images, and we can customize each operation’s parameters.</p>
<section id="trivial-augmentation" class="level4">
<h4 class="anchored" data-anchor-id="trivial-augmentation">Trivial Augmentation</h4>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Tensor</span>
<span id="cb36-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict, Tuple, List, Optional</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This class extends the TrivialAugmentWide class provided by PyTorch's transforms module.</span></span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TrivialAugmentWide is an augmentation policy randomly applies a single augmentation to each image.</span></span>
<span id="cb36-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CustomTrivialAugmentWide(transforms.TrivialAugmentWide):</span>
<span id="cb36-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The _augmentation_space method defines a custom augmentation space for the augmentation policy.</span></span>
<span id="cb36-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method returns a dictionary where each key is the name of an augmentation operation and </span></span>
<span id="cb36-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the corresponding value is a tuple of a tensor and a boolean value.</span></span>
<span id="cb36-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The tensor defines the magnitude of the operation, and the boolean defines  </span></span>
<span id="cb36-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># whether to perform the operation in both the positive and negative directions (True)</span></span>
<span id="cb36-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or only in the positive direction (False).</span></span>
<span id="cb36-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _augmentation_space(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_bins: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Tuple[Tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]]:</span>
<span id="cb36-14">        </span>
<span id="cb36-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define custom augmentation space</span></span>
<span id="cb36-16">        custom_augmentation_space <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb36-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity operation doesn't change the image</span></span>
<span id="cb36-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Identity"</span>: (torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb36-19">            </span>
<span id="cb36-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distort the image along the x or y axis, respectively.</span></span>
<span id="cb36-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ShearX"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ShearY"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-23"></span>
<span id="cb36-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move the image along the x or y axis, respectively.</span></span>
<span id="cb36-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TranslateX"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TranslateY"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-27"></span>
<span id="cb36-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate operation: rotates the image.</span></span>
<span id="cb36-29">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rotate"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-30"></span>
<span id="cb36-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust brightness, color, contrast,and sharpness respectively.</span></span>
<span id="cb36-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brightness"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Color"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contrast"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sharpness"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb36-36"></span>
<span id="cb36-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduce the number of bits used to express the color in each channel of the image.</span></span>
<span id="cb36-38">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterize"</span>: (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (torch.arange(num_bins) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((num_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb36-39"></span>
<span id="cb36-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invert all pixel values above a threshold.</span></span>
<span id="cb36-41">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solarize"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb36-42"></span>
<span id="cb36-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximize the image contrast by setting the darkest color to black and the lightest to white.</span></span>
<span id="cb36-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AutoContrast"</span>: (torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb36-45"></span>
<span id="cb36-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Equalize the image histogram to improve its contrast.</span></span>
<span id="cb36-47">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Equalize"</span>: (torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb36-48">        }</span>
<span id="cb36-49">        </span>
<span id="cb36-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function returns the dictionary of operations.</span></span>
<span id="cb36-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> custom_augmentation_space</span></code></pre></div>
<p>You can test the custom augmentation method by applying it to the sample image and displaying the result. Remember, the augmentation should be different each time we use it.</p>
</section>
<section id="test-the-transform" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transform">Test the transform</h4>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a TrivialAugmentWide object</span></span>
<span id="cb37-2">trivial_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomTrivialAugmentWide()</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a tensor</span></span>
<span id="cb37-5">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb37-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the TrivialAugmentWide to the tensor</span></span>
<span id="cb37-9">tensor_to_pil(trivial_aug(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_51_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="training-validation-split" class="level3">
<h3 class="anchored" data-anchor-id="training-validation-split">Training-Validation Split</h3>
<p>Next, we’ll split the dataset into training and validation sets. The model will use the training set to update its parameters, and we will use the validation set to evaluate the model’s performance on data it has not seen before. Validation sets are needed when training models because we want to verify the model can generalize well to new data before we deploy it.</p>
<p><strong>Get training and validation sets</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for validation</span></span>
<span id="cb39-2">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the dataset into training and validation sets</span></span>
<span id="cb39-5">train_split, val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.train_test_split(test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_pct).values()</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb39-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_split), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_split)</span></code></pre></div>
<pre class="text"><code>(138361, 15374)</code></pre>
<hr>
</section>
<section id="image-resizing-and-padding" class="level3">
<h3 class="anchored" data-anchor-id="image-resizing-and-padding">Image Resizing and Padding</h3>
<p>Next, we define a class called <code>ResizePad</code> to resize and pad images, making them a uniform size. Making all the input images the same size allows us to feed samples to the model in batches, allowing us the more efficiently leverage our GPU.</p>
<section id="resize-pad-transform" class="level4">
<h4 class="anchored" data-anchor-id="resize-pad-transform">Resize Pad Transform</h4>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ResizePad(nn.Module):</span>
<span id="cb41-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, padding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edge'</span>):</span>
<span id="cb41-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that resizes an image tensor and adds padding to make it a square tensor.</span></span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_sz (int, optional): The size of the square tensor.</span></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        padding_mode (str, optional): The padding mode used when adding padding to the tensor.</span></span>
<span id="cb41-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb41-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb41-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_sz</span>
<span id="cb41-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> padding_mode</span>
<span id="cb41-13">        </span>
<span id="cb41-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the width and height of the image tensor</span></span>
<span id="cb41-16">        w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.get_image_size(x)</span>
<span id="cb41-17">        </span>
<span id="cb41-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image tensor so that its minimum dimension is equal to `max_sz`</span></span>
<span id="cb41-19">        size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(w, h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(w, h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz))</span>
<span id="cb41-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.resize(x, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-21">        </span>
<span id="cb41-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add padding to make the image tensor a square</span></span>
<span id="cb41-23">        w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.get_image_size(x)</span>
<span id="cb41-24">        offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(w, h)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb41-25">        padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, offset] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> w <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [offset, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb41-26">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.pad(x, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>padding, padding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_mode)</span>
<span id="cb41-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.resize(x, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-28">        </span>
<span id="cb41-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
<p>For training, we’ll resize and pad the images to <code>288x288</code>. That should be large enough for the model to get adequate detail while keeping training time low.</p>
</section>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>)</span></code></pre></div>
<p>You can test the ResizePad transform on the sample image to see how it resizes and pads the sample. The following code crops the sample image to make the padding more apparent.</p>
</section>
<section id="test-the-transform-1" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transform-1">Test the transform</h4>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Source image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-2"></span>
<span id="cb43-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the source image</span></span>
<span id="cb43-4">w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.size</span>
<span id="cb43-5">cropped_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.crop([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, w, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb43-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cropped image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cropped_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizePad` object</span></span>
<span id="cb43-9">resize_pad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz))</span>
<span id="cb43-10"></span>
<span id="cb43-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the cropped image to a tensor</span></span>
<span id="cb43-12">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(cropped_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb43-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cropped tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-14"></span>
<span id="cb43-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize and pad the tensor</span></span>
<span id="cb43-16">resized_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_pad(img_tensor)</span>
<span id="cb43-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Padded tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>resized_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-18"></span>
<span id="cb43-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the updated image</span></span>
<span id="cb43-20">tensor_to_pil(resized_tensor)</span></code></pre></div>
<pre class="text"><code>Source image: (512, 512)
Cropped image: (512, 256)
Cropped tensor: torch.Size([1, 3, 256, 512])
Padded tensor: torch.Size([1, 3, 288, 288])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_59_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>Next, we define a custom PyTorch Dataset class that will get used in a <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader">DataLoader</a> to create batches. This class fetches a sample from the dataset at a given index and returns the transformed image and its corresponding label index.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ImageDataset(Dataset):</span>
<span id="cb45-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""A PyTorch Dataset class to be used in a DataLoader to create batches.</span></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataset: A list of dictionaries containing 'label' and 'image' keys.</span></span>
<span id="cb45-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        classes: A list of class names.</span></span>
<span id="cb45-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tfms: A torchvision.transforms.Compose object combining all the desired transformations.</span></span>
<span id="cb45-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb45-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset, classes, tfms):</span>
<span id="cb45-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb45-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes</span>
<span id="cb45-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms</span>
<span id="cb45-13">        </span>
<span id="cb45-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb45-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the total number of samples in this dataset."""</span></span>
<span id="cb45-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset)</span>
<span id="cb45-17"></span>
<span id="cb45-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb45-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fetches a sample from the dataset at the given index.</span></span>
<span id="cb45-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb45-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb45-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            idx: The index to fetch the sample from.</span></span>
<span id="cb45-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            </span></span>
<span id="cb45-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb45-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            A tuple of the transformed image and its corresponding label index.</span></span>
<span id="cb45-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb45-27">        sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset[idx]</span>
<span id="cb45-28">        image, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>], sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span>
<span id="cb45-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tfms(image), label</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>We’ll then define the transformations for the training and validation datasets. Note that we only apply data augmentation to the training dataset. Both datasets will have their images resized and padded and the pixel values normalized.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note: Data augmentation is performed only on the training dataset</span></span>
<span id="cb46-3">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb46-4">    ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)),</span>
<span id="cb46-5">    trivial_aug,</span>
<span id="cb46-6">    transforms.ToTensor(),</span>
<span id="cb46-7">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb46-8">])</span>
<span id="cb46-9"></span>
<span id="cb46-10">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb46-11">    ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)),</span>
<span id="cb46-12">    transforms.ToTensor(),</span>
<span id="cb46-13">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb46-14">])</span></code></pre></div>
</section>
<section id="initialize-datasets" class="level3">
<h3 class="anchored" data-anchor-id="initialize-datasets">Initialize Datasets</h3>
<p>We instantiate the PyTorch datasets using the dataset splits, class names, and defined transformations.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the datasets using the defined transformations</span></span>
<span id="cb47-2">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataset(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_split, classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names, tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_tfms)</span>
<span id="cb47-3">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataset(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_split, classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names, tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_tfms)</span>
<span id="cb47-4"></span>
<span id="cb47-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb47-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training dataset size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb47-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Validation dataset size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<pre class="text"><code>Training dataset size: 138361
Validation dataset size: 15374</code></pre>
<hr>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>Let’s inspect a sample from the training and validation sets to verify that the data preparation steps get applied correctly.</p>
<p><strong>Inspect training set sample</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the label for the first image in the training set</span></span>
<span id="cb49-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>classes[train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first image in the training set</span></span>
<span id="cb49-5">tensor_to_pil(denorm_img_tensor(train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats))</span></code></pre></div>
<pre class="text"><code>Label: dislike</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_67_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Inspect validation set sample</strong></p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the label for the first image in the validation set</span></span>
<span id="cb51-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>classes[valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb51-3"></span>
<span id="cb51-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first image in the validation set</span></span>
<span id="cb51-5">tensor_to_pil(denorm_img_tensor(valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats))</span></code></pre></div>
<pre class="text"><code>Label: no_gesture</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_69_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We then define the batch size for training and initialize the <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset">DataLoaders</a>, which are used to efficiently create batches of data for the model to process during training.</p>
</section>
<section id="training-batch-size" class="level3">
<h3 class="anchored" data-anchor-id="training-batch-size">Training Batch Size</h3>
<p>Next, we set the batch size for training. This number indicates how many sample images get fed to the model at once. The larger the batch size, the more GPU memory we need. The current batch size should be fine for most modern GPUs. If you still get an out-of-memory error, try lowering the batch size to <code>8</code>, then restart the Jupyter Notebook.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span></code></pre></div>
</section>
<section id="initialize-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataloaders">Initialize DataLoaders</h3>
<p>We initialize the DataLoaders for the training and validation datasets. We’ll set the number of worker processes for loading data to the number of available CPUs.</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data. This should be the number of CPUs available.</span></span>
<span id="cb54-2">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for DataLoader</span></span>
<span id="cb54-5">data_loader_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb54-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>: bs,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size for data loading</span></span>
<span id="cb54-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_workers'</span>: num_workers,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of subprocesses to use for data loading</span></span>
<span id="cb54-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'persistent_workers'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will not shutdown the worker processes after a dataset has been consumed once. This allows to maintain the worker dataset instances alive.</span></span>
<span id="cb54-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will copy Tensors into CUDA pinned memory before returning them. Useful when using GPU.</span></span>
<span id="cb54-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory_device'</span>: device,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specifies the device where the data should be loaded. Commonly set to use the GPU.</span></span>
<span id="cb54-11">}</span>
<span id="cb54-12"></span>
<span id="cb54-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for training data. Data is shuffled for every epoch.</span></span>
<span id="cb54-14">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb54-15"></span>
<span id="cb54-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for validation data. Shuffling is not necessary for validation data.</span></span>
<span id="cb54-17">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params)</span>
<span id="cb54-18"></span>
<span id="cb54-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation DataLoaders</span></span>
<span id="cb54-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in train DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb54-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in validation DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<pre class="text"><code>Number of batches in train DataLoader: 4324
Number of batches in validation DataLoader: 481</code></pre>
<hr>
<p>That completes the data preparation. Now we can finally train our hand gesture recognizer.</p>
</section>
</section>
<section id="fine-tuning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the Model</h2>
<p>In this section, we will implement the training code and fine-tune our model. The training process revolves around the concept of an ‘epoch’. Each epoch represents one complete pass through the entire training and validation datasets. To help with this, we will define a function called <code>run_epoch</code> to handle a single training/validation epoch and one called <code>train_loop</code> to execute the main training loop.</p>
<section id="define-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="define-the-training-loop">Define the Training Loop</h3>
<p>Let’s start by defining the <code>run_epoch</code> function. This function runs a single training or validation epoch and calculates the loss and performance metric for the given dataset. The term ‘loss’ refers to a number representing how far our model’s predictions are from the actual values. The goal of training is to minimize this value. We use the <code>autocast</code> context manager to perform mixed precision training. Mixed-precision training involves performing some operations in <code>16-bit</code> precision to speed up training and reduce memory requirements. Modern GPUs tend to have specialized hardware to accelerate these lower-precision operations, and this feature allows us to utilize that.</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to run a single training/validation epoch</span></span>
<span id="cb56-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_epoch(model, dataloader, optimizer, metric, lr_scheduler, device, scaler, is_training):</span>
<span id="cb56-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set model to training mode if 'is_training' is True, else set to evaluation mode</span></span>
<span id="cb56-4">    model.train() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb56-5">    </span>
<span id="cb56-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset the performance metric</span></span>
<span id="cb56-7">    metric.reset()</span>
<span id="cb56-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the average loss for the current epoch </span></span>
<span id="cb56-9">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb56-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize progress bar with total number of batches in the dataloader</span></span>
<span id="cb56-11">    progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eval"</span>)</span>
<span id="cb56-12">    </span>
<span id="cb56-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over data batches</span></span>
<span id="cb56-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch_id, (inputs, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb56-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move inputs and targets to the specified device (e.g., GPU)</span></span>
<span id="cb56-16">        inputs, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device), targets.to(device)</span>
<span id="cb56-17">        </span>
<span id="cb56-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enables gradient calculation if 'is_training' is True</span></span>
<span id="cb56-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.set_grad_enabled(is_training):</span>
<span id="cb56-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatic Mixed Precision (AMP) context manager for improved performance</span></span>
<span id="cb56-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(device):</span>
<span id="cb56-22">                outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb56-23">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.functional.cross_entropy(outputs, targets) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss</span></span>
<span id="cb56-24">        </span>
<span id="cb56-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the performance metric</span></span>
<span id="cb56-26">        metric.update(outputs.detach().cpu(), targets.detach().cpu())</span>
<span id="cb56-27">        </span>
<span id="cb56-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If in training mode</span></span>
<span id="cb56-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb56-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> scaler <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If using AMP</span></span>
<span id="cb56-31">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the loss and backward propagation</span></span>
<span id="cb56-32">                scaler.scale(loss).backward()</span>
<span id="cb56-33">                scaler.step(optimizer) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make an optimizer step</span></span>
<span id="cb56-34">                scaler.update() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the scaler</span></span>
<span id="cb56-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb56-36">                loss.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward propagation</span></span>
<span id="cb56-37">                optimizer.step() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make an optimizer step</span></span>
<span id="cb56-38">            </span>
<span id="cb56-39">            optimizer.zero_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the gradients</span></span>
<span id="cb56-40">            lr_scheduler.step() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update learning rate</span></span>
<span id="cb56-41">        </span>
<span id="cb56-42">        loss_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item()</span>
<span id="cb56-43">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_item</span>
<span id="cb56-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update progress bar</span></span>
<span id="cb56-45">        progress_bar.set_postfix(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>metric.compute().item(), </span>
<span id="cb56-46">                                 loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_item, </span>
<span id="cb56-47">                                 avg_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(batch_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb56-48">                                 lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb56-49">        progress_bar.update()</span>
<span id="cb56-50">        </span>
<span id="cb56-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If loss is NaN or infinity, stop training</span></span>
<span id="cb56-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> math.isnan(loss_item) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss_item):</span>
<span id="cb56-53">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span>)</span>
<span id="cb56-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb56-55">        </span>
<span id="cb56-56">    progress_bar.close()</span>
<span id="cb56-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (batch_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>This function performs one pass through the given dataset. It first sets the model to training or evaluation mode depending on whether we are training or validating. Then, for each batch of data, it performs a forward pass (calculating the predictions of the model), computes the loss, and then, if in training mode, performs a backward pass to adjust the model’s parameters.</p>
<p>Next, we’ll define the <code>train_loop</code> function, which executes the main training loop. It iterates over each epoch, runs through the training and validation sets, and saves the best model based on the validation loss.</p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Main training loop</span></span>
<span id="cb57-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(model, train_dataloader, valid_dataloader, optimizer, metric, lr_scheduler, device, epochs, use_amp, checkpoint_path):</span>
<span id="cb57-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize GradScaler for Automatic Mixed Precision (AMP) if 'use_amp' is True</span></span>
<span id="cb57-4">    scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GradScaler() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> use_amp <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb57-5">    best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)</span>
<span id="cb57-6"></span>
<span id="cb57-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each epoch</span></span>
<span id="cb57-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>):</span>
<span id="cb57-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run training epoch and compute training loss</span></span>
<span id="cb57-10">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, train_dataloader, optimizer, metric, lr_scheduler, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb57-11">        </span>
<span id="cb57-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb57-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run validation epoch and compute validation loss</span></span>
<span id="cb57-14">            valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, valid_dataloader, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, metric, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb57-15">        </span>
<span id="cb57-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If current validation loss is lower than the best one so far, save model and update best loss</span></span>
<span id="cb57-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_loss:</span>
<span id="cb57-18">            best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span>
<span id="cb57-19">            metric_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric.compute().item()</span>
<span id="cb57-20">            torch.save(model.state_dict(), checkpoint_path)</span>
<span id="cb57-21">            </span>
<span id="cb57-22">            training_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb57-23">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: epoch,</span>
<span id="cb57-24">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: train_loss,</span>
<span id="cb57-25">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_loss'</span>: valid_loss, </span>
<span id="cb57-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metric_value'</span>: metric_value,</span>
<span id="cb57-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb57-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_architecture'</span>: model.name</span>
<span id="cb57-29">            }</span>
<span id="cb57-30">            </span>
<span id="cb57-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save best_loss and metric_value in a JSON file</span></span>
<span id="cb57-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(Path(checkpoint_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training_metadata.json'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb57-33">                json.dump(training_metadata, f)</span>
<span id="cb57-34"></span>
<span id="cb57-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If loss is NaN or infinity, stop training</span></span>
<span id="cb57-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(math.isnan(loss) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [train_loss, valid_loss]):</span>
<span id="cb57-37">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span>)</span>
<span id="cb57-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb57-39"></span>
<span id="cb57-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If using AMP, clean up the unused memory in GPU</span></span>
<span id="cb57-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> use_amp:</span>
<span id="cb57-42">        torch.cuda.empty_cache()</span></code></pre></div>
<p>This function coordinates the training process. It runs the previously defined <code>run_epoch</code> function for each epoch in the training process, calculating the training and validation losses. It saves the model state as a checkpoint when the model achieves a lower validation loss. It will also save data such as the current epoch, loss values, metric value, learning rate, and model name to a JSON file. If the <code>run_epoch</code> function returns <code>NaN</code> (Not a Number) or infinity loss values, it halts the training process since this typically indicates an issue with the training.</p>
</section>
<section id="set-the-model-checkpoint-path" class="level3">
<h3 class="anchored" data-anchor-id="set-the-model-checkpoint-path">Set the Model Checkpoint Path</h3>
<p>Before we proceed with training, let’s generate a timestamp for the training session and create a directory to store the checkpoints. These checkpoints will allow us to save the model state periodically. That enables us to load the model checkpoint later to resume training, export the model to a different format or perform inference directly.</p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate timestamp for the training session (Year-Month-Day_Hour_Minute_Second)</span></span>
<span id="cb58-2">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H-%M-%S"</span>)</span>
<span id="cb58-3"></span>
<span id="cb58-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb58-5">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the checkpoint directory if it does not already exist</span></span>
<span id="cb58-8">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb58-9"></span>
<span id="cb58-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb58-11">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb58-12"></span>
<span id="cb58-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(checkpoint_path)</span></code></pre></div>
<pre class="text"><code>pytorch-timm-image-classifier/2023-05-22_16-35-03/resnet18d.pth</code></pre>
<hr>
</section>
<section id="configure-the-training-parameters" class="level3">
<h3 class="anchored" data-anchor-id="configure-the-training-parameters">Configure the Training Parameters</h3>
<p>Now, let’s configure the parameters for training. We’ll define the learning rate, number of training epochs, optimizer, learning rate scheduler, and performance metric and check for CUDA-capable GPU availability. The learning rate determines how much we adjust the model in response to the estimated error each time the weights are updated. Choosing an optimal learning rate is essential for good model performance.</p>
<p>We’re using <a href="https://www.fast.ai/posts/2018-07-02-adam-weight-decay.html">AdamW</a> as our optimizer, which includes weight decay for regularization, and the <a href="https://sgugger.github.io/the-1cycle-policy.html">OneCycleLR</a> scheduler to adjust the learning rate during training. The one-cycle learning rate policy is a training approach where the learning rate starts low, increases gradually to a maximum, then decreases again, all within a single iteration or epoch, aiming to converge faster and yield better performance.</p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb60-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb60-3"></span>
<span id="cb60-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb60-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb60-6"></span>
<span id="cb60-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb60-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb60-9"></span>
<span id="cb60-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb60-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb60-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb60-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb60-14"></span>
<span id="cb60-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance metric: Multiclass Accuracy</span></span>
<span id="cb60-16">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MulticlassAccuracy()</span>
<span id="cb60-17"></span>
<span id="cb60-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for CUDA-capable GPU availability</span></span>
<span id="cb60-19">use_amp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.is_available()</span></code></pre></div>
<p>We’ll use <a href="https://pytorch.org/torcheval/stable/generated/torcheval.metrics.MulticlassAccuracy.html#torcheval.metrics.MulticlassAccuracy">Multiclass Accuracy</a> for our performance metric as this is a multiclass classification problem where each image falls into one of many classes.</p>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>Finally, we can train the model using the <code>train_loop</code> function. Training time will depend on the available hardware. Feel free to take a break if the progress bar indicates it will take a while.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<p>Training usually takes around 1 hour and 20 minutes on the free GPU tier of Google Colab.</p>
</div>
</div>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">train_loop(model, train_dataloader, valid_dataloader, optimizer, metric, lr_scheduler, device, epochs, use_amp, checkpoint_path)</span></code></pre></div>
<pre class="text"><code>Epochs: 100%|█████████| 3/3 [11:15&lt;00:00, 224.96s/it]
Train: 100%|██████████| 4324/4324 [03:29&lt;00:00, 21.75it/s, accuracy=0.894, avg_loss=0.374, loss=0.0984, lr=0.000994]
Eval: 100%|██████████| 481/481 [00:17&lt;00:00, 50.42it/s, accuracy=0.975, avg_loss=0.081, loss=0.214, lr=]
Train: 100%|██████████| 4324/4324 [03:28&lt;00:00, 22.39it/s, accuracy=0.968, avg_loss=0.105, loss=0.0717, lr=0.000462]
Eval: 100%|██████████| 481/481 [00:16&lt;00:00, 55.14it/s, accuracy=0.988, avg_loss=0.0354, loss=0.02, lr=]
Train: 100%|██████████| 4324/4324 [03:28&lt;00:00, 21.94it/s, accuracy=0.99, avg_loss=0.0315, loss=0.00148, lr=4.03e-9]
Eval: 100%|██████████| 481/481 [00:16&lt;00:00, 53.87it/s, accuracy=0.995, avg_loss=0.0173, loss=0.000331, lr=]</code></pre>
<p>At last, we have our hand gesture recognizer. The readout for the final validation run indicates the model achieved an approximate <code>99.5%</code> accuracy, meaning it missed less than <code>100</code> of the <code>15,374</code> samples in the validation set. To wrap up the tutorial, we’ll test our fine-tuned model by performing inference on individual images.</p>
</section>
</section>
<section id="making-predictions-with-the-model" class="level2">
<h2 class="anchored" data-anchor-id="making-predictions-with-the-model">Making Predictions with the Model</h2>
<p>In this final part of the tutorial, you will learn how to make predictions with the fine-tuned model on individual images, allowing us to see the model in action and assess its performance. Understanding how to apply trained models is crucial for implementing them in real-world applications.</p>
<p>Let’s start by setting the minimum input dimension for inference. We’ll use the same size as the input images we used during training but allow non-square input.</p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the minimum input dimension for inference </span></span>
<span id="cb63-2">infer_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)</span></code></pre></div>
<p>Next, we will randomly select an image from our dataset and resize it to the inference size. The <a href="https://cj-mills.github.io/cjm-pil-utils/core.html#resize_img"><code>resize_img</code></a> function will scale the image so the smallest dimension is the specified inference size while maintaining the original aspect ratio.</p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random item from the dataset</span></span>
<span id="cb64-2">item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(dataset)</span>
<span id="cb64-3"></span>
<span id="cb64-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image and resize it</span></span>
<span id="cb64-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb64-6">inp_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(sample_img.copy(), infer_sz)</span></code></pre></div>
<p>We then convert the image to a normalized tensor using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#pil_to_tensor"><code>pil_to_tensor</code></a> function and move it to the device where our model resides (CPU or GPU).</p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a normalized tensor and move it to the device</span></span>
<span id="cb65-2">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pil_to_tensor(inp_img, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span></code></pre></div>
<p>With our image prepared, we can now use our model to make a prediction. The following code block runs our model in a no-gradient context using <code>torch.no_grad()</code>. That informs PyTorch that we do not need to keep track of gradients in this operation, saving memory.</p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb66-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb66-3">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
<p>After obtaining the raw prediction, we apply the <a href="https://pytorch.org/docs/stable/generated/torch.nn.Softmax.html">Softmax</a> function to convert these values into probabilities that sum up to 1.</p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the model predictions to add up to 1</span></span>
<span id="cb67-2">pred_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Then, we retrieve the highest confidence score and its corresponding class index. The class index is converted into the actual class name using the <code>train_dataset.classes</code> lookup table.</p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the highest confidence score</span></span>
<span id="cb68-2">confidence_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb68-3"></span>
<span id="cb68-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class index with the highest confidence score and convert it to the class name</span></span>
<span id="cb68-5">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset.classes[torch.argmax(pred_scores)]</span></code></pre></div>
<p>We then format the prediction data, including the target class, the predicted class, and the confidence score of the prediction, as a <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html">Pandas Series</a> and print it.</p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the prediction data in a Pandas Series for easy formatting</span></span>
<span id="cb69-2">pred_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series({</span>
<span id="cb69-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target Class:"</span>: class_names[item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]],</span>
<span id="cb69-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class:"</span>: pred_class,</span>
<span id="cb69-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Score:"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>confidence_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb69-6">})</span>
<span id="cb69-7"></span>
<span id="cb69-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data</span></span>
<span id="cb69-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pred_data.to_string(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span></code></pre></div>
<pre class="text"><code>Target Class:           like
Predicted Class:        like
Confidence Score:    100.00%</code></pre>
<hr>
<p>Finally, we display the sample image for visual verification.</p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb71-2">sample_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_87_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>For this sample, the model was 100% confident in its prediction. The model will likely be less sure about images it has not seen before.</p>
<section id="testing-the-model-on-new-data" class="level3">
<h3 class="anchored" data-anchor-id="testing-the-model-on-new-data">Testing the Model on New Data</h3>
<p>Let’s try an image from the free stock photo site, <a href="https://www.pexels.com/photo/man-doing-rock-and-roll-sign-2769554/">Pexels</a>.</p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib.request</span>
<span id="cb72-2"></span>
<span id="cb72-3">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb72-4">test_img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./pexels-man-doing-rock-and-roll-sign.jpg"</span>)</span>
<span id="cb72-5"></span>
<span id="cb72-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_img_path.is_file():</span>
<span id="cb72-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image already exists."</span>)</span>
<span id="cb72-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb72-9">    urllib.request.urlretrieve(test_img_url, test_img_path)</span>
<span id="cb72-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image downloaded."</span>)</span>
<span id="cb72-11"></span>
<span id="cb72-12">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_path)</span>
<span id="cb72-13">sample_img</span></code></pre></div>
<pre class="text"><code>Image already exists.</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_88_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This image is a bit tricky. The man in the photo makes a <code>rock</code> gesture with their left hand, but their right hand is visible and strongly resembles samples from the <code>no_gesture</code> class. Let’s see what the model predicts using the same approach as above.</p>
<div class="sourceCode" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">target_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rock"</span></span>
<span id="cb74-2"></span>
<span id="cb74-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the minimum input dimension for inference </span></span>
<span id="cb74-4">infer_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)</span>
<span id="cb74-5"></span>
<span id="cb74-6">inp_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(sample_img.copy(), infer_sz)</span>
<span id="cb74-7"></span>
<span id="cb74-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a normalized tensor and move it to the device</span></span>
<span id="cb74-9">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pil_to_tensor(inp_img, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb74-10"></span>
<span id="cb74-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb74-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb74-13">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span>
<span id="cb74-14">        </span>
<span id="cb74-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the model predictions to add up to 1</span></span>
<span id="cb74-16">pred_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb74-17"></span>
<span id="cb74-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the highest confidence score</span></span>
<span id="cb74-19">confidence_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb74-20"></span>
<span id="cb74-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class index with the highest confidence score and convert it to the class name</span></span>
<span id="cb74-22">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset.classes[torch.argmax(pred_scores)]</span>
<span id="cb74-23"></span>
<span id="cb74-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the prediction data in a Pandas Series for easy formatting</span></span>
<span id="cb74-25">pred_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series({</span>
<span id="cb74-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Size:"</span>: inp_img.size,</span>
<span id="cb74-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target Class:"</span>: target_cls,</span>
<span id="cb74-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class:"</span>: pred_class,</span>
<span id="cb74-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Score:"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>confidence_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb74-30">})</span>
<span id="cb74-31"></span>
<span id="cb74-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data</span></span>
<span id="cb74-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pred_data.to_string(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb74-34"></span>
<span id="cb74-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb74-36">sample_img</span></code></pre></div>
<pre class="text"><code>Input Size:          (288, 416)
Target Class:              rock
Predicted Class:           rock
Confidence Score:        99.70%</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_89_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Even though this image is a different shape than the training data and has an idle hand, the model confidently predicts <code>rock</code> as the most likely gesture class.</p>
</section>
<section id="saving-the-class-labels" class="level3">
<h3 class="anchored" data-anchor-id="saving-the-class-labels">Saving the Class Labels</h3>
<p>Let’s save the dataset class labels in a dedicated JSON file so we don’t need to load the whole dataset to make predictions with the model in the future. I’ll cover how to load the model checkpoint we saved earlier and use it for inference in a future tutorial.</p>
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save class labels</span></span>
<span id="cb76-2">class_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classes"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(train_dataset.classes)}</span>
<span id="cb76-3"></span>
<span id="cb76-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set file path</span></span>
<span id="cb76-5">class_labels_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-classes.json"</span></span>
<span id="cb76-6"></span>
<span id="cb76-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save class labels in JSON format</span></span>
<span id="cb76-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(class_labels_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> write_file:</span>
<span id="cb76-9">    json.dump(class_labels, write_file)</span>
<span id="cb76-10">    </span>
<span id="cb76-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(class_labels_path)</span></code></pre></div>
<pre class="text"><code>pytorch-timm-image-classifier/2023-05-22_16-35-03/hagrid-classification-512p-no-gesture-150k-zip-classes.json</code></pre>
<hr>
<p>We now have a functioning hand-gesture recognizer and know how to make predictions with it on individual images. Before we wrap up this tutorial, let’s check out the in-browser demo I mentioned at the beginning of the post.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the model checkpoint and class labels from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
<li>Once you finish training and download the files, turn off hardware acceleration for the Colab Notebook to save GPU time. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#using-hardware-acceleration">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="exploring-the-in-browser-demo" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-in-browser-demo">Exploring the In-Browser Demo</h2>
<p>You’ve gotten your hands dirty with the code. Now let’s see our fine-tuned model in action! I’ve set up an online demo that allows you to interact with a hand gesture recognizer trained with this tutorial’s code in your web browser. No downloads or installations are required.</p>
<p>The demo includes sample images that you can use to test the model. Try these images first to see how the model interprets different hand gestures. Once you’re ready, you can switch on your webcam to provide live input to the model.</p>
<p>Online demos are a great way to see and share the fruits of your labor and explore ways to apply your hand gesture recognizer in real-world scenarios.</p>
<p>I invite you to share any interesting results or experiences with the demo in the comments below. Whether it’s a tricky input image the model handles or a surprising failure case, I’d love to hear about it!</p>
<p>Check out the demo below, and have fun exploring!</p>
<ul>
<li><a href="https://cj-mills.github.io/pytorch-timm-gesture-recognition-tutorial-code/">In-Browser Hand Gesture Recognition Demo</a></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on completing this tutorial on fine-tuning image classifiers with PyTorch and the timm library! You’ve taken significant strides in your machine learning journey by creating a practical hand gesture recognizer.</p>
<p>Throughout this tutorial, we’ve covered many topics, including setting up your Python environment, importing necessary dependencies, project initialization, dataset loading and exploration, model selection, data preparation, and model fine-tuning. Finally, we made predictions with our fine-tuned model on individual images and tested the model with an interactive, in-browser demo.</p>
<p>This hands-on tutorial underscored the practical applications of fine-tuning image classification models, especially when working with limited data and computational resources. The hand gesture recognizer you’ve built has many real-world applications, and you now have a solid foundation to tackle other image classification tasks.</p>
<p>If you’re intrigued by the underlying concepts leveraged in this tutorial and wish to deepen your understanding, I recommend fast.ai’s <a href="https://course.fast.ai/">Practical Deep Learning for Coders</a> course. By the end, you’ll thoroughly understand the model and training code and have the know-how to implement them from scratch.</p>
<p>While our tutorial concludes here, your journey in deep learning is far from over. In the upcoming tutorials, we’ll explore topics such as incorporating preprocessing and post-processing steps into the model, exporting the model to different formats for deployment, using the fine-tuned model to identify flawed training samples in our dataset, and building interactive in-browser demo projects similar to the one featured in this tutorial.</p>
<p>Once again, congratulations on your achievement, and keep learning!</p>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="./onnx-export/"><strong>Exporting timm Image Classifiers from Pytorch to ONNX</strong></a><strong>:</strong> Learn how to export timm image classification models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
<li><a href="../pytorch-train-object-detector-yolox-tutorial/"><strong>Training YOLOX Models for Real-Time Object Detection in Pytorch</strong></a>: Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-classification</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/index.html</guid>
  <pubDate>Wed, 24 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Obtain a Kaggle API Key</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/kaggle-obtain-api-key-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Create a Kaggle Account</li>
<li>Sign in to Kaggle</li>
<li>Access your Kaggle Account Settings</li>
<li>Generate Your Kaggle API Key</li>
<li>Store the Kaggle API Key</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I will guide you step-by-step to obtain a Kaggle API key, which you will need to access and download datasets from Kaggle using their API. This tutorial is suitable for beginners, even those who do not have a Kaggle account yet.</p>
</section>
<section id="create-a-kaggle-account" class="level2">
<h2 class="anchored" data-anchor-id="create-a-kaggle-account">Create a Kaggle Account</h2>
<ol type="1">
<li><p>Visit Kaggle’s website at <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-homepage.png" class="img-fluid" data-fig-align="center" alt="kaggle-homepage"><br></p></li>
<li><p>Click on the <code>Register</code> button at the top-right corner of the page.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-homepage-click-register-button.png" class="img-fluid" data-fig-align="center" alt="kaggle-homepage-click-register-button"><br></p></li>
<li><p>Select the <code>Register with your email</code> option. Alternatively, you can sign up using Google, Facebook, or Yahoo accounts.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-select-registration-method.png" class="img-fluid" data-fig-align="center" alt="kaggle-select-registration-method"><br></p></li>
<li><p>Fill in the required information, including your name, email, and password, then click <code>Next</code>.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-enter-registration-info.png" class="img-fluid" data-fig-align="center" alt="kaggle-enter-registration-info"><br></p></li>
<li><p>Click <code>I agree</code> to accept the Privacy and Terms agreement.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-accept-privacy-and-terms-agreement.png" class="img-fluid" data-fig-align="center" alt="kaggle-accept-privacy-and-terms-agreement"><br></p></li>
<li><p>Kaggle will email a six-digit code to verify your email address. Enter the code in the prompt and click <code>Next</code> to complete your account registration.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-verify-email-with-six-digit-code.png" class="img-fluid" data-fig-align="center" alt="kaggle-verify-email-with-six-digit-code"><br></p></li>
</ol>
</section>
<section id="sign-in-to-kaggle" class="level2">
<h2 class="anchored" data-anchor-id="sign-in-to-kaggle">Sign in to Kaggle</h2>
<ol type="1">
<li><p>If you aren’t already signed in, click the <code>Sign In</code> button at the top-right corner of the Kaggle homepage.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-homepage-click-sign-in-button.png" class="img-fluid" data-fig-align="center" alt="kaggle-homepage-click-sign-in-button"><br></p></li>
<li><p>Select the <code>Sign in with your email</code> option. Alternatively, you can sign in using Google, Facebook, or Yahoo accounts.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-select-sign-in-method.png" class="img-fluid" data-fig-align="center" alt="kaggle-select-sign-in-method"><br></p></li>
<li><p>Enter your email/username and password, then click <code>Sign In</code>.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-sign-in-page.png" class="img-fluid" data-fig-align="center" alt="kaggle-sign-in-page"><br></p></li>
</ol>
</section>
<section id="access-your-kaggle-account-settings" class="level2">
<h2 class="anchored" data-anchor-id="access-your-kaggle-account-settings">Access your Kaggle Account Settings</h2>
<ol type="1">
<li><p>Click on your profile picture at the top-right corner of the page.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-click-profile-picture.png" class="img-fluid" data-fig-align="center" alt="kaggle-click-profile-picture"><br></p></li>
<li><p>In the popout menu, click the <code>Settings</code> option.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-click-settings-menu-option.png" class="img-fluid" data-fig-align="center" alt="kaggle-click-settings-menu-option"><br></p></li>
</ol>
</section>
<section id="generate-your-kaggle-api-key" class="level2">
<h2 class="anchored" data-anchor-id="generate-your-kaggle-api-key">Generate Your Kaggle API Key</h2>
<ol type="1">
<li><p>Scroll to the <code>API</code> section in your Account settings and click the <code>Create New API Token</code> button.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-account-settings-click-create-new-token.png" class="img-fluid" data-fig-align="center" alt="kaggle-account-settings-click-create-new-token"><br></p></li>
<li><p>Kaggle will generate a JSON file named <code>kaggle.json</code> and prompt you to save the file to your computer.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-save-kaggle-json-file.png" class="img-fluid" data-fig-align="center" alt="kaggle-save-kaggle-json-file"><br></p></li>
<li><p>Download the <code>kaggle.json</code> file and save it to a secure location on your computer. This file contains your Kaggle API key and username.</p></li>
</ol>
</section>
<section id="store-the-kaggle-api-key" class="level2">
<h2 class="anchored" data-anchor-id="store-the-kaggle-api-key">Store the Kaggle API Key</h2>
<p>Keep the <code>kaggle.json</code> file safe and secure, as it contains sensitive information. Remember to set the permissions for the <code>kaggle.json</code> file to be readable and writable only by you. Never share this file with anyone or upload it to public repositories.</p>
<p>If you plan to use the Kaggle API on your local machine, ensure the <code>kaggle.json</code> file is in the following location:</p>
<ul>
<li><p>Windows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">C:\Users\&lt;username</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\.</span>kaggle\kaggle.json</span></code></pre></div></li>
<li><p>Linux:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/.kaggle/kaggle.json</span></span></code></pre></div></li>
<li><p>macOS:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/Users/</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/.kaggle/kaggle.json</span></code></pre></div></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You have successfully obtained your Kaggle API key. You can now use it to download datasets from Kaggle using their API.</p>


</section>

 ]]></description>
  <category>kaggle</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/kaggle-obtain-api-key-tutorial/index.html</guid>
  <pubDate>Wed, 17 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/mamba-getting-started-tutorial-windows/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>An Overview of Machine Learning, PyTorch, and Jupyter</li>
<li>Installing Mamba</li>
<li>Access the Miniforge Prompt</li>
<li>Benefits of Using Virtual Environments</li>
<li>Creating a Python Environment</li>
<li>Package Overview</li>
<li>Installing PyTorch and Jupyter</li>
<li>Testing PyTorch and Jupyter Notebook Setup</li>
<li><a href="managing-and-updating-packages-with-mamba">Managing and Updating Packages with Mamba</a></li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this beginner-friendly tutorial, I’ll guide you through installing the <a href="https://mamba.readthedocs.io/en/latest/index.html">Mamba</a> package manager on your local Windows machine and using it to create Python environments. Mamba is a powerful tool that helps you create and manage virtual environments, allowing you to maintain separate configurations for different projects without conflicts. It provides a drop-in replacement for <a href="https://docs.conda.io/en/latest/">conda</a> and offers higher speed and more reliable environment solutions.</p>
<p>In this tutorial, we’ll use a practical example to demonstrate the effectiveness of Mamba. We’ll install PyTorch and Jupyter, two essential tools for machine learning projects. To ensure we set up everything correctly, we’ll verify the PyTorch installation by running a simple test in a Jupyter Notebook. By the end of this tutorial, you’ll be well-equipped to begin your machine-learning projects using Mamba, PyTorch, and Jupyter.</p>
</section>
<section id="an-overview-of-machine-learning-pytorch-and-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="an-overview-of-machine-learning-pytorch-and-jupyter">An Overview of Machine Learning, PyTorch, and Jupyter</h2>
<p>Machine learning is a subset of artificial intelligence that enables computers to learn from data and make decisions or predictions without being explicitly programmed. It has become an essential tool across various domains, including natural language processing, computer vision, and speech recognition.</p>
<p><a href="https://pytorch.org/">PyTorch</a> is a popular open-source machine learning framework that enables users to perform tensor computations, build dynamic computational graphs, and implement custom machine learning architectures. PyTorch has gained widespread adoption due to its flexibility, ease of use, and strong community support.</p>
<p><a href="https://jupyter.org/">Jupyter</a> is an open-source project that provides an interactive computing environment where you can create and share documents containing live code, equations, visualizations, and narrative text. Jupyter Notebook is a web-based platform that allows users to write, run, and debug code. You can also create visualizations and explanatory text.</p>
<p>This tutorial will help kickstart your machine-learning projects by guiding you through setting up a local Python environment using Mamba, PyTorch, and Jupyter. If you’re new to machine learning and want to learn more, I recommend the <a href="https://course.fast.ai/">Practical Deep Learning for Coders</a> course. The course uses a hands-on approach to teach students to apply deep learning and machine learning to practical problems using PyTorch and the <a href="https://docs.fast.ai/">fastai library</a>.</p>
</section>
<section id="installing-mamba" class="level2">
<h2 class="anchored" data-anchor-id="installing-mamba">Installing Mamba</h2>
<ol type="1">
<li><p>Download the Mambaforge installer for Windows from the <a href="https://github.com/conda-forge/miniforge#mambaforge">official Miniforge GitHub repository</a>.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-github-readme-download-windows-installer.png" class="img-fluid" data-fig-align="center" alt="mambaforge-github-readme-download-windows-installer"><br></p></li>
<li><p>Run the installer executable.</p>
<ol type="1">
<li><p>You might get a popup from Microsoft Defender SmartScreen like the one below, saying it prevented an unrecognized app from starting. If so, click More info.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/microsoft-defender-smartscreen-popup-click-more-info.png" class="img-fluid" data-fig-align="center" alt="microsoft-defender-smartscreen-popup-click-more-info"><br></p></li>
<li><p>Then click the “Run anyway” button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/microsoft-defender-smartscreen-popup-click-run-anyway.png" class="img-fluid" data-fig-align="center" alt="microsoft-defender-smartscreen-popup-click-run-anyway"><br></p></li>
</ol></li>
<li><p>Follow the on-screen instructions in the setup window.</p>
<ol type="1">
<li><p>Click the <code>Next &gt;</code> button in the setup window.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-1.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-1"><br></p></li>
<li><p>Click the <code>I Agree</code> button to accept the license agreement.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-2.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-2"><br></p></li>
<li><p>Select <code>Just Me</code> for the installation type and click the <code>Next &gt;</code> button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-3.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-3"><br></p></li>
<li><p>Stick with the default install location and click the <code>Next &gt;</code> button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-4.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-4"><br></p></li>
<li><p>Check the box to clear the package cache upon completion under installation options and click the <code>Install</code> button to start the installation process.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-5.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-5"><br></p></li>
<li><p>Wait for the installation process to complete, then click the <code>Next &gt;</code> button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-installation-complete.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-installation-complete"><br></p></li>
<li><p>Finally, click the <code>Finish</code> button to close the setup window.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-finish-setup.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-finish-setup"><br></p></li>
</ol></li>
</ol>
</section>
<section id="access-the-miniforge-prompt" class="level2">
<h2 class="anchored" data-anchor-id="access-the-miniforge-prompt">Access the Miniforge Prompt</h2>
<p>On Windows, we use Mamba through the Miniforge Prompt. It is a dedicated command-line interface for interacting with conda environments.</p>
<p>Type “Miniforge Prompt” into the Windows search bar and click Open.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/windows-search-miniforge-prompt.png" class="img-fluid" data-fig-align="center" alt="windows-search-miniforge-prompt"><br></p>
<p>A new command prompt will open at the location of your Windows user folder.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/miniforge-prompt-new.png" class="img-fluid" data-fig-align="center" alt="miniforge-prompt-new"><br></p>
<p>Alternatively, you can activate the Miniforge Prompt from any regular command prompt with the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%USERPROFILE%\mambaforge\Scripts\activate</span></span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/command-prompt-activate-miniforge-prompt.png" class="img-fluid" data-fig-align="center" alt="command-prompt-activate-miniforge-prompt"><br></p>
<p>The text in front of the current directory path indicates the name of the current conda environment.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/miniforge-prompt-new-highlight-env-name.png" class="img-fluid" data-fig-align="center" alt="miniforge-prompt-new"><br></p>
<p>We can get a list of the available conda environments and their locations using the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env list</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-env-list.png" class="img-fluid" data-fig-align="center" alt="mamba-env-list"><br></p>
<p>The only one listed is “base.” If we go to the associated directory path in File Explorer, we’ll see the contents for the Mambaforge installation. Mambaforge will store any conda environments we create in the “envs” folder.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-env-location.png" class="img-fluid" data-fig-align="center" alt="mambaforge-env-location"><br></p>
</section>
<section id="benefits-of-using-virtual-environments" class="level2">
<h2 class="anchored" data-anchor-id="benefits-of-using-virtual-environments">Benefits of Using Virtual Environments</h2>
<p>Before creating a new Python environment, let’s cover the benefits of using virtual environments and why they are essential when working with Python projects.</p>
<ul>
<li><strong>Isolation of Dependencies</strong>: Virtual environments create isolated spaces for each project, allowing developers to install and manage different package versions without conflicts. This isolation ensures that the specific dependencies required for one project do not interfere with or break the dependencies of another project.</li>
<li><strong>Easier Project Management</strong>: Virtual environments help streamline project management by maintaining separate configurations for different projects. Developers can replicate or share project environments with team members, ensuring consistent behavior across various machines. Shareable project environments help developers collaborate, troubleshoot, and deploy projects.</li>
<li><strong>Simplified System Maintenance</strong>: Using virtual environments helps developers avoid cluttering their system-wide Python installation with numerous packages and varying versions. System maintenance is cleaner as developers can easily add, update, or remove packages within individual project environments without affecting other projects or the system as a whole.</li>
</ul>
</section>
<section id="creating-a-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h2>
<p>We can create new Python environments using the <code>mamba create</code> command. The following command will create one called <code>pytorch-env</code> with Python <code>3.10</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch-env"</span> python=3.10</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-create-env-command.png" class="img-fluid" data-fig-align="center" alt="mamba-create-env-command"><br></p>
<p>Mamba will ask you to confirm that you want to install the packages required to create the new conda environment. Type <code>Y</code> into the “Confirm changes” prompt.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-create-env-command-confirm-changes.png" class="img-fluid" data-fig-align="center" alt="mamba-create-env-command-confirm-changes"><br></p>
<p>Alternatively, you can pre-approve the package installations by adding a <code>-y</code> to the end of the <code>mamba create</code> command.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch-env"</span> python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>Looking in the “envs” directory, we see a new folder for the conda environment we created.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-inspect-envs-folder.png" class="img-fluid" data-fig-align="center" alt="mambaforge-inspect-envs-folder"><br></p>
<p>Once Mamba finishes creating the new environment, it will tell us we can activate and deactivate it using the following commands:</p>
<p><strong>Activate:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
<p><strong>Deactivate:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> deactivate</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-env-created.png" class="img-fluid" data-fig-align="center" alt="mamba-env-created"><br></p>
<p>When we activate it, the name in front of the current directory will change accordingly.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-activate-env.png" class="img-fluid" data-fig-align="center" alt="mamba-activate-env"><br></p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>Before we install PyTorch and Jupyter, let’s briefly explore the purpose of each package and why they’re essential for machine learning projects.</p>
<ul>
<li><a href="https://pytorch.org/docs/stable/index.html"><strong>PyTorch</strong></a>: PyTorch is a fast, flexible, user-friendly, open-source machine learning framework. PyTorch allows developers to perform tensor computations, create dynamic computational graphs, and implement custom machine-learning architectures.</li>
<li><a href="https://pytorch.org/vision/stable/index.html"><strong>torchvision</strong></a>: <code>torchvision</code> provides benchmark datasets, model architectures, and image transformations for computer vision.</li>
<li><a href="https://pytorch.org/audio/stable/index.html"><strong>torchaudio</strong></a>: This package provides various tools and datasets for audio processing, including input/output functions, data loaders for popular audio datasets, and audio-specific transformations.</li>
<li><a href="https://jupyter.org/"><strong>Jupyter</strong></a>: Jupyter is an open-source project that enables users to create and share documents containing live code, equations, visualizations, and narrative text. Jupyter Notebook is a web-based interactive computing environment where you can write, run, and debug code. You can also include visualizations and explanatory text.</li>
</ul>
</section>
<section id="installing-pytorch-and-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="installing-pytorch-and-jupyter">Installing PyTorch and Jupyter</h2>
<p>We can install packages in our custom Python environment using <code>mamba</code> or the <a href="https://packaging.python.org/en/latest/key_projects/#pip"><code>pip</code></a> package installer. To use <code>mamba,</code> we replace the word <code>conda</code> in any <code>conda</code> install commands.</p>
<p>For example, this is the <code>conda</code> command to install <a href="https://pytorch.org/">PyTorch</a> on computers with Nvidia GPUs.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia</span></code></pre></div>
<p>For users without an Nvidia GPU:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pytorch torchvision torchaudio cpuonly <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch</span></code></pre></div>
<p>Here is the modified command, which uses Mamba.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-install-pytorch-command.png" class="img-fluid" data-fig-align="center" alt="mamba-install-pytorch-command"><br></p>
<p>As before, type <code>Y</code> into the “Confirm changes” prompt.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-install-pytorch-confirm-changes.png" class="img-fluid" data-fig-align="center" alt="mamba-install-pytorch-confirm-changes"><br></p>
<p>Alternatively, you can pre-approve the package installations by adding a <code>-y</code> to the end of the <code>mamba install</code> command.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>Installation time can vary depending on your system’s hardware and Internet speed. Once it finishes, we’ll install Jupyter using the following command:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install jupyter <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-install-jupyter.png" class="img-fluid" data-fig-align="center" alt="mamba-install-jupyter"><br></p>
</section>
<section id="testing-pytorch-and-jupyter-notebook-setup" class="level2">
<h2 class="anchored" data-anchor-id="testing-pytorch-and-jupyter-notebook-setup">Testing PyTorch and Jupyter Notebook Setup</h2>
<p>Now that we have PyTorch and Jupyter installed in our Python environment, we can verify everything works as expected by importing PyTorch into a Jupyter Notebook. Before that, I recommend changing the current directory to something more appropriate. I switched to a new folder outside my <code>G</code> drive using the following commands:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">G:</span></span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> Projects<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\C</span>urrent_Projects<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\m</span>amba-tutorial</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/cmd-switch-drive-and-folder.png" class="img-fluid" data-fig-align="center" alt="cmd-switch-drive-and-folder"><br></p>
<p>We can launch a Jupyter Notebook environment using the following command:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-notebook-command.png" class="img-fluid" data-fig-align="center" alt="jupyter-notebook-command"><br></p>
<p>The Jupyter Notebook environment will launch in a new tab in your default web browser.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/new-jupyter-notebook-environment.png" class="img-fluid" data-fig-align="center" alt="new-jupyter-notebook-environment"><br></p>
<p>To create a new Jupyter Notebook, open the <code>New</code> drop-down menu and select the <code>Python 3 (ipykernel)</code>option.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-create-new-notebook.png" class="img-fluid" data-fig-align="center" alt="jupyter-create-new-notebook"><br></p>
<p>The notebook will open in a new tab.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-new-notebook.png" class="img-fluid" data-fig-align="center" alt="jupyter-new-notebook"><br></p>
<p>We can import PyTorch and verify it can use the Nvidia GPU by running the following code in the notebook:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb14-2">torch.cuda.is_available()</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-notebook-torch-cuda-is-available.png" class="img-fluid" data-fig-align="center" alt="jupyter-notebook-torch-cuda-is-available"><br></p>
</section>
<section id="managing-and-updating-packages-with-mamba" class="level2">
<h2 class="anchored" data-anchor-id="managing-and-updating-packages-with-mamba">Managing and Updating Packages with Mamba</h2>
<p>This section covers the commands to manage and update packages in your Python environment using Mamba. Proper package management is crucial for maintaining project stability and ensuring compatibility between dependencies.</p>
<section id="listing-installed-packages" class="level3">
<h3 class="anchored" data-anchor-id="listing-installed-packages">Listing Installed Packages</h3>
<p>To view all the installed packages within your active Python environment, use the following command:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> list</span></code></pre></div>
<p>This command will display a list of installed packages and their respective versions and channels.</p>
</section>
<section id="updating-a-package" class="level3">
<h3 class="anchored" data-anchor-id="updating-a-package">Updating a Package</h3>
<p>Updating a package to its latest version is simple with Mamba. Use the following command, replacing package-name with the name of the package you want to update:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> update package-name</span></code></pre></div>
<p>Mamba will search for the latest version of the package, resolve any dependencies, and prompt you to confirm the update.</p>
</section>
<section id="updating-all-packages" class="level3">
<h3 class="anchored" data-anchor-id="updating-all-packages">Updating All Packages</h3>
<p>To update all packages within the active Python environment to their latest versions, run the following command:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span></span></code></pre></div>
<p>Mamba will check for updates for all installed packages and prompt you to confirm the changes.</p>
</section>
<section id="installing-a-specific-package-version" class="level3">
<h3 class="anchored" data-anchor-id="installing-a-specific-package-version">Installing a Specific Package Version</h3>
<p>To install a specific package version, use the “=” sign to append the desired number to the package name. For example, to install version 1.0.0 of a package named example-package, use the following command:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install example-package=1.0.0</span></code></pre></div>
</section>
<section id="removing-a-package" class="level3">
<h3 class="anchored" data-anchor-id="removing-a-package">Removing a Package</h3>
<p>To remove a package from the active Python environment, use the remove command, replacing package-name with the name of the package you want to remove:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> remove package-name</span></code></pre></div>
<p>Mamba will prompt you to confirm the removal of the package and its dependencies.</p>
</section>
<section id="searching-for-packages" class="level3">
<h3 class="anchored" data-anchor-id="searching-for-packages">Searching for Packages</h3>
<p>You can search for packages across various channels using the search command. To search for a package named example-package, run:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> search example-package</span></code></pre></div>
<p>This command will display a list of available versions and channels for the specified package.</p>
<p>With these commands, you can effectively manage and update packages in your Python environment using Mamba, ensuring your projects stay up-to-date and compatible with the latest dependencies.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we successfully installed the Mamba package manager on a Windows machine and used it to create a local Python environment for our machine-learning project. We also installed tools like PyTorch and Jupyter to help us build machine-learning models.</p>
<p>By leveraging the power of virtual environments, we can maintain separate configurations for different projects, avoiding dependency conflicts and streamlining project management.</p>


</section>

 ]]></description>
  <category>mamba</category>
  <category>conda</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/mamba-getting-started-tutorial-windows/index.html</guid>
  <pubDate>Mon, 15 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting Started with Google Colab</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/google-colab-getting-started-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Access Google Colab</li>
<li>The Notebook Selection Window</li>
<li>Understanding the Notebook Interface</li>
<li>Working with Data</li>
<li>Using Hardware Acceleration</li>
<li>Create a New Notebook</li>
<li>Save Your Notebook</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I’ll introduce you to Google Colab, its features, and how to use it to run your code. Google Colab provides a free, cloud-based Jupyter Notebook environment that allows you to write, run, and share Python code in your browser without any setup or installation. A Jupyter Notebook is an interactive web-based tool for creating and sharing documents that contain live code, visualizations, and narrative text, often used in data analysis, visualization, and education.</p>
</section>
<section id="access-google-colab" class="level2">
<h2 class="anchored" data-anchor-id="access-google-colab">Access Google Colab</h2>
<p>To access Google Colab, follow these steps:</p>
<ol type="1">
<li>Go to <a href="https://colab.research.google.com/">colab.research.google.com</a>.</li>
<li>Sign in with your Google account. If you don’t have a Google account, create one <a href="https://accounts.google.com/signup">here</a>.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-signed-out.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-signed-out</figcaption>
</figure>
</div>
</section>
<section id="the-notebook-selection-window" class="level2">
<h2 class="anchored" data-anchor-id="the-notebook-selection-window">The Notebook Selection Window</h2>
<p>After signing in, the Notebook Selection window will pop up. This window displays a list of your recent notebooks, allowing you to access and open them. If this is your first time using Google Colab, you will only see the “Welcome to Colaboratory” notebook listed. The Notebook Selection window also allows you to import Jupyter Notebooks from Google Drive and GitHub or upload a notebook from your computer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-page.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-page</figcaption>
</figure>
</div>
<p>The “Welcome to Colaboratory” notebook is already open behind the Notebook Selection window, so we’ll work with that one. Click the cancel button in the bottom right corner of the popup window to view the welcome notebook.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-page-exit-popup.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-page-exit-popup</figcaption>
</figure>
</div>
</section>
<section id="understanding-the-notebook-interface" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-notebook-interface">Understanding the Notebook Interface</h2>
<p>A notebook consists of a list of cells. Google Colab notebooks have two main types of cells: code cells and text cells. Code cells allow you to write and run Python code, while text cells let you add formatted text, images, and equations using <a href="https://www.markdownguide.org/getting-started/">Markdown</a>. The first few cells in the welcome notebook are text cells.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-top.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-top</figcaption>
</figure>
</div>
<section id="text-cells" class="level3">
<h3 class="anchored" data-anchor-id="text-cells">Text Cells</h3>
<p>You can view and edit the Markdown source of a text cell by double-clicking it. In editor mode, Google Colab will show the Markdown source and the rendered version side-by-side.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-inspect-markdown-source.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-inspect-markdown-source</figcaption>
</figure>
</div>
<p>We can edit the Markdown source, and the rendered version will update in real time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-edit-markdown-source.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-edit-markdown-source</figcaption>
</figure>
</div>
<p>You can exit the editor mode by pressing <code>Shift+Enter</code>, clicking the <code>Close Markdown Editor</code> icon in the top-right corner of the text cell, or clicking another cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-exit-markdown-editor.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-exit-markdown-editor</figcaption>
</figure>
</div>
<p>To create a new text cell, click the <code>+ Text</code> button in the toolbar.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-add-text-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-add-text-cell</figcaption>
</figure>
</div>
<p>Google Colab will add the new Markdown cell below the currently selected cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-new-text-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-new-text-cell</figcaption>
</figure>
</div>
</section>
<section id="code-cells" class="level3">
<h3 class="anchored" data-anchor-id="code-cells">Code Cells</h3>
<p>To create a new code cell, click the <code>+ Code</code> button in the toolbar at the top of the notebook or press <code>Ctrl+M B</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-add-new-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-new-code-cell</figcaption>
</figure>
</div>
<p>Google Colab will add the new code cell below the currently selected cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-new-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-new-code-cell</figcaption>
</figure>
</div>
<p>You can write Python code in the code cell and execute it by pressing <code>Shift + Enter</code> or clicking the <code>Play</code> button on the left side of the cell. Any output from the code will appear directly below the code cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-run-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-run-code-cell</figcaption>
</figure>
</div>
<p>We can also use code cells to access the command line by adding an exclamation point at the start of the cell. We can use this ability to install Python packages via the <a href="https://packaging.python.org/en/latest/key_projects/#pip">pip</a> package installer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-access-command-line.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-access-command-line</figcaption>
</figure>
</div>
</section>
</section>
<section id="working-with-data" class="level2">
<h2 class="anchored" data-anchor-id="working-with-data">Working with Data</h2>
<p>Google Colab allows you to upload and download files to and from your computer and connect notebooks to your Google Drive.</p>
<section id="uploading-files" class="level3">
<h3 class="anchored" data-anchor-id="uploading-files">Uploading Files</h3>
<p>You can upload files from your local machine to use in your Google Colab notebook by following these steps:</p>
<ol type="1">
<li>Click the Files icon in the left sidebar to open the file browser.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-open-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-open-file-browser</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>Click the Upload button.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-upload-button.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-upload-button</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Go to the file location on your local machine, select it, and click Open to upload it to your Google Colab workspace.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-select-file-to-upload.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-select-file-to-upload</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Colab will display a warning that the runtime’s files get deleted when it terminates. Click OK in the bottom-right corner of the popup window.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-runtime-file-warning.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-runtime-file-warning</figcaption>
</figure>
</div>
<ol start="5" type="1">
<li>The uploaded file will appear in the file browser, and you can access it in your notebook.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-uploaded-file-in-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-uploaded-file-in-file-browser</figcaption>
</figure>
</div>
<ol start="6" type="1">
<li>We can view the file by double-clicking it in the file browser or loading it in the notebook via Python.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-load-image-file.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-load-image-file</figcaption>
</figure>
</div>
</section>
<section id="downloading-files" class="level3">
<h3 class="anchored" data-anchor-id="downloading-files">Downloading Files</h3>
<p>To download a file from your Google Colab workspace to your local machine, follow these steps:</p>
<ol type="1">
<li>Locate the file in the file browser.</li>
<li>Right-click the file and select Download.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-download-file.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-download-file</figcaption>
</figure>
</div>
<p>The file will download to your local machine.</p>
</section>
<section id="connecting-to-google-drive" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-google-drive">Connecting to Google Drive</h3>
<p>Google Colab notebooks can connect to Google Drive to access, store, and manage your files. To do this, follow these steps:</p>
<ol type="1">
<li>Click the Mount Drive button in the file browser.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-mount-drive.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-mount-drive</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li><p>Google Colab will create a new code cell containing the following code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> drive</span>
<span id="cb1-2">drive.mount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive'</span>)</span></code></pre></div></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-mount-drive-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-mount-drive-code-cell</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Run the code cell by pressing <code>Shift + Enter</code> or clicking the Play button on the left side of the cell. A popup window will appear, prompting you to authorize access to your Google Drive.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-mount-drive-code-cell-popup.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-mount-drive-code-cell-popup</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Click the <code>Connect to Google Drive</code> button to open the authorization page.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-drive-authorization-page.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-drive-authorization-page</figcaption>
</figure>
</div>
<ol start="5" type="1">
<li>Sign in with your Google account, and click Allow to grant access.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-allow-google-drive-to-access-account.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-allow-google-drive-to-access-account</figcaption>
</figure>
</div>
<ol start="6" type="1">
<li>Return to your Google Colab notebook. The code cell should have printed a message indicating your Google Drive is now mounted.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-verify-google-drive-mounted-message.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-verify-google-drive-mounted-message</figcaption>
</figure>
</div>
<ol start="7" type="1">
<li>Click the Refresh button in the file browser to update the contents.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-refresh-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-refresh-file-browser</figcaption>
</figure>
</div>
<p>Your Google Drive should now be mounted and accessible from the file browser.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-verify-driver-accessible-in-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-verify-driver-accessible-in-file-browser</figcaption>
</figure>
</div>
<p>You can read, write, and manage your Google Drive files directly from your Google Colab notebook. To access the files, use the path <code>/content/drive/MyDrive/</code> followed by the file or folder name.</p>
</section>
</section>
<section id="using-hardware-acceleration" class="level2">
<h2 class="anchored" data-anchor-id="using-hardware-acceleration">Using Hardware Acceleration</h2>
<p>Google Colab offers free access to GPUs and TPUs to accelerate your code. To enable GPU or TPU acceleration:</p>
<ol type="1">
<li>Click the “Runtime” menu at the top of the notebook.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-click-runtime-menu.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-click-runtime-menu</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>Select “Change runtime type.”</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-runtime-menu-change-runtime-type.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-runtime-menu-change-runtime-type</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Choose “GPU” from the “Hardware accelerator” drop-down menu.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-choose-gpu-hardware-accelerator.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-choose-gpu-hardware-accelerator</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Click “Save.”</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-save-hardware-accelerator-selection.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-save-hardware-accelerator-selection</figcaption>
</figure>
</div>
<ol start="5" type="1">
<li>Changing the hardware accelerator requires loading a new runtime. Loading a new runtime will delete any files we added and disconnect Google Drive. Google Colab will show a popup window asking you to confirm you want to delete the current runtime. Click “OK” to confirm.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-delete-previous-runtime-popup-window.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-delete-previous-runtime-popup-window</figcaption>
</figure>
</div>
<ol start="6" type="1">
<li><p>Verify the notebook has GPU access by running the following code in a code cell:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!nvidia-smi</span></span></code></pre></div></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-nvidia-smi-results.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-nvidia-smi-results</figcaption>
</figure>
</div>
<p>Your notebook will now use the selected hardware accelerator. Note that free GPU and TPU usage is time-limited. You can run notebooks on the free tier for at most 12 hours at a time (usually less). If you exceed the time allotment, you must wait until it resets (typically about 12 hours). Therefore, only enable hardware acceleration when needed and disable it when you don’t. To disable hardware acceleration, select None from the Hardware Accelerator drop-down menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-disable-hardware-acceleration.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-disable-hardware-acceleration</figcaption>
</figure>
</div>
</section>
<section id="create-a-new-notebook" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-notebook">Create a New Notebook</h2>
<p>To create a new notebook:</p>
<ol type="1">
<li>Open the <code>File</code> menu in the top-left corner and select <code>New notebook</code>.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-create-new-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-create-new-notebook</figcaption>
</figure>
</div>
<p>A new notebook will open in a separate tab. The runtime for the previous notebook is still active.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-new-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-new-notebook</figcaption>
</figure>
</div>
<p>You can rename the notebook by clicking the notebook name at the top of the page. For now, we can name it “My First Notebook.”</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-rename-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-rename-notebook</figcaption>
</figure>
</div>
</section>
<section id="save-your-notebook" class="level2">
<h2 class="anchored" data-anchor-id="save-your-notebook">Save Your Notebook</h2>
<p>Google Colab automatically saves your notebooks to a “Colab Notebooks” folder in Google Drive.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-drive-colab-notebooks-folder.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-drive-colab-notebooks-folder</figcaption>
</figure>
</div>
<p>Note the “Welcome to Colaboratory” notebook is not in the folder. Since we did not create that notebook, we must save our copy manually. Switch to that notebook’s tab and click the “Copy to Drive” button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-save-copy-to-drive.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-save-copy-to-drive</figcaption>
</figure>
</div>
<p>Google Colab will open our new copy of the notebook in a separate tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-copy-of-welcome-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-copy-of-welcome-notebook</figcaption>
</figure>
</div>
<p>If we check the “Colab Notebooks” folder in Google Drive, we should now see our copy of the welcome notebook.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-drive-verify-copy-of-welcome-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-drive-verify-copy-of-welcome-notebook</figcaption>
</figure>
</div>
</section>
<section id="sharing-notebooks" class="level2">
<h2 class="anchored" data-anchor-id="sharing-notebooks">Sharing Notebooks</h2>
<p>You can share your Google Colab notebook with others, similar to other Google Drive documents. To share your notebook:</p>
<ol type="1">
<li>Click the “Share” button in the top-right corner of the notebook.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-share-button.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-share-button</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>In the sharing settings dialog box, enter the email address of the person you want to share the notebook with.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-share-notebook-add-people.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-share-notebook-add-people</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Select their permission level: “Viewer,” “Commenter,” or “Editor.”</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-share-notebook-set-permission-level.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-share-notebook-set-permission-level</figcaption>
</figure>
</div>
<p>Alternatively, you can create a shareable link with specific access settings (view, comment, or edit). You can share this link with others, and they can access the notebook according to the chosen permission level.</p>
<ol type="1">
<li>Open the drop-down menu under General Access and select the “Anyone with a link” option.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enable-shareable-link.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enable-shareable-link</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>Set the permission level: “Viewer,” “Commenter,” or “Editor.”</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enable-shareable-link-permission-level.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enable-shareable-link-permission-level</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Click “Copy link” to copy the shareable link.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enable-shareable-link-copy-link.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enable-shareable-link-copy-link</figcaption>
</figure>
</div>
</section>
<section id="version-control-with-github" class="level2">
<h2 class="anchored" data-anchor-id="version-control-with-github">Version Control with GitHub</h2>
<p>Google Colab can save and load notebooks from GitHub repositories, enabling seamless collaboration and tracking of changes in your code.</p>
<section id="saving-a-notebook-to-a-github-repository" class="level3">
<h3 class="anchored" data-anchor-id="saving-a-notebook-to-a-github-repository">Saving a notebook to a GitHub repository:</h3>
<ol type="1">
<li>Open the File menu in the top-left corner and select Save a copy in GitHub.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-file-menu-save-copy-in-github.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-file-menu-save-copy-in-github</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>If you haven’t connected your GitHub account yet, follow the prompts to authorize Google Colab to access your repositories.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/github-authorize-google-colab.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">github-authorize-google-colab</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Choose a repository, branch, and file path for your notebook. You can also update the commit message.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-copy-to-github-select-repository.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-copy-to-github-select-repository</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Click OK to save the notebook to the specified GitHub repository.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-copy-to-github-click-ok.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-copy-to-github-click-ok</figcaption>
</figure>
</div>
</section>
<section id="loading-a-notebook-from-a-github-repository" class="level3">
<h3 class="anchored" data-anchor-id="loading-a-notebook-from-a-github-repository">Loading a notebook from a GitHub repository:</h3>
<ol type="1">
<li>Go to the <a href="https://colab.research.google.com/">Google Colab website</a>.</li>
</ol>
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-page.png" class="img-fluid" data-fig-align="center" alt="google-colab-welcome-page">{fig-align=“center”}</p>
<ol start="2" type="1">
<li>Click the GitHub tab in the Notebook Selection window.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-selection-window-click-github-tab.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-selection-window-click-github-tab</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Enter the URL for the GitHub repository containing the notebook you want to open. You can also search for one by entering a username or organization and repository name.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enter-github-repo-url.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enter-github-repo-url</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Select the notebook you want to open, and it will open in a new tab.</li>
</ol>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You’ve now learned the fundamentals of Google Colab. This tutorial covered creating and editing cells, working with data, hardware acceleration, and saving and sharing notebooks via Google Drive and GitHub. Keep exploring Google Colab to uncover more features that can enhance your projects.</p>


</section>

 ]]></description>
  <category>google-colab</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/google-colab-getting-started-tutorial/index.html</guid>
  <pubDate>Sun, 14 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference PoseNet Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-posenet-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-posenet">Barracuda Inference PoseNet</a> package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform 2D human pose estimation using PoseNet models.</p>
<p>Pose estimation has numerous potential uses in Unity applications, including motion capture and animation, educational apps, and augmented reality, to name a few. Here is a demo video from a project that uses this package.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-posenet-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-posenet-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I’ll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>PoseNetPoseEstimator.cs</code>: This script provides functionality to perform 2D human pose estimation with PoseNet models using the Barracuda inference engine.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference PoseNet package by examining the purpose and functionality of each C# script.</p>
<section id="posenetposeestimator.cs" class="level3">
<h3 class="anchored" data-anchor-id="posenetposeestimator.cs"><code>PoseNetPoseEstimator.cs</code></h3>
<p>This script defines the PoseNetPoseEstimator class, which extends the BarracudaModelRunner class from the Barracuda Inference Base package to perform 2D human pose estimation using PoseNet models. This class also depends on the <code>human-pose-2d-toolkit</code> package. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-posenet/blob/main/Runtime/Scripts/PoseNetPoseEstimator.cs">PoseNetPoseEstimator.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The class has several serialized fields for configuring the model, and processing output.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PoseNet Model Configuration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the heatmap layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> heatmapLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the offsets layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> offsetsLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the forward displacement layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> displacementFWDLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the backward displacement layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> displacementBWDLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output Processing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TextAsset containing the class labels for pose estimation"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also includes a field to control how often to unload memory assets when using Barracuda’s Pixel Shader backend. The Pixel Shader backend enables GPU inference on platforms that don’t support Compute Shaders. However, there seems to be a bug in the current version of Barracuda, which does not release unused assets when using this backend. Left unchecked, this can fill up both system and GPU memory. We can address this by manually freeing memory. Doing that every frame can hurt performance, so we’ll only do it at set intervals.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Settings"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval at which pixel shaders are unloaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<p>There are internal variables for handling class labels and parent-children relationships of pose skeleton points.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Internal Variables</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kLocalMaximumRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Parent-children relationships of the pose keypoints</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">readonly</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)[]</span> parentChildrenTuples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxStride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> SigmoidLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Layer names for the neural network</span></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> offsetsLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> displacementFWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> displacementBWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Class labels array</span></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Smallest dimension of the input image</span></span>
<span id="cb3-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method initializes the pose estimation component by calling the Start() method of the parent class and loading class labels.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes the pose estimation component.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads and prepares the PoseNet model for pose estimation. It sets the worker type to PixelShader if running on WebGL, gets the output layers for the heatmap, offsets, forward displacement, and backward displacement, and adds a sigmoid layer if the last layer is not sigmoid.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads and prepares the model for pose estimation.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-7"></span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set worker type to PixelShader if running on WebGL</span></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-11">        workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the output layer of the heatmap</span></span>
<span id="cb5-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>heatmapLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Find the heatmap layer in the model</span></span>
<span id="cb5-18">    Layer heatmapLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindLayerByName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> lastLayerIsSigmoid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmapLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activation</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Activation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sigmoid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-20"></span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add a sigmoid layer if the last layer is not sigmoid</span></span>
<span id="cb5-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>lastLayerIsSigmoid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-24">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sigmoid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SigmoidLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-26"></span>
<span id="cb5-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the names of the output layers for offsets, forward, and backward displacements</span></span>
<span id="cb5-28">    offsetsLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>offsetsLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-29">    displacementFWDLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>displacementFWDLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-30">    displacementBWDLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>displacementBWDLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="findlayerbyname" class="level4">
<h4 class="anchored" data-anchor-id="findlayerbyname"><code>FindLayerByName</code></h4>
<p>This method searches for a layer in the model by its name and returns the layer if found.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Finds a layer in the model by its name.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"model"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The model to search for the layer.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"layerName"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The name of the layer to find.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The layer with the given name or null if not found.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb6-7">Layer <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindLayerByName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Model model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> layerName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Layer layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> layerName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="loadclasslabels"><code>LoadClassLabels</code></h4>
<p>This method loads the class labels from the TextAsset, deserializes the JSON, and updates the <code>classes</code> array.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads the class labels from the TextAsset and updates the classes array.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb7-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class labels JSON is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-11"></span>
<span id="cb7-12">    ClassLabels classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isclasslabelsjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isclasslabelsjsonnullorempty"><code>IsClassLabelsJsonNullOrEmpty</code></h4>
<p>This method checks if the provided class label JSON file is null or empty.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Checks if the class labels JSON is null or empty.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the JSON is null or empty, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> classLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializeclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="deserializeclasslabels"><code>DeserializeClassLabels</code></h4>
<p>This method deserializes the provided class label JSON string to a <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserializes the class labels JSON into a ClassLabels object.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"json"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The class labels JSON string.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A ClassLabels object, or null if deserialization fails.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ClassLabels <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb9-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-14">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="updateclasslabels"><code>UpdateClassLabels</code></h4>
<p>This method updates the <code>classes</code> array with the provided <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the classes array with the contents of the given ClassLabels object.</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"classLabelsObj"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The ClassLabels object containing class labels.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ClassLabels classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-11"></span>
<span id="cb10-12">    classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">classes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>This method executes the PoseNet model with the given input texture.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Executes the model with the given input texture.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input texture to process.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-7">    minDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-8"></span>
<span id="cb11-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tensor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb11-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="processoutput" class="level4">
<h4 class="anchored" data-anchor-id="processoutput"><code>ProcessOutput</code></h4>
<p>This method processes the output tensors and returns an array of detected human poses. It can use either single-pose decoding or multiple-pose decoding.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Processes the output tensors and returns an array of detected human poses.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"useMultiPoseDecoding"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True to use multiple pose decoding, false to use single pose decoding.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"maxPoses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The maximum number of poses to detect.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of detected human poses.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProcessOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> useMultiPoseDecoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize a list to store the detected human poses</span></span>
<span id="cb12-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> humanPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the output tensors from the neural network</span></span>
<span id="cb12-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor heatmaps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SigmoidLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>offsetsLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor displacementFWD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacementFWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor displacementBWD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacementBWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the stride based on the dimensions of the heatmaps</span></span>
<span id="cb12-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minHeatMapDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>minDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>minHeatMapDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-21">    stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decide whether to use single pose decoding or multiple pose decoding</span></span>
<span id="cb12-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>useMultiPoseDecoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decode multiple poses and store them in the humanPoses list</span></span>
<span id="cb12-27">        humanPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeMultiplePoses</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb12-28">            heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-29">            displacementFWD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementBWD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-30">            stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> maxPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> nmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   </span>
<span id="cb12-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb12-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decode a single pose and add it to the humanPoses list</span></span>
<span id="cb12-35">        HumanPose2D pose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> HumanPose2D</span>
<span id="cb12-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-37">            index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-38">            bodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeSinglePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-40">        humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-42"></span>
<span id="cb12-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unload unused assets if needed</span></span>
<span id="cb12-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssetsIfNeeded</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-45"></span>
<span id="cb12-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the list of human poses to an array and return it</span></span>
<span id="cb12-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="unloadunusedassetsifneeded" class="level4">
<h4 class="anchored" data-anchor-id="unloadunusedassetsifneeded"><code>UnloadUnusedAssetsIfNeeded</code></h4>
<p>This method unloads unused assets if needed based on the worker type and frame counter.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Unloads unused assets if needed based on the worker type and frame counter.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssetsIfNeeded</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">    frameCounter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-11">        Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-12">        frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="decodesinglepose" class="level4">
<h4 class="anchored" data-anchor-id="decodesinglepose"><code>DecodeSinglePose</code></h4>
<p>This method decodes a single human pose from the given <code>heatmaps</code> and <code>offsets</code> tensors and returns an array of body parts.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Decodes a single human pose from the given heatmaps and offsets tensors.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts for the decoded pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeSinglePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-11">    BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>numBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb14-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-15">        BodyPart2D part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindHighestConfidenceBodyPart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-16">        part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-17">        bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-19"></span>
<span id="cb14-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="findhighestconfidencebodypart" class="level4">
<h4 class="anchored" data-anchor-id="findhighestconfidencebodypart"><code>FindHighestConfidenceBodyPart</code></h4>
<p>This method finds the body part with the highest confidence for the given channel in the heatmaps tensor and returns the body part.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Finds the body part with the highest confidence for the given channel in the heatmaps tensor.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"channel"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The channel representing the body part to search for.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The body part with the highest confidence.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> BodyPart2D <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindHighestConfidenceBodyPart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">    BodyPart2D part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> BodyPart2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-10"></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb15-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb15-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-15">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb15-16">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-17">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-18">                part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confidence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-19">                part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-20">                part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-21">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-24"></span>
<span id="cb15-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getoffsetvector" class="level4">
<h4 class="anchored" data-anchor-id="getoffsetvector"><code>GetOffsetVector</code></h4>
<p>This method returns the offset vector for the given coordinates and keypoint in the offsets tensor.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Returns the offset vector for the given coordinates and keypoint in the offsets tensor.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"y"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"x"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"keypoint"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The keypoint index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offset vector for the specified keypoint.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb16-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetOffsetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> keypoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> channelOffset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> keypoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> channelOffset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> keypoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb16-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getimagecoords" class="level4">
<h4 class="anchored" data-anchor-id="getimagecoords"><code>GetImageCoords</code></h4>
<p>This method converts body part coordinates to image coordinates using the given stride and offsets tensor.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Converts body part coordinates to image coordinates using the given stride and offsets tensor.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"part"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The body part with heatmap coordinates.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The image coordinates for the given body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BodyPart2D part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">    Vector2 offsetVector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetOffsetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offsetVector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getstridedindexnearpoint" class="level4">
<h4 class="anchored" data-anchor-id="getstridedindexnearpoint"><code>GetStridedIndexNearPoint</code></h4>
<p>This method gets the stridden index near a given point, given the stride, tensor height, and tensor width.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Gets the strided index near a given point.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"point"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The point for which the strided index is calculated.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The height of the tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The width of the tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The strided index as a Vector2Int.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb18-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetStridedIndexNearPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2 point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb18-12">        Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Clamp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RoundToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb18-13">        Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Clamp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RoundToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getdisplacement" class="level4">
<h4 class="anchored" data-anchor-id="getdisplacement"><code>GetDisplacement</code></h4>
<p>This method gets the displacement for the specified edge and point in the <code>displacements</code> tensor and returns it as a Vector2.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Gets the displacement for the specified edge and point in the displacements tensor.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"edgeId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The edge index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"point"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The point as a Vector2Int.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacements"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacement as a Vector2.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb19-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetDisplacement</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb19-12">        displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb19-13">        displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb19-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="traversetotargetbodypart2d" class="level4">
<h4 class="anchored" data-anchor-id="traversetotargetbodypart2d"><code>TraverseToTargetBodyPart2D</code></h4>
<p>This method takes an edge index, a source body part, a target body part index, and tensors for scores, offsets, stride, and displacements. It calculates the displaced point by adding the displacement value to the source body part coordinates and returns the target body part as a <code>BodyPart2D</code> instance.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Traverses to the target body part from the source body part using the given edge.</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"edgeId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The edge index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sourceBodyPart2D"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The source body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"targetBodyPart2DId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The target body part index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scores"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The scores tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacements"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The target body part as a BodyPart2D.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb20-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseToTargetBodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb20-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BodyPart2D sourceBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-14">    Tensor scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-15">    Tensor displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get height and width from the scores tensor</span></span>
<span id="cb20-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-20"></span>
<span id="cb20-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the source body part indices in the strided space</span></span>
<span id="cb20-22">    Vector2Int sourceBodyPart2DIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetStridedIndexNearPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sourceBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-23"></span>
<span id="cb20-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the displacement for the given edge</span></span>
<span id="cb20-25">    Vector2 displacement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetDisplacement</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sourceBodyPart2DIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-26"></span>
<span id="cb20-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the displaced point by adding the displacement to the source body part coordinates</span></span>
<span id="cb20-28">    Vector2 displacedPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sourceBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> displacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-29"></span>
<span id="cb20-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the displaced point indices in the strided space</span></span>
<span id="cb20-31">    Vector2Int displacedPointIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetStridedIndexNearPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacedPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-32"></span>
<span id="cb20-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the offset vector for the target body part</span></span>
<span id="cb20-34">    Vector2 offsetVector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetOffsetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-35"></span>
<span id="cb20-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the score for the target body part</span></span>
<span id="cb20-37">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb20-38"></span>
<span id="cb20-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the target body part coordinates by adding the offset vector to the displaced point indices</span></span>
<span id="cb20-40">    Vector2 targetBodyPart2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacedPointIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offsetVector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-41"></span>
<span id="cb20-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the target body part as a BodyPart2D instance</span></span>
<span id="cb20-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-44"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="decodepose" class="level4">
<h4 class="anchored" data-anchor-id="decodepose"><code>DecodePose</code></h4>
<p>This method takes a root body part, tensors for scores, offsets, stride, the forward and backward displacements, and returns an array of BodyPart2D instances for the decoded pose.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Decodes the pose given a root body part, scores, offsets, stride, and displacements tensors.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"root"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The root BodyPart2D.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scores"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The scores tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementsFwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The forward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementsBwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The backward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BodyPart2D for the decoded pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb21-12">    BodyPart2D root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacementsBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the number of body parts from the scores tensor</span></span>
<span id="cb21-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-17"></span>
<span id="cb21-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize an array of BodyPart2D instances for storing the decoded pose</span></span>
<span id="cb21-19">    BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> instanceBodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>numBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb21-20"></span>
<span id="cb21-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compute the root point coordinates in the image and store it in the array</span></span>
<span id="cb21-22">    Vector2 rootPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-23">    instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rootPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-24"></span>
<span id="cb21-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the number of edges from parentChildrenTuples</span></span>
<span id="cb21-26">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parentChildrenTuples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-27"></span>
<span id="cb21-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Traverse the edges in both directions to decode the pose</span></span>
<span id="cb21-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementsBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-31"></span>
<span id="cb21-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the decoded pose as an array of BodyPart2D instances</span></span>
<span id="cb21-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="traverseedges" class="level4">
<h4 class="anchored" data-anchor-id="traverseedges"><code>TraverseEdges</code></h4>
<p>This method traverses edges from the source to the target body part, updating the position and probability of the target body part in the <code>instanceBodyParts</code> array.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Traverses edges from the source to the target body part.</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"instanceBodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BodyPart2D instances.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scores"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The scores tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacements"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"numEdges"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The number of edges.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"reverse"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Whether to reverse the traversal direction.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb22-12">    BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the start, end, and step of the edge traversal based on the reverse flag</span></span>
<span id="cb22-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeStart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeEnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeStep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-19"></span>
<span id="cb22-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Traverse the edges in the specified direction</span></span>
<span id="cb22-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edgeStart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> edgeEnd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> edgeStep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parentChildrenTuples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>edge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-24"></span>
<span id="cb22-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Swap source and target body part IDs if traversing in reverse</span></span>
<span id="cb22-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-30"></span>
<span id="cb22-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the source body part has a probability greater than 0 and the target body part has not been detected,</span></span>
<span id="cb22-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// traverse to the target body part and update its position and probability in the instanceBodyParts array</span></span>
<span id="cb22-33">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0f</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span></span>
<span id="cb22-34">            instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-36">            instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseToTargetBodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb22-37">                edge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-38">                scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="scoreismaximuminlocalwindow" class="level4">
<h4 class="anchored" data-anchor-id="scoreismaximuminlocalwindow"><code>ScoreIsMaximumInLocalWindow</code></h4>
<p>The <code>ScoreIsMaximumInLocalWindow</code> method checks if a given score is the maximum in a local window around the pose skeleton point.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Checks if a score is the maximum in a local window around the keypoint.</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"keypointId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The keypoint index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"score"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The score to check.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmapY"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate of the keypoint in the heatmap.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmapX"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate of the keypoint in the heatmap.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"localMaximumRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The radius of the local window to search.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the score is the maximum in the local window, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb23-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScoreIsMaximumInLocalWindow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> heatmapY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> heatmapX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yStart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yEnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> localMaximumRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-16"></span>
<span id="cb23-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through the local window around the keypoint</span></span>
<span id="cb23-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yStart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> yCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> yEnd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>yCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-20">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xStart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xEnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> localMaximumRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-22"></span>
<span id="cb23-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xStart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> xCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> xEnd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>xCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If any value in the local window is greater than the score,</span></span>
<span id="cb23-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// it is not the maximum</span></span>
<span id="cb23-27">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> yCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> xCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-29">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-33"></span>
<span id="cb23-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If none of the values in the local window are greater, the score is the maximum</span></span>
<span id="cb23-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="buildpartlist" class="level4">
<h4 class="anchored" data-anchor-id="buildpartlist"><code>BuildPartList</code></h4>
<p>This method builds a list of BodyPart2D instances with scores above the specified threshold and which are the maximum in their local window.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Builds a list of BodyPart2D instances that have a score above the threshold and are the maximum in their local window.</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scoreThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum score threshold.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"localMaximumRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The radius of the local window to search.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of BodyPart2D instances that meet the conditions.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BuildPartList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb24-11"></span>
<span id="cb24-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through the channels, height, and width of the heatmaps tensor</span></span>
<span id="cb24-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb24-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb24-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-17">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb24-18">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-19">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb24-20"></span>
<span id="cb24-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the score is greater or equal to the threshold and is the maximum in the local window,</span></span>
<span id="cb24-22">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// add it to the list</span></span>
<span id="cb24-23">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> scoreThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span></span>
<span id="cb24-24">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScoreIsMaximumInLocalWindow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb24-25">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-26">                    list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb24-27">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-31"></span>
<span id="cb24-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="withinnmsradiusofcorrespondingpoint" class="level4">
<h4 class="anchored" data-anchor-id="withinnmsradiusofcorrespondingpoint"><code>WithinNmsRadiusOfCorrespondingPoint</code></h4>
<p>This method checks if a given vector is within the non-maximum suppression radius of a corresponding point in any pose.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Checks if a given vector is within the non-maximum suppression radius of a corresponding point in any pose.</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"poses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of HumanPose2D instances.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"squaredNmsRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The squared non-maximum suppression radius.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"vec"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The vector to be checked.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"keypointId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The keypoint index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the vector is within the radius of a corresponding point in any pose, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb25-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WithinNmsRadiusOfCorrespondingPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb25-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> poses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> squaredNmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> poses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrMagnitude</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> squaredNmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="decodemultipleposes" class="level4">
<h4 class="anchored" data-anchor-id="decodemultipleposes"><code>DecodeMultiplePoses</code></h4>
<p>This method decodes multiple human poses from the model output.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Decodes multiple human poses from the given heatmaps, offsets, and displacements tensors.</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementsFwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The forward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementBwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The backward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"maxPoseDetections"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The maximum number of pose detections.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scoreThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum score threshold for a part to be considered.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"nmsRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The non-maximum suppression radius.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of decoded HumanPose2D instances.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb26-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeMultiplePoses</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb26-14">    Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-15">    Tensor displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacementBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxPoseDetections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scoreThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nmsRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-19">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> humanPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb26-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> squaredNmsRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nmsRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> nmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-21"></span>
<span id="cb26-22">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bodyPartList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BuildPartList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> kLocalMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-23">    bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sort</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CompareTo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb26-24"></span>
<span id="cb26-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Continue decoding poses until the maximum number of detections is reached or the body part list is empty</span></span>
<span id="cb26-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> maxPoseDetections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-28">        BodyPart2D root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb26-29">        bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RemoveAt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-30"></span>
<span id="cb26-31">        Vector2 rootImageCoords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-32"></span>
<span id="cb26-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the root is not within the non-maximum suppression radius of any existing pose,</span></span>
<span id="cb26-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// decode the pose and add it to the list of human poses</span></span>
<span id="cb26-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WithinNmsRadiusOfCorrespondingPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> squaredNmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rootImageCoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb26-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-37">            HumanPose2D pose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> HumanPose2D</span>
<span id="cb26-38">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-39">                index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-40">                bodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-41">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb26-42">            humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-43">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-45"></span>
<span id="cb26-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-47"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropinputdims" class="level4">
<h4 class="anchored" data-anchor-id="cropinputdims"><code>CropInputDims</code></h4>
<p>This method crops input dimensions to be divisible by the maximum stride.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Crop input dimensions to be divisible by the maximum stride.</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropInputDims</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-6">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> maxStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-7">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> maxStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-8"></span>
<span id="cb27-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-posenet/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb28-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb28-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb28-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb28-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb28-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables"><code>PackageInstaller</code> Class Variables</h4>
<p>The <code>PackageInstaller</code> class contains several private static fields.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb29-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb29-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb29-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0d78f4ab62d44aba8a8e95e6a8abfe8a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb30-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb30-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb30-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb30-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb30-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb30-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb30-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb30-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb31-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb31-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb31-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb31-8"></span>
<span id="cb31-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb31-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb31-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb31-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb31-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb31-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb31-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb31-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb31-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb32-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb32-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb32-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb32-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb32-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb32-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb32-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb32-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-15"></span>
<span id="cb32-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb32-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb32-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb32-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb32-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb32-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb33-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-7"></span>
<span id="cb33-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb33-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb33-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-17"></span>
<span id="cb33-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb34-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb34-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb34-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb34-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb34-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference PoseNet package. The package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform 2D human pose estimation using PoseNet models.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-posenet">unity-barracuda-inference-posenet</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-posenet-walkthrough/index.html</guid>
  <pubDate>Sun, 07 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Human Pose 2D Toolkit Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-human-pose-2d-toolkit-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit">Unity Human Pose 2D Toolkit</a> provides an easy-to-use and customizable solution to work with and visualize 2D human poses on a Unity canvas.</p>
<p>Some of my tutorials involve using 2D pose estimation models in Unity applications. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Check out the demo video below to see this package in action.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-posenet-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-posenet-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I’ll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains three C# scripts and prefabs to construct 2D human poses.</p>
<section id="c-scripts" class="level3">
<h3 class="anchored" data-anchor-id="c-scripts">C# Scripts</h3>
<ol type="1">
<li><code>HumanPose2DUtils.cs</code>: This script provides functionality to work with 2D pose skeletons for pose estimation tasks.</li>
<li><code>HumanPose2DVisualizer.cs</code>: This script displays 2D human pose skeletons on a Unity canvas.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
</ol>
</section>
<section id="prefabs" class="level3">
<h3 class="anchored" data-anchor-id="prefabs">Prefabs</h3>
<ol type="1">
<li><code>BonePrefab.prefab</code>: The HumanPose2DVisualizer.cs script uses this prefab to construct the bones connecting points in pose skeletons.</li>
<li><code>JointPrefab.prefab</code>: An Image prefab used to visualize the points in pose skeletons.</li>
<li><code>PoseContainerPrefab.prefab</code>: This prefab is for pose containers that hold the joints and bones for pose skeletons.</li>
<li><code>HumanPose2DVisualizer.prefab</code>: This prefab helps simplify adding 2D human pose visualization to a Unity scene. The prefab already has the HumanPose2DVisualizer script attached and has a child Canvas component.</li>
</ol>
</section>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity Human Pose 2D Toolkit package by examining the purpose and functionality of each C# script.</p>
<section id="humanpose2dutils.cs" class="level3">
<h3 class="anchored" data-anchor-id="humanpose2dutils.cs"><code>HumanPose2DUtils.cs</code></h3>
<p>The HumanPose2DUtils.cs script provides functionality to work with 2D pose skeletons for pose estimation tasks. It contains utility classes and structs for managing 2D human pose data. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit/blob/main/Runtime/Scripts/HumanPose2DUtils.cs">HumanPose2DUtils.cs</a></li>
</ul>
<section id="bodypart2d-struct" class="level4">
<h4 class="anchored" data-anchor-id="bodypart2d-struct"><code>BodyPart2D</code> struct</h4>
<p>This struct represents a single body part in 2D space with its index, coordinates, and probability.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Represents a single body part in 2D space with its index, coordinates, and probability.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> BodyPart2D</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the body part</span></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The 2D coordinates of the body part</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The probability of the detected body part</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the BodyPart2D struct.</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The index of the body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"coordinates"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The 2D coordinates of the body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prob"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The probability of the detected body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="humanpose2d-struct" class="level4">
<h4 class="anchored" data-anchor-id="humanpose2d-struct"><code>HumanPose2D</code> struct</h4>
<p>This struct represents a detected human pose in 2D space with its index and an array of body parts.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Represents a detected human pose in 2D space with its index and an array of body parts.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> HumanPose2D</span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the detected human pose</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// An array of the body parts that make up the human pose</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the HumanPose2D struct.</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The index of the detected human pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts that make up the human pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HumanPose2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="humanpose2dutility-static-class" class="level4">
<h4 class="anchored" data-anchor-id="humanpose2dutility-static-class"><code>HumanPose2DUtility</code> static class</h4>
<p>This class contains a single static method that scales and optionally mirrors the coordinates of a body part in a pose skeleton to match the in-game screen and display resolutions.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> HumanPose2DUtility</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Scales and optionally mirrors the coordinates of a body part in a pose skeleton to match the in-game screen and display resolutions.</span></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"coordinates"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The (x,y) coordinates for a BodyPart object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the input image used for pose estimation.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the in-game screen where the body part will be displayed.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An offset to apply to the body part coordinates when scaling.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mirrorScreen"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A boolean flag to indicate if the body part coordinates should be mirrored horizontally (default is false).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScaleBodyPartCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2 coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The smallest dimension of the screen</span></span>
<span id="cb3-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The smallest input dimension</span></span>
<span id="cb3-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minInputDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb3-19">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> minImgScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> minInputDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb3-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScaleX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScaleY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displayScaleX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displayScaleY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-24"></span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale body part coordinates to in-game screen resolution and flip the coordinates vertically</span></span>
<span id="cb3-27">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-28">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-29"></span>
<span id="cb3-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Mirror bounding box across screen</span></span>
<span id="cb3-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-33">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-35"></span>
<span id="cb3-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale coordinates to display resolution</span></span>
<span id="cb3-37">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-39"></span>
<span id="cb3-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Offset the coordinates coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb3-41">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-42">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-43"></span>
<span id="cb3-44">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="humanpose2dvisualizer.cs" class="level3">
<h3 class="anchored" data-anchor-id="humanpose2dvisualizer.cs"><code>HumanPose2DVisualizer.cs</code></h3>
<p>The HumanPose2DVisualizer script is a Unity C# <code>MonoBehaviour</code> class that displays 2D human pose skeletons on a Unity canvas. It creates, updates, and manages UI elements for visualizing them based on the provided <code>HumanPose2D</code> array. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit/blob/main/Runtime/Scripts/HumanPose2DVisualizer.cs">HumanPose2DVisualizer.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The script contains several fields for prefabs and configuring pose skeleton visualizations.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Main canvas to display poses</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UI Components"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The main canvas to display poses"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Canvas canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prefabs for pose containers, joints, and bones</span></span>
<span id="cb4-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prefab for the pose container, which holds the joints and bones"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform poseContainerPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prefab for the joint image"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Image jointPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prefab for the bone RectTransform"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform bonePrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Configuration and styling</span></span>
<span id="cb4-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Configuration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The JSON file containing body part connection information"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset bodyPartConnectionsFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The color of the bones"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Color boneColor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The color of the joints"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Color jointColor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="serialized-classes" class="level4">
<h4 class="anchored" data-anchor-id="serialized-classes">Serialized Classes</h4>
<p>There are a couple of nested serialized classes to store body part connection information from a JSON file.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable classes to store body part connection information from JSON</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BodyPartConnection</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> from<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Index of the starting body part</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Index of the ending body part</span></span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BodyPartConnectionList</span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPartConnection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of body part connections</span></span>
<span id="cb5-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Variables to store runtime instances and data</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPartConnection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of body part connections</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> poseContainers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of instantiated pose containers</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> joints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Nested list of instantiated joint images</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> bones <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Nested list of instantiated bone RectTransforms</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Confidence threshold for displaying poses</span></span></code></pre></div>
</section>
<section id="guid-constants" class="level4">
<h4 class="anchored" data-anchor-id="guid-constants">GUID Constants</h4>
<p>These are the GUIDs of the default assets.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUIDs of the default assets</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PoseContainerPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12c840be0a8d4adc879fc14fb79a316d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> JointPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d90f7f2e5b8f4daa885f9441f0f33427"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> BonePrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ed947d23b5354617b130aa8ee0cc610b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> BodyPartConnectionsFileGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0fc008c60a8e44589674b0f455384a5b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="reset" class="level4">
<h4 class="anchored" data-anchor-id="reset"><code>Reset</code></h4>
<p>This method sets the default assets from the project using their GUIDs. It uses <code>AssetDatabase</code> to find them and set the default values. This method will only work in the Unity Editor, not in a build.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Reset is called when the user hits the Reset button in the Inspector's context menu</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// or when adding the component the first time. This function is only called in editor mode.</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load default assets only in the Unity Editor, not in a build</span></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb8-9">    poseContainerPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>PoseContainerPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-10">    jointPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>JointPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-11">    bonePrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>BonePrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-12">    bodyPartConnectionsFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TextAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>BodyPartConnectionsFileGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb8-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loaddefaultasset" class="level4">
<h4 class="anchored" data-anchor-id="loaddefaultasset"><code>LoadDefaultAsset</code></h4>
<p>This method provides a generic way to load default assets for the specified fields using their GUIDs.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads the default asset for the specified type using its GUID.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;typeparam</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"T"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The type of asset to be loaded.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/typeparam&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"guid"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GUID of the default asset.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The loaded asset of the specified type.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;remarks&gt;</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// This method is only executed in the Unity Editor, not in builds.</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/remarks&gt;</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> T LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> where T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Object</span></span>
<span id="cb9-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb9-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load the asset from the AssetDatabase using its GUID</span></span>
<span id="cb9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAssetAtPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb9-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#else</span></span>
<span id="cb9-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb9-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method runs when the script initializes and loads the body part connection list from the JSON file.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadBodyPartConnectionList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadbodypartconnectionlist" class="level4">
<h4 class="anchored" data-anchor-id="loadbodypartconnectionlist"><code>LoadBodyPartConnectionList</code></h4>
<p>This method deserializes the JSON file specifying the body part connections for pose skeletons.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the JSON file</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadBodyPartConnectionList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb11-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-11"></span>
<span id="cb11-12">    bodyPartConnections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeBodyPartConnectionsList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bodyPartConnectionsFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyPartConnections</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isjsonnullorempty"><code>IsJsonNullOrEmpty</code></h4>
<p>This method checks if the JSON file is null or empty.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if JSON file is null or empty</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bodyPartConnectionsFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bodyPartConnectionsFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializebodypartconnectionslist" class="level4">
<h4 class="anchored" data-anchor-id="deserializebodypartconnectionslist"><code>DeserializeBodyPartConnectionsList</code></h4>
<p>This method deserializes the JSON string into a <code>BodyPartConnectionList</code>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the JSON string</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> BodyPartConnectionList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeBodyPartConnectionsList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb13-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPartConnectionList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-12">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateposevisualizations" class="level4">
<h4 class="anchored" data-anchor-id="updateposevisualizations"><code>UpdatePoseVisualizations</code></h4>
<p>This method updates pose visualizations based on the provided human poses and a confidence threshold.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the pose visualizations based on the provided human poses and a confidence threshold.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"humanPoses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of human poses to visualize</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"confidenceThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum confidence required to display a pose (default is 0.5f)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdatePoseVisualizations</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confidenceThreshold</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiate pose containers, joint images, and bone RectTransforms as needed to match the number of humanPoses</span></span>
<span id="cb14-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-13">        RectTransform newPoseContainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>poseContainerPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-14">        poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newPoseContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-15">        joints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb14-16">        bones<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb14-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get references to joint and bone containers for the current pose</span></span>
<span id="cb14-24">            RectTransform jointContainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Find</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JointContainer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb14-25">            RectTransform boneContainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Find</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BoneContainer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb14-26"></span>
<span id="cb14-27">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the joint positions and visibility</span></span>
<span id="cb14-28">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateJoints</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> joints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb14-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the bone positions, rotations, and visibility</span></span>
<span id="cb14-30">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBones</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> joints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> bones<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb14-31"></span>
<span id="cb14-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the pose container active</span></span>
<span id="cb14-33">            poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb14-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the pose container inactive for unused containers</span></span>
<span id="cb14-38">            poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="screentocanvaspoint" class="level4">
<h4 class="anchored" data-anchor-id="screentocanvaspoint"><code>ScreenToCanvasPoint</code></h4>
<p>This method convert a screen point to a local one within the given canvas <code>RectTransform</code>.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Converts a screen point to a local point within the given canvas RectTransform.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"canvas"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The canvas RectTransform to convert the point to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenPoint"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The screen point to convert</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A Vector2 representing the local point within the canvas RectTransform</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RectTransform canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 screenPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">    RectTransformUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenPointToLocalPointInRectangle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">out</span> Vector2 localPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> localPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatejoints" class="level4">
<h4 class="anchored" data-anchor-id="updatejoints"><code>UpdateJoints</code></h4>
<p>This method updates joint visualizations based on the provided body parts, adjusting their positions and visibility.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the joint visualizations based on the provided body parts, adjusting their positions and visibility.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts containing position and probability data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jointContainer"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The RectTransform containing joint images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jointsList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of instantiated joint images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateJoints</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RectTransform jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiate joint images as needed to match the number of bodyParts</span></span>
<span id="cb16-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-12">        Image newJoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>jointPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-13">        jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newJoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb16-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-20">            Image joint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb16-21">            RectTransform jointRect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update joint position</span></span>
<span id="cb16-23">            jointRect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update joint color</span></span>
<span id="cb16-25">            joint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointColor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the joint game object active</span></span>
<span id="cb16-27">            joint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb16-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the joint game object inactive if below the confidence threshold</span></span>
<span id="cb16-32">            jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-33">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatebones" class="level4">
<h4 class="anchored" data-anchor-id="updatebones"><code>UpdateBones</code></h4>
<p>This method updates bone visualizations based on the provided body parts and joint positions, adjusting their positions, rotations, and visibility.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the bone visualizations based on the provided body parts and joint positions, adjusting their positions, rotations, and visibility.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts containing position and probability data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boneContainer"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The RectTransform containing bone RectTransforms</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jointsList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of instantiated joint images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bonesList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of instantiated bone RectTransforms</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBones</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RectTransform boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiate bone RectTransforms as needed to match the number of bodyPartConnections</span></span>
<span id="cb17-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-13">        RectTransform newBone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bonePrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-14">        bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newBone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-16"></span>
<span id="cb17-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb17-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-19">        Image fromJoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-20">        Image toJoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-21"></span>
<span id="cb17-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If both connected joints are active, display the bone</span></span>
<span id="cb17-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fromJoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> toJoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb17-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-25">            RectTransform bone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-26">            Vector2 fromJointPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-27">            Vector2 toJointPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-28">            Vector2 direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toJointPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> fromJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-29">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">magnitude</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-30">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Atan2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Rad2Deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-31"></span>
<span id="cb17-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update bone size based on the distance between joints</span></span>
<span id="cb17-33">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-34"></span>
<span id="cb17-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the bone position and update it</span></span>
<span id="cb17-36">            Vector2 bonePos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>fromJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> toJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fromJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> toJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-37">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bonePos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-38"></span>
<span id="cb17-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update bone rotation based on the angle between joints</span></span>
<span id="cb17-40">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">localEulerAngles</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-41">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boneColor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-42">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the bone game object active</span></span>
<span id="cb17-43">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-44">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb17-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the bone game object inactive if below the confidence threshold</span></span>
<span id="cb17-48">            bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the Human Pose 2D Toolkit package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit/blob/main/Editor/AddCustomDefineSymbol.cs">AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> CJM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HumanPose2DToolkit</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb18-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_HUMAN_POSE_2D_TOOLKIT"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-9"></span>
<span id="cb18-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb18-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group</span></span>
<span id="cb18-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group</span></span>
<span id="cb18-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the CustomDefineSymbol is already present in the defines string</span></span>
<span id="cb18-19">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb18-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the CustomDefineSymbol to the defines string, separated by a semicolon</span></span>
<span id="cb18-22">                defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated defines string as the new scripting define symbols for the selected build target group</span></span>
<span id="cb18-24">                PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-25">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log a message in the Unity console to inform the user that the custom define symbol has been added</span></span>
<span id="cb18-26">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity Human Pose 2D Toolkit package. The package provides an easy-to-use and customizable solution to work with and visualize 2D human poses on a Unity canvas.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-posenet">unity-human-pose-2d-toolkit</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-human-pose-2d-toolkit-walkthrough/index.html</guid>
  <pubDate>Sat, 06 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference YOLOX Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-yolox-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-yolox">Barracuda Inference YOLOX</a> package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform object detection using <a href="https://github.com/Megvii-BaseDetection/YOLOX">YOLOX</a> models.</p>
<p>Object detection has numerous potential uses in Unity applications, including giving NPCs a more realistic perception of their environment, gesture-based controls, and augmented reality, to name a few. Here is a demo video from a project that uses this package to detect hand gestures.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I’ll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>YOLOXObjectDetector.cs</code>: This script provides functionality to perform object detection with YOLOX models using the Barracuda inference engine.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference YOLOX package by examining the purpose and functionality of each C# script.</p>
<section id="yoloxobjectdetector.cs" class="level3">
<h3 class="anchored" data-anchor-id="yoloxobjectdetector.cs"><code>YOLOXObjectDetector.cs</code></h3>
<p>This script defines the <code>YOLOXObjectDetector</code> class, which extends the <code>BarracudaModelRunner</code> class from the Barracuda Inference Base package to perform object detection using YOLOX models. This class also depends on the <a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit"><code>bounding-box-2d-toolkit</code></a> and <a href="https://github.com/cj-mills/unity-yolox-utils"><code>unity-yolox-utils</code></a> packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-yolox/blob/main/Runtime/Scripts/YOLOXObjectDetector.cs">YOLOXObjectDetector.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The <code>YOLOXObjectDetector</code> class includes a field to add a color map from a JSON file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output Processing configuration and variables</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output Processing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// JSON file containing the color map for bounding boxes</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file with bounding box colormaps"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also includes a field to control how often to unload memory assets when using Barracuda’s Pixel Shader backend. The Pixel Shader backend enables GPU inference on platforms that don’t support Compute Shaders. However, there seems to be a bug in the current version of Barracuda, which does not release unused assets when using this backend. Left unchecked, this can fill up both system and GPU memory. We can address this by manually freeing memory. Doing that every frame can hurt performance, so we’ll only do it at set intervals.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Settings"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval (in frames) for unloading unused assets with Pixel Shader backend"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The <code>Colormap</code> and <code>ColormapList</code> classes help store color map information from a JSON file, which we then use for generating bounding boxes.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable classes to store color map information from JSON</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Colormap</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ColormapList</span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A counter for the number of frames processed.</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Indicates if the system supports asynchronous GPU readback</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stride values used by the YOLOX model</span></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">readonly</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> Strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Number of fields in each bounding box</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> NumBBoxFields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Layer names for the Transpose, Flatten, and TransposeOutput operations</span></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> TransposeLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transpose"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> FlattenLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flatten"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> TransposeOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transposeOutput"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Texture formats for output processing</span></span>
<span id="cb4-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextureFormat textureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RHalf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTextureFormat renderTextureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RHalf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List to store label and color pairs for each class</span></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;</span> colormapList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;();</span></span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output textures for processing on CPU and GPU</span></span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Texture2D outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTexture outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List to store grid and stride information for the YOLOX model</span></span>
<span id="cb4-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> gridCoordsAndStrides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Length of the proposal array for YOLOX output</span></span>
<span id="cb4-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method runs at the start of the script. It performs several initializations, including checking for async GPU readback support, loading the color map list, and initializing the output texture.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Called at the start of the script</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported</span></span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load colormap information from JSON file</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize output texture</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    proposalLength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> NumBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate proposal length</span></span>
<span id="cb5-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="checkasyncgpureadbacksupport" class="level4">
<h4 class="anchored" data-anchor-id="checkasyncgpureadbacksupport"><code>CheckAsyncGPUReadbackSupport</code></h4>
<p>This method checks if the system supports asynchronous GPU readback</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the system supports async GPU readback</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SystemInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">supportsAsyncGPUReadback</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads and prepares the YOLOX model by setting worker types and applying transpose and flatten operations.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load and prepare the YOLOX model</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">    defaultOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-7">    WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span> bestType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ValidateType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> supportsComputeBackend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bestType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ComputePrecompiled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set worker type for WebGL</span></span>
<span id="cb7-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-13">        workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-15"></span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply transpose operation on the output layer</span></span>
<span id="cb7-17">    modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Transpose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb7-18">    defaultOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-19"></span>
<span id="cb7-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply Flatten and TransposeOutput operations if supported</span></span>
<span id="cb7-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>supportsComputeBackend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb7-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-23">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Flatten</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>FlattenLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-24">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Transpose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> FlattenLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb7-25">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Output</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-26">        defaultOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TransposeOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeengine" class="level4">
<h4 class="anchored" data-anchor-id="initializeengine"><code>InitializeEngine</code></h4>
<p>This method initializes the Barracuda engine and checks if asynchronous GPU readback is supported.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize the Barracuda engine</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported by the engine</span></span>
<span id="cb8-9">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Summary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unity.Barracuda.ComputeVarsWithSharedModel"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadcolormaplist" class="level4">
<h4 class="anchored" data-anchor-id="loadcolormaplist"><code>LoadColorMapList</code></h4>
<p>This method loads the color map list from a JSON file.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the color map list from the JSON file</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsColorMapListJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb9-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class labels JSON is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">    ColormapList colormapObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateColorMap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="iscolormaplistjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="iscolormaplistjsonnullorempty"><code>IsColorMapListJsonNullOrEmpty</code></h4>
<p>This method checks if the provided color map JSON file is null or empty.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if the color map JSON file is null or empty</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsColorMapListJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> colormapFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializecolormaplist" class="level4">
<h4 class="anchored" data-anchor-id="deserializecolormaplist"><code>DeserializeColorMapList</code></h4>
<p>This method deserializes the provided color map JSON string to a <code>ColormapList</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the color map list from the JSON string</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ColormapList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb11-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ColormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-12">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatecolormap" class="level4">
<h4 class="anchored" data-anchor-id="updatecolormap"><code>UpdateColorMap</code></h4>
<p>This method updates the <code>colormapList</code> array with the provided <code>ColormapList</code> object.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the color map list with deserialized data</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateColorMap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ColormapList colormapObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add label and color pairs to the colormap list</span></span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Colormap colormap <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormapObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">items</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-14">        Color color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb12-15">        colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="createoutputtexture" class="level4">
<h4 class="anchored" data-anchor-id="createoutputtexture"><code>CreateOutputTexture</code></h4>
<p>This method creates an output texture with the specified width and height.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Create an output texture with the specified width and height.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Texture2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>This method executes the YOLOX model with a given input texture.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Execute the YOLOX model with the given input texture.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tensor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb14-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-10"></span>
<span id="cb14-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update grid_strides if necessary</span></span>
<span id="cb14-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> proposalLength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-14">        gridCoordsAndStrides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateGridCoordinatesWithStrides</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="processoutput" class="level4">
<h4 class="anchored" data-anchor-id="processoutput"><code>ProcessOutput</code></h4>
<p>This method processes the output array from the YOLOX model, applying Non-Maximum Suppression (NMS), and returns an array of BBox2DInfo objects with class labels and colors.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Process the output array from the YOLOX model, applying Non-Maximum Suppression (NMS) and</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// returning an array of BBox2DInfo objects with class labels and colors.</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"outputArray"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The output array from the YOLOX model</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"confidenceThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum confidence score for a bounding box to be considered</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"nms_threshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The threshold for Non-Maximum Suppression (NMS)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BBox2DInfo objects containing the filtered bounding boxes, class labels, and colors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BBox2DInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProcessOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> nms_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate bounding box proposals from the output array</span></span>
<span id="cb15-12">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BBox2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateBoundingBoxProposals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> NumBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-13"></span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply Non-Maximum Suppression (NMS) to the proposals</span></span>
<span id="cb15-15">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BBox2DUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NMSSortedBoxes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> nms_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-16"></span>
<span id="cb15-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an array of BBox2DInfo objects containing the filtered bounding boxes, class labels, and colors</span></span>
<span id="cb15-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> proposal_indices</span>
<span id="cb15-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb15-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2DInfo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Item1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Item2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb15-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtoarray" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtoarray"><code>CopyOutputToArray</code></h4>
<p>This method copies the model output to a float array.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a float array.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb16-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-10">            frameCounter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb16-11">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-12">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-13">                Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-14">                frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-15">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Download</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtotexture" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtotexture"><code>CopyOutputToTexture</code></h4>
<p>This method copies the model output to a texture.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a texture.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb17-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-11">            outputTextureGPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> renderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-13">        output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputwithasyncreadback" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputwithasyncreadback"><code>CopyOutputWithAsyncReadback</code></h4>
<p>This method copies the model output using asynchronous GPU readback if the platform supports it.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output using async GPU readback. If not supported, defaults to synchronous readback.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputWithAsyncReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Async GPU Readback not supported. Defaulting to synchronous readback"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-11"></span>
<span id="cb18-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-13"></span>
<span id="cb18-14">    AsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Request</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">    Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputColors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetPixels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputArray <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reverse</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-18"></span>
<span id="cb18-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Reverse the order of each proposal in the output array</span></span>
<span id="cb18-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-22">        Array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reverse</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-24"></span>
<span id="cb18-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropinputdims" class="level4">
<h4 class="anchored" data-anchor-id="cropinputdims"><code>CropInputDims</code></h4>
<p>This method crops input dimensions to be divisible by the maximum stride.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Crop input dimensions to be divisible by the maximum stride.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropInputDims</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-6">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> Strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb19-7">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> Strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb19-8"></span>
<span id="cb19-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="oncompletereadback" class="level4">
<h4 class="anchored" data-anchor-id="oncompletereadback"><code>OnCompleteReadback</code></h4>
<p>This method handles the completion of an async GPU readback request.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Handle the completion of an async GPU readback request.</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hasError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-11"></span>
<span id="cb20-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb20-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load readback data into the output texture and apply changes</span></span>
<span id="cb20-17">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb20-18">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Apply</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb20-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UnityException ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-22">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Message</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LoadRawTextureData: not enough data provided (will result in overread)."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb20-23">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-24">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Updating input data size to match the texture size."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-25">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-26">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb20-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-28">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexpected UnityException: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-29">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>This method cleans up resources when the script is disabled.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Clean up resources when the script is disabled.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb21-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb21-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Release the temporary render texture</span></span>
<span id="cb21-8">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-yolox/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes-1" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes-1">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb22-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb22-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb22-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables"><code>PackageInstaller</code> Class Variables</h4>
<p>The <code>PackageInstaller</code> class contains several private static fields.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb23-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb23-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02aec9cd479b4b758a7afde0032230ec"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb24-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb24-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb24-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb24-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb24-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb24-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb25-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb25-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb25-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb25-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb25-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb25-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb25-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb25-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb25-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb25-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb26-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb26-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-15"></span>
<span id="cb26-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb26-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb26-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb26-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb26-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb26-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb27-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb27-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-7"></span>
<span id="cb27-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb27-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb27-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-17"></span>
<span id="cb27-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb28-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb28-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb28-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb28-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb28-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference YOLOX package. The package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform object detection using YOLOX models.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-yolox">unity-barracuda-inference-yolox</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below, along with other demos.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">barracuda-inference-yolox-demo</a>: A simple Unity project demonstrating how to perform object detection with the barracuda-inference-yolox package using a webcam.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo-brp">barracuda-inference-yolox-demo-brp</a>: A simple Unity BRP (Built-in Render Pipeline) project demonstrating how to perform object detection with the barracuda-inference-yolox package using the in-game camera.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo-urp">barracuda-inference-yolox-demo-urp</a>: A simple Unity URP project demonstrating how to perform object detection with the barracuda-inference-yolox package using the in-game camera.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo-hdrp">barracuda-inference-yolox-demo-hdrp</a>: A simple Unity HDRP project demonstrating how to perform object detection with the barracuda-inference-yolox package using the in-game camera.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-yolox-walkthrough/index.html</guid>
  <pubDate>Sat, 06 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference Image Classification Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-image-classification-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification">Barracuda Inference Image Classification</a> package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform image classification using computer vision models.</p>
<p>Image classification has numerous potential uses in Unity applications, from gesture recognition to analyzing user-generated content. This package makes it easy to add image classification functionality to Unity applications. Here is a demo video from a project that uses this package for gesture classification.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-image-classification-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-image-classification-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I’ll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>MultiClassImageClassifier.cs</code>: This script provides functionality to perform image classification using the Barracuda inference engine.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference Image Classification package by examining the purpose and functionality of each C# script.</p>
<section id="multiclassimageclassifier.cs" class="level3">
<h3 class="anchored" data-anchor-id="multiclassimageclassifier.cs"><code>MultiClassImageClassifier.cs</code></h3>
<p>This script defines the <code>MultiClassImageClassifier</code> class, which extends the <code>BarracudaModelRunner</code> class from the <a href="https://github.com/cj-mills/unity-barracuda-inference-base">Barracuda Inference Base</a> package to perform image classification. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification/blob/main/Runtime/Scripts/MultiClassImageClassifier.cs">MultiClassImageClassifier.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The <code>MultiClassImageClassifier</code> class includes a field to add class labels with a JSON file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file with class labels"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also includes a field to control how often to unload memory assets when using Barracuda’s Pixel Shader backend. The Pixel Shader backend enables GPU inference on platforms that don’t support Compute Shaders. However, there seems to be a bug in the current version of Barracuda, which does not release unused assets when using this backend. Left unchecked, this can fill up both system and GPU memory. We can address this by manually freeing memory. Doing that every frame can hurt performance, so we’ll only do it at set intervals.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval (in frames) for unloading unused assets with Pixel Shader backend"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A counter for the number of frames processed.</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Indicates if the system supports asynchronous GPU readback</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The name of the transpose layer.</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> TransposeLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transpose"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The softmax layer.</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> SoftmaxLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"softmaxLayer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The name of the output layer.</span></span>
<span id="cb3-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Helper class for deserializing class labels from the JSON file</span></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The class labels</span></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Texture formats for output processing</span></span>
<span id="cb3-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextureFormat textureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RGBA32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTextureFormat renderTextureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ARGB32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output textures for processing on CPU and GPU</span></span>
<span id="cb3-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Texture2D outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTexture outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method initializes necessary components at the start of the script, such as checking async GPU readback support, loading class labels, and creating output textures.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize necessary components during the start of the script.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported</span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load class labels from JSON file</span></span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize output texture</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="checkasyncgpureadbacksupport" class="level4">
<h4 class="anchored" data-anchor-id="checkasyncgpureadbacksupport"><code>CheckAsyncGPUReadbackSupport</code></h4>
<p>This method checks if the system supports asynchronous GPU readback</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the system supports async GPU readback</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SystemInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">supportsAsyncGPUReadback</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads the model and prepares it for execution. It applies the softmax function to the output layer if it’s not already a softmax layer.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the model and prepare it for execution by applying softmax to the output layer.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load and prepare the model with the base implementation</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">    outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set worker type for WebGL</span></span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-14">        workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the last layer is a Softmax layer</span></span>
<span id="cb6-18">    Layer lastLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> lastLayerIsSoftmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lastLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activation</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Activation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Softmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-20"></span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the Softmax layer if the last layer is not already a Softmax layer</span></span>
<span id="cb6-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>lastLayerIsSoftmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the Softmax layer</span></span>
<span id="cb6-25">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Softmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SoftmaxLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-26">        outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SoftmaxLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-28"></span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply transpose operation on the output layer</span></span>
<span id="cb6-30">    modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Transpose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb6-31">    outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeengine" class="level4">
<h4 class="anchored" data-anchor-id="initializeengine"><code>InitializeEngine</code></h4>
<p>This method initializes the inference engine and checks if the model uses a Compute Shader backend.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize the inference engine and check if the model is using a Compute Shader backend.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported by the engine</span></span>
<span id="cb7-9">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Summary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unity.Barracuda.ComputeVarsWithSharedModel"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="loadclasslabels"><code>LoadClassLabels</code></h4>
<p>This method loads the class labels from the provided JSON file.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the class labels from the provided JSON file.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb8-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class labels JSON is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">    ClassLabels classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isclasslabelsjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isclasslabelsjsonnullorempty"><code>IsClassLabelsJsonNullOrEmpty</code></h4>
<p>This method checks if the provided class labels JSON file is null or empty.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if the provided class labels JSON file is null or empty.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the file is null or empty, otherwise false.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> classLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializeclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="deserializeclasslabels"><code>DeserializeClassLabels</code></h4>
<p>This method deserializes the provided class labels JSON string to a <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the provided class labels JSON string to a ClassLabels object.</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"json"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The JSON string to deserialize.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A deserialized ClassLabels object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ClassLabels <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb10-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-14">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="updateclasslabels"><code>UpdateClassLabels</code></h4>
<p>This method updates the <code>classes</code> array with the provided <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the classes array with the provided ClassLabels object.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"classLabelsObj"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The ClassLabels object containing the class labels.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ClassLabels classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-11"></span>
<span id="cb11-12">    classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">classes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="createoutputtextures" class="level4">
<h4 class="anchored" data-anchor-id="createoutputtextures"><code>CreateOutputTextures</code></h4>
<p>This method creates the output textures that will store the model output.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Create the output textures that will store the model output.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Texture2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-7">    outputTextureGPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> renderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>This method executes the model on the provided input texture.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Execute the model on the provided input texture and return the output array.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input texture for the model.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tensor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtoarray" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtoarray"><code>CopyOutputToArray</code></h4>
<p>This method copies the model output to a float array.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a float array.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the output tensor from the engine</span></span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb14-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-11">            frameCounter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb14-12">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-13">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-14">                Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-15">                frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-16">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Download the data from the tensor</span></span>
<span id="cb14-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Download</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtotexture" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtotexture"><code>CopyOutputToTexture</code></h4>
<p>This method copies the model output to a texture.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a texture.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb15-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb15-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Store output tensor data in a RenderTexture</span></span>
<span id="cb15-9">        output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputwithasyncreadback" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputwithasyncreadback"><code>CopyOutputWithAsyncReadback</code></h4>
<p>This method copies the model output using asynchronous GPU readback if the platform supports it.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output using async GPU readback. If not supported, defaults to synchronous readback.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputWithAsyncReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Async GPU Readback not supported. Defaulting to synchronous readback"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-13"></span>
<span id="cb16-14">    AsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Request</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Extract the output tensor data from the texture</span></span>
<span id="cb16-17">    Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputColors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetPixels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getclassname" class="level4">
<h4 class="anchored" data-anchor-id="getclassname"><code>GetClassName</code></h4>
<p>This method gets the class name corresponding to the provided class index.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Get the class name corresponding to the provided class index.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"classIndex"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The index of the class to retrieve.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The class name corresponding to the class index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetClassName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="oncompletereadback" class="level4">
<h4 class="anchored" data-anchor-id="oncompletereadback"><code>OnCompleteReadback</code></h4>
<p>This callback method handles the completion of async GPU readback.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Callback method for handling the completion of async GPU readback.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"request"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The async GPU readback request.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hasError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-9">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb18-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load readback data into the output texture and apply changes</span></span>
<span id="cb18-18">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb18-19">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Apply</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UnityException ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-23">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Message</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LoadRawTextureData: not enough data provided (will result in overread)."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb18-24">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-25">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Updating input data size to match the texture size."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-26">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-27">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb18-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-29">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexpected UnityException: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>This method cleans up resources when the script is disabled, such as releasing the temporary render texture.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Clean up resources when the script is disabled.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb19-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Release the temporary render texture</span></span>
<span id="cb19-8">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb20-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb20-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb20-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb20-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables">PackageInstaller Class Variables</h4>
<p>The <code>PackageInstaller</code> class contains several private static fields.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb21-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4a3b2c83681748b49d28cb6ed4f587d9"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb22-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb22-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb22-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb22-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb22-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb23-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb23-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb23-8"></span>
<span id="cb23-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb23-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb23-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb23-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb23-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb23-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb23-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb23-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb23-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb24-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb24-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb24-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-15"></span>
<span id="cb24-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb24-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb24-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb24-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb24-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb24-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb25-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-7"></span>
<span id="cb25-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb25-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb25-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-17"></span>
<span id="cb25-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb26-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb26-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb26-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb26-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference Image Classification package. The package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform image classification using computer vision models.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification">unity-barracuda-inference-image-classification</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-image-classification-demo">Barracuda Image Classification Demo</a>: A simple Unity project demonstrating how to perform image classification with the <code>barracuda-inference-image-classification</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-image-classification-walkthrough/index.html</guid>
  <pubDate>Sat, 06 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity YOLOX Utilities Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-yolox-utils-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-yolox-utils">Unity YOLOX Utilities</a> package provides utility functions to work with YOLOX object detection models in Unity.</p>
<p>I use YOLOX models in multiple tutorials. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Here is a demo video from a project that uses this package.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I’ll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains three C# scripts.</p>
<ol type="1">
<li><code>YOLOXUtils.cs</code>: This script provides a utility class for YOLOX-related operations.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity YOLOX Utilities package by examining the purpose and functionality of each C# script.</p>
<section id="yoloxutils.cs" class="level3">
<h3 class="anchored" data-anchor-id="yoloxutils.cs"><code>YOLOXUtils.cs</code></h3>
<p>This script utilizes the <a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit">Unity Bounding Box 2D Toolkit</a> package and contains two main components: the <code>GridCoordinateAndStride</code> struct and the <code>YOLOXUtility</code> class.</p>
<p>The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-yolox-utils/blob/main/Runtime/Scripts/YOLOXUtils.cs">YOLOXUtils.cs</a></li>
</ul>
<section id="gridcoordinateandstride-struct" class="level4">
<h4 class="anchored" data-anchor-id="gridcoordinateandstride-struct"><code>GridCoordinateAndStride</code> struct</h4>
<p>This struct represents the grid coordinates (x and y) and the stride of the grid cell.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// A struct for grid coordinates and stride information.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> GridCoordinateAndStride</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the GridCoordinateAndStride struct.</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"xCoordinate"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"yCoordinate"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride value for the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridCoordinateAndStride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xCoordinate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yCoordinate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="yoloxutility-class" class="level4">
<h4 class="anchored" data-anchor-id="yoloxutility-class"><code>YOLOXUtility</code> class</h4>
<p>This static utility class provides methods for YOLOX-related operations.</p>
<section id="generategridcoordinateswithstrides" class="level5">
<h5 class="anchored" data-anchor-id="generategridcoordinateswithstrides"><code>GenerateGridCoordinatesWithStrides</code></h5>
<p>This method generates a list of <code>GridCoordinateAndStride</code> objects based on the input strides, grid height, and grid width.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Generates a list of GridCoordinateAndStride objects based on input strides, height, and width.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"strides"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of stride values.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The height of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The width of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of GridCoordinateAndStride objects.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateGridCoordinatesWithStrides</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate a list of GridCoordinateAndStride objects by iterating through possible grid positions and strides</span></span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SelectMany</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> Enumerable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-12">                                                   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SelectMany</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>g1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> Enumerable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-13">                                                                                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>g0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridCoordinateAndStride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>g0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> g1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)))).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="generateboundingboxproposals" class="level5">
<h5 class="anchored" data-anchor-id="generateboundingboxproposals"><code>GenerateBoundingBoxProposals</code></h5>
<p>This method generates a list of bounding box proposals based on the model output, grid strides, and other parameters.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Generates a list of bounding box proposals based on the model output, grid strides, and other parameters.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"modelOutput"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The output of the YOLOX model.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"gridCoordsAndStrides"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of GridCoordinateAndStride objects.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"numClasses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The number of object classes.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"numBBoxFields"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The number of bounding box fields.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"confidenceThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The confidence threshold for filtering proposals.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of BBox2D objects representing the generated proposals.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BBox2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateBoundingBoxProposals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numClasses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> proposalLength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numClasses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Process the model output to generate a list of BBox2D objects</span></span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> anchorIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anchorIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate coordinates and dimensions of the bounding box</span></span>
<span id="cb3-20">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> centerX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xCoordinate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> centerY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yCoordinate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Exp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Exp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize BBox2D object</span></span>
<span id="cb3-26">        BBox2D obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-27">            centerX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-28">            centerY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-29">            w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compute objectness and class probabilities for each bounding box</span></span>
<span id="cb3-32">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> box_objectness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> classIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> classIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numClasses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb3-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-36">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> boxClassScore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numBBoxFields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-37">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> boxProb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> box_objectness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> boxClassScore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38"></span>
<span id="cb3-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the object with the highest probability and class label</span></span>
<span id="cb3-40">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boxProb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-41">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-42">                obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-43">                obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxProb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-44">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"></span>
<span id="cb3-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})</span></span>
<span id="cb3-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Where</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Filter by confidence threshold</span></span>
<span id="cb3-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OrderByDescending</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Sort by probability</span></span>
<span id="cb3-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the YOLOX Utilities package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-yolox-utils/blob/main/Editor/AddCustomDefineSymbol.cs">AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> CJM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">YOLOXUtils</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb4-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_YOLOX_UTILS"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group</span></span>
<span id="cb4-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group</span></span>
<span id="cb4-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-17"></span>
<span id="cb4-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the CustomDefineSymbol is already present in the defines string</span></span>
<span id="cb4-19">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb4-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the CustomDefineSymbol to the defines string, separated by a semicolon</span></span>
<span id="cb4-22">                defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated defines string as the new scripting define symbols for the selected build target group</span></span>
<span id="cb4-24">                PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-25">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log a message in the Unity console to inform the user that the custom define symbol has been added</span></span>
<span id="cb4-26">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-yolox-utils/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb5-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb5-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables">PackageInstaller Class Variables</h4>
<p>The PackageInstaller class contains several private static fields.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"487301ab13cf457b9c2ed07a3ec5c004"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb7-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb7-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb8-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb8-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb8-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb8-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb8-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb8-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb8-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb8-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb9-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-15"></span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb9-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb9-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb9-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb9-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb9-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb10-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb10-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb10-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb11-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb11-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb11-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity YOLOX Utilities package. The package provides utility functions to work with YOLOX object detection models in Unity.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-yolox-utils">unity-yolox-utils</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-yolox-utils-walkthrough/index.html</guid>
  <pubDate>Fri, 05 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
