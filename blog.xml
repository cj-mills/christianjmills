<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<atom:link href="christianjmills.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Christian Mills&#39; personal Blog.</description>
<image>
<url>christianjmills.com/images/logo.png</url>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<height>142</height>
<width>144</width>
</image>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Mon, 12 Jun 2023 07:00:00 GMT</lastBuildDate>
<item>
  <title>Testing Intel‚Äôs Arc A770 GPU for Deep Learning Pt. 3</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/arc-a770-testing/part-3/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Training Style Transfer Models</li>
<li>Generating Images with ü§ó Diffusers</li>
<li>No Luck Fine-tuning LLMs</li>
<li>Closing Thoughts</li>
</ul>
<section id="series-links" class="level2">
<h2 class="anchored" data-anchor-id="series-links">Series Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: I tested inference performance with OpenVINO and DirectML on the A770 and attempted to train models using PyTorch-DirectML.</li>
<li><a href="../part-2/">Part 2</a>: I trained image classification models with Intel‚Äôs PyTorch extension on the Arc A770 GPU.</li>
<li><a href="../part-3/">Part 3</a>: I trained style transfer models and ran Stable Diffusion 2.1 using ü§ó Diffusers with Intel‚Äôs PyTorch extension on the Arc A770.</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel‚Äôs PyTorch Extension for Arc GPUs on Ubuntu</a>: This tutorial provides a step-by-step guide to setting up Intel‚Äôs PyTorch extension on Ubuntu to train models with Arc GPUs</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../part-2/">Part 2</a> of this series, I successfully fine-tuned an image classification model with Intel‚Äôs PyTorch extension on the Arc A770 GPU. Total training time was within <code>10%</code> of the Titan RTX using mixed precision.</p>
<p>I started with an image classification task to give the A770 and Intel‚Äôs extension the best chance of success. Image classification is a common task in deep learning, and the ResNet family of models is a popular choice for such tasks.</p>
<p>Once I knew that this baseline scenario worked, I wanted to try something slightly more complex. I decided to start with one of my style transfer training notebooks. I also tested running Stable Diffusion 2.1 using the ü§ó Diffusers library.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The results in this post are with version <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/"><code>1.13.120+xpu</code></a> of Intel‚Äôs PyTorch extension.</p>
</div>
</div>
</section>
<section id="training-style-transfer-models" class="level2">
<h2 class="anchored" data-anchor-id="training-style-transfer-models">Training Style Transfer Models</h2>
<p>My style transfer training notebook uses a custom style transfer model and a custom class for perceptual style loss to extract features from a pre-trained computer vision model. There is nothing exotic about the training code, but it is slightly non-standard compared to the image classification task. You can find the original training notebook on GitHub at the link below:</p>
<ul>
<li><a href="https://github.com/cj-mills/fastai-2022p2-notes/blob/main/notebooks/fast_neural_style-baseline.ipynb">fast_neural_style-baseline.ipynb</a></li>
</ul>
<p>Once I swapped the <code>cuda</code> backend references for Intel‚Äôs <code>xpu</code> backend, the notebook mostly worked as intended. I only needed to make one change to the style transfer model. The current version (<a href="https://github.com/intel/intel-extension-for-pytorch/releases/tag/v1.13.120%2Bxpu">1.13.120+xpu</a>) of Intel‚Äôs extension does not fully implement the <a href="https://pytorch.org/docs/stable/generated/torch.nn.ReflectionPad2d.html">ReflectionPad2D</a> layer in <code>bloat16</code> precision.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RuntimeError:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reflection_pad2d_out_template"</span> not implemented for <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BFloat16'</span></span></code></pre></div>
<p>It does for <code>float32</code> precision, but training without mixed precision takes much longer. Fortunately, the <a href="https://pytorch.org/docs/stable/generated/torch.nn.ZeroPad2d.html">ZeroPad2D</a> layer works just fine in mixed precision. The <a href="https://pytorch.org/docs/stable/generated/torch.nn.ReplicationPad2d.html">ReplicationPad2D</a> layer also works but is slower.</p>
<p>Here is a sample output from a model trained on the A770 using <a href="https://www.vangoghgallery.com/painting/starry-night.html">Van Gogh‚Äôs Starry Night</a> painting as the style image:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-3/images/intel-arc-style-transfer-notebook-sample-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The output images are similar in quality to those generated with the original notebook on the Titan RTX. However, using a ZeroPad2D layer might require slightly more training as the borders are noticeable on some of the images. Below is a comparison of the total training time for the Arc A770 and the Titan RTX:</p>
<table class="table">
<thead>
<tr class="header">
<th>Device</th>
<th>Training Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Arc A770</td>
<td>1 hour 55 minutes</td>
</tr>
<tr class="even">
<td>Titan RTX</td>
<td>1 hour 37 minutes</td>
</tr>
</tbody>
</table>
<p>There is a more significant percentage gap in total training time than with the image classification notebook at approximately <code>18.6%</code>. I‚Äôll need to conduct further testing to see if that difference is due to calculating the perceptual loss or some other part of the training process.</p>
</section>
<section id="generating-images-with-diffusers" class="level2">
<h2 class="anchored" data-anchor-id="generating-images-with-diffusers">Generating Images with ü§ó Diffusers</h2>
<p>Next, I modified one of my <a href="https://github.com/cj-mills/fastai-2022p2-notes/blob/main/notebooks/inference-sd-text2img.ipynb">text-to-image notebooks</a> to try running Stable Diffusion 2.1 with Intel‚Äôs PyTorch extension.</p>
<p>I only encountered one issue with the original notebook code. I use PyTorch‚Äôs <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html">Generator</a> class to save and load the state of the random number generation algorithms when generating images in the original notebook. The Generator class does not appear to support <code>xpu</code> devices in the current version of Intel‚Äôs extension, so I had to remove those sections from the notebook. Other than that, everything worked without issue.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-3/images/intel-arc-hf-diffusers-sd-2-1-sample.png" class="img-fluid figure-img"></p>
</figure>
</div>
<blockquote class="blockquote">
<p><strong>Prompt:</strong> ‚Äúmonet oil painting, a puppy‚Äù</p>
</blockquote>
<p>I compared the performance of the A770 and Titan RTX by generating <code>512x512</code> images at <code>float16</code> precision. Since the <a href="https://github.com/facebookresearch/xformers"><code>xformers</code></a> library does not support Arc GPUs, I did not enable it when benchmarking the inference speed on the Titan RTX for this comparison. Although, I did use PyTorch <code>2.0</code> for the Titan RTX runs.</p>
<table class="table">
<thead>
<tr class="header">
<th>Device</th>
<th>Model Compilation</th>
<th>Iterations/second</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Arc A770</td>
<td>N/A</td>
<td>5.97it/s</td>
</tr>
<tr class="even">
<td>Titan RTX</td>
<td>None</td>
<td>15.76it/s</td>
</tr>
<tr class="odd">
<td>Titan RTX</td>
<td><code>default</code></td>
<td>18.88it/s</td>
</tr>
<tr class="even">
<td>Titan RTX</td>
<td><code>reduce-overhead</code></td>
<td>19.37it/s</td>
</tr>
<tr class="odd">
<td>Titan RTX</td>
<td><code>max-autotune</code></td>
<td>19.68it/s</td>
</tr>
</tbody>
</table>
<p>Even without model compilation, the Titan RTX is over twice as fast as the A770. With model compilation, it‚Äôs over <code>3x</code> faster. Still, the A770‚Äôs performance is far from unusable. I‚Äôll rerun the comparison once Intel‚Äôs extension supports PyTorch <code>&gt;=2.0</code>.</p>
</section>
<section id="no-luck-fine-tuning-llms" class="level2">
<h2 class="anchored" data-anchor-id="no-luck-fine-tuning-llms">No Luck Fine-tuning LLMs</h2>
<p>I‚Äôve been excited about the recent developments for fine-tuning LLMs on local machines, and I think the relatively affordable A770 16GB card has a lot of potential for that use case. Unfortunately, projects like <a href="https://github.com/tloen/alpaca-lora">Alpaca-LoRA</a> and <a href="https://github.com/artidoro/qlora">QLoRA</a> have dependencies, such as the <a href="https://github.com/TimDettmers/bitsandbytes"><code>bitsandbytes</code></a> package, that require CUDA devices. The <code>bitsandbytes</code> package provides the quantization capability that lowers the memory requirements to run LLMs. It provides this functionality using custom CUDA functions. I don‚Äôt know of any plans to add support for Intel GPUs to the <code>bitsandbytes</code> package, so perhaps Intel will provide an alternative.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>At the end of Part 2, I stated that I believe Arc GPUs are now credible options for deep learning. My experience testing the A770 on some more complicated use cases mostly reaffirms that. Running the style transfer and Diffusers notebooks with Intel‚Äôs PyTorch extension only took a couple of changes.</p>
<p>However, Nvidia GPUs have been dominant for a long time and will likely continue to get priority for cutting-edge developments like the quantization methods used in QLoRA. Anyone considering an Arc GPU for deep learning should keep that in mind and verify the dependencies needed for their target use case support Arc GPUs.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-3/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting Started with Intel‚Äôs PyTorch Extension for Arc GPUs on Ubuntu</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Enable Resizable BAR in BIOS</li>
<li>Install Ubuntu</li>
<li>Update the Linux Kernel</li>
<li>Verify Resizable BAR</li>
<li>Install Drivers</li>
<li>Install oneAPI Base Toolkit</li>
<li>Update the Bash Run Commands File</li>
<li>Apply OneAPI Patch</li>
<li>Set Up a Python Environment</li>
<li>Modify PyTorch Code</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I‚Äôll guide you through setting up Intel‚Äôs <a href="https://github.com/intel/intel-extension-for-pytorch">PyTorch extension</a> on <a href="https://ubuntu.com/download/desktop">Ubuntu</a> to train models with their <a href="https://www.intel.com/content/www/us/en/products/docs/discrete-gpus/arc/desktop/a-series/overview.html">Arc GPUs</a>. The extension provides Intel‚Äôs latest feature optimizations and hardware support before they get added to PyTorch. Most importantly for our case, it now includes <code>experimental</code> support for Intel‚Äôs Arc GPUs and optimizations to take advantage of their Xe Matrix Extensions (XMX).</p>
<p>The XMX engines are dedicated hardware for performing matrix operations like those in deep-learning workloads. Intel‚Äôs PyTorch extension allows us to leverage this hardware with minimal changes to existing PyTorch code.</p>
<p>To illustrate this, we‚Äôll adapt the training code from my <a href="https://christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/">beginner-level PyTorch tutorial</a>, where we fine-tune an image classification model from the <a href="https://github.com/huggingface/pytorch-image-models">timm library</a> for hand gesture recognition. By the end of this tutorial, you‚Äôll know all steps required to set up Ubuntu for training PyTorch models using Arc GPUs.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The current setup process is for version <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/"><code>1.13.120+xpu</code></a> of Intel‚Äôs PyTorch extension.</p>
</div>
</div>
</section>
<section id="enable-resizable-bar-in-bios" class="level2">
<h2 class="anchored" data-anchor-id="enable-resizable-bar-in-bios">Enable Resizable BAR in BIOS</h2>
<p>If you have an Arc GPU, one of the first things you should do is enable Resizable BAR. Resizable BAR allows a computer‚Äôs processor to access the graphics card‚Äôs entire memory instead of in small chunks. The Arc GPUs currently require this feature to perform as intended. You can enable the feature in your motherboard‚Äôs BIOS.</p>
<p>Here are links on how to do this for some of the popular motherboard manufacturers:</p>
<ul>
<li><a href="https://www.asrock.com/support/faq.asp?id=498">ASRock</a></li>
<li><a href="https://www.asus.com/support/FAQ/1046107/">Asus</a></li>
<li><a href="https://www.evga.com/support/faq/FAQdetails.aspx?faqid=59772">EVGA</a></li>
<li><a href="https://www.gigabyte.com/WebPage/785/NVIDIA_resizable_bar.html">Gigabyte</a></li>
<li><a href="https://www.msi.com/blog/unlock-system-performance-to-extreme-resizable-bar">MSI</a></li>
</ul>
</section>
<section id="install-ubuntu" class="level2">
<h2 class="anchored" data-anchor-id="install-ubuntu">Install Ubuntu</h2>
<p>Intel‚Äôs <a href="https://dgpu-docs.intel.com/driver/client/overview.html#client-install-options">documentation</a> recommends <a href="https://discourse.ubuntu.com/t/jammy-jellyfish-release-notes/24668">Ubuntu 22.04 LTS</a> or <a href="https://discourse.ubuntu.com/t/lunar-lobster-release-notes/31910">Ubuntu 23.04</a> (or newer). If possible, go with Ubuntu 23.04 (or newer). That version comes with a more recent Linux kernel that supports the Arc GPUs out of the box.</p>
<ul>
<li><a href="https://ubuntu.com/download/desktop">Ubuntu Desktop Download Page</a></li>
</ul>
<p>The Ubuntu website provides <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">a step-by-step guide</a> to installing Ubuntu on your PC, and you can install it alongside an existing operating system.</p>
<ul>
<li><a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">Install Ubuntu with a Bootable USB Stick</a></li>
</ul>
<p>That tutorial calls for at least 25GB of free storage space, but I recommend at least 80 GB for our case. The <a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit.html#gs.ztyvfm">oneAPI Base Toolkit</a> used by Intel‚Äôs PyTorch extension alone takes up approximately 15GB. Additional packages, applications, models, and datasets can quickly fill space.</p>
<p>If you already have Ubuntu 22.04 LTS installed and want to stick with it, follow the instructions in the ‚ÄúUpdate the Linux Kernel‚Äù section to update the kernel to 6.2 or newer to use the Arc GPU. Wait until you update the kernel before switching to the Arc GPU.</p>
</section>
<section id="update-the-linux-kernel" class="level2">
<h2 class="anchored" data-anchor-id="update-the-linux-kernel">Update the Linux Kernel</h2>
<p>You can skip this section if you are on Ubuntu 23.04 or newer. Those versions will already have a supported kernel. Those running Ubuntu 22.04 LTS can update the kernel using the <a href="https://github.com/bkw777/mainline">Ubuntu Mainline Installer</a> tool.</p>
<p>Generally, you should not install a mainline kernel on an Ubuntu <a href="https://ubuntu.com/blog/what-is-an-ubuntu-lts-release">LTS</a> release.</p>
<section id="install-the-tool" class="level3">
<h3 class="anchored" data-anchor-id="install-the-tool">Install the tool</h3>
<p>Open a terminal (<code>Ctrl+Alt+T</code>) and run the following commands to add the PPA (<a href="https://launchpad.net/ubuntu/+ppas">Personal Package Archive</a>) and install the Mainline tool:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> add-apt-repository ppa:cappelikan/ppa</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> mainline</span></code></pre></div>
</section>
<section id="install-kernel-6.2-or-newer" class="level3">
<h3 class="anchored" data-anchor-id="install-kernel-6.2-or-newer">Install Kernel 6.2 or newer</h3>
<p>Press the Super key (i.e., Windows Key or Command Key) to enter the <a href="https://help.ubuntu.com/stable/ubuntu-help/shell-introduction.html.en#activities">Activities</a> overview. Type <code>Mainline</code> into the search bar and press <code>Enter</code> to launch the application. Select the latest 6.2 version (or newer) on the list and click the <code>Install</code> button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/images/ubuntu-mainline-kernel-installer-install-6.2-kernel.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once the installation completes, shut down the computer and switch to the Arc GPU. You can then restart the computer and log back into Ubuntu.</p>
</section>
</section>
<section id="verify-resizable-bar" class="level2">
<h2 class="anchored" data-anchor-id="verify-resizable-bar">Verify Resizable BAR</h2>
<p>Once you log into Ubuntu, you can verify Resizable BAR is active by opening a terminal (<code>Ctrl+Alt+T</code>) and running the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lspci</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A8</span> VGA</span></code></pre></div>
<p>Here is the output for the Arc A770 16GB card:</p>
<pre class="text"><code>$ lspci -v |grep -A8 VGA
00:02.0 VGA compatible controller: Intel Corporation RocketLake-S GT1 [UHD Graphics 750] (rev 04) (prog-if 00 [VGA controller])
    Subsystem: ASRock Incorporation RocketLake-S GT1 [UHD Graphics 750]
    Flags: bus master, fast devsel, latency 0, IRQ 172
    Memory at 6401000000 (64-bit, non-prefetchable) [size=16M]
    Memory at 4000000000 (64-bit, prefetchable) [size=256M]
    I/O ports at 3000 [size=64]
    Expansion ROM at 000c0000 [virtual] [disabled] [size=128K]
    Capabilities: &lt;access denied&gt;
    Kernel driver in use: i915
--
03:00.0 VGA compatible controller: Intel Corporation DG2 [Arc A770] (rev 08) (prog-if 00 [VGA controller])
    Subsystem: Intel Corporation DG2 [Arc A770]
    Flags: bus master, fast devsel, latency 0, IRQ 173
    Memory at a1000000 (64-bit, non-prefetchable) [size=16M]
    Memory at 6000000000 (64-bit, prefetchable) [size=16G]
    Expansion ROM at a2000000 [disabled] [size=2M]
    Capabilities: &lt;access denied&gt;
    Kernel driver in use: i915
    Kernel modules: i915</code></pre>
<hr>
<p>Note that the <code>[size=16GB]</code> matches the total memory for the GPU. If you have the A750 8GB variant, it should read <code>[size=8GB]</code> for your GPU.</p>
</section>
<section id="install-drivers" class="level2">
<h2 class="anchored" data-anchor-id="install-drivers">Install Drivers</h2>
<p>Next, we will install the compute, media, and display runtimes.</p>
<section id="add-intel-graphics-drivers-repository" class="level3">
<h3 class="anchored" data-anchor-id="add-intel-graphics-drivers-repository">Add Intel Graphics drivers Repository</h3>
<p>Run the following bash commands to add the Intel Graphics drivers repository:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-qO</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> https://repositories.intel.com/graphics/intel-graphics.key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> gpg <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dearmor</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> /usr/share/keyrings/intel-graphics.gpg <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/graphics/ubuntu jammy arc"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tee /etc/apt/sources.list.d/intel-gpu-jammy.list <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get update</span></code></pre></div>
<p>The above bash commands perform the following steps:</p>
<ol type="1">
<li>Refresh sudo access to avoid multiple password prompts.</li>
<li>Download the Intel graphics repository‚Äôs public key.</li>
<li>Convert the downloaded key to binary and save it.</li>
<li>Add the Intel graphics repository to the APT‚Äôs list of package sources.</li>
<li>Update the package list from all configured repositories, including the newly added Intel repository.</li>
</ol>
</section>
<section id="install-packages" class="level3">
<h3 class="anchored" data-anchor-id="install-packages">Install packages</h3>
<p>Now we can install the required packages.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-2">  intel-opencl-icd intel-level-zero-gpu level-zero <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-3">  intel-media-va-driver-non-free libmfx1 libmfxgen1 libvpl2 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-4">  libegl-mesa0 libegl1-mesa libegl1-mesa-dev libgbm1 libgl1-mesa-dev libgl1-mesa-dri <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-5">  libglapi-mesa libgles2-mesa-dev libglx-mesa0 libigdgmm12 libxatracker2 mesa-va-drivers <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-6">  mesa-vdpau-drivers mesa-vulkan-drivers va-driver-all vainfo hwinfo clinfo mesa-utils</span></code></pre></div>
</section>
<section id="verify-the-installations" class="level3">
<h3 class="anchored" data-anchor-id="verify-the-installations">Verify the Installations</h3>
<p>We can verify everything is installed correctly by running the following commands.</p>
<section id="verify-the-device-is-working-with-the-i915-driver" class="level4">
<h4 class="anchored" data-anchor-id="verify-the-device-is-working-with-the-i915-driver">Verify the device is working with the <code>i915</code> driver</h4>
<p>Run the following command to confirm the device is using Intel‚Äôs graphics driver:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hwinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--display</span></span></code></pre></div>
<p>Here is the expected output for the A770:</p>
<pre class="text"><code>$ hwinfo --display
06: PCI 300.0: 0300 VGA compatible controller (VGA)             
  [Created at pci.386]
  Unique ID: svHJ.nDfmnmUHKH4
  Parent ID: GA8e.mr2N3fBJq5F
  SysFS ID: /devices/pci0000:00/0000:00:01.0/0000:01:00.0/0000:02:01.0/0000:03:00.0
  SysFS BusID: 0000:03:00.0
  Hardware Class: graphics card
  Model: "Intel VGA compatible controller"
  Vendor: pci 0x8086 "Intel Corporation"
  Device: pci 0x56a0 
  SubVendor: pci 0x8086 "Intel Corporation"
  SubDevice: pci 0x1020 
  Revision: 0x08
  Driver: "i915"
  Driver Modules: "i915"
  Memory Range: 0xa1000000-0xa1ffffff (rw,non-prefetchable)
  Memory Range: 0x6000000000-0x63ffffffff (ro,non-prefetchable)
  Memory Range: 0xa2000000-0xa21fffff (ro,non-prefetchable,disabled)
  IRQ: 173 (701506 events)
  Module Alias: "pci:v00008086d000056A0sv00008086sd00001020bc03sc00i00"
  Driver Info #0:
    Driver Status: i915 is active
    Driver Activation Cmd: "modprobe i915"
  Config Status: cfg=new, avail=yes, need=no, active=unknown
  Attached to: #25 (PCI bridge)</code></pre>
<hr>
</section>
<section id="verify-media-drivers-installation" class="level4">
<h4 class="anchored" data-anchor-id="verify-media-drivers-installation">Verify Media drivers installation</h4>
<p>Run the following commands to verify the media drivers installation:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DISPLAY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>:0.0<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vainfo</span></span></code></pre></div>
<p>Here is a snippet of the expected output for the A770:</p>
<pre class="text"><code>$ export DISPLAY=:0.0; vainfo
Trying display: wayland
libva info: VA-API version 1.18.0
libva info: Trying to open /usr/lib/x86_64-linux-gnu/dri/iHD_drv_video.so
libva info: Found init function __vaDriverInit_1_18
libva info: va_openDriver() returns 0
vainfo: VA-API version: 1.18 (libva 2.17.0)
vainfo: Driver version: Intel iHD driver for Intel(R) Gen Graphics - 23.1.4 (12e141d)
vainfo: Supported profile and entrypoints
      VAProfileNone                   : VAEntrypointVideoProc
      VAProfileNone                   : VAEntrypointStats
...</code></pre>
<hr>
</section>
<section id="verify-computing-drivers-installation" class="level4">
<h4 class="anchored" data-anchor-id="verify-computing-drivers-installation">Verify Computing drivers installation</h4>
<p>Run the following command to get a list of available OpenCL platforms and devices:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span></span></code></pre></div>
<p>The Arc GPU should show as one of the available devices. On my computer, the Arc GPU is device 0 for platform 2:</p>
<pre class="text"><code>$ clinfo -l
Platform #0: Intel(R) FPGA Emulation Platform for OpenCL(TM)
 `-- Device #0: Intel(R) FPGA Emulation Device
Platform #1: Intel(R) OpenCL
 `-- Device #0: 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz
Platform #2: Intel(R) OpenCL HD Graphics
 `-- Device #0: Intel(R) Arc(TM) A770 Graphics
Platform #3: Intel(R) OpenCL HD Graphics
 `-- Device #0: Intel(R) UHD Graphics 750</code></pre>
<hr>
<p>We can run the following command to get the properties for that device:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clinfo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> 2:0</span></code></pre></div>
<p>The command will output a lot of information. Here is the top section of the output for the A770:</p>
<pre class="text"><code>$ clinfo -d 2:0
  Platform Name                                   Intel(R) OpenCL HD Graphics
  Device Name                                     Intel(R) Arc(TM) A770 Graphics
  Device Vendor                                   Intel(R) Corporation
  Device Vendor ID                                0x8086
  Device Version                                  OpenCL 3.0 NEO 
  Device UUID                                     8680a056-0800-0000-0300-000000000000
  Driver UUID                                     32332e30-352e-3235-3539-332e31380000
  Valid Device LUID                               No
  Device LUID                                     400f-ca04fd7f0000
  Device Node Mask                                0
  Device Numeric Version                          0xc00000 (3.0.0)
  Driver Version                                  23.05.25593.18
  Device OpenCL C Version                         OpenCL C 1.2 
  Device OpenCL C all versions                    OpenCL C                                 
...</code></pre>
<hr>
</section>
<section id="verify-3d-drivers-installation" class="level4">
<h4 class="anchored" data-anchor-id="verify-3d-drivers-installation">Verify 3D drivers installation</h4>
<p>Lastly, we can run the following command to verify the 3D drivers‚Äô installation:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">glxinfo</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> OpenGL</span></code></pre></div>
<p>Here is the output for the A770:</p>
<pre class="text"><code>$ glxinfo |grep OpenGL
OpenGL vendor string: Intel
OpenGL renderer string: Mesa Intel(R) Arc(tm) A770 Graphics (DG2)
OpenGL core profile version string: 4.6 (Core Profile) Mesa 23.1.0-devel (git-722bcd7973)
OpenGL core profile shading language version string: 4.60
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 4.6 (Compatibility Profile) Mesa 23.1.0-devel (git-722bcd7973)
OpenGL shading language version string: 4.60
OpenGL context flags: (none)
OpenGL profile mask: compatibility profile
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 23.1.0-devel (git-722bcd7973)
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:</code></pre>
<hr>
</section>
</section>
</section>
<section id="install-oneapi-base-toolkit" class="level2">
<h2 class="anchored" data-anchor-id="install-oneapi-base-toolkit">Install oneAPI Base Toolkit</h2>
<p>Next, we install the <a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit.html#gs.ztyvfm">oneAPI Base Toolkit</a>, which Intel‚Äôs PyTorch extension depends on. As mentioned earlier, the toolkit will take up approximately 15GB of disk space. We‚Äôll install the toolkit using the APT package manager.</p>
<p>Run the following commands to add the package repository and install the toolkit:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O-</span> https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gpg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dearmor</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tee /usr/share/keyrings/oneapi-archive-keyring.gpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/null <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb16-3">echo <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tee /etc/apt/sources.list.d/oneAPI.list <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb16-4">sudo apt update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb16-5">sudo apt install intel-basekit</span></code></pre></div>
<p>The above bash commands perform the following steps:</p>
<ol type="1">
<li>Refresh sudo access to avoid multiple password prompts.</li>
<li>Download the system keyring for the repository.</li>
<li>Add the signed entry to APT sources and configure the APT client to use the Intel repository.</li>
<li>Update the list of available packages.</li>
<li>Install the toolkit.</li>
</ol>
</section>
<section id="update-the-bash-run-commands-file" class="level2">
<h2 class="anchored" data-anchor-id="update-the-bash-run-commands-file">Update the Bash Run Commands File</h2>
<p>We need to add the following lines to the end of the bash run commands file (<code>.bashrc</code>) for Intel‚Äôs extension to use the oneAPI toolkit:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ONEAPI_ROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/opt/intel/oneapi</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DPCPPROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ONEAPI_ROOT}</span>/compiler/latest</span>
<span id="cb17-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MKLROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ONEAPI_ROOT}</span>/mkl/latest</span>
<span id="cb17-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">IPEX_XPU_ONEDNN_LAYOUT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb17-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ONEAPI_ROOT}</span>/setvars.sh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/null</span></code></pre></div>
<p>The above lines perform the following steps:</p>
<ol type="1">
<li>Add the installation location for the oneAPI toolkit as an environment variable.</li>
<li>Add the installation location for the DPC++ Compiler as an environment variable.</li>
<li>Add the installation for the Math Kernel Library as an environment variable.</li>
<li>Set the oneDNN memory layout to improve training speed.</li>
<li>Initialize the oneAPI environment.</li>
</ol>
<p>You can run the following commands to add the above lines to the <code>.bashrc</code> file and apply the changes to the current shell:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\nexport ONEAPI_ROOT=/opt/intel/oneapi\nexport DPCPPROOT=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{ONEAPI_ROOT}/compiler/latest\nexport MKLROOT=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{ONEAPI_ROOT}/mkl/latest\nexport IPEX_XPU_ONEDNN_LAYOUT=1\nsource </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{ONEAPI_ROOT}/setvars.sh &gt; /dev/null"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.bashrc <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb18-2">source ~/.bashrc</span></code></pre></div>
</section>
<section id="apply-oneapi-patch" class="level2">
<h2 class="anchored" data-anchor-id="apply-oneapi-patch">Apply OneAPI Patch</h2>
<p>The <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/tutorials/installation.html#install-oneapi-base-toolkit">installation instructions</a> for the current version of Intel‚Äôs PyTorch extension say that we need to apply a patch to the DPC++ compiler in the oneAPI Basekit.</p>
<p>You can run the following bash commands to download the patch and apply it to the oneAPI toolkit installation:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install unzip <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-3">wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/89283df8-c667-47b0-b7e1-c4573e37bd3e/2023.1-linux-hotfix.zip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-4">unzip 2023.1-linux-hotfix.zip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-5">cd 2023.1-linux-hotfix <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-6">sed <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2iONEAPI_ROOT=/opt/intel/oneapi'</span> installpatch.sh <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-7">sudo bash installpatch.sh</span></code></pre></div>
<p>The above commands perform the following steps:</p>
<ol type="1">
<li>Refresh sudo access to avoid multiple password prompts.</li>
<li>Install the unzip package used to unzip the patch package</li>
<li>Download the patch package.</li>
<li>Unzip the patch package.</li>
<li>Enter the patch package folder.</li>
<li>Add the installation location for the oneAPI toolkit to the install patch script.</li>
<li>Apply the patch.</li>
</ol>
</section>
<section id="set-up-a-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-a-python-environment">Set Up a Python Environment</h2>
<p>Now we can create a Python environment to run the training code. We‚Äôll install a patched version of PyTorch needed for Intel‚Äôs extension, the extension itself, and the other dependencies for the training code.</p>
<section id="install-mamba-package-manager" class="level3">
<h3 class="anchored" data-anchor-id="install-mamba-package-manager">Install Mamba Package Manager</h3>
<p>We‚Äôll use the <a href="https://mamba.readthedocs.io/en/latest/">Mamba</a> package manager to create the Python environment. You can learn more about it in my <a href="https://christianjmills.com/posts/mamba-getting-started-tutorial-windows/">getting started</a> tutorial.</p>
<p>The following bash commands will download the latest release, install it, and relaunch the current bash shell to apply the relevant changes:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.sh"</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> Mambaforge-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>.sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span></span>
<span id="cb20-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/mambaforge/bin/mamba</span> init</span>
<span id="cb20-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span></span></code></pre></div>
</section>
<section id="create-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="create-a-python-environment">Create a Python Environment</h3>
<p>Next, we‚Äôll create a Python environment and activate it. The current version of the extension does not yet support Python 3.11, so we‚Äôll use Python 3.10.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-arc python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-arc</span></code></pre></div>
</section>
<section id="install-pytorch-and-intels-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="install-pytorch-and-intels-pytorch-extension">Install PyTorch and Intel‚Äôs PyTorch extension</h3>
<p>The following command will install the required versions of PyTorch and torchvision, along with the extension itself:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install torch==1.13.0a0+git6c9b55e torchvision==0.14.1a0 intel_extension_for_pytorch==1.13.120+xpu <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://developer.intel.com/ipex-whl-stable-xpu</span></code></pre></div>
</section>
<section id="install-additional-depenencies" class="level3">
<h3 class="anchored" data-anchor-id="install-additional-depenencies">Install additional depenencies</h3>
<p>Lastly, we‚Äôll install the other training code dependencies. You can learn about these dependencies (<a href="https://christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/#installing-additional-libraries">here</a>).</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install datasets jupyter matplotlib pandas pillow timm torcheval tqdm</span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install older pyzmq and jupyter client versions</span></span>
<span id="cb23-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter_client&lt;8"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyzmq&lt;25"</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install utility packages</span></span>
<span id="cb23-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install cjm_pandas_utils cjm_pil_utils cjm_pytorch_utils</span></code></pre></div>
</section>
</section>
<section id="modify-pytorch-code" class="level2">
<h2 class="anchored" data-anchor-id="modify-pytorch-code">Modify PyTorch Code</h2>
<p>It‚Äôs finally time to train a model. The Jupyter Notebooks with the original and modified training code are available on GitHub at the links below.</p>
<ul>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training.ipynb">pytorch-timm-image-classifier-training.ipynb</a></li>
<li><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/intel-arc-pytorch-timm-image-classifier-training.ipynb">intel-arc-pytorch-timm-image-classifier-training.ipynb</a></li>
</ul>
<p>You can also download the notebooks to the current directory by running the following commands:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://raw.githubusercontent.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/main/notebooks/pytorch-timm-image-classifier-training.ipynb <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb24-2">wget https://raw.githubusercontent.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/main/notebooks/intel-arc-pytorch-timm-image-classifier-training.ipynb</span></code></pre></div>
<p>Once downloaded, run the following command to launch the Jupyter Notebook Environment:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<section id="import-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="import-pytorch-extension">Import PyTorch Extension</h3>
<p>We import Intel‚Äôs PyTorch extension with the following code:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb26-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> intel_extension_for_pytorch as ipex</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PyTorch Version: {torch.__version__}'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Intel PyTorch Extension Version: {ipex.__version__}'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Note that we need to import PyTorch before the extension. Also, if you get the following user warning, don‚Äôt worry. It‚Äôs normal.</p>
<pre class="text"><code>UserWarning: Failed to load image Python extension: 
  warn(f"Failed to load image Python extension: {e}")</code></pre>
<hr>
</section>
<section id="update-pytorch-imports" class="level3">
<h3 class="anchored" data-anchor-id="update-pytorch-imports">Update PyTorch Imports</h3>
<p>Unlike the original training code, we import the <code>autocast()</code> context manager from <code>torch.xpu.amp</code> instead of <code>torch.amp</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb28-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb28-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.xpu.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb28-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb28-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb28-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb28-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb28-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb28-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb29-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb29-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb29-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb29-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb29-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb29-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb29-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="verify-arc-gpu-availability" class="level3">
<h3 class="anchored" data-anchor-id="verify-arc-gpu-availability">Verify Arc GPU Availability</h3>
<p>We can double-check that the extension can use the Arc GPU by getting the properties of the available <code>xpu</code> devices.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_public_properties(obj):</span>
<span id="cb30-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb30-3">        prop: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(obj, prop)</span>
<span id="cb30-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(obj)</span>
<span id="cb30-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> prop.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">callable</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(obj, prop))</span>
<span id="cb30-6">    }</span>
<span id="cb30-7"></span>
<span id="cb30-8">xpu_device_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.xpu.device_count()</span>
<span id="cb30-9">dict_properties_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [get_public_properties(torch.xpu.get_device_properties(i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(xpu_device_count)]</span>
<span id="cb30-10">pd.DataFrame(dict_properties_list)</span></code></pre></div>
<div style="overflow-x:auto;">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
dev_type
</th>
<th>
max_compute_units
</th>
<th>
name
</th>
<th>
platform_name
</th>
<th>
support_fp64
</th>
<th>
total_memory
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
gpu
</td>
<td>
512
</td>
<td>
Intel(R) Arc(TM) A770 Graphics
</td>
<td>
Intel(R) Level-Zero
</td>
<td>
False
</td>
<td>
16225243136
</td>
</tr>
<tr>
<th>
1
</th>
<td>
gpu
</td>
<td>
32
</td>
<td>
Intel(R) UHD Graphics 750
</td>
<td>
Intel(R) Level-Zero
</td>
<td>
False
</td>
<td>
26589642752
</td>
</tr>
</tbody>

</table>
</div>
<p>In this case, the A770 is the default <code>xpu</code> device, and the integrated graphics on the CPU is available as the second device. The <code>total_memory</code> value for the integrated graphics is higher because it uses system memory.</p>
</section>
<section id="update-the-device-name" class="level3">
<h3 class="anchored" data-anchor-id="update-the-device-name">Update the Device Name</h3>
<p>Next, we‚Äôll manually set the device name to <code>xpu</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xpu'</span></span>
<span id="cb31-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb31-3">device, dtype</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb32-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb32-3">device, dtype</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="update-the-autocast-context-manager" class="level3">
<h3 class="anchored" data-anchor-id="update-the-autocast-context-manager">Update the <code>autocast()</code> context manager</h3>
<p>We don‚Äôt pass the device name to the <code>xpu</code> version of the <code>autocast()</code> context manager, so we need to update that in the <code>run_epoch</code> function.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enables gradient calculation if 'is_training' is True</span></span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.set_grad_enabled(is_training):</span>
<span id="cb33-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatic Mixed Precision (AMP) context manager for improved performance</span></span>
<span id="cb33-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast():</span>
<span id="cb33-5">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb33-6">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.functional.cross_entropy(outputs, targets) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss</span></span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enables gradient calculation if 'is_training' is True</span></span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.set_grad_enabled(is_training):</span>
<span id="cb34-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatic Mixed Precision (AMP) context manager for improved performance</span></span>
<span id="cb34-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(device):</span>
<span id="cb34-5">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb34-6">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.functional.cross_entropy(outputs, targets) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="optimize-the-model-and-optimizer-objects" class="level3">
<h3 class="anchored" data-anchor-id="optimize-the-model-and-optimizer-objects">Optimize the <code>model</code> and <code>optimizer</code> Objects</h3>
<p>Before we run the <code>train_loop</code> function, we‚Äôll use Intel‚Äôs PyTorch extension to apply optimizations to the model and optimizer objects. We‚Äôll also cast the model to the <code>bfloat16</code> data type, so we can train using mixed precision. Intel‚Äôs PyTorch extension only supports the <code>bloat16</code> data type for mixed-precision training currently.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">model, optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipex.optimize(model, optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16)</span></code></pre></div>
<p>If you get the following warning message, don‚Äôt worry. It is normal.</p>
<pre class="text"><code>UserWarning: Weight Prepack and Sample Input are both disabled on XPU. The Onednn Layout is automatically applied.
  warnings.warn(</code></pre>
<hr>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>That‚Äôs it for the required changes to the training code. The Arc-specific training notebook linked above has some additional changes, but none are essential. We can now run the <code>train_loop</code> function. With the A770 and the dataset on an SSD, training takes between twelve and twelve and a half minutes to complete.</p>
<p><img src="christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/images/arc-a770-pytorch-training-session-ubuntu.png" class="img-fluid"></p>
</section>
<section id="update-the-inference-code" class="level3">
<h3 class="anchored" data-anchor-id="update-the-inference-code">Update the Inference Code</h3>
<p>Since we cast the model to <code>bloat16</code>, we must ensure input data use the same type. We can update the inference code using the auto-cast context manager as shown below:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Modified</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Original</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb37-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb37-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.xpu.amp.autocast(enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16, cache_enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb37-4">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb38-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb38-3">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we set up Intel‚Äôs PyTorch extension on Ubuntu and trained an image classification model using an Arc GPU. The exact setup steps may change with new versions, so check the <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/latest/tutorials/installation.html">documentation</a> for the latest version to see if there are any changes. I‚Äôll try to keep this tutorial updated with any significant changes to the process.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>image-classification</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/intel-pytorch-extension-tutorial/native-ubuntu/index.html</guid>
  <pubDate>Fri, 02 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Testing Intel‚Äôs Arc A770 GPU for Deep Learning Pt. 2</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/arc-a770-testing/part-2/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Initial Headaches</li>
<li>Training Performance on Native Ubuntu</li>
<li>Training Performance on WSL</li>
<li>Closing Thoughts</li>
</ul>
<section id="series-links" class="level2">
<h2 class="anchored" data-anchor-id="series-links">Series Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: I tested inference performance with OpenVINO and DirectML on the A770 and attempted to train models using PyTorch-DirectML.</li>
<li><a href="../part-2/">Part 2</a>: I trained image classification models with Intel‚Äôs PyTorch extension on the Arc A770 GPU.</li>
<li><a href="../part-3/">Part 3</a>: I trained style transfer models and ran Stable Diffusion 2.1 using ü§ó Diffusers with Intel‚Äôs PyTorch extension on the Arc A770.</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel‚Äôs PyTorch Extension for Arc GPUs on Ubuntu</a>: This tutorial provides a step-by-step guide to setting up Intel‚Äôs PyTorch extension on Ubuntu to train models with Arc GPUs</li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><a href="../part-1/">Last October</a>, I wrote about my findings from testing the inference performance of Intel‚Äôs <a href="https://www.intel.com/content/www/us/en/products/sku/229151/intel-arc-a770-graphics-16gb/specifications.html">Arc A770</a> GPU using <a href="https://docs.openvino.ai/2022.3/home.html">OpenVINO</a> and <a href="https://learn.microsoft.com/en-us/windows/ai/directml/dml">DirectML</a>. I also attempted to train various models with the <a href="https://pypi.org/project/pytorch-directml/">PyTorch-DirectML</a> package. The card did well on inference, especially with Intel‚Äôs OpenVINO library. However, the PyTorch-DirectML package was incomplete, and I could not adequately test the card‚Äôs training performance.</p>
<p>Shortly after that post, Intel released an <a href="https://github.com/intel/intel-extension-for-pytorch/releases/tag/v1.10.200%2Bgpu">extension for PyTorch</a>, which added support for Intel GPUs. Based on my initial testing, I decided the extension was not in a state that warranted a follow-up post. In hindsight, I don‚Äôt believe the initial release officially supported Arc GPUs. The <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.10.200+gpu/tutorials/installation.html#hardware-requirement">installation guide</a> for that version only mentions data center GPUs.</p>
<p>Since then, Intel has released a couple of updates for the extension, the most <a href="https://github.com/intel/intel-extension-for-pytorch/releases/tag/v1.13.120%2Bxpu">recent</a> being about a month ago at the time of writing. Unlike the initial release, this version lists Arc GPUs as having <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/tutorials/installation.html#hardware-requirement">experimental support</a>. Given that and the driver improvements for Windows and Linux, I decided to pop the A770 back into my desktop and give it another shot. In short, it works now.</p>
<p>In this post, I discuss my experience getting Intel‚Äôs PyTorch extension running on Ubuntu and Windows Subsystem for Linux (WSL). I also cover my initial findings from training models. I‚Äôll provide a tutorial for setting up and using the extension in a dedicated post.</p>
<ul>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel‚Äôs PyTorch Extension for Arc GPUs on Ubuntu</a></li>
</ul>
</section>
<section id="initial-headaches" class="level2">
<h2 class="anchored" data-anchor-id="initial-headaches">Initial Headaches</h2>
<p>To be blunt, my initial attempts to get this working were a bit of a nightmare. The instructions required to enable support for Arc GPUs on Ubuntu and set up Intel‚Äôs PyTorch extension span across multiple sites and are sometimes contradictory. The instructions on some sites are outdated to the point of being impossible to follow.</p>
<p>For example, Intel‚Äôs Arc Graphics Driver for Ubuntu <a href="https://www.intel.com/content/www/us/en/download/747008/intel-arc-graphics-driver-ubuntu.html">page</a> provided a link to a separate documentation site with driver installation instructions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-arc-graphics-driver-ubuntu-page.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The instructions on the documentation site say to <a href="https://dgpu-docs.intel.com/installation-guides/ubuntu/ubuntu-jammy-arc.html#step-2-install-linux-kernel">install a specific Linux kernel</a>, <code>5.19.0-35</code>, which is <a href="https://www.ubuntuupdates.org/package/core/jammy/main/updates/linux-image-5.19.0-35-generic">no longer available</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-dgpu-docs-ubuntu-driver-installation-instructions-install-kernel.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Still, I attempted to follow the instructions on a new Ubuntu 22.04 install and a more recent <code>5.19</code> kernel. Trying to boot into Ubuntu on the Arc card with the <code>5.19</code> kernel results in the following error:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">snd_hda_intel</span> 0000:04:00.0 hsw/bdw hd-audio hdmi/dp requires binding with gfx driver</span></code></pre></div>
<p>The error is a known issue, and Intel even has a <a href="https://www.intel.com/content/www/us/en/support/articles/000092607/graphics.html">troubleshooting page</a> with a proposed workaround. Unfortunately, disabling the ‚ÄúIntegrated graphics Multi-Monitor‚Äù BIOS option, as the page recommends, did not resolve the issue.</p>
<p>I decided to continue following the instructions on integrated graphics and see if I could use the Arc card once I installed all the driver packages. That attempt went so poorly that I had to pop out the motherboard‚Äôs CMOS battery to reset the BIOS.</p>
<p>I made several more attempts, which failed at various stages. Fortunately, I eventually got everything working, and my current setup process is pretty straightforward.</p>
<p>I ended up needing Linux kernel <code>6.2</code> or newer. That kernel version <a href="https://www.phoronix.com/news/Linux-6.2-Released">supports the Arc card</a> out of the box. You can install that kernel on Ubuntu 22.04, but I recommend just going with Ubuntu 23.04 (or newer) if starting from a fresh install. Ubuntu 23.04 already has a kernel version <code>‚â•6.2</code>, and I verified it works with Intel‚Äôs PyTorch extension.</p>
<p>As mentioned earlier, I‚Äôll provide detailed instructions for the setup process in a dedicated post.</p>
</section>
<section id="training-performance-on-native-ubuntu" class="level2">
<h2 class="anchored" data-anchor-id="training-performance-on-native-ubuntu">Training Performance on Native Ubuntu</h2>
<p>I used the training notebook from my recent <a href="../../pytorch-train-image-classifier-timm-hf-tutorial/">beginner PyTorch tutorial</a> for testing. That tutorial covers fine-tuning image classification models with PyTorch and the timm library by creating a hand gesture recognizer. Using the training notebook simplifies directly comparing the Arc A770 and my Titan RTX, which I used to create the tutorial. Nearly everything is identical for the testing environment down to the dataset location.</p>
<p>The one additional variable is that the tutorial uses PyTorch 2.0, while Intel‚Äôs PyTorch extension currently requires a <a href="https://intel.github.io/intel-extension-for-pytorch/xpu/latest/tutorials/installation.html#pytorch-intel-extension-for-pytorch-version-mapping">patched version</a> of PyTorch 1.13. However, I don‚Äôt use model compilation in the tutorial, so this should not be a significant factor.</p>
<p>The training notebook only required a few tweaks to use Intel‚Äôs PyTorch extension, with most of the code remaining unchanged. The extension even supports PyTorch‚Äôs <code>autocast()</code> context manager for mixed-precision training.</p>
<p>The first training session was alarmingly slow, with the first pass through the training set taking around 42 minutes and 30 seconds. However, the loss and accuracy values were comparable to those with the Titan RTX, so I let it run for a while. After the first epoch, passes through the training set fell to approximately 16 minutes and 50 seconds. The total training time was only a few minutes less than the free GPU tier on Google Colab. Strangely, the inference speed on the validation set was nearly identical to the Titan RTX.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-ubuntu-bad-memory-layout.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We can get more insight into using the <code>intel-gpu-top</code> command-line tool. Below are the readouts from the first and third passes through the training set:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">First Pass</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Third Pass</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-gpu-top-arc-a770-usage-training-bad-memory-layout.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-gpu-top-arc-a770-usage-training-bad-memory-layout-third-epoch.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Note that the memory throughput for the first training pass is particularly low. Although, the third pass is not great, either.</p>
<p>After some investigation on the <a href="https://github.com/intel/intel-extension-for-pytorch/issues/296#issuecomment-1426537682">extension‚Äôs GitHub repository</a>, it appears the slow training time is due to the backward pass for some operations. Fortunately, the fix involved setting a <a href="https://github.com/intel/intel-extension-for-pytorch/issues/296#issuecomment-1461118993">single environment variable</a>.</p>
<p>After setting <code>IPEX_XPU_ONEDNN_LAYOUT=1</code>, the total training time is within 10% of my Titan RTX on the same system. The gap would be slightly wider if I compiled the model on the Titan with PyTorch 2.0.</p>
<p>We can see the difference with <code>intel-gpu-top</code>, which shows much higher memory throughput.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/intel-gpu-top-arc-a770-usage-training.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The final loss and accuracy values fluctuate slightly, even when using fixed seed values for PyTorch, NumPy, and Python. However, they stay pretty close to the results on my Nvidia GPU.</p>
<p>Here is a screenshot of the training session with the Arc A770:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-ubuntu.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Here is a link to the training session with the Titan RTX:</p>
<ul>
<li><a href="../../pytorch-train-image-classifier-timm-hf-tutorial/#train-the-model">Titan RTX training session</a></li>
</ul>
<pre class="text"><code>Epochs: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3/3 [11:15&lt;00:00, 224.96s/it]
Train: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4324/4324 [03:29&lt;00:00, 21.75it/s, accuracy=0.894, avg_loss=0.374, loss=0.0984, lr=0.000994]
Eval: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 481/481 [00:17&lt;00:00, 50.42it/s, accuracy=0.975, avg_loss=0.081, loss=0.214, lr=]
Train: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4324/4324 [03:28&lt;00:00, 22.39it/s, accuracy=0.968, avg_loss=0.105, loss=0.0717, lr=0.000462]
Eval: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 481/481 [00:16&lt;00:00, 55.14it/s, accuracy=0.988, avg_loss=0.0354, loss=0.02, lr=]
Train: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4324/4324 [03:28&lt;00:00, 21.94it/s, accuracy=0.99, avg_loss=0.0315, loss=0.00148, lr=4.03e-9]
Eval: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 481/481 [00:16&lt;00:00, 53.87it/s, accuracy=0.995, avg_loss=0.0173, loss=0.000331, lr=]</code></pre>
<p>The training sessions for the A770 and the Titan both used mixed precision.</p>
<p>I also tested training on the Arc card with the newer 6.3 Linux kernel but did not see a notable performance difference versus the 6.2 Linux kernel.</p>
<p>Since Intel‚Äôs extension only recently added support for Arc cards, more performance may get unlocked in future updates. However, getting so close to the Titan RTX was already more than I had hoped.</p>
<p>I decided to move on and see how the extension performed in WSL.</p>
</section>
<section id="training-performance-on-wsl" class="level2">
<h2 class="anchored" data-anchor-id="training-performance-on-wsl">Training Performance on WSL</h2>
<p>Now that I had a streamlined process for setting everything up on Ubuntu, getting WSL up and running was easy. It only required a subset of the steps compared to a bare-metal Ubuntu installation. I used the default <a href="https://apps.microsoft.com/store/detail/ubuntu/9PDXGNCFSCZV">Ubuntu terminal environment</a> and stuck with the included kernel.</p>
<p>Total training time in WSL is <code>‚âà34%</code> slower than in native Ubuntu with the dataset in the same virtual hard disk (VHD) that stores the WSL-Ubuntu install.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-wsl.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I remember getting a similar performance hit the last time I used WSL with the Titan RTX. It‚Äôs one of the reasons I prefer to dual-boot Windows and Ubuntu.</p>
<p>Here is a screenshot of the GPU usage when running the training notebook on the A770 in WSL:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/task-manager-pytorch-arc-a770-wsl-gpu-usage.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>There is an additional <code>‚âà20%</code> increase in training time when storing the dataset outside the VHD with the WSL-Ubuntu install.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-2/images/arc-a770-pytorch-training-session-wsl-external-dataset.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>One workaround is to <a href="https://woshub.com/move-wsl-another-drive-windows/">move the WSL installation</a> to a larger drive if your <code>C</code> drive has limited space.</p>
<p>The performance hit makes it hard to recommend WSL for deep learning tasks. On top of that, the <a href="https://christianjmills.com/posts/pytorch-cuda-wsl2/#the-headaches">issues</a> I encountered when I first tested using PyTorch on WSL2 in 2020 are still present, at least on Windows 10.</p>
<p>Therefore, I recommend using a bare-metal installation to get the most out of your hardware. The Ubuntu website provides <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">a step-by-step guide</a> to installing Ubuntu on your PC, and you can install it alongside an existing operating system.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>My experience with the PyTorch-DirectML package and the first version of Intel‚Äôs extension left me thinking it would be a while before the Arc GPUs became viable options for deep learning.</p>
<p>Several months later, my initial attempts to get everything working last week had me thinking it would be even longer still. Fortunately, once you know the proper steps, setting everything up is relatively straightforward.</p>
<p>While there is much more testing to do, I believe the Arc GPUs are now credible options for deep learning.</p>
<p>There are likely still edge cases or certain operations that cause problems, and I‚Äôll make updates to this post if I encounter any. I‚Äôll also try to keep the <a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">setup tutorial</a> updated as new versions of Intel‚Äôs PyTorch extension come out.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>ubuntu</category>
  <category>wsl2</category>
  <category>image-classification</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-2/index.html</guid>
  <pubDate>Tue, 30 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Hands-On Hand Gesture Recognition: Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading and Exploring the Dataset</li>
<li>Selecting a Model</li>
<li>Preparing the Data</li>
<li>Fine-tuning the Model</li>
<li>Making Predictions with the Model</li>
<li>Exploring the In-Browser Demo</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to fine-tuning image classifiers with <a href="https://pytorch.org/">PyTorch</a> and the <a href="https://github.com/huggingface/pytorch-image-models">timm library</a>! Fine-tuning refers to taking a pre-trained model and adjusting its parameters using a new dataset to enhance its performance on a specific task. We can leverage pre-trained models to achieve high performance even when working with limited data and computational resources. The timm library further aids our goal with its wide range of pre-trained models, catering to diverse needs and use cases.</p>
<p>In this tutorial, we develop a hand gesture recognizer. Hand gesture recognition has many real-world applications, ranging from human-computer interaction and sign-language translation to creating immersive gaming experiences. By the end of this tutorial, you will have a practical hand gesture recognizer and a solid foundation to apply to other image classification tasks. You‚Äôll also be able to interact with a model trained with this tutorial‚Äôs code through an in-browser demo that runs locally on your computer. Check out the video below for a quick preview.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./video/pytorch-timm-gesture-recognition-tutorial-demo.mp4" class="img-fluid" controls=""><a href="./video/pytorch-timm-gesture-recognition-tutorial-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>This guide is structured so that you don‚Äôt need a deep understanding of deep learning to complete it. If you follow the instructions, you can make it through! Yet, if you are eager to delve deeper into machine learning and deep learning, I recommend fast.ai‚Äôs <a href="https://course.fast.ai/">Practical Deep Learning for Coders</a> course. The course employs a hands-on approach that starts you off training models from the get-go and gradually digs deeper into the foundational concepts.</p>
<p>Let‚Äôs dive in and start training our hand gesture classifier!</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. If you‚Äôre new to these platforms or need some guidance setting up, I‚Äôve created dedicated tutorials to help you:</p>
<ul>
<li><p><a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a><strong>:</strong> This tutorial introduces you to Google Colab, a free, cloud-based Jupyter Notebook service. You‚Äôll learn to write, run, and share Python code directly in your browser.</p></li>
<li><p><a href="https://christianjmills.com/posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a><strong>:</strong> This tutorial guides you through installing the Mamba package manager on Windows, setting up a local Python environment, and installing PyTorch and Jupyter for machine learning projects.</p></li>
</ul>
<p>No matter your choice of environment, you‚Äôll be well-prepared to follow along with the rest of this tutorial. You can download the notebook from the tutorial‚Äôs GitHub repository or open the notebook directly in Google Colab using the links below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/pytorch-timm-image-classifier-training-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we‚Äôll create a Python environment and install the necessary libraries. Creating a dedicated environment will ensure our project has all its dependencies in one place and does not interfere with other Python projects you may have.</p>
<p>Please note that this section is for readers setting up a local Python environment on their machines. If you‚Äôre following this tutorial on a cloud-based platform like Google Colab, the platform already provides an isolated environment with many Python libraries pre-installed. In that case, you may skip this section and directly proceed to the code sections. However, you may still need to install certain libraries specific to this tutorial using similar <code>pip install</code> commands within your notebook. The dedicated Colab Notebook contains the instructions for running it in Google Colab.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we‚Äôll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>. Conda is a package manager that can create isolated Python environments. These environments are like sandboxed spaces where you can install Python libraries without affecting the rest of your system.</p>
<p>To create a new Python environment, open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
<p>The first command creates a new Python environment named <code>pytorch-env</code> using Python 3.10. The <code>-y</code> flag confirms that we want to proceed with the installation. After building the environment, the second command activates it, setting it as the active Python environment.</p>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>PyTorch is a popular open-source machine learning framework that enables users to perform tensor computations, build dynamic computational graphs, and implement custom machine learning architectures. To install PyTorch with CUDA support (which allows PyTorch to leverage NVIDIA GPUs for faster training), we‚Äôll use the following command:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Windows (CUDA)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu118</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu118</span></code></pre></div>
</div>
</div>
</div>
<p>Installation instructions for specific hardware and operating systems are available in the ‚ÄúGet Started‚Äù section of the PyTorch website.</p>
<ul>
<li><a href="https://pytorch.org/get-started/locally/">PyTorch: Get Started</a></li>
</ul>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project. If you‚Äôre new to Python or haven‚Äôt used some of these packages before, don‚Äôt worry.</p>
<p>Here‚Äôs a brief overview:</p>
<ul>
<li><a href="https://huggingface.co/docs/datasets/index"><code>datasets</code></a>: A library for accessing and sharing datasets for Audio, Computer Vision, and Natural Language Processing (NLP) tasks.</li>
<li><a href="https://jupyter.org/"><code>jupyter</code></a>: An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text.</li>
<li><a href="https://matplotlib.org/"><code>matplotlib</code></a>: This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation.</li>
<li><a href="https://pandas.pydata.org/"><code>pandas</code></a>: This package provides fast, powerful, and flexible data analysis and manipulation tools.</li>
<li><a href="https://pillow.readthedocs.io/en/stable/"><code>pillow</code></a>: The Python Imaging Library adds image processing capabilities.</li>
<li><a href="https://github.com/huggingface/pytorch-image-models"><code>timm</code></a>: The timm library provides state-of-the-art (SOTA) computer vision models, layers, utilities, optimizers, schedulers, data loaders, augmentations, and training/evaluation scripts.</li>
<li><a href="https://pytorch.org/torcheval/stable/"><code>torcheval</code></a>: A library that provides simple and easy-to-use tooling for evaluating PyTorch models.</li>
<li><a href="https://tqdm.github.io/"><code>tqdm</code></a>: A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python.</li>
<li><a href="https://jupyter-client.readthedocs.io/en/stable/"><code>Jupyter Client</code></a>: This package contains the reference implementation of the <a href="https://jupyter-client.readthedocs.io/en/latest/messaging.html">Jupyter protocol</a>. It also provides client and kernel management APIs for working with kernels. We will install an older version than the one included with Jupyter (&lt;8) to avoid an issue that causes the training notebook to freeze during training (<a href="https://discourse.jupyter.org/t/jupyter-notebook-zmq-message-arrived-on-closed-channel-error/17869">link</a>).</li>
<li><a href="https://pyzmq.readthedocs.io/en/latest/"><code>PyZMQ</code></a>: This package provides Python bindings for ZeroMQ, a lightweight and fast messaging implementation used by Jupyter Notebooks. We will install an older version than the one included with Jupyter (&lt;25) to avoid an issue that causes the training notebook to freeze during training (<a href="https://discourse.jupyter.org/t/jupyter-notebook-zmq-message-arrived-on-closed-channel-error/17869">link</a>).</li>
</ul>
<p>To install these additional libraries, we‚Äôll use the following command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install datasets jupyter matplotlib pandas pillow timm torcheval tqdm</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install older pyzmq and jupyter client versions</span></span>
<span id="cb6-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter_client&lt;8"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyzmq&lt;25"</span></span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>Finally, we will install some utility packages I made to help us handle images (<a href="https://cj-mills.github.io/cjm-pil-utils/"><code>cjm_pil_utils</code></a>), interact with PyTorch (<a href="https://cj-mills.github.io/cjm-pytorch-utils/"><code>cjm_pytorch_utils</code></a>), and work with pandas DataFrames (<a href="https://cj-mills.github.io/cjm-pandas-utils/"><code>cjm_pandas_utils</code></a>):</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install utility packages</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install cjm_pandas_utils cjm_pil_utils cjm_pytorch_utils</span></code></pre></div>
<p>Now, our environment is all setup and ready to go! Remember, these libraries are just tools. If you don‚Äôt fully understand them yet, don‚Äôt worry. As we go through the tutorial, we‚Äôll learn more about these tools and see them in action.</p>
</section>
<section id="launching-jupyter-notebook" class="level3">
<h3 class="anchored" data-anchor-id="launching-jupyter-notebook">Launching Jupyter Notebook</h3>
<p>Now that our environment is ready, it‚Äôs time to launch Jupyter Notebook. Jupyter Notebooks provide an interactive coding environment where we‚Äôll work for the rest of this tutorial. To launch Jupyter Notebook, navigate to the location where you have stored the tutorial notebook (if you downloaded it) from a terminal with the <code>pytorch-env</code> environment active, and type the following command:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<p>This command will open a new tab in your default web browser, showing the Jupyter file browser. From the Jupyter file browser, you can open the tutorial notebook or create a new one to start the next section. Remember: If you close your terminal, the Jupyter Notebook server will stop. So, keep your terminal running while you‚Äôre working on the tutorial.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment set up, it‚Äôs time to start the coding part of this tutorial. First, we will import the necessary Python packages into our Jupyter Notebook. Here‚Äôs a brief overview of how we‚Äôll use these packages:</p>
<ul>
<li><strong>HuggingFace Datasets dependencies</strong>: I host the dataset on <a href="https://huggingface.co/datasets/cj-mills/hagrid-classification-512p-no-gesture-150k-zip">HuggingFace Hub</a>, and this package allows us to load our dataset with a single line of code.</li>
<li><strong>matplotlib</strong>: We use the matplotlib package to explore the dataset samples and class distribution.</li>
<li><strong>NumPy</strong>: We‚Äôll use it to store PIL Images as arrays of pixel values.</li>
<li><strong>pandas</strong>: We use Pandas <code>DataFrame</code> and <code>Series</code> objects to format data as tables.</li>
<li><strong>PIL (Pillow)</strong>: We‚Äôll use it for opening and working with image files.</li>
<li><strong>Python Standard Library dependencies</strong>: These are built-in modules that come with Python. We‚Äôll use them for various tasks like handling file paths (<a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path"><code>pathlib.Path</code></a>), manipulating JSON files (<a href="https://docs.python.org/3/library/json.html"><code>json</code></a>), random number generation (<a href="https://docs.python.org/3/library/random.html"><code>random</code></a>), multiprocessing (<a href="https://docs.python.org/3/library/multiprocessing.html"><code>multiprocessing</code></a>), mathematical operations (<a href="https://docs.python.org/3/library/math.html"><code>math</code></a>), copying Python objects (<a href="https://docs.python.org/3/library/copy.html"><code>copy</code></a>), file matching patterns (<a href="https://docs.python.org/3/library/glob.html"><code>glob</code></a>), working with dates and times (<a href="https://docs.python.org/3/library/datetime.html"><code>datetime</code></a>), and interacting with the operating system (<a href="https://docs.python.org/3/library/os.html"><code>os</code></a>).</li>
<li><strong>PyTorch dependencies</strong>: We‚Äôll use PyTorch‚Äôs various modules for building our model, processing data, and training.</li>
<li><strong>timm library</strong>: We‚Äôll use the timm library to download and prepare a pre-trained model for fine-tuning.</li>
<li><strong>tqdm</strong>: We use the library to track the progress of longer processes like training.</li>
<li><strong>Utility functions</strong>: These are helper functions from the packages we installed earlier. They provide shortcuts for routine tasks and keep our code clean and readable.</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> copy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas</span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> set_seed, pil_to_tensor, tensor_to_pil, get_torch_device, denorm_img_tensor</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import HuggingFace Datasets dependencies</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy </span></span>
<span id="cb9-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import pandas module for data manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set options for Pandas DataFrame display</span></span>
<span id="cb9-30">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells in the DataFrame</span></span>
<span id="cb9-31">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all rows in the DataFrame</span></span>
<span id="cb9-32">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all columns in the DataFrame</span></span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-36"></span>
<span id="cb9-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import timm library</span></span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-43"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb9-44"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb9-46"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb9-47"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb9-49"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span>
<span id="cb9-50"></span>
<span id="cb9-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-52"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Having successfully imported the dependencies, we are ready to move to the next step.</p>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project. First, we set a seed for generating random numbers using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#set_seed"><code>set_seed</code></a> function from the <code>cjm_pytorch_utils</code> package.</p>
<section id="setting-a-random-number-seed" class="level3">
<h3 class="anchored" data-anchor-id="setting-a-random-number-seed">Setting a Random Number Seed</h3>
<p>A fixed seed value is helpful when training deep-learning models for reproducibility, debugging, and comparison. Having reproducible results allows others to confirm your findings. Using a fixed seed can make it easier to find bugs as it ensures the same inputs produce the same outputs. Likewise, using fixed seed values lets you compare performance between models and training parameters. That said, it‚Äôs often a good idea to test different seed values to see how your model‚Äôs performance varies between them. Also, don‚Äôt use a fixed seed value when you deploy the final model.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed for generating random numbers in PyTorch, NumPy, and Python's random module.</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb10-3">set_seed(seed)</span></code></pre></div>
</section>
<section id="setting-the-device-and-data-type" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-device-and-data-type">Setting the Device and Data Type</h3>
<p>Next, we determine the device to run our computations on and the data type of our tensors using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#get_torch_device"><code>get_torch_device</code></a> function from the <code>cjm_pytorch_utils</code> package.</p>
<p>PyTorch can run on either a CPU or a GPU. The <code>get_torch_device</code> function will automatically check if a supported Nvidia or Mac GPU is available. Otherwise, it will use the CPU. We‚Äôll use the device and type variables to ensure all tensors and model weights are on the correct device and have the same data type. Otherwise, we might get errors.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb11-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb11-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
<hr>
</section>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We‚Äôll then set up a directory for our project to store our results and other related files. The code currently creates the folder in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb13-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-timm-image-classifier"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb13-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb13-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(project_dir)</span></code></pre></div>
<pre class="text"><code>pytorch-timm-image-classifier</code></pre>
<hr>
<p>We also need a place to store our datasets. We‚Äôre going to create a directory for this purpose. If running locally, select a suitable folder location to store the dataset. For a cloud service like Google Colab, you can set it to the current directory.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb15-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/980_1TB_1/Datasets/"</span>)</span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb15-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dataset Directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Dataset Directory: /mnt/980_1TB_1/Datasets</code></pre>
<hr>
<p>Double-check the project and dataset directories exist in the specified paths and that you can add files to them before continuing.</p>
<p>At this point, our environment is set up and ready to go. We‚Äôve set our random seed, determined our computation device, and set up directories for our project and dataset. In the next section, we will download and explore the dataset.</p>
</section>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>Now that we set up our project, we can start working with our dataset. The dataset we‚Äôll use is a downscaled subset of <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset) that I modified for image classification tasks. The dataset contains images for <code>18</code> distinct hand gestures and an additional <code>no_gesture</code> class for idle hands. The dataset is approximately <code>3.8 GB</code>, but you will need about <code>7.6 GB</code> to store the archive file and extracted dataset.</p>
<ul>
<li><strong>HuggingFace Hub Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/hagrid-classification-512p-no-gesture-150k-zip">cj-mills/hagrid-classification-512p-no-gesture-150k-zip</a></li>
</ul>
<p>The following steps demonstrate how to load the dataset from the HuggingFace Hub, inspect the dataset, and visualize some sample images.</p>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>We‚Äôll first set up the path for our dataset. We‚Äôll construct the HuggingFace Hub dataset name by combining the username and the dataset name. We then define where to cache the dataset locally.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb17-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hagrid-classification-512p-no-gesture-150k-zip'</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb17-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb17-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be cached</span></span>
<span id="cb17-9">cache_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dataset Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cache_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>HuggingFace Dataset: cj-mills/hagrid-classification-512p-no-gesture-150k-zip
Dataset Path: /mnt/980_1TB_1/Datasets/hagrid-classification-512p-no-gesture-150k-zip</code></pre>
<hr>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We‚Äôll now download the dataset from the HuggingFace Hub using the <code>load_dataset</code> function. We‚Äôll set the number of worker processes for loading data to the number of CPU cores available on your machine.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data. This should be the number of CPUs available.</span></span>
<span id="cb19-2">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dataset from Hugging Face Hub</span></span>
<span id="cb19-5">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(hf_dataset, </span>
<span id="cb19-6">                       split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, </span>
<span id="cb19-7">                       cache_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cache_dir, </span>
<span id="cb19-8">                       num_proc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print dataset summary</span></span>
<span id="cb19-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dataset)</span></code></pre></div>
<pre class="text"><code>Dataset({
    features: ['image', 'label'],
    num_rows: 153735
})</code></pre>
<hr>
<p>The dataset summary indicates there are 153,735 samples. Each sample has an image and a label. The label values for each dataset sample are index values corresponding to class names. For example, the label value <code>0</code> corresponds to the <code>call</code> gesture.</p>
</section>
<section id="deleting-the-archive-file" class="level3">
<h3 class="anchored" data-anchor-id="deleting-the-archive-file">Deleting the Archive File</h3>
<p>After loading the dataset, we can delete the downloaded archive file to free up some space. We define a helper function, <code>delete_files_in_directory</code>, which deletes all files in a specified directory.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> delete_files_in_directory(directory: Path):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Delete all files in a given directory.</span></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        directory (Path): The directory in which to delete files.</span></span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Raises:</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Exception: If there's an error when trying to delete a file, an exception is raised and caught.</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The exception is then logged and the process continues with the remaining files.</span></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> directory.exists():</span>
<span id="cb21-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Directory </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>directory<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist."</span>)</span>
<span id="cb21-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb21-15">    </span>
<span id="cb21-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> directory.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>):</span>
<span id="cb21-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> item.is_file():</span>
<span id="cb21-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb21-19"></span>
<span id="cb21-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb21-21">            item.unlink()</span>
<span id="cb21-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb21-23">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unable to delete file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>We‚Äôll then use this function to delete the archive file.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">download_directory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(os.path.join(cache_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"downloads"</span>))</span>
<span id="cb22-2">delete_files_in_directory(download_directory)</span></code></pre></div>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>Next, we get the names of all the classes in our dataset and inspect the distribution of images among these classes. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].names</span>
<span id="cb23-2"></span>
<span id="cb23-3">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]).value_counts().sort_index()</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb24-4">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb24-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb24-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb24-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb24-8">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_names)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb24-9">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb24-10"></span>
<span id="cb24-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate x-axis labels</span></span>
<span id="cb24-12">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_27_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Each class, excluding the <code>no_gesture</code> class, has roughly the same number of samples. The <code>no_gesture</code> class contains approximately four times as many images because of the immense variety of non-matching hand positions.</p>
</section>
</section>
<section id="visualizing-sample-images" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-sample-images">Visualizing Sample Images</h3>
<p>Lastly, we will visualize the first sample image of each class in our dataset. Visualizing the samples helps us get a feel for the kind of images we‚Äôre working with and whether they‚Äôre suitable for the task at hand.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get indices for the first sample in the dataset for each class</span></span>
<span id="cb25-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].index(value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]]</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of rows and columns</span></span>
<span id="cb25-5">grid_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.floor(math.sqrt(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(indices)))</span>
<span id="cb25-6">n_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(indices) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb25-7">n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_size</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list to store the first image found for each class</span></span>
<span id="cb25-10">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[indices][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb25-11">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[indices][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span>
<span id="cb25-12"></span>
<span id="cb25-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a figure for the grid</span></span>
<span id="cb25-14">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(n_rows, n_cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb25-15"></span>
<span id="cb25-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(axs.flatten()):</span>
<span id="cb25-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If we have an image for this subplot</span></span>
<span id="cb25-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> images[i]:</span>
<span id="cb25-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the image to the subplot</span></span>
<span id="cb25-20">        ax.imshow(np.array(images[i]))</span>
<span id="cb25-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the title to the corresponding class name</span></span>
<span id="cb25-22">        ax.set_title(class_names[labels[i]])</span>
<span id="cb25-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the axis</span></span>
<span id="cb25-24">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb25-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb25-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If no image, hide the subplot</span></span>
<span id="cb25-27">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb25-28"></span>
<span id="cb25-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the grid</span></span>
<span id="cb25-30">plt.tight_layout()</span>
<span id="cb25-31">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_29_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized some sample images. In the next section, we will select and load our model.</p>
</section>
</section>
<section id="selecting-a-model" class="level2">
<h2 class="anchored" data-anchor-id="selecting-a-model">Selecting a Model</h2>
<p>Choosing a suitable model for your task is crucial for the success of your machine learning project. The model you select will depend on several factors, including the size and nature of your dataset, the problem you‚Äôre trying to solve, and the computational resources you have at your disposal.</p>
<section id="exploring-available-models" class="level3">
<h3 class="anchored" data-anchor-id="exploring-available-models">Exploring Available Models</h3>
<p>You can explore the pretrained models available in the timm library using the <code>timm.list_models()</code> method. The library has hundreds of models, so we‚Äôll narrow our search to the <a href="https://arxiv.org/abs/1512.03385">ResNet18</a> family of models. ResNet 18 models are popular for image classification tasks due to their balance of accuracy and speed.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet18*'</span>, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
resnet18.a1_in1k
</td>
</tr>
<tr>
<th>
1
</th>
<td>
resnet18.a2_in1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
resnet18.a3_in1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
resnet18.fb_ssl_yfcc100m_ft_in1k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
resnet18.fb_swsl_ig1b_ft_in1k
</td>
</tr>
<tr>
<th>
5
</th>
<td>
resnet18.gluon_in1k
</td>
</tr>
<tr>
<th>
6
</th>
<td>
resnet18.tv_in1k
</td>
</tr>
<tr>
<th>
7
</th>
<td>
resnet18d.ra2_in1k
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="choosing-the-resnet18-d-model" class="level3">
<h3 class="anchored" data-anchor-id="choosing-the-resnet18-d-model">Choosing the ResNet18-D Model</h3>
<p>For this tutorial, I went with the pretrained <a href="https://github.com/huggingface/pytorch-image-models/blob/4b8cfa6c0a355a9b3cb2a77298b240213fb3b921/timm/models/resnet.py#L869">ResNet 18-D</a> model. This model‚Äôs balance of accuracy and speed makes it suitable for real-time applications, such as hand gesture recognition. While this model is a good all-rounder, others may work better for specific applications. For example, some models are designed to run on mobile devices and may sacrifice some accuracy for improved performance. Whatever your requirements are, the timm library likely has a suitable model for your needs. Feel free to try different models and see how they compare.</p>
</section>
<section id="inspecting-the-resnet18-d-model-configuration" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-resnet18-d-model-configuration">Inspecting the ResNet18-D Model Configuration</h3>
<p>Next, we will inspect the configuration of our chosen model. The model config gives us information about the pretraining process for the model.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the resnet module</span></span>
<span id="cb27-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resnet</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the ResNet model variant to use</span></span>
<span id="cb27-5">resnet_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet18d'</span></span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the default configuration of the chosen model</span></span>
<span id="cb27-8">model_cfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet.default_cfgs[resnet_model].default.to_dict()</span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the default configuration values</span></span>
<span id="cb27-11">pd.DataFrame.from_dict(model_cfg, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/resnet18d_ra2-48a79e06.pth
</td>
</tr>
<tr>
<th>
hf_hub_id
</th>
<td>
timm/
</td>
</tr>
<tr>
<th>
custom_load
</th>
<td>
False
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
test_input_size
</th>
<td>
(3, 288, 288)
</td>
</tr>
<tr>
<th>
fixed_input_size
</th>
<td>
False
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
test_crop_pct
</th>
<td>
0.95
</td>
</tr>
<tr>
<th>
crop_mode
</th>
<td>
center
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv1.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
fc
</td>
</tr>
<tr>
<th>
origin_url
</th>
<td>
https://github.com/huggingface/pytorch-image-models
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="retrieving-normalization-statistics" class="level3">
<h3 class="anchored" data-anchor-id="retrieving-normalization-statistics">Retrieving Normalization Statistics</h3>
<p>Before we can use the ResNet18-D model, we need to normalize our dataset. Normalization is a process that changes the range of pixel intensity values to make the neural network converge faster during training. It is performed by subtracting the mean from the pixel values and dividing by the standard deviation of the dataset. The mean and standard deviation values specific to the dataset used in the pretraining process of our model are called normalization statistics. To do this, we will retrieve the normalization statistics (mean and std) specific to our pretrained model.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve normalization statistics (mean and std) specific to the pretrained model</span></span>
<span id="cb28-2">mean, std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_cfg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>], model_cfg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>]</span>
<span id="cb28-3">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mean, std)</span>
<span id="cb28-4">norm_stats</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<hr>
</section>
<section id="loading-the-resnet18-d-model" class="level3">
<h3 class="anchored" data-anchor-id="loading-the-resnet18-d-model">Loading the ResNet18-D Model</h3>
<p>We can now load our model. We‚Äôll set the number of output classes equal to the number of image classes in our dataset. We‚Äôll also specify the device and data type for the model.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pretrained ResNet model with the number of output classes equal to the number of class names</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'timm.create_model' function automatically downloads and initializes the pretrained weights</span></span>
<span id="cb30-3">resnet18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timm.create_model(resnet_model, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the device and data type for the model</span></span>
<span id="cb30-6">resnet18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet18.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add attributes to store the device and model name for later reference</span></span>
<span id="cb30-9">resnet18.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb30-10">resnet18.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet_model</span></code></pre></div>
</section>
<section id="selecting-the-model" class="level3">
<h3 class="anchored" data-anchor-id="selecting-the-model">Selecting the Model</h3>
<p>With our model loaded, we can now select it for training.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet18</span></code></pre></div>
</section>
<section id="summarizing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-the-model">Summarizing the Model</h3>
<p>Finally, let‚Äôs generate a summary of our model. The summary gives us an overview of its structure and performance characteristics.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the input to the model</span></span>
<span id="cb32-2">test_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a summary of the model as a Pandas DataFrame</span></span>
<span id="cb32-5">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model, [test_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the summary to only contain Conv2d layers and the model</span></span>
<span id="cb32-8">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[(summary_df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Conv2d'</span>)]</span>
<span id="cb32-9"></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the column "Contains Uninitialized Parameters?"</span></span>
<span id="cb32-11">summary_df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
<th>
Backward FLOPs
</th>
<th>
In size
</th>
<th>
Out size
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
ResNet
</td>
<td>
11.2 M
</td>
<td>
11.2 M
</td>
<td>
44.9 M
</td>
<td>
2.7 G
</td>
<td>
5.3 G
</td>
<td>
[1, 3, 256, 256]
</td>
<td>
[1, 19]
</td>
</tr>
<tr>
<th>
2
</th>
<td>
Conv2d
</td>
<td>
864
</td>
<td>
864
</td>
<td>
3.5 K
</td>
<td>
14.2 M
</td>
<td>
14.2 M
</td>
<td>
[1, 3, 256, 256]
</td>
<td>
[1, 32, 128, 128]
</td>
</tr>
<tr>
<th>
5
</th>
<td>
Conv2d
</td>
<td>
9.2 K
</td>
<td>
9.2 K
</td>
<td>
36.9 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 32, 128, 128]
</td>
<td>
[1, 32, 128, 128]
</td>
</tr>
<tr>
<th>
8
</th>
<td>
Conv2d
</td>
<td>
18.4 K
</td>
<td>
18.4 K
</td>
<td>
73.7 K
</td>
<td>
301 M
</td>
<td>
603 M
</td>
<td>
[1, 32, 128, 128]
</td>
<td>
[1, 64, 128, 128]
</td>
</tr>
<tr>
<th>
14
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
19
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
23
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
28
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
33
</th>
<td>
Conv2d
</td>
<td>
73.7 K
</td>
<td>
73.7 K
</td>
<td>
294 K
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
38
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
43
</th>
<td>
Conv2d
</td>
<td>
8.2 K
</td>
<td>
8.2 K
</td>
<td>
32.8 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 64, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
46
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
51
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
56
</th>
<td>
Conv2d
</td>
<td>
294 K
</td>
<td>
294 K
</td>
<td>
1.2 M
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
61
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
66
</th>
<td>
Conv2d
</td>
<td>
32.8 K
</td>
<td>
32.8 K
</td>
<td>
131 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 128, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
69
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
74
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
79
</th>
<td>
Conv2d
</td>
<td>
1.2 M
</td>
<td>
1.2 M
</td>
<td>
4.7 M
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
84
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
89
</th>
<td>
Conv2d
</td>
<td>
131 K
</td>
<td>
131 K
</td>
<td>
524 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 256, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
92
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
97
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>We can see from the summary that the ResNet18-D model is about <code>45 MB</code> in size and needs to perform about <code>2.7 billion</code> floating-point operations to process a single <code>256x256</code> input image. For context, the larger mid-size ResNet50-D model is about <code>95 MB</code> and performs about <code>5.7 billion</code> floating-point ops for the same image. On the other end, the tiniest variant of the mobile-optimized MobileNetV3 model is <code>2.4 MB</code> and only takes about <code>30 million</code> floating-point operations.</p>
<p>That is valuable information when considering how we will deploy the fine-tuned model. For example, the in-browser demo I mentioned will first download the model to your local machine. The larger the model, the longer it will take for the demo to start. Likewise, the number of floating-point operations will influence what hardware can run the model smoothly. For real-time applications, even milliseconds can matter for inference speed. Inference involves making predictions with a trained model on new, unseen data.</p>
<p>The model architecture also influences inference speed beyond the raw number of floating-point operations. The MobileNetv3 architecture is tuned to mobile phone CPUs, while the ResNet architectures can better leverage larger GPUs.</p>
<p>That completes the model selection and setup. In the next section, we will prepare our dataset for training.</p>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>Next, we will prepare our data for the model training process. The data preparation involves several steps, such as applying data augmentation techniques, setting up the train-validation split for the dataset, resizing and padding the images, defining the training dataset class, and initializing DataLoaders to feed data to the model.</p>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>Let‚Äôs begin by selecting a random image from the dataset to visualize the data preparation steps.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select a random item from the dataset</span></span>
<span id="cb33-2">item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(dataset)</span>
<span id="cb33-3"></span>
<span id="cb33-4">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_names[item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]]</span>
<span id="cb33-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb33-6">    </span>
<span id="cb33-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-8">    </span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb33-10">sample_img</span></code></pre></div>
<pre class="text"><code>Image Label: stop</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_47_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Next, we‚Äôll define what data augmentations to apply to images during training. Data augmentation is a technique that effectively expands the size and diversity of a dataset by creating variations of existing samples. It helps the model learn general features instead of memorizing specific examples.</p>
<p>We‚Äôll use <a href="https://arxiv.org/abs/2103.10158">trivial augmentation</a>, which applies a single, random transform to each image. This simple method can be highly effective for data augmentation.</p>
<p>However, we‚Äôll need to create a custom version of the <a href="https://pytorch.org/vision/main/generated/torchvision.transforms.TrivialAugmentWide.html">TrivialAugmentWide</a> class from PyTorch‚Äôs transforms module, as some of the default parameters are not ideal for this dataset. This custom class defines a dictionary of operations for augmenting the images, and we can customize each operation‚Äôs parameters.</p>
<section id="trivial-augmentation" class="level4">
<h4 class="anchored" data-anchor-id="trivial-augmentation">Trivial Augmentation</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Tensor</span>
<span id="cb35-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict, Tuple, List, Optional</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This class extends the TrivialAugmentWide class provided by PyTorch's transforms module.</span></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TrivialAugmentWide is an augmentation policy randomly applies a single augmentation to each image.</span></span>
<span id="cb35-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CustomTrivialAugmentWide(transforms.TrivialAugmentWide):</span>
<span id="cb35-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The _augmentation_space method defines a custom augmentation space for the augmentation policy.</span></span>
<span id="cb35-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method returns a dictionary where each key is the name of an augmentation operation and </span></span>
<span id="cb35-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the corresponding value is a tuple of a tensor and a boolean value.</span></span>
<span id="cb35-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The tensor defines the magnitude of the operation, and the boolean defines  </span></span>
<span id="cb35-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># whether to perform the operation in both the positive and negative directions (True)</span></span>
<span id="cb35-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or only in the positive direction (False).</span></span>
<span id="cb35-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _augmentation_space(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_bins: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Tuple[Tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]]:</span>
<span id="cb35-14">        </span>
<span id="cb35-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define custom augmentation space</span></span>
<span id="cb35-16">        custom_augmentation_space <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb35-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity operation doesn't change the image</span></span>
<span id="cb35-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Identity"</span>: (torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb35-19">            </span>
<span id="cb35-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distort the image along the x or y axis, respectively.</span></span>
<span id="cb35-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ShearX"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ShearY"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-23"></span>
<span id="cb35-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move the image along the x or y axis, respectively.</span></span>
<span id="cb35-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TranslateX"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TranslateY"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-27"></span>
<span id="cb35-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate operation: rotates the image.</span></span>
<span id="cb35-29">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rotate"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-30"></span>
<span id="cb35-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust brightness, color, contrast,and sharpness respectively.</span></span>
<span id="cb35-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brightness"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Color"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contrast"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sharpness"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb35-36"></span>
<span id="cb35-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduce the number of bits used to express the color in each channel of the image.</span></span>
<span id="cb35-38">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterize"</span>: (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (torch.arange(num_bins) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((num_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb35-39"></span>
<span id="cb35-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invert all pixel values above a threshold.</span></span>
<span id="cb35-41">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solarize"</span>: (torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, num_bins), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb35-42"></span>
<span id="cb35-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximize the image contrast by setting the darkest color to black and the lightest to white.</span></span>
<span id="cb35-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AutoContrast"</span>: (torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb35-45"></span>
<span id="cb35-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Equalize the image histogram to improve its contrast.</span></span>
<span id="cb35-47">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Equalize"</span>: (torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb35-48">        }</span>
<span id="cb35-49">        </span>
<span id="cb35-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function returns the dictionary of operations.</span></span>
<span id="cb35-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> custom_augmentation_space</span></code></pre></div>
<p>You can test the custom augmentation method by applying it to the sample image and displaying the result. Remember, the augmentation should be different each time we use it.</p>
</section>
<section id="test-the-transform" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transform">Test the transform</h4>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a TrivialAugmentWide object</span></span>
<span id="cb36-2">trivial_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomTrivialAugmentWide()</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a tensor</span></span>
<span id="cb36-5">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb36-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the TrivialAugmentWide to the tensor</span></span>
<span id="cb36-9">tensor_to_pil(trivial_aug(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_51_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="training-validation-split" class="level3">
<h3 class="anchored" data-anchor-id="training-validation-split">Training-Validation Split</h3>
<p>Next, we‚Äôll split the dataset into training and validation sets. The model will use the training set to update its parameters, and we will use the validation set to evaluate the model‚Äôs performance on data it has not seen before. Validation sets are needed when training models because we want to verify the model can generalize well to new data before we deploy it.</p>
<p><strong>Get training and validation sets</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for validation</span></span>
<span id="cb38-2">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the dataset into training and validation sets</span></span>
<span id="cb38-5">train_split, val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.train_test_split(test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_pct).values()</span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb38-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_split), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_split)</span></code></pre></div>
<pre class="text"><code>(138361, 15374)</code></pre>
<hr>
</section>
<section id="image-resizing-and-padding" class="level3">
<h3 class="anchored" data-anchor-id="image-resizing-and-padding">Image Resizing and Padding</h3>
<p>Next, we define a class called <code>ResizePad</code> to resize and pad images, making them a uniform size. Making all the input images the same size allows us to feed samples to the model in batches, allowing us the more efficiently leverage our GPU.</p>
<section id="resize-pad-transform" class="level4">
<h4 class="anchored" data-anchor-id="resize-pad-transform">Resize Pad Transform</h4>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ResizePad(nn.Module):</span>
<span id="cb40-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, padding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edge'</span>):</span>
<span id="cb40-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that resizes an image tensor and adds padding to make it a square tensor.</span></span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_sz (int, optional): The size of the square tensor.</span></span>
<span id="cb40-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        padding_mode (str, optional): The padding mode used when adding padding to the tensor.</span></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb40-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb40-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_sz</span>
<span id="cb40-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> padding_mode</span>
<span id="cb40-13">        </span>
<span id="cb40-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb40-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the width and height of the image tensor</span></span>
<span id="cb40-16">        w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.get_image_size(x)</span>
<span id="cb40-17">        </span>
<span id="cb40-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image tensor so that its minimum dimension is equal to `max_sz`</span></span>
<span id="cb40-19">        size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(w, h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(w, h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz))</span>
<span id="cb40-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.resize(x, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb40-21">        </span>
<span id="cb40-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add padding to make the image tensor a square</span></span>
<span id="cb40-23">        w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.get_image_size(x)</span>
<span id="cb40-24">        offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(w, h)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb40-25">        padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, offset] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> w <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [offset, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb40-26">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.pad(x, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>padding, padding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_mode)</span>
<span id="cb40-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.resize(x, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb40-28">        </span>
<span id="cb40-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
<p>For training, we‚Äôll resize and pad the images to <code>288x288</code>. That should be large enough for the model to get adequate detail while keeping training time low.</p>
</section>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>)</span></code></pre></div>
<p>You can test the ResizePad transform on the sample image to see how it resizes and pads the sample. The following code crops the sample image to make the padding more apparent.</p>
</section>
<section id="test-the-transform-1" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transform-1">Test the transform</h4>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Source image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the source image</span></span>
<span id="cb42-4">w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.size</span>
<span id="cb42-5">cropped_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.crop([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, w, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb42-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cropped image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cropped_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-7"></span>
<span id="cb42-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizePad` object</span></span>
<span id="cb42-9">resize_pad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz))</span>
<span id="cb42-10"></span>
<span id="cb42-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the cropped image to a tensor</span></span>
<span id="cb42-12">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(cropped_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb42-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cropped tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-14"></span>
<span id="cb42-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize and pad the tensor</span></span>
<span id="cb42-16">resized_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_pad(img_tensor)</span>
<span id="cb42-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Padded tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>resized_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-18"></span>
<span id="cb42-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply random pixel copy to the resized and padded tensor</span></span>
<span id="cb42-20">tensor_to_pil(resized_tensor)</span></code></pre></div>
<pre class="text"><code>Source image: (512, 512)
Cropped image: (512, 256)
Cropped tensor: torch.Size([1, 3, 256, 512])
Padded tensor: torch.Size([1, 3, 288, 288])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_59_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>Next, we define a custom PyTorch Dataset class that will get used in a <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader">DataLoader</a> to create batches. This class fetches a sample from the dataset at a given index and returns the transformed image and its corresponding label index.</p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ImageDataset(Dataset):</span>
<span id="cb44-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""A PyTorch Dataset class to be used in a DataLoader to create batches.</span></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb44-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataset: A list of dictionaries containing 'label' and 'image' keys.</span></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        classes: A list of class names.</span></span>
<span id="cb44-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tfms: A torchvision.transforms.Compose object combining all the desired transformations.</span></span>
<span id="cb44-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb44-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset, classes, tfms):</span>
<span id="cb44-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb44-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes</span>
<span id="cb44-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms</span>
<span id="cb44-13">        </span>
<span id="cb44-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb44-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the total number of samples in this dataset."""</span></span>
<span id="cb44-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset)</span>
<span id="cb44-17"></span>
<span id="cb44-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb44-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fetches a sample from the dataset at the given index.</span></span>
<span id="cb44-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb44-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb44-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            idx: The index to fetch the sample from.</span></span>
<span id="cb44-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            </span></span>
<span id="cb44-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb44-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            A tuple of the transformed image and its corresponding label index.</span></span>
<span id="cb44-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb44-27">        sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset[idx]</span>
<span id="cb44-28">        image, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>], sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span>
<span id="cb44-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tfms(image), label</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>We‚Äôll then define the transformations for the training and validation datasets. Note that we only apply data augmentation to the training dataset. Both datasets will have their images resized and padded and the pixel values normalized.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note: Data augmentation is performed only on the training dataset</span></span>
<span id="cb45-3">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb45-4">    ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)),</span>
<span id="cb45-5">    trivial_aug,</span>
<span id="cb45-6">    transforms.ToTensor(),</span>
<span id="cb45-7">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb45-8">])</span>
<span id="cb45-9"></span>
<span id="cb45-10">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb45-11">    ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)),</span>
<span id="cb45-12">    transforms.ToTensor(),</span>
<span id="cb45-13">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb45-14">])</span></code></pre></div>
</section>
<section id="initialize-datasets" class="level3">
<h3 class="anchored" data-anchor-id="initialize-datasets">Initialize Datasets</h3>
<p>We instantiate the PyTorch datasets using the dataset splits, class names, and defined transformations.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the datasets using the defined transformations</span></span>
<span id="cb46-2">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataset(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_split, classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names, tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_tfms)</span>
<span id="cb46-3">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataset(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_split, classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names, tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_tfms)</span>
<span id="cb46-4"></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb46-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training dataset size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb46-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Validation dataset size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<pre class="text"><code>Training dataset size: 138361
Validation dataset size: 15374</code></pre>
<hr>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>Let‚Äôs inspect a sample from the training and validation sets to verify that the data preparation steps get applied correctly.</p>
<p><strong>Inspect training set sample</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the label for the first image in the training set</span></span>
<span id="cb48-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>classes[train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first image in the training set</span></span>
<span id="cb48-5">tensor_to_pil(denorm_img_tensor(train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats))</span></code></pre></div>
<pre class="text"><code>Label: dislike</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_67_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Inspect validation set sample</strong></p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the label for the first image in the validation set</span></span>
<span id="cb50-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>classes[valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb50-3"></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first image in the validation set</span></span>
<span id="cb50-5">tensor_to_pil(denorm_img_tensor(valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats))</span></code></pre></div>
<pre class="text"><code>Label: no_gesture</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_69_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We then define the batch size for training and initialize the <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset">DataLoaders</a>, which are used to efficiently create batches of data for the model to process during training.</p>
</section>
<section id="training-batch-size" class="level3">
<h3 class="anchored" data-anchor-id="training-batch-size">Training Batch Size</h3>
<p>Next, we set the batch size for training. This number indicates how many sample images get fed to the model at once. The larger the batch size, the more GPU memory we need. The current batch size should be fine for most modern GPUs. If you still get an out-of-memory error, try lowering the batch size to <code>8</code>, then restart the Jupyter Notebook.</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span></code></pre></div>
</section>
<section id="initialize-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataloaders">Initialize DataLoaders</h3>
<p>We initialize the DataLoaders for the training and validation datasets. We‚Äôll set the number of worker processes for loading data to the number of available CPUs.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data. This should be the number of CPUs available.</span></span>
<span id="cb53-2">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()</span>
<span id="cb53-3"></span>
<span id="cb53-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for DataLoader</span></span>
<span id="cb53-5">data_loader_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb53-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>: bs,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size for data loading</span></span>
<span id="cb53-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_workers'</span>: num_workers,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of subprocesses to use for data loading</span></span>
<span id="cb53-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'persistent_workers'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will not shutdown the worker processes after a dataset has been consumed once. This allows to maintain the worker dataset instances alive.</span></span>
<span id="cb53-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will copy Tensors into CUDA pinned memory before returning them. Useful when using GPU.</span></span>
<span id="cb53-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory_device'</span>: device,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specifies the device where the data should be loaded. Commonly set to use the GPU.</span></span>
<span id="cb53-11">}</span>
<span id="cb53-12"></span>
<span id="cb53-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for training data. Data is shuffled for every epoch.</span></span>
<span id="cb53-14">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb53-15"></span>
<span id="cb53-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for validation data. Shuffling is not necessary for validation data.</span></span>
<span id="cb53-17">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params)</span>
<span id="cb53-18"></span>
<span id="cb53-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation DataLoaders</span></span>
<span id="cb53-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in train DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb53-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in validation DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<pre class="text"><code>Number of batches in train DataLoader: 4324
Number of batches in validation DataLoader: 481</code></pre>
<hr>
<p>That completes the data preparation. Now we can finally train our hand gesture recognizer.</p>
</section>
</section>
<section id="fine-tuning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the Model</h2>
<p>In this section, we will implement the training code and fine-tune our model. The training process revolves around the concept of an ‚Äòepoch‚Äô. Each epoch represents one complete pass through the entire training and validation datasets. To help with this, we will define a function called <code>run_epoch</code> to handle a single training/validation epoch and one called <code>train_loop</code> to execute the main training loop.</p>
<section id="define-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="define-the-training-loop">Define the Training Loop</h3>
<p>Let‚Äôs start by defining the <code>run_epoch</code> function. This function runs a single training or validation epoch and calculates the loss and performance metric for the given dataset. The term ‚Äòloss‚Äô refers to a number representing how far our model‚Äôs predictions are from the actual values. The goal of training is to minimize this value. We use the <code>autocast</code> context manager to perform mixed precision training. Mixed-precision training involves performing some operations in <code>16-bit</code> precision to speed up training and reduce memory requirements. Modern GPUs tend to have specialized hardware to accelerate these lower-precision operations, and this feature allows us to utilize that.</p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to run a single training/validation epoch</span></span>
<span id="cb55-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_epoch(model, dataloader, optimizer, metric, lr_scheduler, device, scaler, is_training):</span>
<span id="cb55-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set model to training mode if 'is_training' is True, else set to evaluation mode</span></span>
<span id="cb55-4">    model.train() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb55-5">    </span>
<span id="cb55-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset the performance metric</span></span>
<span id="cb55-7">    metric.reset()</span>
<span id="cb55-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the average loss for the current epoch </span></span>
<span id="cb55-9">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb55-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize progress bar with total number of batches in the dataloader</span></span>
<span id="cb55-11">    progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eval"</span>)</span>
<span id="cb55-12">    </span>
<span id="cb55-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over data batches</span></span>
<span id="cb55-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch_id, (inputs, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb55-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move inputs and targets to the specified device (e.g., GPU)</span></span>
<span id="cb55-16">        inputs, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device), targets.to(device)</span>
<span id="cb55-17">        </span>
<span id="cb55-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enables gradient calculation if 'is_training' is True</span></span>
<span id="cb55-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.set_grad_enabled(is_training):</span>
<span id="cb55-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatic Mixed Precision (AMP) context manager for improved performance</span></span>
<span id="cb55-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(device):</span>
<span id="cb55-22">                outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb55-23">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.functional.cross_entropy(outputs, targets) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss</span></span>
<span id="cb55-24">        </span>
<span id="cb55-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the performance metric</span></span>
<span id="cb55-26">        metric.update(outputs.detach().cpu(), targets.detach().cpu())</span>
<span id="cb55-27">        </span>
<span id="cb55-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If in training mode</span></span>
<span id="cb55-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb55-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> scaler <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If using AMP</span></span>
<span id="cb55-31">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the loss and backward propagation</span></span>
<span id="cb55-32">                scaler.scale(loss).backward()</span>
<span id="cb55-33">                scaler.step(optimizer) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make an optimizer step</span></span>
<span id="cb55-34">                scaler.update() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the scaler</span></span>
<span id="cb55-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb55-36">                loss.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward propagation</span></span>
<span id="cb55-37">                optimizer.step() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make an optimizer step</span></span>
<span id="cb55-38">            </span>
<span id="cb55-39">            optimizer.zero_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the gradients</span></span>
<span id="cb55-40">            lr_scheduler.step() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update learning rate</span></span>
<span id="cb55-41">        </span>
<span id="cb55-42">        loss_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item()</span>
<span id="cb55-43">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_item</span>
<span id="cb55-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update progress bar</span></span>
<span id="cb55-45">        progress_bar.set_postfix(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>metric.compute().item(), </span>
<span id="cb55-46">                                 loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_item, </span>
<span id="cb55-47">                                 avg_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(batch_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb55-48">                                 lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb55-49">        progress_bar.update()</span>
<span id="cb55-50">        </span>
<span id="cb55-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If loss is NaN or infinity, stop training</span></span>
<span id="cb55-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> math.isnan(loss_item) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss_item):</span>
<span id="cb55-53">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span>)</span>
<span id="cb55-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb55-55">        </span>
<span id="cb55-56">    progress_bar.close()</span>
<span id="cb55-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (batch_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>This function performs one pass through the given dataset. It first sets the model to training or evaluation mode depending on whether we are training or validating. Then, for each batch of data, it performs a forward pass (calculating the predictions of the model), computes the loss, and then, if in training mode, performs a backward pass to adjust the model‚Äôs parameters.</p>
<p>Next, we‚Äôll define the <code>train_loop</code> function, which executes the main training loop. It iterates over each epoch, runs through the training and validation sets, and saves the best model based on the validation loss.</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Main training loop</span></span>
<span id="cb56-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(model, train_dataloader, valid_dataloader, optimizer, metric, lr_scheduler, device, epochs, use_amp, checkpoint_path):</span>
<span id="cb56-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize GradScaler for Automatic Mixed Precision (AMP) if 'use_amp' is True</span></span>
<span id="cb56-4">    scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GradScaler() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> use_amp <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb56-5">    best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)</span>
<span id="cb56-6"></span>
<span id="cb56-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each epoch</span></span>
<span id="cb56-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>):</span>
<span id="cb56-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run training epoch and compute training loss</span></span>
<span id="cb56-10">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, train_dataloader, optimizer, metric, lr_scheduler, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb56-11">        </span>
<span id="cb56-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb56-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run validation epoch and compute validation loss</span></span>
<span id="cb56-14">            valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, valid_dataloader, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, metric, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, device, scaler, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb56-15">        </span>
<span id="cb56-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If current validation loss is lower than the best one so far, save model and update best loss</span></span>
<span id="cb56-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_loss:</span>
<span id="cb56-18">            best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span>
<span id="cb56-19">            metric_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric.compute().item()</span>
<span id="cb56-20">            torch.save(model.state_dict(), checkpoint_path)</span>
<span id="cb56-21">            </span>
<span id="cb56-22">            training_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb56-23">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: epoch,</span>
<span id="cb56-24">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: train_loss,</span>
<span id="cb56-25">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_loss'</span>: valid_loss, </span>
<span id="cb56-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metric_value'</span>: metric_value,</span>
<span id="cb56-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb56-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_architecture'</span>: model.name</span>
<span id="cb56-29">            }</span>
<span id="cb56-30">            </span>
<span id="cb56-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save best_loss and metric_value in a JSON file</span></span>
<span id="cb56-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(Path(checkpoint_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training_metadata.json'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb56-33">                json.dump(training_metadata, f)</span>
<span id="cb56-34"></span>
<span id="cb56-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If loss is NaN or infinity, stop training</span></span>
<span id="cb56-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(math.isnan(loss) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> math.isinf(loss) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [train_loss, valid_loss]):</span>
<span id="cb56-37">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span>)</span>
<span id="cb56-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb56-39"></span>
<span id="cb56-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If using AMP, clean up the unused memory in GPU</span></span>
<span id="cb56-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> use_amp:</span>
<span id="cb56-42">        torch.cuda.empty_cache()</span></code></pre></div>
<p>This function coordinates the training process. It runs the previously defined <code>run_epoch</code> function for each epoch in the training process, calculating the training and validation losses. It saves the model state as a checkpoint when the model achieves a lower validation loss. It will also save data such as the current epoch, loss values, metric value, learning rate, and model name to a JSON file. If the <code>run_epoch</code> function returns <code>NaN</code> (Not a Number) or infinity loss values, it halts the training process since this typically indicates an issue with the training.</p>
</section>
<section id="set-the-model-checkpoint-path" class="level3">
<h3 class="anchored" data-anchor-id="set-the-model-checkpoint-path">Set the Model Checkpoint Path</h3>
<p>Before we proceed with training, let‚Äôs generate a timestamp for the training session and create a directory to store the checkpoints. These checkpoints will allow us to save the model state periodically. That enables us to load the model checkpoint later to resume training, export the model to a different format or perform inference directly.</p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate timestamp for the training session (Year-Month-Day_Hour_Minute_Second)</span></span>
<span id="cb57-2">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H-%M-%S"</span>)</span>
<span id="cb57-3"></span>
<span id="cb57-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb57-5">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the checkpoint directory if it does not already exist</span></span>
<span id="cb57-8">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb57-9"></span>
<span id="cb57-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb57-11">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb57-12"></span>
<span id="cb57-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(checkpoint_path)</span></code></pre></div>
<pre class="text"><code>pytorch-timm-image-classifier/2023-05-22_16-35-03/resnet18d.pth</code></pre>
<hr>
</section>
<section id="configure-the-training-parameters" class="level3">
<h3 class="anchored" data-anchor-id="configure-the-training-parameters">Configure the Training Parameters</h3>
<p>Now, let‚Äôs configure the parameters for training. We‚Äôll define the learning rate, number of training epochs, optimizer, learning rate scheduler, and performance metric and check for CUDA-capable GPU availability. The learning rate determines how much we adjust the model in response to the estimated error each time the weights are updated. Choosing an optimal learning rate is essential for good model performance.</p>
<p>We‚Äôre using <a href="https://www.fast.ai/posts/2018-07-02-adam-weight-decay.html">AdamW</a> as our optimizer, which includes weight decay for regularization, and the <a href="https://sgugger.github.io/the-1cycle-policy.html">OneCycleLR</a> scheduler to adjust the learning rate during training. The one-cycle learning rate policy is a training approach where the learning rate starts low, increases gradually to a maximum, then decreases again, all within a single iteration or epoch, aiming to converge faster and yield better performance.</p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb59-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb59-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb59-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb59-9"></span>
<span id="cb59-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb59-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb59-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb59-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span>
<span id="cb59-14"></span>
<span id="cb59-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance metric: Multiclass Accuracy</span></span>
<span id="cb59-16">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MulticlassAccuracy()</span>
<span id="cb59-17"></span>
<span id="cb59-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for CUDA-capable GPU availability</span></span>
<span id="cb59-19">use_amp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.is_available()</span></code></pre></div>
<p>We‚Äôll use <a href="https://pytorch.org/torcheval/stable/generated/torcheval.metrics.MulticlassAccuracy.html#torcheval.metrics.MulticlassAccuracy">Multiclass Accuracy</a> for our performance metric as this is a multiclass classification problem where each image falls into one of many classes.</p>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>Finally, we can train the model using the <code>train_loop</code> function. Training time will depend on the available hardware. Feel free to take a break if the progress bar indicates it will take a while.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<p>Training usually takes around 1 hour and 20 minutes on the free GPU tier of Google Colab.</p>
</div>
</div>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">train_loop(model, train_dataloader, valid_dataloader, optimizer, metric, lr_scheduler, device, epochs, use_amp, checkpoint_path)</span></code></pre></div>
<pre class="text"><code>Epochs: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3/3 [11:15&lt;00:00, 224.96s/it]
Train: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4324/4324 [03:29&lt;00:00, 21.75it/s, accuracy=0.894, avg_loss=0.374, loss=0.0984, lr=0.000994]
Eval: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 481/481 [00:17&lt;00:00, 50.42it/s, accuracy=0.975, avg_loss=0.081, loss=0.214, lr=]
Train: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4324/4324 [03:28&lt;00:00, 22.39it/s, accuracy=0.968, avg_loss=0.105, loss=0.0717, lr=0.000462]
Eval: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 481/481 [00:16&lt;00:00, 55.14it/s, accuracy=0.988, avg_loss=0.0354, loss=0.02, lr=]
Train: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4324/4324 [03:28&lt;00:00, 21.94it/s, accuracy=0.99, avg_loss=0.0315, loss=0.00148, lr=4.03e-9]
Eval: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 481/481 [00:16&lt;00:00, 53.87it/s, accuracy=0.995, avg_loss=0.0173, loss=0.000331, lr=]</code></pre>
<p>At last, we have our hand gesture recognizer. The readout for the final validation run indicates the model achieved an approximate <code>99.5%</code> accuracy, meaning it missed less than <code>100</code> of the <code>15,374</code> samples in the validation set. To wrap up the tutorial, we‚Äôll test our fine-tuned model by performing inference on individual images.</p>
</section>
</section>
<section id="making-predictions-with-the-model" class="level2">
<h2 class="anchored" data-anchor-id="making-predictions-with-the-model">Making Predictions with the Model</h2>
<p>In this final part of the tutorial, you will learn how to make predictions with the fine-tuned model on individual images, allowing us to see the model in action and assess its performance. Understanding how to apply trained models is crucial for implementing them in real-world applications.</p>
<p>Let‚Äôs start by setting the minimum input dimension for inference. We‚Äôll use the same size as the input images we used during training but allow non-square input.</p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the minimum input dimension for inference </span></span>
<span id="cb62-2">infer_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)</span></code></pre></div>
<p>Next, we will randomly select an image from our dataset and resize it to the inference size. The <a href="https://cj-mills.github.io/cjm-pil-utils/core.html#resize_img"><code>resize_img</code></a> function will scale the image so the smallest dimension is the specified inference size while maintaining the original aspect ratio.</p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random item from the dataset</span></span>
<span id="cb63-2">item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(dataset)</span>
<span id="cb63-3"></span>
<span id="cb63-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image and resize it</span></span>
<span id="cb63-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb63-6">inp_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(sample_img.copy(), infer_sz)</span></code></pre></div>
<p>We then convert the image to a normalized tensor using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#pil_to_tensor"><code>pil_to_tensor</code></a> function and move it to the device where our model resides (CPU or GPU).</p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a normalized tensor and move it to the device</span></span>
<span id="cb64-2">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pil_to_tensor(inp_img, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span></code></pre></div>
<p>With our image prepared, we can now use our model to make a prediction. The following code block runs our model in a no-gradient context using <code>torch.no_grad()</code>. That informs PyTorch that we do not need to keep track of gradients in this operation, saving memory.</p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb65-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb65-3">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span></code></pre></div>
<p>After obtaining the raw prediction, we apply the <a href="https://pytorch.org/docs/stable/generated/torch.nn.Softmax.html">Softmax</a> function to convert these values into probabilities that sum up to 1.</p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the model predictions to add up to 1</span></span>
<span id="cb66-2">pred_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Then, we retrieve the highest confidence score and its corresponding class index. The class index is converted into the actual class name using the <code>train_dataset.classes</code> lookup table.</p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the highest confidence score</span></span>
<span id="cb67-2">confidence_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb67-3"></span>
<span id="cb67-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class index with the highest confidence score and convert it to the class name</span></span>
<span id="cb67-5">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset.classes[torch.argmax(pred_scores)]</span></code></pre></div>
<p>We then format the prediction data, including the target class, the predicted class, and the confidence score of the prediction, as a <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html">Pandas Series</a> and print it.</p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the prediction data in a Pandas Series for easy formatting</span></span>
<span id="cb68-2">pred_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series({</span>
<span id="cb68-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target Class:"</span>: class_names[item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]],</span>
<span id="cb68-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class:"</span>: pred_class,</span>
<span id="cb68-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Score:"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>confidence_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb68-6">})</span>
<span id="cb68-7"></span>
<span id="cb68-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data</span></span>
<span id="cb68-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pred_data.to_string(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span></code></pre></div>
<pre class="text"><code>Target Class:           like
Predicted Class:        like
Confidence Score:    100.00%</code></pre>
<hr>
<p>Finally, we display the sample image for visual verification.</p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb70-2">sample_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_87_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>For this sample, the model was 100% confident in its prediction. The model will likely be less sure about images it has not seen before.</p>
<section id="testing-the-model-on-new-data" class="level3">
<h3 class="anchored" data-anchor-id="testing-the-model-on-new-data">Testing the Model on New Data</h3>
<p>Let‚Äôs try an image from the free stock photo site, <a href="https://www.pexels.com/photo/man-doing-rock-and-roll-sign-2769554/">Pexels</a>.</p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib.request</span>
<span id="cb71-2"></span>
<span id="cb71-3">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb71-4">test_img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./pexels-man-doing-rock-and-roll-sign.jpg"</span>)</span>
<span id="cb71-5"></span>
<span id="cb71-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_img_path.is_file():</span>
<span id="cb71-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image already exists."</span>)</span>
<span id="cb71-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb71-9">    urllib.request.urlretrieve(test_img_url, test_img_path)</span>
<span id="cb71-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image downloaded."</span>)</span>
<span id="cb71-11"></span>
<span id="cb71-12">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_path)</span>
<span id="cb71-13">sample_img</span></code></pre></div>
<pre class="text"><code>Image already exists.</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_88_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This image is a bit tricky. The man in the photo makes a <code>rock</code> gesture with their left hand, but their right hand is visible and strongly resembles samples from the <code>no_gesture</code> class. Let‚Äôs see what the model predicts using the same approach as above.</p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">target_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rock"</span></span>
<span id="cb73-2"></span>
<span id="cb73-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the minimum input dimension for inference </span></span>
<span id="cb73-4">infer_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)</span>
<span id="cb73-5"></span>
<span id="cb73-6">inp_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(sample_img.copy(), infer_sz)</span>
<span id="cb73-7"></span>
<span id="cb73-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a normalized tensor and move it to the device</span></span>
<span id="cb73-9">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pil_to_tensor(inp_img, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb73-10"></span>
<span id="cb73-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb73-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb73-13">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(img_tensor)</span>
<span id="cb73-14">        </span>
<span id="cb73-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the model predictions to add up to 1</span></span>
<span id="cb73-16">pred_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb73-17"></span>
<span id="cb73-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the highest confidence score</span></span>
<span id="cb73-19">confidence_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb73-20"></span>
<span id="cb73-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class index with the highest confidence score and convert it to the class name</span></span>
<span id="cb73-22">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset.classes[torch.argmax(pred_scores)]</span>
<span id="cb73-23"></span>
<span id="cb73-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the prediction data in a Pandas Series for easy formatting</span></span>
<span id="cb73-25">pred_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series({</span>
<span id="cb73-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Size:"</span>: inp_img.size,</span>
<span id="cb73-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Target Class:"</span>: target_cls,</span>
<span id="cb73-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class:"</span>: pred_class,</span>
<span id="cb73-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Score:"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>confidence_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb73-30">})</span>
<span id="cb73-31"></span>
<span id="cb73-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data</span></span>
<span id="cb73-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pred_data.to_string(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb73-34"></span>
<span id="cb73-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb73-36">sample_img</span></code></pre></div>
<pre class="text"><code>Input Size:          (288, 416)
Target Class:              rock
Predicted Class:           rock
Confidence Score:        99.70%</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/images/output_89_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Even though this image is a different shape than the training data and has an idle hand, the model confidently predicts <code>rock</code> as the most likely gesture class.</p>
</section>
<section id="saving-the-class-labels" class="level3">
<h3 class="anchored" data-anchor-id="saving-the-class-labels">Saving the Class Labels</h3>
<p>Let‚Äôs save the dataset class labels in a dedicated JSON file so we don‚Äôt need to load the whole dataset to make predictions with the model in the future. I‚Äôll cover how to load the model checkpoint we saved earlier and use it for inference in a future tutorial.</p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save class labels</span></span>
<span id="cb75-2">class_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classes"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(train_dataset.classes)}</span>
<span id="cb75-3"></span>
<span id="cb75-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set file path</span></span>
<span id="cb75-5">class_labels_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-classes.json"</span></span>
<span id="cb75-6"></span>
<span id="cb75-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save class labels in JSON format</span></span>
<span id="cb75-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(class_labels_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> write_file:</span>
<span id="cb75-9">    json.dump(class_labels, write_file)</span>
<span id="cb75-10">    </span>
<span id="cb75-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(class_labels_path)</span></code></pre></div>
<pre class="text"><code>pytorch-timm-image-classifier/2023-05-22_16-35-03/hagrid-classification-512p-no-gesture-150k-zip-classes.json</code></pre>
<hr>
<p>We now have a functioning hand-gesture recognizer and know how to make predictions with it on individual images. Before we wrap up this tutorial, let‚Äôs check out the in-browser demo I mentioned at the beginning of the post.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don‚Äôt forget to download the model checkpoint and class labels from the Colab Environment‚Äôs file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
<li>Once you finish training and download the files, turn off hardware acceleration for the Colab Notebook to save GPU time. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#using-hardware-acceleration">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="exploring-the-in-browser-demo" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-in-browser-demo">Exploring the In-Browser Demo</h2>
<p>You‚Äôve gotten your hands dirty with the code. Now let‚Äôs see our fine-tuned model in action! I‚Äôve set up an online demo that allows you to interact with a hand gesture recognizer trained with this tutorial‚Äôs code in your web browser. No downloads or installations are required.</p>
<p>The demo includes sample images that you can use to test the model. Try these images first to see how the model interprets different hand gestures. Once you‚Äôre ready, you can switch on your webcam to provide live input to the model.</p>
<p>Online demos are a great way to see and share the fruits of your labor and explore ways to apply your hand gesture recognizer in real-world scenarios.</p>
<p>I invite you to share any interesting results or experiences with the demo in the comments below. Whether it‚Äôs a tricky input image the model handles or a surprising failure case, I‚Äôd love to hear about it!</p>
<p>Check out the demo below, and have fun exploring!</p>
<ul>
<li><a href="https://cj-mills.github.io/pytorch-timm-gesture-recognition-tutorial-code/">In-Browser Hand Gesture Recognition Demo</a></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on completing this tutorial on fine-tuning image classifiers with PyTorch and the timm library! You‚Äôve taken significant strides in your machine learning journey by creating a practical hand gesture recognizer.</p>
<p>Throughout this tutorial, we‚Äôve covered many topics, including setting up your Python environment, importing necessary dependencies, project initialization, dataset loading and exploration, model selection, data preparation, and model fine-tuning. Finally, we made predictions with our fine-tuned model on individual images and tested the model with an interactive, in-browser demo.</p>
<p>This hands-on tutorial underscored the practical applications of fine-tuning image classification models, especially when working with limited data and computational resources. The hand gesture recognizer you‚Äôve built has many real-world applications, and you now have a solid foundation to tackle other image classification tasks.</p>
<p>If you‚Äôre intrigued by the underlying concepts leveraged in this tutorial and wish to deepen your understanding, I recommend fast.ai‚Äôs <a href="https://course.fast.ai/">Practical Deep Learning for Coders</a> course. By the end, you‚Äôll thoroughly understand the model and training code and have the know-how to implement them from scratch.</p>
<p>While our tutorial concludes here, your journey in deep learning is far from over. In the upcoming tutorials, we‚Äôll explore topics such as incorporating preprocessing and post-processing steps into the model, exporting the model to different formats for deployment, using the fine-tuned model to identify flawed training samples in our dataset, and building interactive in-browser demo projects similar to the one featured in this tutorial.</p>
<p>Once again, congratulations on your achievement, and keep learning!</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-classification</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/index.html</guid>
  <pubDate>Wed, 24 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Obtain a Kaggle API Key</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/kaggle-obtain-api-key-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Create a Kaggle Account</li>
<li>Sign in to Kaggle</li>
<li>Access your Kaggle Account Settings</li>
<li>Generate Your Kaggle API Key</li>
<li>Store the Kaggle API Key</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I will guide you step-by-step to obtain a Kaggle API key, which you will need to access and download datasets from Kaggle using their API. This tutorial is suitable for beginners, even those who do not have a Kaggle account yet.</p>
</section>
<section id="create-a-kaggle-account" class="level2">
<h2 class="anchored" data-anchor-id="create-a-kaggle-account">Create a Kaggle Account</h2>
<ol type="1">
<li><p>Visit Kaggle‚Äôs website at <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-homepage.png" class="img-fluid" data-fig-align="center" alt="kaggle-homepage"><br></p></li>
<li><p>Click on the <code>Register</code> button at the top-right corner of the page.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-homepage-click-register-button.png" class="img-fluid" data-fig-align="center" alt="kaggle-homepage-click-register-button"><br></p></li>
<li><p>Select the <code>Register with your email</code> option. Alternatively, you can sign up using Google, Facebook, or Yahoo accounts.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-select-registration-method.png" class="img-fluid" data-fig-align="center" alt="kaggle-select-registration-method"><br></p></li>
<li><p>Fill in the required information, including your name, email, and password, then click <code>Next</code>.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-enter-registration-info.png" class="img-fluid" data-fig-align="center" alt="kaggle-enter-registration-info"><br></p></li>
<li><p>Click <code>I agree</code> to accept the Privacy and Terms agreement.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-accept-privacy-and-terms-agreement.png" class="img-fluid" data-fig-align="center" alt="kaggle-accept-privacy-and-terms-agreement"><br></p></li>
<li><p>Kaggle will email a six-digit code to verify your email address. Enter the code in the prompt and click <code>Next</code> to complete your account registration.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-verify-email-with-six-digit-code.png" class="img-fluid" data-fig-align="center" alt="kaggle-verify-email-with-six-digit-code"><br></p></li>
</ol>
</section>
<section id="sign-in-to-kaggle" class="level2">
<h2 class="anchored" data-anchor-id="sign-in-to-kaggle">Sign in to Kaggle</h2>
<ol type="1">
<li><p>If you aren‚Äôt already signed in, click the <code>Sign In</code> button at the top-right corner of the Kaggle homepage.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-homepage-click-sign-in-button.png" class="img-fluid" data-fig-align="center" alt="kaggle-homepage-click-sign-in-button"><br></p></li>
<li><p>Select the <code>Sign in with your email</code> option. Alternatively, you can sign in using Google, Facebook, or Yahoo accounts.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-select-sign-in-method.png" class="img-fluid" data-fig-align="center" alt="kaggle-select-sign-in-method"><br></p></li>
<li><p>Enter your email/username and password, then click <code>Sign In</code>.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-sign-in-page.png" class="img-fluid" data-fig-align="center" alt="kaggle-sign-in-page"><br></p></li>
</ol>
</section>
<section id="access-your-kaggle-account-settings" class="level2">
<h2 class="anchored" data-anchor-id="access-your-kaggle-account-settings">Access your Kaggle Account Settings</h2>
<ol type="1">
<li><p>Click on your profile picture at the top-right corner of the page.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-click-profile-picture.png" class="img-fluid" data-fig-align="center" alt="kaggle-click-profile-picture"><br></p></li>
<li><p>In the popout menu, click the <code>Settings</code> option.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-click-settings-menu-option.png" class="img-fluid" data-fig-align="center" alt="kaggle-click-settings-menu-option"><br></p></li>
</ol>
</section>
<section id="generate-your-kaggle-api-key" class="level2">
<h2 class="anchored" data-anchor-id="generate-your-kaggle-api-key">Generate Your Kaggle API Key</h2>
<ol type="1">
<li><p>Scroll to the <code>API</code> section in your Account settings and click the <code>Create New API Token</code> button.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-account-settings-click-create-new-token.png" class="img-fluid" data-fig-align="center" alt="kaggle-account-settings-click-create-new-token"><br></p></li>
<li><p>Kaggle will generate a JSON file named <code>kaggle.json</code> and prompt you to save the file to your computer.</p>
<p><img src="christianjmills.com/posts/kaggle-obtain-api-key-tutorial/images/kaggle-save-kaggle-json-file.png" class="img-fluid" data-fig-align="center" alt="kaggle-save-kaggle-json-file"><br></p></li>
<li><p>Download the <code>kaggle.json</code> file and save it to a secure location on your computer. This file contains your Kaggle API key and username.</p></li>
</ol>
</section>
<section id="store-the-kaggle-api-key" class="level2">
<h2 class="anchored" data-anchor-id="store-the-kaggle-api-key">Store the Kaggle API Key</h2>
<p>Keep the <code>kaggle.json</code> file safe and secure, as it contains sensitive information. Remember to set the permissions for the <code>kaggle.json</code> file to be readable and writable only by you. Never share this file with anyone or upload it to public repositories.</p>
<p>If you plan to use the Kaggle API on your local machine, ensure the <code>kaggle.json</code> file is in the following location:</p>
<ul>
<li><p>Windows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">C:\Users\&lt;username</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\.</span>kaggle\kaggle.json</span></code></pre></div></li>
<li><p>Linux:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/.kaggle/kaggle.json</span></span></code></pre></div></li>
<li><p>macOS:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/Users/</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/.kaggle/kaggle.json</span></code></pre></div></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You have successfully obtained your Kaggle API key. You can now use it to download datasets from Kaggle using their API.</p>


</section>

 ]]></description>
  <category>kaggle</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/kaggle-obtain-api-key-tutorial/index.html</guid>
  <pubDate>Wed, 17 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/mamba-getting-started-tutorial-windows/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>An Overview of Machine Learning, PyTorch, and Jupyter</li>
<li>Installing Mamba</li>
<li>Access the Miniforge Prompt</li>
<li>Benefits of Using Virtual Environments</li>
<li>Creating a Python Environment</li>
<li>Package Overview</li>
<li>Installing PyTorch and Jupyter</li>
<li>Testing PyTorch and Jupyter Notebook Setup</li>
<li><a href="managing-and-updating-packages-with-mamba">Managing and Updating Packages with Mamba</a></li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this beginner-friendly tutorial, I‚Äôll guide you through installing the <a href="https://mamba.readthedocs.io/en/latest/index.html">Mamba</a> package manager on your local Windows machine and using it to create Python environments. Mamba is a powerful tool that helps you create and manage virtual environments, allowing you to maintain separate configurations for different projects without conflicts. It provides a drop-in replacement for <a href="https://docs.conda.io/en/latest/">conda</a> and offers higher speed and more reliable environment solutions.</p>
<p>In this tutorial, we‚Äôll use a practical example to demonstrate the effectiveness of Mamba. We‚Äôll install PyTorch and Jupyter, two essential tools for machine learning projects. To ensure we set up everything correctly, we‚Äôll verify the PyTorch installation by running a simple test in a Jupyter Notebook. By the end of this tutorial, you‚Äôll be well-equipped to begin your machine-learning projects using Mamba, PyTorch, and Jupyter.</p>
</section>
<section id="an-overview-of-machine-learning-pytorch-and-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="an-overview-of-machine-learning-pytorch-and-jupyter">An Overview of Machine Learning, PyTorch, and Jupyter</h2>
<p>Machine learning is a subset of artificial intelligence that enables computers to learn from data and make decisions or predictions without being explicitly programmed. It has become an essential tool across various domains, including natural language processing, computer vision, and speech recognition.</p>
<p><a href="https://pytorch.org/">PyTorch</a> is a popular open-source machine learning framework that enables users to perform tensor computations, build dynamic computational graphs, and implement custom machine learning architectures. PyTorch has gained widespread adoption due to its flexibility, ease of use, and strong community support.</p>
<p><a href="https://jupyter.org/">Jupyter</a> is an open-source project that provides an interactive computing environment where you can create and share documents containing live code, equations, visualizations, and narrative text. Jupyter Notebook is a web-based platform that allows users to write, run, and debug code. You can also create visualizations and explanatory text.</p>
<p>This tutorial will help kickstart your machine-learning projects by guiding you through setting up a local Python environment using Mamba, PyTorch, and Jupyter. If you‚Äôre new to machine learning and want to learn more, I recommend the <a href="https://course.fast.ai/">Practical Deep Learning for Coders</a> course. The course uses a hands-on approach to teach students to apply deep learning and machine learning to practical problems using PyTorch and the <a href="https://docs.fast.ai/">fastai library</a>.</p>
</section>
<section id="installing-mamba" class="level2">
<h2 class="anchored" data-anchor-id="installing-mamba">Installing Mamba</h2>
<ol type="1">
<li><p>Download the Mambaforge installer for Windows from the <a href="https://github.com/conda-forge/miniforge#mambaforge">official Miniforge GitHub repository</a>.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-github-readme-download-windows-installer.png" class="img-fluid" data-fig-align="center" alt="mambaforge-github-readme-download-windows-installer"><br></p></li>
<li><p>Run the installer executable.</p>
<ol type="1">
<li><p>You might get a popup from Microsoft Defender SmartScreen like the one below, saying it prevented an unrecognized app from starting. If so, click More info.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/microsoft-defender-smartscreen-popup-click-more-info.png" class="img-fluid" data-fig-align="center" alt="microsoft-defender-smartscreen-popup-click-more-info"><br></p></li>
<li><p>Then click the ‚ÄúRun anyway‚Äù button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/microsoft-defender-smartscreen-popup-click-run-anyway.png" class="img-fluid" data-fig-align="center" alt="microsoft-defender-smartscreen-popup-click-run-anyway"><br></p></li>
</ol></li>
<li><p>Follow the on-screen instructions in the setup window.</p>
<ol type="1">
<li><p>Click the <code>Next &gt;</code> button in the setup window.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-1.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-1"><br></p></li>
<li><p>Click the <code>I Agree</code> button to accept the license agreement.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-2.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-2"><br></p></li>
<li><p>Select <code>Just Me</code> for the installation type and click the <code>Next &gt;</code> button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-3.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-3"><br></p></li>
<li><p>Stick with the default install location and click the <code>Next &gt;</code> button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-4.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-4"><br></p></li>
<li><p>Check the box to clear the package cache upon completion under installation options and click the <code>Install</code> button to start the installation process.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-page-5.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-page-5"><br></p></li>
<li><p>Wait for the installation process to complete, then click the <code>Next &gt;</code> button.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-installation-complete.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-installation-complete"><br></p></li>
<li><p>Finally, click the <code>Finish</code> button to close the setup window.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-windows-installer-window-finish-setup.png" class="img-fluid" data-fig-align="center" alt="mambaforge-windows-installer-window-finish-setup"><br></p></li>
</ol></li>
</ol>
</section>
<section id="access-the-miniforge-prompt" class="level2">
<h2 class="anchored" data-anchor-id="access-the-miniforge-prompt">Access the Miniforge Prompt</h2>
<p>On Windows, we use Mamba through the Miniforge Prompt. It is a dedicated command-line interface for interacting with conda environments.</p>
<p>Type ‚ÄúMiniforge Prompt‚Äù into the Windows search bar and click Open.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/windows-search-miniforge-prompt.png" class="img-fluid" data-fig-align="center" alt="windows-search-miniforge-prompt"><br></p>
<p>A new command prompt will open at the location of your Windows user folder.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/miniforge-prompt-new.png" class="img-fluid" data-fig-align="center" alt="miniforge-prompt-new"><br></p>
<p>Alternatively, you can activate the Miniforge Prompt from any regular command prompt with the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%USERPROFILE%\mambaforge\Scripts\activate</span></span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/command-prompt-activate-miniforge-prompt.png" class="img-fluid" data-fig-align="center" alt="command-prompt-activate-miniforge-prompt"><br></p>
<p>The text in front of the current directory path indicates the name of the current conda environment.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/miniforge-prompt-new-highlight-env-name.png" class="img-fluid" data-fig-align="center" alt="miniforge-prompt-new"><br></p>
<p>We can get a list of the available conda environments and their locations using the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env list</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-env-list.png" class="img-fluid" data-fig-align="center" alt="mamba-env-list"><br></p>
<p>The only one listed is ‚Äúbase.‚Äù If we go to the associated directory path in File Explorer, we‚Äôll see the contents for the Mambaforge installation. Mambaforge will store any conda environments we create in the ‚Äúenvs‚Äù folder.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-env-location.png" class="img-fluid" data-fig-align="center" alt="mambaforge-env-location"><br></p>
</section>
<section id="benefits-of-using-virtual-environments" class="level2">
<h2 class="anchored" data-anchor-id="benefits-of-using-virtual-environments">Benefits of Using Virtual Environments</h2>
<p>Before creating a new Python environment, let‚Äôs cover the benefits of using virtual environments and why they are essential when working with Python projects.</p>
<ul>
<li><strong>Isolation of Dependencies</strong>: Virtual environments create isolated spaces for each project, allowing developers to install and manage different package versions without conflicts. This isolation ensures that the specific dependencies required for one project do not interfere with or break the dependencies of another project.</li>
<li><strong>Easier Project Management</strong>: Virtual environments help streamline project management by maintaining separate configurations for different projects. Developers can replicate or share project environments with team members, ensuring consistent behavior across various machines. Shareable project environments help developers collaborate, troubleshoot, and deploy projects.</li>
<li><strong>Simplified System Maintenance</strong>: Using virtual environments helps developers avoid cluttering their system-wide Python installation with numerous packages and varying versions. System maintenance is cleaner as developers can easily add, update, or remove packages within individual project environments without affecting other projects or the system as a whole.</li>
</ul>
</section>
<section id="creating-a-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h2>
<p>We can create new Python environments using the <code>mamba create</code> command. The following command will create one called <code>pytorch-env</code> with Python <code>3.10</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch-env"</span> python=3.10</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-create-env-command.png" class="img-fluid" data-fig-align="center" alt="mamba-create-env-command"><br></p>
<p>Mamba will ask you to confirm that you want to install the packages required to create the new conda environment. Type <code>Y</code> into the ‚ÄúConfirm changes‚Äù prompt.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-create-env-command-confirm-changes.png" class="img-fluid" data-fig-align="center" alt="mamba-create-env-command-confirm-changes"><br></p>
<p>Alternatively, you can pre-approve the package installations by adding a <code>-y</code> to the end of the <code>mamba create</code> command.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch-env"</span> python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>Looking in the ‚Äúenvs‚Äù directory, we see a new folder for the conda environment we created.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mambaforge-inspect-envs-folder.png" class="img-fluid" data-fig-align="center" alt="mambaforge-inspect-envs-folder"><br></p>
<p>Once Mamba finishes creating the new environment, it will tell us we can activate and deactivate it using the following commands:</p>
<p><strong>Activate:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
<p><strong>Deactivate:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> deactivate</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-env-created.png" class="img-fluid" data-fig-align="center" alt="mamba-env-created"><br></p>
<p>When we activate it, the name in front of the current directory will change accordingly.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-activate-env.png" class="img-fluid" data-fig-align="center" alt="mamba-activate-env"><br></p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>Before we install PyTorch and Jupyter, let‚Äôs briefly explore the purpose of each package and why they‚Äôre essential for machine learning projects.</p>
<ul>
<li><a href="https://pytorch.org/docs/stable/index.html"><strong>PyTorch</strong></a>: PyTorch is a fast, flexible, user-friendly, open-source machine learning framework. PyTorch allows developers to perform tensor computations, create dynamic computational graphs, and implement custom machine-learning architectures.</li>
<li><a href="https://pytorch.org/vision/stable/index.html"><strong>torchvision</strong></a>: <code>torchvision</code> provides benchmark datasets, model architectures, and image transformations for computer vision.</li>
<li><a href="https://pytorch.org/audio/stable/index.html"><strong>torchaudio</strong></a>: This package provides various tools and datasets for audio processing, including input/output functions, data loaders for popular audio datasets, and audio-specific transformations.</li>
<li><a href="https://jupyter.org/"><strong>Jupyter</strong></a>: Jupyter is an open-source project that enables users to create and share documents containing live code, equations, visualizations, and narrative text. Jupyter Notebook is a web-based interactive computing environment where you can write, run, and debug code. You can also include visualizations and explanatory text.</li>
</ul>
</section>
<section id="installing-pytorch-and-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="installing-pytorch-and-jupyter">Installing PyTorch and Jupyter</h2>
<p>We can install packages in our custom Python environment using <code>mamba</code> or the <a href="https://packaging.python.org/en/latest/key_projects/#pip"><code>pip</code></a> package installer. To use <code>mamba,</code> we replace the word <code>conda</code> in any <code>conda</code> install commands.</p>
<p>For example, this is the <code>conda</code> command to install <a href="https://pytorch.org/">PyTorch</a> on computers with Nvidia GPUs.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia</span></code></pre></div>
<p>For users without an Nvidia GPU:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pytorch torchvision torchaudio cpuonly <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch</span></code></pre></div>
<p>Here is the modified command, which uses Mamba.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-install-pytorch-command.png" class="img-fluid" data-fig-align="center" alt="mamba-install-pytorch-command"><br></p>
<p>As before, type <code>Y</code> into the ‚ÄúConfirm changes‚Äù prompt.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-install-pytorch-confirm-changes.png" class="img-fluid" data-fig-align="center" alt="mamba-install-pytorch-confirm-changes"><br></p>
<p>Alternatively, you can pre-approve the package installations by adding a <code>-y</code> to the end of the <code>mamba install</code> command.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>Installation time can vary depending on your system‚Äôs hardware and Internet speed. Once it finishes, we‚Äôll install Jupyter using the following command:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install jupyter <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/mamba-install-jupyter.png" class="img-fluid" data-fig-align="center" alt="mamba-install-jupyter"><br></p>
</section>
<section id="testing-pytorch-and-jupyter-notebook-setup" class="level2">
<h2 class="anchored" data-anchor-id="testing-pytorch-and-jupyter-notebook-setup">Testing PyTorch and Jupyter Notebook Setup</h2>
<p>Now that we have PyTorch and Jupyter installed in our Python environment, we can verify everything works as expected by importing PyTorch into a Jupyter Notebook. Before that, I recommend changing the current directory to something more appropriate. I switched to a new folder outside my <code>G</code> drive using the following commands:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">G:</span></span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> Projects<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\C</span>urrent_Projects<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\m</span>amba-tutorial</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/cmd-switch-drive-and-folder.png" class="img-fluid" data-fig-align="center" alt="cmd-switch-drive-and-folder"><br></p>
<p>We can launch a Jupyter Notebook environment using the following command:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> notebook</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-notebook-command.png" class="img-fluid" data-fig-align="center" alt="jupyter-notebook-command"><br></p>
<p>The Jupyter Notebook environment will launch in a new tab in your default web browser.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/new-jupyter-notebook-environment.png" class="img-fluid" data-fig-align="center" alt="new-jupyter-notebook-environment"><br></p>
<p>To create a new Jupyter Notebook, open the <code>New</code> drop-down menu and select the <code>Python 3 (ipykernel)</code>option.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-create-new-notebook.png" class="img-fluid" data-fig-align="center" alt="jupyter-create-new-notebook"><br></p>
<p>The notebook will open in a new tab.</p>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-new-notebook.png" class="img-fluid" data-fig-align="center" alt="jupyter-new-notebook"><br></p>
<p>We can import PyTorch and verify it can use the Nvidia GPU by running the following code in the notebook:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb14-2">torch.cuda.is_available()</span></code></pre></div>
<p><img src="christianjmills.com/posts/mamba-getting-started-tutorial-windows/images/jupyter-notebook-torch-cuda-is-available.png" class="img-fluid" data-fig-align="center" alt="jupyter-notebook-torch-cuda-is-available"><br></p>
</section>
<section id="managing-and-updating-packages-with-mamba" class="level2">
<h2 class="anchored" data-anchor-id="managing-and-updating-packages-with-mamba">Managing and Updating Packages with Mamba</h2>
<p>This section covers the commands to manage and update packages in your Python environment using Mamba. Proper package management is crucial for maintaining project stability and ensuring compatibility between dependencies.</p>
<section id="listing-installed-packages" class="level3">
<h3 class="anchored" data-anchor-id="listing-installed-packages">Listing Installed Packages</h3>
<p>To view all the installed packages within your active Python environment, use the following command:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> list</span></code></pre></div>
<p>This command will display a list of installed packages and their respective versions and channels.</p>
</section>
<section id="updating-a-package" class="level3">
<h3 class="anchored" data-anchor-id="updating-a-package">Updating a Package</h3>
<p>Updating a package to its latest version is simple with Mamba. Use the following command, replacing package-name with the name of the package you want to update:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> update package-name</span></code></pre></div>
<p>Mamba will search for the latest version of the package, resolve any dependencies, and prompt you to confirm the update.</p>
</section>
<section id="updating-all-packages" class="level3">
<h3 class="anchored" data-anchor-id="updating-all-packages">Updating All Packages</h3>
<p>To update all packages within the active Python environment to their latest versions, run the following command:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span></span></code></pre></div>
<p>Mamba will check for updates for all installed packages and prompt you to confirm the changes.</p>
</section>
<section id="installing-a-specific-package-version" class="level3">
<h3 class="anchored" data-anchor-id="installing-a-specific-package-version">Installing a Specific Package Version</h3>
<p>To install a specific package version, use the ‚Äú=‚Äù sign to append the desired number to the package name. For example, to install version 1.0.0 of a package named example-package, use the following command:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install example-package=1.0.0</span></code></pre></div>
</section>
<section id="removing-a-package" class="level3">
<h3 class="anchored" data-anchor-id="removing-a-package">Removing a Package</h3>
<p>To remove a package from the active Python environment, use the remove command, replacing package-name with the name of the package you want to remove:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> remove package-name</span></code></pre></div>
<p>Mamba will prompt you to confirm the removal of the package and its dependencies.</p>
</section>
<section id="searching-for-packages" class="level3">
<h3 class="anchored" data-anchor-id="searching-for-packages">Searching for Packages</h3>
<p>You can search for packages across various channels using the search command. To search for a package named example-package, run:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> search example-package</span></code></pre></div>
<p>This command will display a list of available versions and channels for the specified package.</p>
<p>With these commands, you can effectively manage and update packages in your Python environment using Mamba, ensuring your projects stay up-to-date and compatible with the latest dependencies.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we successfully installed the Mamba package manager on a Windows machine and used it to create a local Python environment for our machine-learning project. We also installed tools like PyTorch and Jupyter to help us build machine-learning models.</p>
<p>By leveraging the power of virtual environments, we can maintain separate configurations for different projects, avoiding dependency conflicts and streamlining project management.</p>


</section>

 ]]></description>
  <category>mamba</category>
  <category>conda</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/mamba-getting-started-tutorial-windows/index.html</guid>
  <pubDate>Mon, 15 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Getting Started with Google Colab</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/google-colab-getting-started-tutorial/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Access Google Colab</li>
<li>The Notebook Selection Window</li>
<li>Understanding the Notebook Interface</li>
<li>Working with Data</li>
<li>Using Hardware Acceleration</li>
<li>Create a New Notebook</li>
<li>Save Your Notebook</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this tutorial, I‚Äôll introduce you to Google Colab, its features, and how to use it to run your code. Google Colab provides a free, cloud-based Jupyter Notebook environment that allows you to write, run, and share Python code in your browser without any setup or installation. A Jupyter Notebook is an interactive web-based tool for creating and sharing documents that contain live code, visualizations, and narrative text, often used in data analysis, visualization, and education.</p>
</section>
<section id="access-google-colab" class="level2">
<h2 class="anchored" data-anchor-id="access-google-colab">Access Google Colab</h2>
<p>To access Google Colab, follow these steps:</p>
<ol type="1">
<li>Go to <a href="https://colab.research.google.com/">colab.research.google.com</a>.</li>
<li>Sign in with your Google account. If you don‚Äôt have a Google account, create one <a href="https://accounts.google.com/signup">here</a>.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-signed-out.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-signed-out</figcaption>
</figure>
</div>
</section>
<section id="the-notebook-selection-window" class="level2">
<h2 class="anchored" data-anchor-id="the-notebook-selection-window">The Notebook Selection Window</h2>
<p>After signing in, the Notebook Selection window will pop up. This window displays a list of your recent notebooks, allowing you to access and open them. If this is your first time using Google Colab, you will only see the ‚ÄúWelcome to Colaboratory‚Äù notebook listed. The Notebook Selection window also allows you to import Jupyter Notebooks from Google Drive and GitHub or upload a notebook from your computer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-page.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-page</figcaption>
</figure>
</div>
<p>The ‚ÄúWelcome to Colaboratory‚Äù notebook is already open behind the Notebook Selection window, so we‚Äôll work with that one. Click the cancel button in the bottom right corner of the popup window to view the welcome notebook.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-page-exit-popup.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-page-exit-popup</figcaption>
</figure>
</div>
</section>
<section id="understanding-the-notebook-interface" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-notebook-interface">Understanding the Notebook Interface</h2>
<p>A notebook consists of a list of cells. Google Colab notebooks have two main types of cells: code cells and text cells. Code cells allow you to write and run Python code, while text cells let you add formatted text, images, and equations using <a href="https://www.markdownguide.org/getting-started/">Markdown</a>. The first few cells in the welcome notebook are text cells.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-top.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-top</figcaption>
</figure>
</div>
<section id="text-cells" class="level3">
<h3 class="anchored" data-anchor-id="text-cells">Text Cells</h3>
<p>You can view and edit the Markdown source of a text cell by double-clicking it. In editor mode, Google Colab will show the Markdown source and the rendered version side-by-side.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-inspect-markdown-source.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-inspect-markdown-source</figcaption>
</figure>
</div>
<p>We can edit the Markdown source, and the rendered version will update in real time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-edit-markdown-source.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-edit-markdown-source</figcaption>
</figure>
</div>
<p>You can exit the editor mode by pressing <code>Shift+Enter</code>, clicking the <code>Close Markdown Editor</code> icon in the top-right corner of the text cell, or clicking another cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-exit-markdown-editor.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-exit-markdown-editor</figcaption>
</figure>
</div>
<p>To create a new text cell, click the <code>+ Text</code> button in the toolbar.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-add-text-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-add-text-cell</figcaption>
</figure>
</div>
<p>Google Colab will add the new Markdown cell below the currently selected cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-new-text-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-new-text-cell</figcaption>
</figure>
</div>
</section>
<section id="code-cells" class="level3">
<h3 class="anchored" data-anchor-id="code-cells">Code Cells</h3>
<p>To create a new code cell, click the <code>+ Code</code> button in the toolbar at the top of the notebook or press <code>Ctrl+M B</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-add-new-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-new-code-cell</figcaption>
</figure>
</div>
<p>Google Colab will add the new code cell below the currently selected cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-new-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-new-code-cell</figcaption>
</figure>
</div>
<p>You can write Python code in the code cell and execute it by pressing <code>Shift + Enter</code> or clicking the <code>Play</code> button on the left side of the cell. Any output from the code will appear directly below the code cell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-run-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-run-code-cell</figcaption>
</figure>
</div>
<p>We can also use code cells to access the command line by adding an exclamation point at the start of the cell. We can use this ability to install Python packages via the <a href="https://packaging.python.org/en/latest/key_projects/#pip">pip</a> package installer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-notebook-access-command-line.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-welcome-notebook-access-command-line</figcaption>
</figure>
</div>
</section>
</section>
<section id="working-with-data" class="level2">
<h2 class="anchored" data-anchor-id="working-with-data">Working with Data</h2>
<p>Google Colab allows you to upload and download files to and from your computer and connect notebooks to your Google Drive.</p>
<section id="uploading-files" class="level3">
<h3 class="anchored" data-anchor-id="uploading-files">Uploading Files</h3>
<p>You can upload files from your local machine to use in your Google Colab notebook by following these steps:</p>
<ol type="1">
<li>Click the Files icon in the left sidebar to open the file browser.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-open-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-open-file-browser</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>Click the Upload button.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-upload-button.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-upload-button</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Go to the file location on your local machine, select it, and click Open to upload it to your Google Colab workspace.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-select-file-to-upload.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-select-file-to-upload</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Colab will display a warning that the runtime‚Äôs files get deleted when it terminates. Click OK in the bottom-right corner of the popup window.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-runtime-file-warning.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-runtime-file-warning</figcaption>
</figure>
</div>
<ol start="5" type="1">
<li>The uploaded file will appear in the file browser, and you can access it in your notebook.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-uploaded-file-in-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-uploaded-file-in-file-browser</figcaption>
</figure>
</div>
<ol start="6" type="1">
<li>We can view the file by double-clicking it in the file browser or loading it in the notebook via Python.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-load-image-file.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-load-image-file</figcaption>
</figure>
</div>
</section>
<section id="downloading-files" class="level3">
<h3 class="anchored" data-anchor-id="downloading-files">Downloading Files</h3>
<p>To download a file from your Google Colab workspace to your local machine, follow these steps:</p>
<ol type="1">
<li>Locate the file in the file browser.</li>
<li>Right-click the file and select Download.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-download-file.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-download-file</figcaption>
</figure>
</div>
<p>The file will download to your local machine.</p>
</section>
<section id="connecting-to-google-drive" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-google-drive">Connecting to Google Drive</h3>
<p>Google Colab notebooks can connect to Google Drive to access, store, and manage your files. To do this, follow these steps:</p>
<ol type="1">
<li>Click the Mount Drive button in the file browser.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-mount-drive.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-mount-drive</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li><p>Google Colab will create a new code cell containing the following code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> drive</span>
<span id="cb1-2">drive.mount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive'</span>)</span></code></pre></div></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-mount-drive-code-cell.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-mount-drive-code-cell</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Run the code cell by pressing <code>Shift + Enter</code> or clicking the Play button on the left side of the cell. A popup window will appear, prompting you to authorize access to your Google Drive.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-mount-drive-code-cell-popup.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-mount-drive-code-cell-popup</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Click the <code>Connect to Google Drive</code> button to open the authorization page.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-drive-authorization-page.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-drive-authorization-page</figcaption>
</figure>
</div>
<ol start="5" type="1">
<li>Sign in with your Google account, and click Allow to grant access.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-allow-google-drive-to-access-account.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-allow-google-drive-to-access-account</figcaption>
</figure>
</div>
<ol start="6" type="1">
<li>Return to your Google Colab notebook. The code cell should have printed a message indicating your Google Drive is now mounted.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-verify-google-drive-mounted-message.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-verify-google-drive-mounted-message</figcaption>
</figure>
</div>
<ol start="7" type="1">
<li>Click the Refresh button in the file browser to update the contents.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-refresh-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-refresh-file-browser</figcaption>
</figure>
</div>
<p>Your Google Drive should now be mounted and accessible from the file browser.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-verify-driver-accessible-in-file-browser.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-verify-driver-accessible-in-file-browser</figcaption>
</figure>
</div>
<p>You can read, write, and manage your Google Drive files directly from your Google Colab notebook. To access the files, use the path <code>/content/drive/MyDrive/</code> followed by the file or folder name.</p>
</section>
</section>
<section id="using-hardware-acceleration" class="level2">
<h2 class="anchored" data-anchor-id="using-hardware-acceleration">Using Hardware Acceleration</h2>
<p>Google Colab offers free access to GPUs and TPUs to accelerate your code. To enable GPU or TPU acceleration:</p>
<ol type="1">
<li>Click the ‚ÄúRuntime‚Äù menu at the top of the notebook.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-click-runtime-menu.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-click-runtime-menu</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>Select ‚ÄúChange runtime type.‚Äù</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-runtime-menu-change-runtime-type.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-runtime-menu-change-runtime-type</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Choose ‚ÄúGPU‚Äù from the ‚ÄúHardware accelerator‚Äù drop-down menu.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-choose-gpu-hardware-accelerator.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-choose-gpu-hardware-accelerator</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Click ‚ÄúSave.‚Äù</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-save-hardware-accelerator-selection.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-save-hardware-accelerator-selection</figcaption>
</figure>
</div>
<ol start="5" type="1">
<li>Changing the hardware accelerator requires loading a new runtime. Loading a new runtime will delete any files we added and disconnect Google Drive. Google Colab will show a popup window asking you to confirm you want to delete the current runtime. Click ‚ÄúOK‚Äù to confirm.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-delete-previous-runtime-popup-window.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-delete-previous-runtime-popup-window</figcaption>
</figure>
</div>
<ol start="6" type="1">
<li><p>Verify the notebook has GPU access by running the following code in a code cell:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!nvidia-smi</span></span></code></pre></div></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-nvidia-smi-results.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-nvidia-smi-results</figcaption>
</figure>
</div>
<p>Your notebook will now use the selected hardware accelerator. Note that free GPU and TPU usage is time-limited. You can run notebooks on the free tier for at most 12 hours at a time (usually less). If you exceed the time allotment, you must wait until it resets (typically about 12 hours). Therefore, only enable hardware acceleration when needed and disable it when you don‚Äôt. To disable hardware acceleration, select None from the Hardware Accelerator drop-down menu.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-disable-hardware-acceleration.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-disable-hardware-acceleration</figcaption>
</figure>
</div>
</section>
<section id="create-a-new-notebook" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-notebook">Create a New Notebook</h2>
<p>To create a new notebook:</p>
<ol type="1">
<li>Open the <code>File</code> menu in the top-left corner and select <code>New notebook</code>.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-create-new-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-create-new-notebook</figcaption>
</figure>
</div>
<p>A new notebook will open in a separate tab. The runtime for the previous notebook is still active.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-new-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-new-notebook</figcaption>
</figure>
</div>
<p>You can rename the notebook by clicking the notebook name at the top of the page. For now, we can name it ‚ÄúMy First Notebook.‚Äù</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-rename-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-rename-notebook</figcaption>
</figure>
</div>
</section>
<section id="save-your-notebook" class="level2">
<h2 class="anchored" data-anchor-id="save-your-notebook">Save Your Notebook</h2>
<p>Google Colab automatically saves your notebooks to a ‚ÄúColab Notebooks‚Äù folder in Google Drive.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-drive-colab-notebooks-folder.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-drive-colab-notebooks-folder</figcaption>
</figure>
</div>
<p>Note the ‚ÄúWelcome to Colaboratory‚Äù notebook is not in the folder. Since we did not create that notebook, we must save our copy manually. Switch to that notebook‚Äôs tab and click the ‚ÄúCopy to Drive‚Äù button.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-save-copy-to-drive.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-save-copy-to-drive</figcaption>
</figure>
</div>
<p>Google Colab will open our new copy of the notebook in a separate tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-copy-of-welcome-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-copy-of-welcome-notebook</figcaption>
</figure>
</div>
<p>If we check the ‚ÄúColab Notebooks‚Äù folder in Google Drive, we should now see our copy of the welcome notebook.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-drive-verify-copy-of-welcome-notebook.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-drive-verify-copy-of-welcome-notebook</figcaption>
</figure>
</div>
</section>
<section id="sharing-notebooks" class="level2">
<h2 class="anchored" data-anchor-id="sharing-notebooks">Sharing Notebooks</h2>
<p>You can share your Google Colab notebook with others, similar to other Google Drive documents. To share your notebook:</p>
<ol type="1">
<li>Click the ‚ÄúShare‚Äù button in the top-right corner of the notebook.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-share-button.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-share-button</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>In the sharing settings dialog box, enter the email address of the person you want to share the notebook with.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-share-notebook-add-people.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-share-notebook-add-people</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Select their permission level: ‚ÄúViewer,‚Äù ‚ÄúCommenter,‚Äù or ‚ÄúEditor.‚Äù</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-share-notebook-set-permission-level.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-share-notebook-set-permission-level</figcaption>
</figure>
</div>
<p>Alternatively, you can create a shareable link with specific access settings (view, comment, or edit). You can share this link with others, and they can access the notebook according to the chosen permission level.</p>
<ol type="1">
<li>Open the drop-down menu under General Access and select the ‚ÄúAnyone with a link‚Äù option.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enable-shareable-link.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enable-shareable-link</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>Set the permission level: ‚ÄúViewer,‚Äù ‚ÄúCommenter,‚Äù or ‚ÄúEditor.‚Äù</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enable-shareable-link-permission-level.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enable-shareable-link-permission-level</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Click ‚ÄúCopy link‚Äù to copy the shareable link.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enable-shareable-link-copy-link.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enable-shareable-link-copy-link</figcaption>
</figure>
</div>
</section>
<section id="version-control-with-github" class="level2">
<h2 class="anchored" data-anchor-id="version-control-with-github">Version Control with GitHub</h2>
<p>Google Colab can save and load notebooks from GitHub repositories, enabling seamless collaboration and tracking of changes in your code.</p>
<section id="saving-a-notebook-to-a-github-repository" class="level3">
<h3 class="anchored" data-anchor-id="saving-a-notebook-to-a-github-repository">Saving a notebook to a GitHub repository:</h3>
<ol type="1">
<li>Open the File menu in the top-left corner and select Save a copy in GitHub.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-file-menu-save-copy-in-github.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-file-menu-save-copy-in-github</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li>If you haven‚Äôt connected your GitHub account yet, follow the prompts to authorize Google Colab to access your repositories.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/github-authorize-google-colab.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">github-authorize-google-colab</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Choose a repository, branch, and file path for your notebook. You can also update the commit message.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-copy-to-github-select-repository.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-copy-to-github-select-repository</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Click OK to save the notebook to the specified GitHub repository.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-copy-to-github-click-ok.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-copy-to-github-click-ok</figcaption>
</figure>
</div>
</section>
<section id="loading-a-notebook-from-a-github-repository" class="level3">
<h3 class="anchored" data-anchor-id="loading-a-notebook-from-a-github-repository">Loading a notebook from a GitHub repository:</h3>
<ol type="1">
<li>Go to the <a href="https://colab.research.google.com/">Google Colab website</a>.</li>
</ol>
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-welcome-page.png" class="img-fluid" data-fig-align="center" alt="google-colab-welcome-page">{fig-align=‚Äúcenter‚Äù}</p>
<ol start="2" type="1">
<li>Click the GitHub tab in the Notebook Selection window.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-selection-window-click-github-tab.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-selection-window-click-github-tab</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Enter the URL for the GitHub repository containing the notebook you want to open. You can also search for one by entering a username or organization and repository name.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/google-colab-getting-started-tutorial/images/google-colab-enter-github-repo-url.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">google-colab-enter-github-repo-url</figcaption>
</figure>
</div>
<ol start="4" type="1">
<li>Select the notebook you want to open, and it will open in a new tab.</li>
</ol>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You‚Äôve now learned the fundamentals of Google Colab. This tutorial covered creating and editing cells, working with data, hardware acceleration, and saving and sharing notebooks via Google Drive and GitHub. Keep exploring Google Colab to uncover more features that can enhance your projects.</p>


</section>

 ]]></description>
  <category>google-colab</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/google-colab-getting-started-tutorial/index.html</guid>
  <pubDate>Sun, 14 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference PoseNet Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-posenet-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-posenet">Barracuda Inference PoseNet</a> package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform 2D human pose estimation using PoseNet models.</p>
<p>Pose estimation has numerous potential uses in Unity applications, including motion capture and animation, educational apps, and augmented reality, to name a few. Here is a demo video from a project that uses this package.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-posenet-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-posenet-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>PoseNetPoseEstimator.cs</code>: This script provides functionality to perform 2D human pose estimation with PoseNet models using the Barracuda inference engine.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference PoseNet package by examining the purpose and functionality of each C# script.</p>
<section id="posenetposeestimator.cs" class="level3">
<h3 class="anchored" data-anchor-id="posenetposeestimator.cs"><code>PoseNetPoseEstimator.cs</code></h3>
<p>This script defines the PoseNetPoseEstimator class, which extends the BarracudaModelRunner class from the Barracuda Inference Base package to perform 2D human pose estimation using PoseNet models. This class also depends on the <code>human-pose-2d-toolkit</code> package. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-posenet/blob/main/Runtime/Scripts/PoseNetPoseEstimator.cs">PoseNetPoseEstimator.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The class has several serialized fields for configuring the model, and processing output.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PoseNet Model Configuration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the heatmap layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> heatmapLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the offsets layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> offsetsLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the forward displacement layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> displacementFWDLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the backward displacement layer in the neural network"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> displacementBWDLayerIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output Processing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TextAsset containing the class labels for pose estimation"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also includes a field to control how often to unload memory assets when using Barracuda‚Äôs Pixel Shader backend. The Pixel Shader backend enables GPU inference on platforms that don‚Äôt support Compute Shaders. However, there seems to be a bug in the current version of Barracuda, which does not release unused assets when using this backend. Left unchecked, this can fill up both system and GPU memory. We can address this by manually freeing memory. Doing that every frame can hurt performance, so we‚Äôll only do it at set intervals.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Settings"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval at which pixel shaders are unloaded"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<p>There are internal variables for handling class labels and parent-children relationships of pose skeleton points.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Internal Variables</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kLocalMaximumRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Parent-children relationships of the pose keypoints</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">readonly</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)[]</span> parentChildrenTuples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxStride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> SigmoidLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Layer names for the neural network</span></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> offsetsLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> displacementFWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> displacementBWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Class labels array</span></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Smallest dimension of the input image</span></span>
<span id="cb3-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method initializes the pose estimation component by calling the Start() method of the parent class and loading class labels.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes the pose estimation component.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads and prepares the PoseNet model for pose estimation. It sets the worker type to PixelShader if running on WebGL, gets the output layers for the heatmap, offsets, forward displacement, and backward displacement, and adds a sigmoid layer if the last layer is not sigmoid.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads and prepares the model for pose estimation.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-7"></span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set worker type to PixelShader if running on WebGL</span></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-11">        workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the output layer of the heatmap</span></span>
<span id="cb5-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>heatmapLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Find the heatmap layer in the model</span></span>
<span id="cb5-18">    Layer heatmapLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindLayerByName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> lastLayerIsSigmoid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmapLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activation</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Activation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sigmoid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-20"></span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add a sigmoid layer if the last layer is not sigmoid</span></span>
<span id="cb5-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>lastLayerIsSigmoid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-24">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sigmoid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SigmoidLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-26"></span>
<span id="cb5-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the names of the output layers for offsets, forward, and backward displacements</span></span>
<span id="cb5-28">    offsetsLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>offsetsLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-29">    displacementFWDLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>displacementFWDLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-30">    displacementBWDLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>displacementBWDLayerIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="findlayerbyname" class="level4">
<h4 class="anchored" data-anchor-id="findlayerbyname"><code>FindLayerByName</code></h4>
<p>This method searches for a layer in the model by its name and returns the layer if found.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Finds a layer in the model by its name.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"model"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The model to search for the layer.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"layerName"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The name of the layer to find.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The layer with the given name or null if not found.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb6-7">Layer <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindLayerByName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Model model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> layerName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Layer layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> layerName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="loadclasslabels"><code>LoadClassLabels</code></h4>
<p>This method loads the class labels from the TextAsset, deserializes the JSON, and updates the <code>classes</code> array.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads the class labels from the TextAsset and updates the classes array.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb7-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class labels JSON is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-11"></span>
<span id="cb7-12">    ClassLabels classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isclasslabelsjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isclasslabelsjsonnullorempty"><code>IsClassLabelsJsonNullOrEmpty</code></h4>
<p>This method checks if the provided class label JSON file is null or empty.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Checks if the class labels JSON is null or empty.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the JSON is null or empty, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> classLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializeclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="deserializeclasslabels"><code>DeserializeClassLabels</code></h4>
<p>This method deserializes the provided class label JSON string to a <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserializes the class labels JSON into a ClassLabels object.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"json"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The class labels JSON string.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A ClassLabels object, or null if deserialization fails.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ClassLabels <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb9-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-14">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="updateclasslabels"><code>UpdateClassLabels</code></h4>
<p>This method updates the <code>classes</code> array with the provided <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the classes array with the contents of the given ClassLabels object.</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"classLabelsObj"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The ClassLabels object containing class labels.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ClassLabels classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-11"></span>
<span id="cb10-12">    classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">classes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>This method executes the PoseNet model with the given input texture.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Executes the model with the given input texture.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input texture to process.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-7">    minDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-8"></span>
<span id="cb11-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tensor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb11-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="processoutput" class="level4">
<h4 class="anchored" data-anchor-id="processoutput"><code>ProcessOutput</code></h4>
<p>This method processes the output tensors and returns an array of detected human poses. It can use either single-pose decoding or multiple-pose decoding.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Processes the output tensors and returns an array of detected human poses.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"useMultiPoseDecoding"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True to use multiple pose decoding, false to use single pose decoding.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"maxPoses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The maximum number of poses to detect.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of detected human poses.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProcessOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> useMultiPoseDecoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize a list to store the detected human poses</span></span>
<span id="cb12-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> humanPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the output tensors from the neural network</span></span>
<span id="cb12-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor heatmaps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SigmoidLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>offsetsLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor displacementFWD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacementFWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Tensor displacementBWD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacementBWDLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the stride based on the dimensions of the heatmaps</span></span>
<span id="cb12-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minHeatMapDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>minDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>minHeatMapDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-21">    stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decide whether to use single pose decoding or multiple pose decoding</span></span>
<span id="cb12-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>useMultiPoseDecoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decode multiple poses and store them in the humanPoses list</span></span>
<span id="cb12-27">        humanPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeMultiplePoses</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb12-28">            heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-29">            displacementFWD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementBWD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-30">            stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> maxPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> nmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   </span>
<span id="cb12-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb12-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decode a single pose and add it to the humanPoses list</span></span>
<span id="cb12-35">        HumanPose2D pose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> HumanPose2D</span>
<span id="cb12-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-37">            index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-38">            bodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeSinglePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-40">        humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-42"></span>
<span id="cb12-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unload unused assets if needed</span></span>
<span id="cb12-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssetsIfNeeded</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-45"></span>
<span id="cb12-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the list of human poses to an array and return it</span></span>
<span id="cb12-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="unloadunusedassetsifneeded" class="level4">
<h4 class="anchored" data-anchor-id="unloadunusedassetsifneeded"><code>UnloadUnusedAssetsIfNeeded</code></h4>
<p>This method unloads unused assets if needed based on the worker type and frame counter.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Unloads unused assets if needed based on the worker type and frame counter.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssetsIfNeeded</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">    frameCounter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-11">        Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-12">        frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="decodesinglepose" class="level4">
<h4 class="anchored" data-anchor-id="decodesinglepose"><code>DecodeSinglePose</code></h4>
<p>This method decodes a single human pose from the given <code>heatmaps</code> and <code>offsets</code> tensors and returns an array of body parts.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Decodes a single human pose from the given heatmaps and offsets tensors.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts for the decoded pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeSinglePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-11">    BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>numBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb14-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-15">        BodyPart2D part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindHighestConfidenceBodyPart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-16">        part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-17">        bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-19"></span>
<span id="cb14-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="findhighestconfidencebodypart" class="level4">
<h4 class="anchored" data-anchor-id="findhighestconfidencebodypart"><code>FindHighestConfidenceBodyPart</code></h4>
<p>This method finds the body part with the highest confidence for the given channel in the heatmaps tensor and returns the body part.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Finds the body part with the highest confidence for the given channel in the heatmaps tensor.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"channel"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The channel representing the body part to search for.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The body part with the highest confidence.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> BodyPart2D <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindHighestConfidenceBodyPart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">    BodyPart2D part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> BodyPart2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-10"></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb15-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb15-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-15">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb15-16">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-17">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-18">                part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confidence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-19">                part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-20">                part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-21">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-24"></span>
<span id="cb15-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getoffsetvector" class="level4">
<h4 class="anchored" data-anchor-id="getoffsetvector"><code>GetOffsetVector</code></h4>
<p>This method returns the offset vector for the given coordinates and keypoint in the offsets tensor.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Returns the offset vector for the given coordinates and keypoint in the offsets tensor.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"y"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"x"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"keypoint"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The keypoint index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offset vector for the specified keypoint.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb16-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetOffsetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> keypoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> channelOffset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> keypoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> channelOffset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> keypoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb16-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getimagecoords" class="level4">
<h4 class="anchored" data-anchor-id="getimagecoords"><code>GetImageCoords</code></h4>
<p>This method converts body part coordinates to image coordinates using the given stride and offsets tensor.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Converts body part coordinates to image coordinates using the given stride and offsets tensor.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"part"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The body part with heatmap coordinates.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The image coordinates for the given body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BodyPart2D part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">    Vector2 offsetVector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetOffsetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offsetVector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getstridedindexnearpoint" class="level4">
<h4 class="anchored" data-anchor-id="getstridedindexnearpoint"><code>GetStridedIndexNearPoint</code></h4>
<p>This method gets the stridden index near a given point, given the stride, tensor height, and tensor width.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Gets the strided index near a given point.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"point"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The point for which the strided index is calculated.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The height of the tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The width of the tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The strided index as a Vector2Int.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb18-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetStridedIndexNearPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2 point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb18-12">        Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Clamp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RoundToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb18-13">        Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Clamp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RoundToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getdisplacement" class="level4">
<h4 class="anchored" data-anchor-id="getdisplacement"><code>GetDisplacement</code></h4>
<p>This method gets the displacement for the specified edge and point in the <code>displacements</code> tensor and returns it as a Vector2.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Gets the displacement for the specified edge and point in the displacements tensor.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"edgeId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The edge index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"point"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The point as a Vector2Int.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacements"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacement as a Vector2.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb19-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetDisplacement</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb19-12">        displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb19-13">        displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb19-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="traversetotargetbodypart2d" class="level4">
<h4 class="anchored" data-anchor-id="traversetotargetbodypart2d"><code>TraverseToTargetBodyPart2D</code></h4>
<p>This method takes an edge index, a source body part, a target body part index, and tensors for scores, offsets, stride, and displacements. It calculates the displaced point by adding the displacement value to the source body part coordinates and returns the target body part as a <code>BodyPart2D</code> instance.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Traverses to the target body part from the source body part using the given edge.</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"edgeId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The edge index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sourceBodyPart2D"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The source body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"targetBodyPart2DId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The target body part index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scores"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The scores tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacements"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The target body part as a BodyPart2D.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb20-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseToTargetBodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb20-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BodyPart2D sourceBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-14">    Tensor scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-15">    Tensor displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get height and width from the scores tensor</span></span>
<span id="cb20-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-20"></span>
<span id="cb20-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the source body part indices in the strided space</span></span>
<span id="cb20-22">    Vector2Int sourceBodyPart2DIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetStridedIndexNearPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sourceBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-23"></span>
<span id="cb20-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the displacement for the given edge</span></span>
<span id="cb20-25">    Vector2 displacement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetDisplacement</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>edgeId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sourceBodyPart2DIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-26"></span>
<span id="cb20-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the displaced point by adding the displacement to the source body part coordinates</span></span>
<span id="cb20-28">    Vector2 displacedPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sourceBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> displacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-29"></span>
<span id="cb20-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the displaced point indices in the strided space</span></span>
<span id="cb20-31">    Vector2Int displacedPointIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetStridedIndexNearPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacedPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-32"></span>
<span id="cb20-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the offset vector for the target body part</span></span>
<span id="cb20-34">    Vector2 offsetVector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetOffsetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-35"></span>
<span id="cb20-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the score for the target body part</span></span>
<span id="cb20-37">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacedPointIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb20-38"></span>
<span id="cb20-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the target body part coordinates by adding the offset vector to the displaced point indices</span></span>
<span id="cb20-40">    Vector2 targetBodyPart2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displacedPointIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offsetVector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-41"></span>
<span id="cb20-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the target body part as a BodyPart2D instance</span></span>
<span id="cb20-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>targetBodyPart2DId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-44"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="decodepose" class="level4">
<h4 class="anchored" data-anchor-id="decodepose"><code>DecodePose</code></h4>
<p>This method takes a root body part, tensors for scores, offsets, stride, the forward and backward displacements, and returns an array of BodyPart2D instances for the decoded pose.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Decodes the pose given a root body part, scores, offsets, stride, and displacements tensors.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"root"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The root BodyPart2D.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scores"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The scores tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementsFwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The forward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementsBwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The backward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BodyPart2D for the decoded pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb21-12">    BodyPart2D root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacementsBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the number of body parts from the scores tensor</span></span>
<span id="cb21-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-17"></span>
<span id="cb21-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize an array of BodyPart2D instances for storing the decoded pose</span></span>
<span id="cb21-19">    BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> instanceBodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>numBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb21-20"></span>
<span id="cb21-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compute the root point coordinates in the image and store it in the array</span></span>
<span id="cb21-22">    Vector2 rootPoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-23">    instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rootPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-24"></span>
<span id="cb21-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the number of edges from parentChildrenTuples</span></span>
<span id="cb21-26">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parentChildrenTuples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-27"></span>
<span id="cb21-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Traverse the edges in both directions to decode the pose</span></span>
<span id="cb21-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementsBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-31"></span>
<span id="cb21-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the decoded pose as an array of BodyPart2D instances</span></span>
<span id="cb21-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="traverseedges" class="level4">
<h4 class="anchored" data-anchor-id="traverseedges"><code>TraverseEdges</code></h4>
<p>This method traverses edges from the source to the target body part, updating the position and probability of the target body part in the <code>instanceBodyParts</code> array.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Traverses edges from the source to the target body part.</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"instanceBodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BodyPart2D instances.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scores"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The scores tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacements"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"numEdges"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The number of edges.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"reverse"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Whether to reverse the traversal direction.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb22-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb22-12">    BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the start, end, and step of the edge traversal based on the reverse flag</span></span>
<span id="cb22-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeStart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> numEdges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeEnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> numEdges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edgeStep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-19"></span>
<span id="cb22-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Traverse the edges in the specified direction</span></span>
<span id="cb22-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edgeStart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> edgeEnd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> edgeStep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parentChildrenTuples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>edge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-24"></span>
<span id="cb22-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Swap source and target body part IDs if traversing in reverse</span></span>
<span id="cb22-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-30"></span>
<span id="cb22-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the source body part has a probability greater than 0 and the target body part has not been detected,</span></span>
<span id="cb22-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// traverse to the target body part and update its position and probability in the instanceBodyParts array</span></span>
<span id="cb22-33">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0f</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span></span>
<span id="cb22-34">            instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-36">            instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TraverseToTargetBodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb22-37">                edge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> instanceBodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>sourceBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> targetBodyPartId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-38">                scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="scoreismaximuminlocalwindow" class="level4">
<h4 class="anchored" data-anchor-id="scoreismaximuminlocalwindow"><code>ScoreIsMaximumInLocalWindow</code></h4>
<p>The <code>ScoreIsMaximumInLocalWindow</code> method checks if a given score is the maximum in a local window around the pose skeleton point.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Checks if a score is the maximum in a local window around the keypoint.</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"keypointId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The keypoint index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"score"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The score to check.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmapY"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate of the keypoint in the heatmap.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmapX"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate of the keypoint in the heatmap.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"localMaximumRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The radius of the local window to search.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the score is the maximum in the local window, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb23-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScoreIsMaximumInLocalWindow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> heatmapY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> heatmapX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yStart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yEnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> localMaximumRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-16"></span>
<span id="cb23-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through the local window around the keypoint</span></span>
<span id="cb23-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yStart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> yCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> yEnd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>yCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-20">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xStart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xEnd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmapX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> localMaximumRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-22"></span>
<span id="cb23-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xStart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> xCurrent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> xEnd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>xCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If any value in the local window is greater than the score,</span></span>
<span id="cb23-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// it is not the maximum</span></span>
<span id="cb23-27">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> yCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> xCurrent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-29">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-33"></span>
<span id="cb23-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If none of the values in the local window are greater, the score is the maximum</span></span>
<span id="cb23-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="buildpartlist" class="level4">
<h4 class="anchored" data-anchor-id="buildpartlist"><code>BuildPartList</code></h4>
<p>This method builds a list of BodyPart2D instances with scores above the specified threshold and which are the maximum in their local window.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Builds a list of BodyPart2D instances that have a score above the threshold and are the maximum in their local window.</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scoreThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum score threshold.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"localMaximumRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The radius of the local window to search.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of BodyPart2D instances that meet the conditions.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BuildPartList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb24-11"></span>
<span id="cb24-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through the channels, height, and width of the heatmaps tensor</span></span>
<span id="cb24-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb24-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb24-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-17">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb24-18">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-19">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb24-20"></span>
<span id="cb24-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the score is greater or equal to the threshold and is the maximum in the local window,</span></span>
<span id="cb24-22">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// add it to the list</span></span>
<span id="cb24-23">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> scoreThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span></span>
<span id="cb24-24">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScoreIsMaximumInLocalWindow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> localMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb24-25">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-26">                    list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb24-27">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-31"></span>
<span id="cb24-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="withinnmsradiusofcorrespondingpoint" class="level4">
<h4 class="anchored" data-anchor-id="withinnmsradiusofcorrespondingpoint"><code>WithinNmsRadiusOfCorrespondingPoint</code></h4>
<p>This method checks if a given vector is within the non-maximum suppression radius of a corresponding point in any pose.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Checks if a given vector is within the non-maximum suppression radius of a corresponding point in any pose.</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"poses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of HumanPose2D instances.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"squaredNmsRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The squared non-maximum suppression radius.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"vec"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The vector to be checked.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"keypointId"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The keypoint index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the vector is within the radius of a corresponding point in any pose, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb25-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WithinNmsRadiusOfCorrespondingPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb25-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> poses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> squaredNmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> poses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>keypointId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrMagnitude</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> squaredNmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="decodemultipleposes" class="level4">
<h4 class="anchored" data-anchor-id="decodemultipleposes"><code>DecodeMultiplePoses</code></h4>
<p>This method decodes multiple human poses from the model output.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Decodes multiple human poses from the given heatmaps, offsets, and displacements tensors.</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"heatmaps"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The heatmaps tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offsets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offsets tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementsFwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The forward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displacementBwd"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The backward displacements tensor.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride for decoding the pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"maxPoseDetections"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The maximum number of pose detections.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scoreThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum score threshold for a part to be considered.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"nmsRadius"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The non-maximum suppression radius.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of decoded HumanPose2D instances.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb26-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodeMultiplePoses</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb26-14">    Tensor heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-15">    Tensor displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor displacementBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxPoseDetections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scoreThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nmsRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-19">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> humanPoses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb26-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> squaredNmsRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nmsRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> nmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-21"></span>
<span id="cb26-22">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bodyPartList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BuildPartList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>scoreThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> kLocalMaximumRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-23">    bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sort</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CompareTo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb26-24"></span>
<span id="cb26-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Continue decoding poses until the maximum number of detections is reached or the body part list is empty</span></span>
<span id="cb26-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> maxPoseDetections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-28">        BodyPart2D root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb26-29">        bodyPartList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RemoveAt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-30"></span>
<span id="cb26-31">        Vector2 rootImageCoords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetImageCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-32"></span>
<span id="cb26-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the root is not within the non-maximum suppression radius of any existing pose,</span></span>
<span id="cb26-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// decode the pose and add it to the list of human poses</span></span>
<span id="cb26-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WithinNmsRadiusOfCorrespondingPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> squaredNmsRadius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rootImageCoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb26-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-37">            HumanPose2D pose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> HumanPose2D</span>
<span id="cb26-38">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-39">                index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-40">                bodyParts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DecodePose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> heatmaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementsFwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displacementBwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-41">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb26-42">            humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-43">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-45"></span>
<span id="cb26-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-47"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropinputdims" class="level4">
<h4 class="anchored" data-anchor-id="cropinputdims"><code>CropInputDims</code></h4>
<p>This method crops input dimensions to be divisible by the maximum stride.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Crop input dimensions to be divisible by the maximum stride.</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb27-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropInputDims</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-6">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> maxStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-7">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> maxStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-8"></span>
<span id="cb27-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-posenet/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb28-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb28-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb28-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb28-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb28-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables"><code>PackageInstaller</code> Class Variables</h4>
<p>The <code>PackageInstaller</code> class contains several private static fields.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb29-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb29-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb29-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0d78f4ab62d44aba8a8e95e6a8abfe8a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb30-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb30-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb30-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb30-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb30-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb30-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb30-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb30-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb31-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb31-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb31-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb31-8"></span>
<span id="cb31-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb31-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb31-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb31-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb31-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb31-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb31-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb31-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb31-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb32-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb32-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb32-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb32-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb32-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb32-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb32-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb32-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb32-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-15"></span>
<span id="cb32-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb32-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb32-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb32-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb32-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb32-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb33-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-7"></span>
<span id="cb33-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb33-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb33-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-17"></span>
<span id="cb33-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb34-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb34-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb34-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb34-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb34-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference PoseNet package. The package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform 2D human pose estimation using PoseNet models.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-posenet">unity-barracuda-inference-posenet</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-posenet-walkthrough/index.html</guid>
  <pubDate>Sun, 07 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Human Pose 2D Toolkit Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-human-pose-2d-toolkit-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit">Unity Human Pose 2D Toolkit</a> provides an easy-to-use and customizable solution to work with and visualize 2D human poses on a Unity canvas.</p>
<p>Some of my tutorials involve using 2D pose estimation models in Unity applications. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Check out the demo video below to see this package in action.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-posenet-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-posenet-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains three C# scripts and prefabs to construct 2D human poses.</p>
<section id="c-scripts" class="level3">
<h3 class="anchored" data-anchor-id="c-scripts">C# Scripts</h3>
<ol type="1">
<li><code>HumanPose2DUtils.cs</code>: This script provides functionality to work with 2D pose skeletons for pose estimation tasks.</li>
<li><code>HumanPose2DVisualizer.cs</code>: This script displays 2D human pose skeletons on a Unity canvas.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
</ol>
</section>
<section id="prefabs" class="level3">
<h3 class="anchored" data-anchor-id="prefabs">Prefabs</h3>
<ol type="1">
<li><code>BonePrefab.prefab</code>: The HumanPose2DVisualizer.cs script uses this prefab to construct the bones connecting points in pose skeletons.</li>
<li><code>JointPrefab.prefab</code>: An Image prefab used to visualize the points in pose skeletons.</li>
<li><code>PoseContainerPrefab.prefab</code>: This prefab is for pose containers that hold the joints and bones for pose skeletons.</li>
<li><code>HumanPose2DVisualizer.prefab</code>: This prefab helps simplify adding 2D human pose visualization to a Unity scene. The prefab already has the HumanPose2DVisualizer script attached and has a child Canvas component.</li>
</ol>
</section>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity Human Pose 2D Toolkit package by examining the purpose and functionality of each C# script.</p>
<section id="humanpose2dutils.cs" class="level3">
<h3 class="anchored" data-anchor-id="humanpose2dutils.cs"><code>HumanPose2DUtils.cs</code></h3>
<p>The HumanPose2DUtils.cs script provides functionality to work with 2D pose skeletons for pose estimation tasks. It contains utility classes and structs for managing 2D human pose data. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit/blob/main/Runtime/Scripts/HumanPose2DUtils.cs">HumanPose2DUtils.cs</a></li>
</ul>
<section id="bodypart2d-struct" class="level4">
<h4 class="anchored" data-anchor-id="bodypart2d-struct"><code>BodyPart2D</code> struct</h4>
<p>This struct represents a single body part in 2D space with its index, coordinates, and probability.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Represents a single body part in 2D space with its index, coordinates, and probability.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> BodyPart2D</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the body part</span></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2 coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The 2D coordinates of the body part</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The probability of the detected body part</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the BodyPart2D struct.</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The index of the body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"coordinates"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The 2D coordinates of the body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prob"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The probability of the detected body part.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BodyPart2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="humanpose2d-struct" class="level4">
<h4 class="anchored" data-anchor-id="humanpose2d-struct"><code>HumanPose2D</code> struct</h4>
<p>This struct represents a detected human pose in 2D space with its index and an array of body parts.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Represents a detected human pose in 2D space with its index and an array of body parts.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> HumanPose2D</span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the detected human pose</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// An array of the body parts that make up the human pose</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the HumanPose2D struct.</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The index of the detected human pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts that make up the human pose.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HumanPose2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="humanpose2dutility-static-class" class="level4">
<h4 class="anchored" data-anchor-id="humanpose2dutility-static-class"><code>HumanPose2DUtility</code> static class</h4>
<p>This class contains a single static method that scales and optionally mirrors the coordinates of a body part in a pose skeleton to match the in-game screen and display resolutions.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> HumanPose2DUtility</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Scales and optionally mirrors the coordinates of a body part in a pose skeleton to match the in-game screen and display resolutions.</span></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"coordinates"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The (x,y) coordinates for a BodyPart object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the input image used for pose estimation.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the in-game screen where the body part will be displayed.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An offset to apply to the body part coordinates when scaling.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mirrorScreen"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A boolean flag to indicate if the body part coordinates should be mirrored horizontally (default is false).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScaleBodyPartCoords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2 coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The smallest dimension of the screen</span></span>
<span id="cb3-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The smallest input dimension</span></span>
<span id="cb3-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minInputDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb3-19">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> minImgScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> minInputDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb3-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScaleX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScaleY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displayScaleX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displayScaleY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-24"></span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale body part coordinates to in-game screen resolution and flip the coordinates vertically</span></span>
<span id="cb3-27">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-28">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-29"></span>
<span id="cb3-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Mirror bounding box across screen</span></span>
<span id="cb3-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-33">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-35"></span>
<span id="cb3-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale coordinates to display resolution</span></span>
<span id="cb3-37">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-39"></span>
<span id="cb3-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Offset the coordinates coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb3-41">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-42">        coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-43"></span>
<span id="cb3-44">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="humanpose2dvisualizer.cs" class="level3">
<h3 class="anchored" data-anchor-id="humanpose2dvisualizer.cs"><code>HumanPose2DVisualizer.cs</code></h3>
<p>The HumanPose2DVisualizer script is a Unity C# <code>MonoBehaviour</code> class that displays 2D human pose skeletons on a Unity canvas. It creates, updates, and manages UI elements for visualizing them based on the provided <code>HumanPose2D</code> array. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit/blob/main/Runtime/Scripts/HumanPose2DVisualizer.cs">HumanPose2DVisualizer.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The script contains several fields for prefabs and configuring pose skeleton visualizations.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Main canvas to display poses</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UI Components"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The main canvas to display poses"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Canvas canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prefabs for pose containers, joints, and bones</span></span>
<span id="cb4-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prefab for the pose container, which holds the joints and bones"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform poseContainerPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prefab for the joint image"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Image jointPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prefab for the bone RectTransform"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform bonePrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Configuration and styling</span></span>
<span id="cb4-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Configuration"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The JSON file containing body part connection information"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset bodyPartConnectionsFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The color of the bones"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Color boneColor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The color of the joints"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb4-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Color jointColor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">green</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="serialized-classes" class="level4">
<h4 class="anchored" data-anchor-id="serialized-classes">Serialized Classes</h4>
<p>There are a couple of nested serialized classes to store body part connection information from a JSON file.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable classes to store body part connection information from JSON</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BodyPartConnection</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> from<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Index of the starting body part</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Index of the ending body part</span></span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BodyPartConnectionList</span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPartConnection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of body part connections</span></span>
<span id="cb5-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Variables to store runtime instances and data</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPartConnection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of body part connections</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> poseContainers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of instantiated pose containers</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> joints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Nested list of instantiated joint images</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> bones <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Nested list of instantiated bone RectTransforms</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Confidence threshold for displaying poses</span></span></code></pre></div>
</section>
<section id="guid-constants" class="level4">
<h4 class="anchored" data-anchor-id="guid-constants">GUID Constants</h4>
<p>These are the GUIDs of the default assets.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUIDs of the default assets</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PoseContainerPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12c840be0a8d4adc879fc14fb79a316d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> JointPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d90f7f2e5b8f4daa885f9441f0f33427"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> BonePrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ed947d23b5354617b130aa8ee0cc610b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> BodyPartConnectionsFileGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0fc008c60a8e44589674b0f455384a5b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="reset" class="level4">
<h4 class="anchored" data-anchor-id="reset"><code>Reset</code></h4>
<p>This method sets the default assets from the project using their GUIDs. It uses <code>AssetDatabase</code> to find them and set the default values. This method will only work in the Unity Editor, not in a build.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Reset is called when the user hits the Reset button in the Inspector's context menu</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// or when adding the component the first time. This function is only called in editor mode.</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load default assets only in the Unity Editor, not in a build</span></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb8-9">    poseContainerPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>PoseContainerPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-10">    jointPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>JointPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-11">    bonePrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>BonePrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-12">    bodyPartConnectionsFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TextAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>BodyPartConnectionsFileGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb8-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loaddefaultasset" class="level4">
<h4 class="anchored" data-anchor-id="loaddefaultasset"><code>LoadDefaultAsset</code></h4>
<p>This method provides a generic way to load default assets for the specified fields using their GUIDs.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads the default asset for the specified type using its GUID.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;typeparam</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"T"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The type of asset to be loaded.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/typeparam&gt;</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"guid"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GUID of the default asset.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The loaded asset of the specified type.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;remarks&gt;</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// This method is only executed in the Unity Editor, not in builds.</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/remarks&gt;</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> T LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> where T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Object</span></span>
<span id="cb9-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb9-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load the asset from the AssetDatabase using its GUID</span></span>
<span id="cb9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAssetAtPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb9-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#else</span></span>
<span id="cb9-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb9-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method runs when the script initializes and loads the body part connection list from the JSON file.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadBodyPartConnectionList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadbodypartconnectionlist" class="level4">
<h4 class="anchored" data-anchor-id="loadbodypartconnectionlist"><code>LoadBodyPartConnectionList</code></h4>
<p>This method deserializes the JSON file specifying the body part connections for pose skeletons.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the JSON file</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadBodyPartConnectionList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb11-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-11"></span>
<span id="cb11-12">    bodyPartConnections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeBodyPartConnectionsList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bodyPartConnectionsFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyPartConnections</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isjsonnullorempty"><code>IsJsonNullOrEmpty</code></h4>
<p>This method checks if the JSON file is null or empty.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if JSON file is null or empty</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bodyPartConnectionsFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bodyPartConnectionsFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializebodypartconnectionslist" class="level4">
<h4 class="anchored" data-anchor-id="deserializebodypartconnectionslist"><code>DeserializeBodyPartConnectionsList</code></h4>
<p>This method deserializes the JSON string into a <code>BodyPartConnectionList</code>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the JSON string</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> BodyPartConnectionList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeBodyPartConnectionsList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb13-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BodyPartConnectionList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-12">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateposevisualizations" class="level4">
<h4 class="anchored" data-anchor-id="updateposevisualizations"><code>UpdatePoseVisualizations</code></h4>
<p>This method updates pose visualizations based on the provided human poses and a confidence threshold.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the pose visualizations based on the provided human poses and a confidence threshold.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"humanPoses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of human poses to visualize</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"confidenceThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum confidence required to display a pose (default is 0.5f)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdatePoseVisualizations</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>HumanPose2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confidenceThreshold</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiate pose containers, joint images, and bone RectTransforms as needed to match the number of humanPoses</span></span>
<span id="cb14-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-13">        RectTransform newPoseContainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>poseContainerPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-14">        poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newPoseContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-15">        joints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb14-16">        bones<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb14-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get references to joint and bone containers for the current pose</span></span>
<span id="cb14-24">            RectTransform jointContainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Find</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JointContainer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb14-25">            RectTransform boneContainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Find</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BoneContainer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb14-26"></span>
<span id="cb14-27">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the joint positions and visibility</span></span>
<span id="cb14-28">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateJoints</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> joints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb14-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the bone positions, rotations, and visibility</span></span>
<span id="cb14-30">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBones</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>humanPoses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bodyParts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> joints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> bones<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb14-31"></span>
<span id="cb14-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the pose container active</span></span>
<span id="cb14-33">            poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb14-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the pose container inactive for unused containers</span></span>
<span id="cb14-38">            poseContainers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="screentocanvaspoint" class="level4">
<h4 class="anchored" data-anchor-id="screentocanvaspoint"><code>ScreenToCanvasPoint</code></h4>
<p>This method convert a screen point to a local one within the given canvas <code>RectTransform</code>.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Converts a screen point to a local point within the given canvas RectTransform.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"canvas"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The canvas RectTransform to convert the point to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenPoint"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The screen point to convert</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A Vector2 representing the local point within the canvas RectTransform</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RectTransform canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 screenPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">    RectTransformUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenPointToLocalPointInRectangle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">out</span> Vector2 localPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> localPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatejoints" class="level4">
<h4 class="anchored" data-anchor-id="updatejoints"><code>UpdateJoints</code></h4>
<p>This method updates joint visualizations based on the provided body parts, adjusting their positions and visibility.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the joint visualizations based on the provided body parts, adjusting their positions and visibility.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts containing position and probability data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jointContainer"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The RectTransform containing joint images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jointsList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of instantiated joint images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateJoints</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RectTransform jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiate joint images as needed to match the number of bodyParts</span></span>
<span id="cb16-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-12">        Image newJoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>jointPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-13">        jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newJoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb16-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-20">            Image joint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb16-21">            RectTransform jointRect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update joint position</span></span>
<span id="cb16-23">            jointRect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>jointContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update joint color</span></span>
<span id="cb16-25">            joint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointColor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the joint game object active</span></span>
<span id="cb16-27">            joint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb16-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the joint game object inactive if below the confidence threshold</span></span>
<span id="cb16-32">            jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-33">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatebones" class="level4">
<h4 class="anchored" data-anchor-id="updatebones"><code>UpdateBones</code></h4>
<p>This method updates bone visualizations based on the provided body parts and joint positions, adjusting their positions, rotations, and visibility.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the bone visualizations based on the provided body parts and joint positions, adjusting their positions, rotations, and visibility.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bodyParts"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of body parts containing position and probability data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boneContainer"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The RectTransform containing bone RectTransforms</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jointsList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of instantiated joint images</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bonesList"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of instantiated bone RectTransforms</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBones</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BodyPart2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RectTransform boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiate bone RectTransforms as needed to match the number of bodyPartConnections</span></span>
<span id="cb17-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-13">        RectTransform newBone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bonePrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-14">        bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newBone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-16"></span>
<span id="cb17-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb17-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-19">        Image fromJoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-20">        Image toJoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jointsList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-21"></span>
<span id="cb17-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If both connected joints are active, display the bone</span></span>
<span id="cb17-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fromJoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> toJoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb17-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-25">            RectTransform bone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-26">            Vector2 fromJointPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-27">            Vector2 toJointPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bodyParts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bodyPartConnections<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coordinates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-28">            Vector2 direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toJointPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> fromJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-29">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">magnitude</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-30">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Atan2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Rad2Deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-31"></span>
<span id="cb17-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update bone size based on the distance between joints</span></span>
<span id="cb17-33">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-34"></span>
<span id="cb17-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the bone position and update it</span></span>
<span id="cb17-36">            Vector2 bonePos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>fromJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> toJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fromJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> toJointPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-37">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boneContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bonePos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-38"></span>
<span id="cb17-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update bone rotation based on the angle between joints</span></span>
<span id="cb17-40">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">localEulerAngles</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-41">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boneColor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-42">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the bone game object active</span></span>
<span id="cb17-43">            bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-44">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb17-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the bone game object inactive if below the confidence threshold</span></span>
<span id="cb17-48">            bonesList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the Human Pose 2D Toolkit package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-human-pose-2d-toolkit/blob/main/Editor/AddCustomDefineSymbol.cs">AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> CJM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HumanPose2DToolkit</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb18-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_HUMAN_POSE_2D_TOOLKIT"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-9"></span>
<span id="cb18-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb18-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group</span></span>
<span id="cb18-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group</span></span>
<span id="cb18-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the CustomDefineSymbol is already present in the defines string</span></span>
<span id="cb18-19">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb18-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the CustomDefineSymbol to the defines string, separated by a semicolon</span></span>
<span id="cb18-22">                defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated defines string as the new scripting define symbols for the selected build target group</span></span>
<span id="cb18-24">                PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-25">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log a message in the Unity console to inform the user that the custom define symbol has been added</span></span>
<span id="cb18-26">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity Human Pose 2D Toolkit package. The package provides an easy-to-use and customizable solution to work with and visualize 2D human poses on a Unity canvas.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-posenet">unity-human-pose-2d-toolkit</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-human-pose-2d-toolkit-walkthrough/index.html</guid>
  <pubDate>Sat, 06 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference YOLOX Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-yolox-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-yolox">Barracuda Inference YOLOX</a> package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform object detection using <a href="https://github.com/Megvii-BaseDetection/YOLOX">YOLOX</a> models.</p>
<p>Object detection has numerous potential uses in Unity applications, including giving NPCs a more realistic perception of their environment, gesture-based controls, and augmented reality, to name a few. Here is a demo video from a project that uses this package to detect hand gestures.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>YOLOXObjectDetector.cs</code>: This script provides functionality to perform object detection with YOLOX models using the Barracuda inference engine.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference YOLOX package by examining the purpose and functionality of each C# script.</p>
<section id="yoloxobjectdetector.cs" class="level3">
<h3 class="anchored" data-anchor-id="yoloxobjectdetector.cs"><code>YOLOXObjectDetector.cs</code></h3>
<p>This script defines the <code>YOLOXObjectDetector</code> class, which extends the <code>BarracudaModelRunner</code> class from the Barracuda Inference Base package to perform object detection using YOLOX models. This class also depends on the <a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit"><code>bounding-box-2d-toolkit</code></a> and <a href="https://github.com/cj-mills/unity-yolox-utils"><code>unity-yolox-utils</code></a> packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-yolox/blob/main/Runtime/Scripts/YOLOXObjectDetector.cs">YOLOXObjectDetector.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The <code>YOLOXObjectDetector</code> class includes a field to add a color map from a JSON file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output Processing configuration and variables</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output Processing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// JSON file containing the color map for bounding boxes</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file with bounding box colormaps"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset colormapFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also includes a field to control how often to unload memory assets when using Barracuda‚Äôs Pixel Shader backend. The Pixel Shader backend enables GPU inference on platforms that don‚Äôt support Compute Shaders. However, there seems to be a bug in the current version of Barracuda, which does not release unused assets when using this backend. Left unchecked, this can fill up both system and GPU memory. We can address this by manually freeing memory. Doing that every frame can hurt performance, so we‚Äôll only do it at set intervals.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Settings"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval (in frames) for unloading unused assets with Pixel Shader backend"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The <code>Colormap</code> and <code>ColormapList</code> classes help store color map information from a JSON file, which we then use for generating bounding boxes.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable classes to store color map information from JSON</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Colormap</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ColormapList</span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A counter for the number of frames processed.</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Indicates if the system supports asynchronous GPU readback</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stride values used by the YOLOX model</span></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">readonly</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> Strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Number of fields in each bounding box</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> NumBBoxFields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Layer names for the Transpose, Flatten, and TransposeOutput operations</span></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> TransposeLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transpose"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> FlattenLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flatten"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> TransposeOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transposeOutput"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Texture formats for output processing</span></span>
<span id="cb4-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextureFormat textureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RHalf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTextureFormat renderTextureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RHalf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List to store label and color pairs for each class</span></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;</span> colormapList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;();</span></span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output textures for processing on CPU and GPU</span></span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Texture2D outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTexture outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List to store grid and stride information for the YOLOX model</span></span>
<span id="cb4-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> gridCoordsAndStrides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Length of the proposal array for YOLOX output</span></span>
<span id="cb4-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method runs at the start of the script. It performs several initializations, including checking for async GPU readback support, loading the color map list, and initializing the output texture.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Called at the start of the script</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported</span></span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load colormap information from JSON file</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize output texture</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    proposalLength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> NumBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate proposal length</span></span>
<span id="cb5-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="checkasyncgpureadbacksupport" class="level4">
<h4 class="anchored" data-anchor-id="checkasyncgpureadbacksupport"><code>CheckAsyncGPUReadbackSupport</code></h4>
<p>This method checks if the system supports asynchronous GPU readback</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the system supports async GPU readback</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SystemInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">supportsAsyncGPUReadback</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads and prepares the YOLOX model by setting worker types and applying transpose and flatten operations.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load and prepare the YOLOX model</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">    defaultOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-7">    WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span> bestType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ValidateType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> supportsComputeBackend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bestType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ComputePrecompiled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set worker type for WebGL</span></span>
<span id="cb7-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-13">        workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-15"></span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply transpose operation on the output layer</span></span>
<span id="cb7-17">    modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Transpose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb7-18">    defaultOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-19"></span>
<span id="cb7-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply Flatten and TransposeOutput operations if supported</span></span>
<span id="cb7-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>supportsComputeBackend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb7-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-23">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Flatten</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>FlattenLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-24">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Transpose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> FlattenLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb7-25">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Output</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-26">        defaultOutputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TransposeOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeengine" class="level4">
<h4 class="anchored" data-anchor-id="initializeengine"><code>InitializeEngine</code></h4>
<p>This method initializes the Barracuda engine and checks if asynchronous GPU readback is supported.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize the Barracuda engine</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported by the engine</span></span>
<span id="cb8-9">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Summary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unity.Barracuda.ComputeVarsWithSharedModel"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadcolormaplist" class="level4">
<h4 class="anchored" data-anchor-id="loadcolormaplist"><code>LoadColorMapList</code></h4>
<p>This method loads the color map list from a JSON file.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the color map list from the JSON file</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsColorMapListJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb9-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class labels JSON is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">    ColormapList colormapObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateColorMap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="iscolormaplistjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="iscolormaplistjsonnullorempty"><code>IsColorMapListJsonNullOrEmpty</code></h4>
<p>This method checks if the provided color map JSON file is null or empty.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if the color map JSON file is null or empty</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsColorMapListJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> colormapFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializecolormaplist" class="level4">
<h4 class="anchored" data-anchor-id="deserializecolormaplist"><code>DeserializeColorMapList</code></h4>
<p>This method deserializes the provided color map JSON string to a <code>ColormapList</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the color map list from the JSON string</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ColormapList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeColorMapList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb11-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ColormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-12">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatecolormap" class="level4">
<h4 class="anchored" data-anchor-id="updatecolormap"><code>UpdateColorMap</code></h4>
<p>This method updates the <code>colormapList</code> array with the provided <code>ColormapList</code> object.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the color map list with deserialized data</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateColorMap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ColormapList colormapObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormapObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add label and color pairs to the colormap list</span></span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Colormap colormap <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormapObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">items</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-14">        Color color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb12-15">        colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>colormap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="createoutputtexture" class="level4">
<h4 class="anchored" data-anchor-id="createoutputtexture"><code>CreateOutputTexture</code></h4>
<p>This method creates an output texture with the specified width and height.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Create an output texture with the specified width and height.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-6">    outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Texture2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>This method executes the YOLOX model with a given input texture.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Execute the YOLOX model with the given input texture.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tensor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb14-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-10"></span>
<span id="cb14-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update grid_strides if necessary</span></span>
<span id="cb14-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> proposalLength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-14">        gridCoordsAndStrides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateGridCoordinatesWithStrides</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="processoutput" class="level4">
<h4 class="anchored" data-anchor-id="processoutput"><code>ProcessOutput</code></h4>
<p>This method processes the output array from the YOLOX model, applying Non-Maximum Suppression (NMS), and returns an array of BBox2DInfo objects with class labels and colors.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Process the output array from the YOLOX model, applying Non-Maximum Suppression (NMS) and</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// returning an array of BBox2DInfo objects with class labels and colors.</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"outputArray"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The output array from the YOLOX model</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"confidenceThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The minimum confidence score for a bounding box to be considered</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"nms_threshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The threshold for Non-Maximum Suppression (NMS)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BBox2DInfo objects containing the filtered bounding boxes, class labels, and colors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BBox2DInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProcessOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> nms_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate bounding box proposals from the output array</span></span>
<span id="cb15-12">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BBox2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YOLOXUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateBoundingBoxProposals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> NumBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-13"></span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply Non-Maximum Suppression (NMS) to the proposals</span></span>
<span id="cb15-15">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BBox2DUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NMSSortedBoxes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> nms_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-16"></span>
<span id="cb15-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an array of BBox2DInfo objects containing the filtered bounding boxes, class labels, and colors</span></span>
<span id="cb15-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> proposal_indices</span>
<span id="cb15-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb15-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2DInfo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Item1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colormapList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Item2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb15-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtoarray" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtoarray"><code>CopyOutputToArray</code></h4>
<p>This method copies the model output to a float array.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a float array.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>defaultOutputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb16-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-10">            frameCounter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb16-11">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-12">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-13">                Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-14">                frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-15">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Download</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtotexture" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtotexture"><code>CopyOutputToTexture</code></h4>
<p>This method copies the model output to a texture.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a texture.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb17-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb17-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-11">            outputTextureGPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> renderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-13">        output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputwithasyncreadback" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputwithasyncreadback"><code>CopyOutputWithAsyncReadback</code></h4>
<p>This method copies the model output using asynchronous GPU readback if the platform supports it.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output using async GPU readback. If not supported, defaults to synchronous readback.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputWithAsyncReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Async GPU Readback not supported. Defaulting to synchronous readback"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-11"></span>
<span id="cb18-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-13"></span>
<span id="cb18-14">    AsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Request</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">    Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputColors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetPixels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputArray <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reverse</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-18"></span>
<span id="cb18-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Reverse the order of each proposal in the output array</span></span>
<span id="cb18-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-22">        Array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reverse</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-24"></span>
<span id="cb18-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropinputdims" class="level4">
<h4 class="anchored" data-anchor-id="cropinputdims"><code>CropInputDims</code></h4>
<p>This method crops input dimensions to be divisible by the maximum stride.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Crop input dimensions to be divisible by the maximum stride.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropInputDims</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-6">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> Strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb19-7">    inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> Strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb19-8"></span>
<span id="cb19-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="oncompletereadback" class="level4">
<h4 class="anchored" data-anchor-id="oncompletereadback"><code>OnCompleteReadback</code></h4>
<p>This method handles the completion of an async GPU readback request.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Handle the completion of an async GPU readback request.</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hasError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-11"></span>
<span id="cb20-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb20-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load readback data into the output texture and apply changes</span></span>
<span id="cb20-17">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb20-18">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Apply</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb20-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UnityException ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-22">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Message</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LoadRawTextureData: not enough data provided (will result in overread)."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb20-23">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-24">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Updating input data size to match the texture size."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-25">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-26">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb20-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-28">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexpected UnityException: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-29">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>This method cleans up resources when the script is disabled.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Clean up resources when the script is disabled.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb21-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb21-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Release the temporary render texture</span></span>
<span id="cb21-8">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-yolox/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes-1" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes-1">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb22-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb22-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb22-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables"><code>PackageInstaller</code> Class Variables</h4>
<p>The <code>PackageInstaller</code> class contains several private static fields.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb23-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb23-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02aec9cd479b4b758a7afde0032230ec"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb24-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb24-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb24-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb24-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb24-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb24-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb25-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb25-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb25-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb25-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb25-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb25-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb25-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb25-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb25-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb25-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb26-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb26-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb26-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-15"></span>
<span id="cb26-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb26-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb26-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb26-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb26-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb26-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb27-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb27-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-7"></span>
<span id="cb27-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb27-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb27-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-17"></span>
<span id="cb27-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb28-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb28-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb28-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb28-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb28-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference YOLOX package. The package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform object detection using YOLOX models.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-yolox">unity-barracuda-inference-yolox</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-yolox-walkthrough/index.html</guid>
  <pubDate>Sat, 06 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference Image Classification Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-image-classification-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification">Barracuda Inference Image Classification</a> package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform image classification using computer vision models.</p>
<p>Image classification has numerous potential uses in Unity applications, from gesture recognition to analyzing user-generated content. This package makes it easy to add image classification functionality to Unity applications. Here is a demo video from a project that uses this package for gesture classification.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-image-classification-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-image-classification-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>MultiClassImageClassifier.cs</code>: This script provides functionality to perform image classification using the Barracuda inference engine.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference Image Classification package by examining the purpose and functionality of each C# script.</p>
<section id="multiclassimageclassifier.cs" class="level3">
<h3 class="anchored" data-anchor-id="multiclassimageclassifier.cs"><code>MultiClassImageClassifier.cs</code></h3>
<p>This script defines the <code>MultiClassImageClassifier</code> class, which extends the <code>BarracudaModelRunner</code> class from the <a href="https://github.com/cj-mills/unity-barracuda-inference-base">Barracuda Inference Base</a> package to perform image classification. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification/blob/main/Runtime/Scripts/MultiClassImageClassifier.cs">MultiClassImageClassifier.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The <code>MultiClassImageClassifier</code> class includes a field to add class labels with a JSON file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file with class labels"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also includes a field to control how often to unload memory assets when using Barracuda‚Äôs Pixel Shader backend. The Pixel Shader backend enables GPU inference on platforms that don‚Äôt support Compute Shaders. However, there seems to be a bug in the current version of Barracuda, which does not release unused assets when using this backend. Left unchecked, this can fill up both system and GPU memory. We can address this by manually freeing memory. Doing that every frame can hurt performance, so we‚Äôll only do it at set intervals.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval (in frames) for unloading unused assets with Pixel Shader backend"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="private-variables" class="level4">
<h4 class="anchored" data-anchor-id="private-variables">Private Variables</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A counter for the number of frames processed.</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Indicates if the system supports asynchronous GPU readback</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The name of the transpose layer.</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> TransposeLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transpose"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The softmax layer.</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> SoftmaxLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"softmaxLayer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The name of the output layer.</span></span>
<span id="cb3-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Helper class for deserializing class labels from the JSON file</span></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClassLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The class labels</span></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Texture formats for output processing</span></span>
<span id="cb3-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextureFormat textureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RGBA32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTextureFormat renderTextureFormat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ARGB32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output textures for processing on CPU and GPU</span></span>
<span id="cb3-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Texture2D outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTexture outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>This method initializes necessary components at the start of the script, such as checking async GPU readback support, loading class labels, and creating output textures.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize necessary components during the start of the script.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported</span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load class labels from JSON file</span></span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize output texture</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="checkasyncgpureadbacksupport" class="level4">
<h4 class="anchored" data-anchor-id="checkasyncgpureadbacksupport"><code>CheckAsyncGPUReadbackSupport</code></h4>
<p>This method checks if the system supports asynchronous GPU readback</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the system supports async GPU readback</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CheckAsyncGPUReadbackSupport</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SystemInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">supportsAsyncGPUReadback</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads the model and prepares it for execution. It applies the softmax function to the output layer if it‚Äôs not already a softmax layer.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the model and prepare it for execution by applying softmax to the output layer.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load and prepare the model with the base implementation</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">    outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set worker type for WebGL</span></span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> RuntimePlatform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebGLPlayer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-14">        workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the last layer is a Softmax layer</span></span>
<span id="cb6-18">    Layer lastLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">layers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> lastLayerIsSoftmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lastLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activation</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Activation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Softmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-20"></span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the Softmax layer if the last layer is not already a Softmax layer</span></span>
<span id="cb6-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>lastLayerIsSoftmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the Softmax layer</span></span>
<span id="cb6-25">        modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Softmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SoftmaxLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-26">        outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SoftmaxLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-28"></span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply transpose operation on the output layer</span></span>
<span id="cb6-30">    modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Transpose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb6-31">    outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TransposeLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeengine" class="level4">
<h4 class="anchored" data-anchor-id="initializeengine"><code>InitializeEngine</code></h4>
<p>This method initializes the inference engine and checks if the model uses a Compute Shader backend.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize the inference engine and check if the model is using a Compute Shader backend.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if async GPU readback is supported by the engine</span></span>
<span id="cb7-9">    supportsAsyncGPUReadback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Summary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unity.Barracuda.ComputeVarsWithSharedModel"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="loadclasslabels"><code>LoadClassLabels</code></h4>
<p>This method loads the class labels from the provided JSON file.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the class labels from the provided JSON file.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb8-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class labels JSON is null or empty."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">    ClassLabels classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isclasslabelsjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isclasslabelsjsonnullorempty"><code>IsClassLabelsJsonNullOrEmpty</code></h4>
<p>This method checks if the provided class labels JSON file is null or empty.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if the provided class labels JSON file is null or empty.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the file is null or empty, otherwise false.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsClassLabelsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> classLabels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializeclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="deserializeclasslabels"><code>DeserializeClassLabels</code></h4>
<p>This method deserializes the provided class labels JSON string to a <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the provided class labels JSON string to a ClassLabels object.</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"json"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The JSON string to deserialize.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A deserialized ClassLabels object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ClassLabels <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb10-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ClassLabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-14">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize class labels JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateclasslabels" class="level4">
<h4 class="anchored" data-anchor-id="updateclasslabels"><code>UpdateClassLabels</code></h4>
<p>This method updates the <code>classes</code> array with the provided <code>ClassLabels</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the classes array with the provided ClassLabels object.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"classLabelsObj"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The ClassLabels object containing the class labels.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateClassLabels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ClassLabels classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classLabelsObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-11"></span>
<span id="cb11-12">    classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classLabelsObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">classes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="createoutputtextures" class="level4">
<h4 class="anchored" data-anchor-id="createoutputtextures"><code>CreateOutputTextures</code></h4>
<p>This method creates the output textures that will store the model output.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Create the output textures that will store the model output.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateOutputTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Texture2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-7">    outputTextureGPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> renderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>This method executes the model on the provided input texture.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Execute the model on the provided input texture and return the output array.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input texture for the model.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tensor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtoarray" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtoarray"><code>CopyOutputToArray</code></h4>
<p>This method copies the model output to a float array.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a float array.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the output tensor from the engine</span></span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb14-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PixelShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-11">            frameCounter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb14-12">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pixelShaderUnloadInterval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-13">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-14">                Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnloadUnusedAssets</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-15">                frameCounter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-16">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Download the data from the tensor</span></span>
<span id="cb14-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Download</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputtotexture" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputtotexture"><code>CopyOutputToTexture</code></h4>
<p>This method copies the model output to a texture.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output to a texture.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb15-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PeekOutput</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputLayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb15-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Store output tensor data in a RenderTexture</span></span>
<span id="cb15-9">        output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="copyoutputwithasyncreadback" class="level4">
<h4 class="anchored" data-anchor-id="copyoutputwithasyncreadback"><code>CopyOutputWithAsyncReadback</code></h4>
<p>This method copies the model output using asynchronous GPU readback if the platform supports it.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Copy the model output using async GPU readback. If not supported, defaults to synchronous readback.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputWithAsyncReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb16-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>supportsAsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-8">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Async GPU Readback not supported. Defaulting to synchronous readback"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CopyOutputToTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-13"></span>
<span id="cb16-14">    AsyncGPUReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Request</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> textureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> OnCompleteReadback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Extract the output tensor data from the texture</span></span>
<span id="cb16-17">    Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> outputColors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetPixels</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToArray</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb16-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getclassname" class="level4">
<h4 class="anchored" data-anchor-id="getclassname"><code>GetClassName</code></h4>
<p>This method gets the class name corresponding to the provided class index.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Get the class name corresponding to the provided class index.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"classIndex"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The index of the class to retrieve.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The class name corresponding to the class index.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetClassName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="oncompletereadback" class="level4">
<h4 class="anchored" data-anchor-id="oncompletereadback"><code>OnCompleteReadback</code></h4>
<p>This callback method handles the completion of async GPU readback.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Callback method for handling the completion of async GPU readback.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"request"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The async GPU readback request.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnCompleteReadback</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>AsyncGPUReadbackRequest request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hasError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-9">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPU readback error detected."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureCPU <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb18-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load readback data into the output texture and apply changes</span></span>
<span id="cb18-18">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadRawTextureData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>request<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb18-19">            outputTextureCPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Apply</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UnityException ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-23">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Message</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LoadRawTextureData: not enough data provided (will result in overread)."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb18-24">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-25">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Updating input data size to match the texture size."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-26">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-27">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb18-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-29">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexpected UnityException: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>This method cleans up resources when the script is disabled, such as releasing the temporary render texture.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Clean up resources when the script is disabled.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb19-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Release the temporary render texture</span></span>
<span id="cb19-8">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>outputTextureGPU<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb20-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb20-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb20-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb20-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables">PackageInstaller Class Variables</h4>
<p>The <code>PackageInstaller</code> class contains several private static fields.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb21-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4a3b2c83681748b49d28cb6ed4f587d9"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb22-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb22-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb22-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb22-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb22-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb23-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb23-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb23-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb23-8"></span>
<span id="cb23-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb23-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb23-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb23-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb23-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb23-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb23-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb23-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb23-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb24-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb24-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb24-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-15"></span>
<span id="cb24-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb24-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb24-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb24-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb24-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb24-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb25-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-7"></span>
<span id="cb25-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb25-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb25-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-17"></span>
<span id="cb25-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb26-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb26-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb26-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb26-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference Image Classification package. The package extends the functionality of <a href="https://github.com/cj-mills/unity-barracuda-inference-base"><code>unity-barracuda-inference-base</code></a> to perform image classification using computer vision models.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-image-classification">unity-barracuda-inference-image-classification</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-image-classification-demo">Barracuda Image Classification Demo</a>: A simple Unity project demonstrating how to perform image classification with the <code>barracuda-inference-image-classification</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-image-classification-walkthrough/index.html</guid>
  <pubDate>Sat, 06 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity YOLOX Utilities Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-yolox-utils-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-yolox-utils">Unity YOLOX Utilities</a> package provides utility functions to work with YOLOX object detection models in Unity.</p>
<p>I use YOLOX models in multiple tutorials. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Here is a demo video from a project that uses this package.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains three C# scripts.</p>
<ol type="1">
<li><code>YOLOXUtils.cs</code>: This script provides a utility class for YOLOX-related operations.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity YOLOX Utilities package by examining the purpose and functionality of each C# script.</p>
<section id="yoloxutils.cs" class="level3">
<h3 class="anchored" data-anchor-id="yoloxutils.cs"><code>YOLOXUtils.cs</code></h3>
<p>This script utilizes the <a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit">Unity Bounding Box 2D Toolkit</a> package and contains two main components: the <code>GridCoordinateAndStride</code> struct and the <code>YOLOXUtility</code> class.</p>
<p>The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-yolox-utils/blob/main/Runtime/Scripts/YOLOXUtils.cs">YOLOXUtils.cs</a></li>
</ul>
<section id="gridcoordinateandstride-struct" class="level4">
<h4 class="anchored" data-anchor-id="gridcoordinateandstride-struct"><code>GridCoordinateAndStride</code> struct</h4>
<p>This struct represents the grid coordinates (x and y) and the stride of the grid cell.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// A struct for grid coordinates and stride information.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> GridCoordinateAndStride</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the GridCoordinateAndStride struct.</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"xCoordinate"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"yCoordinate"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stride"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The stride value for the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridCoordinateAndStride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> xCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> yCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xCoordinate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yCoordinate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yCoordinate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="yoloxutility-class" class="level4">
<h4 class="anchored" data-anchor-id="yoloxutility-class"><code>YOLOXUtility</code> class</h4>
<p>This static utility class provides methods for YOLOX-related operations.</p>
<section id="generategridcoordinateswithstrides" class="level5">
<h5 class="anchored" data-anchor-id="generategridcoordinateswithstrides"><code>GenerateGridCoordinatesWithStrides</code></h5>
<p>This method generates a list of <code>GridCoordinateAndStride</code> objects based on the input strides, grid height, and grid width.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Generates a list of GridCoordinateAndStride objects based on input strides, height, and width.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"strides"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of stride values.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The height of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The width of the grid.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of GridCoordinateAndStride objects.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateGridCoordinatesWithStrides</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate a list of GridCoordinateAndStride objects by iterating through possible grid positions and strides</span></span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SelectMany</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> Enumerable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-12">                                                   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SelectMany</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>g1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> Enumerable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-13">                                                                                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>g0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridCoordinateAndStride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>g0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> g1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)))).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="generateboundingboxproposals" class="level5">
<h5 class="anchored" data-anchor-id="generateboundingboxproposals"><code>GenerateBoundingBoxProposals</code></h5>
<p>This method generates a list of bounding box proposals based on the model output, grid strides, and other parameters.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Generates a list of bounding box proposals based on the model output, grid strides, and other parameters.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"modelOutput"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The output of the YOLOX model.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"gridCoordsAndStrides"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of GridCoordinateAndStride objects.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"numClasses"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The number of object classes.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"numBBoxFields"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The number of bounding box fields.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"confidenceThreshold"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The confidence threshold for filtering proposals.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of BBox2D objects representing the generated proposals.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BBox2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GenerateBoundingBoxProposals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GridCoordinateAndStride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numClasses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> proposalLength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numClasses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numBBoxFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Process the model output to generate a list of BBox2D objects</span></span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> gridCoordsAndStrides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> anchorIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span></span>
<span id="cb3-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anchorIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> proposalLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate coordinates and dimensions of the bounding box</span></span>
<span id="cb3-20">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> centerX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xCoordinate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> centerY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yCoordinate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Exp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Exp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stride</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize BBox2D object</span></span>
<span id="cb3-26">        BBox2D obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-27">            centerX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-28">            centerY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-29">            w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compute objectness and class probabilities for each bounding box</span></span>
<span id="cb3-32">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> box_objectness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> classIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> classIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numClasses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb3-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-36">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> boxClassScore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modelOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>startIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numBBoxFields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-37">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> boxProb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> box_objectness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> boxClassScore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38"></span>
<span id="cb3-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the object with the highest probability and class label</span></span>
<span id="cb3-40">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boxProb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-41">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-42">                obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-43">                obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxProb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-44">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"></span>
<span id="cb3-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})</span></span>
<span id="cb3-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Where</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> confidenceThreshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Filter by confidence threshold</span></span>
<span id="cb3-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OrderByDescending</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Sort by probability</span></span>
<span id="cb3-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ToList</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the YOLOX Utilities package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-yolox-utils/blob/main/Editor/AddCustomDefineSymbol.cs">AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> CJM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">YOLOXUtils</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb4-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_YOLOX_UTILS"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group</span></span>
<span id="cb4-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group</span></span>
<span id="cb4-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-17"></span>
<span id="cb4-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the CustomDefineSymbol is already present in the defines string</span></span>
<span id="cb4-19">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb4-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the CustomDefineSymbol to the defines string, separated by a semicolon</span></span>
<span id="cb4-22">                defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated defines string as the new scripting define symbols for the selected build target group</span></span>
<span id="cb4-24">                PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-25">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log a message in the Unity console to inform the user that the custom define symbol has been added</span></span>
<span id="cb4-26">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-yolox-utils/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb5-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb5-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables">PackageInstaller Class Variables</h4>
<p>The PackageInstaller class contains several private static fields.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"487301ab13cf457b9c2ed07a3ec5c004"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb7-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb7-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb8-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb8-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb8-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb8-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb8-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb8-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb8-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb8-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb9-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-15"></span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb9-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb9-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb9-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb9-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb9-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb10-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb10-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb10-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb11-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb11-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb11-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity YOLOX Utilities package. The package provides utility functions to work with YOLOX object detection models in Unity.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-yolox-utils">unity-yolox-utils</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-yolox-utils-walkthrough/index.html</guid>
  <pubDate>Fri, 05 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Bounding Box 2D Toolkit Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-bounding-box-2d-toolkit-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit">Unity Bounding Box 2D Toolkit</a> package provides an easy-to-use and customizable solution to work with and visualize 2D bounding boxes on a Unity canvas.</p>
<p>Some of my tutorials involve using 2D object detection models in Unity applications. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Check out the demo video below to see this package in action.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains three C# scripts and prefabs to construct 2D bounding boxes.</p>
<section id="c-scripts" class="level3">
<h3 class="anchored" data-anchor-id="c-scripts">C# Scripts</h3>
<ol type="1">
<li><code>BBox2DUtils.cs</code>: This script provides functionality to work with 2D bounding boxes for object detection tasks.</li>
<li><code>BoundingBox2DVisualizer.cs</code>: This script creates, updates, and manages UI elements for visualizing 2D bounding boxes.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
</ol>
</section>
<section id="prefabs" class="level3">
<h3 class="anchored" data-anchor-id="prefabs">Prefabs</h3>
<ol type="1">
<li><code>BoundingBoxBorderPrefab.prefab</code>: The BoundingBox2DVisualizer script uses this prefab to construct the sides of bounding boxes.</li>
<li><code>DotPrefab.prefab</code>: An Image prefab used to display a dot at the center of bounding boxes</li>
<li><code>LabelPrefab.prefab</code>: A text prefab used to display the class label associated probability score for a bounding box.</li>
<li><code>LabelBackgroundPrefab.prefab</code>: An Image prefab used as the background for the LabelPrefab.</li>
<li><code>BBox2DVisualizer.prefab</code>: This prefab helps simplify adding 2D bounding box visualization to a Unity scene. The prefab already has the BoundingBox2DVisualizer script attached and has a child Canvas component.</li>
</ol>
</section>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity Bounding Box 2D Toolkit package by examining the purpose and functionality of each C# script.</p>
<section id="bbox2dutils.cs" class="level3">
<h3 class="anchored" data-anchor-id="bbox2dutils.cs"><code>BBox2DUtils.cs</code></h3>
<p>The BBox2DUtils.cs script provides functionality to work with 2D bounding boxes for object detection tasks. It contains two structs and a utility class. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit/blob/main/Runtime/Scripts/BBox2DUtils.cs">BBox2DUtils.cs</a></li>
</ul>
<section id="bbox2d-struct" class="level4">
<h4 class="anchored" data-anchor-id="bbox2d-struct"><code>BBox2D</code> struct</h4>
<p>This struct contains the coordinates (x0, y0), width, height, class index, and probability value for a 2D bounding box.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// A struct that represents a 2D bounding box.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> BBox2D</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the BBox2D struct.</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"x0"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The x-coordinate of the top-left corner.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"y0"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The y-coordinate of the top-left corner.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The width of the bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The height of the bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The class index of the object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prob"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The probability of the object belonging to the given class.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb1-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-24">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-27">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prob</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="bbox2dinfo-struct" class="level4">
<h4 class="anchored" data-anchor-id="bbox2dinfo-struct"><code>BBox2DInfo</code> struct</h4>
<p>This struct contains a BBox2D object, class label, and color.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// A struct for 2D bounding box information.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> BBox2DInfo</span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> BBox2D bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Color color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes a new instance of the BBox2DInfo struct.</span></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boundingBox"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The 2D bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The class label.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The bounding box color.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2DInfo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BBox2D boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Color color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="bbox2dutility-class" class="level4">
<h4 class="anchored" data-anchor-id="bbox2dutility-class"><code>BBox2DUtility</code> class</h4>
<p>This class provides various utility methods for working with bounding boxes.</p>
<section id="calcunionarea" class="level5">
<h5 class="anchored" data-anchor-id="calcunionarea"><code>CalcUnionArea</code></h5>
<p>This method calculates the union area between two bounding boxes.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Calculates the union area between two bounding boxes.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"a"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The first bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"b"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The second bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The union area between the two bounding boxes.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CalcUnionArea</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BBox2D a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BBox2D b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the coordinates and dimensions of the union area</span></span>
<span id="cb3-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the union area of two bounding boxes</span></span>
<span id="cb3-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="calcinterarea" class="level5">
<h5 class="anchored" data-anchor-id="calcinterarea"><code>CalcInterArea</code></h5>
<p>This method calculates the intersection area between two bounding boxes.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Calculates the intersection area between two bounding boxes.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"a"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The first bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"b"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The second bounding box.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The intersection area between the two bounding boxes.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CalcInterArea</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BBox2D a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BBox2D b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the coordinates and dimensions of the intersection area</span></span>
<span id="cb4-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the intersection area of two bounding boxes</span></span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="nmssortedboxes" class="level5">
<h5 class="anchored" data-anchor-id="nmssortedboxes"><code>NMSSortedBoxes</code></h5>
<p>This method performs Non-Maximum Suppression (NMS) on a sorted list of bounding box proposals, retaining only those with an intersection over union (IoU) value below the threshold.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Performs Non-Maximum Suppression (NMS) on a sorted list of bounding box proposals.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"proposals"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A sorted list of BBox2D objects representing the bounding box proposals.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"nms_thresh"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The NMS threshold for filtering proposals (default is 0.45).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A list of integers representing the indices of the retained proposals.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NMSSortedBoxes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BBox2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> nms_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through the proposals and perform non-maximum suppression</span></span>
<span id="cb5-10">    List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb5-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the intersection and union areas</span></span>
<span id="cb5-15">        BBox2D a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-16">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> keep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposal_indices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">All</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span></span>
<span id="cb5-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-18">            BBox2D b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> inter_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CalcInterArea</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-20">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> union_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CalcUnionArea</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Keep the proposal if its IoU with all previous proposals is below the NMS threshold</span></span>
<span id="cb5-22">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inter_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> union_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> nms_thresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the proposal passes the NMS check, add its index to the list</span></span>
<span id="cb5-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> proposal_indices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> proposal_indices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="scaleboundingbox" class="level5">
<h5 class="anchored" data-anchor-id="scaleboundingbox"><code>ScaleBoundingBox</code></h5>
<p>This method scales and optionally mirrors the bounding box of a detected object to match the in-game screen and display resolutions.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Scales and optionally mirrors the bounding box of a detected object to match the in-game screen and display resolutions.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boundingBox"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A BBox2D object containing the bounding box information for a detected object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"inputDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the input image used for object detection.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the in-game screen where the bounding boxes will be displayed.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An offset to apply to the bounding box coordinates when scaling.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mirrorScreen"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A boolean flag to indicate if the bounding boxes should be mirrored horizontally (default is false).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> BBox2D <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScaleBoundingBox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BBox2D boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The smallest dimension of the screen</span></span>
<span id="cb6-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> minScreenDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The smallest input dimension</span></span>
<span id="cb6-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> minInputDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the scale value between the in-game screen and input dimensions</span></span>
<span id="cb6-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> minImgScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minScreenDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> minInputDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the scale value between the in-game screen and display</span></span>
<span id="cb6-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScaleX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScaleY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> displayScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displayScaleX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displayScaleY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-21"></span>
<span id="cb6-22"></span>
<span id="cb6-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale bounding box to in-game screen resolution and flip the bbox coordinates vertically</span></span>
<span id="cb6-24">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-25">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-26">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-27">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> minImgScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-28"></span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Mirror bounding box across screen</span></span>
<span id="cb6-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-32">        x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-34"></span>
<span id="cb6-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale bounding box to display resolution</span></span>
<span id="cb6-36">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-37">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-38">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-39">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-40"></span>
<span id="cb6-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Offset the bounding box coordinates based on the difference between the in-game screen and display</span></span>
<span id="cb6-42">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-43">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Screen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screenDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-44"></span>
<span id="cb6-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
</section>
<section id="boundingbox2dvisualizer.cs" class="level3">
<h3 class="anchored" data-anchor-id="boundingbox2dvisualizer.cs"><code>BoundingBox2DVisualizer.cs</code></h3>
<p>The <code>BoundingBox2DVisualizer</code> script is a Unity C# MonoBehaviour class that displays 2D bounding boxes and labels on a Unity canvas. It creates, updates, and manages UI elements for visualizing them based on the provided BBox2DInfo array. This class supports customizable settings such as bounding box transparency and the ability to toggle the display of bounding boxes. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit/blob/main/Runtime/Scripts/BoundingBox2DVisualizer.cs">BoundingBox2DVisualizer.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The BoundingBox2DVisualizer class contains serialized fields referencing UI components, prefabs, and settings.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// UI components</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Components"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Container for holding the bounding box UI elements"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform boundingBoxContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Container for holding the label UI elements"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform labelContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prefabs for creating UI elements</span></span>
<span id="cb7-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prefabs"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prefab for the bounding box UI element"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RectTransform boundingBoxPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prefab for the label UI element"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TMP_Text labelPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prefab for the label background UI element"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Image labelBackgroundPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prefab for the dot UI element"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Image dotPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Settings for customizing the bounding box visualizer</span></span>
<span id="cb7-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Settings"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flag to control whether bounding boxes should be displayed or not"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> displayBoundingBoxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transparency value for the bounding boxes, ranging from 0 (completely transparent) to 1 (completely opaque)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb7-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>0f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 1f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> bboxTransparency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> 1f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="guid-constants" class="level4">
<h4 class="anchored" data-anchor-id="guid-constants">GUID Constants</h4>
<p>These are the GUIDs of the default assets. They are used to set default values for the bounding box, label, label background, and dot prefabs in the Unity Editor.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUIDs of the default assets for the bounding box, label, label background, and dot prefabs</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> BoundingBoxPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"be0edeacc0f249fab31ac75426ad8a2a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> LabelPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4e39b47d4b984862aeab14255855fcc9"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> LabelBackgroundPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9074ea186151430084312ba891bad58e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> DotPrefabGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3eb64b4f1a4e4e2595066ed269be9532"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="lists-for-ui-elements" class="level4">
<h4 class="anchored" data-anchor-id="lists-for-ui-elements">Lists for UI Elements</h4>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Lists for storing and managing instantiated UI elements</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> boundingBoxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of instantiated bounding box UI elements</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TMP_Text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TMP_Text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of instantiated label UI elements</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> labelBackgrounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of instantiated label background UI elements</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> dots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List of instantiated dot UI elements</span></span></code></pre></div>
</section>
<section id="reset" class="level4">
<h4 class="anchored" data-anchor-id="reset"><code>Reset</code></h4>
<p>This method sets the default assets from the project using their GUIDs. It uses <code>AssetDatabase</code> to find them and set the default values. This method will only work in the Unity Editor, not in a build.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Reset is called when the user hits the Reset button in the Inspector's context menu</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// or when adding the component the first time. This function is only called in editor mode.</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load default assets only in the Unity Editor, not in a build</span></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb10-9">    boundingBoxPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>BoundingBoxPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-10">    labelPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TMP_Text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>LabelPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-11">    labelBackgroundPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>LabelBackgroundPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-12">    dotPrefab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>DotPrefabGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb10-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loaddefaultasset" class="level4">
<h4 class="anchored" data-anchor-id="loaddefaultasset"><code>LoadDefaultAsset</code></h4>
<p>This method provides a generic way to load default assets for the specified fields using their GUIDs.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads the default asset for the specified type using its GUID.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;typeparam</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"T"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The type of asset to be loaded.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/typeparam&gt;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"guid"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GUID of the default asset.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The loaded asset of the specified type.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;remarks&gt;</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// This method is only executed in the Unity Editor, not in builds.</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/remarks&gt;</span></span>
<span id="cb11-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> T LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> where T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Object</span></span>
<span id="cb11-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb11-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load the asset from the AssetDatabase using its GUID</span></span>
<span id="cb11-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAssetAtPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#else</span></span>
<span id="cb11-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb11-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateboundingboxvisualizations" class="level4">
<h4 class="anchored" data-anchor-id="updateboundingboxvisualizations"><code>UpdateBoundingBoxVisualizations</code></h4>
<p>This method updates the visualization of bounding boxes based on the given <code>BBox2DInfo</code> array.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the visualization of bounding boxes based on the given BBox2DInfo array.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bboxInfoArray"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BBox2DInfo objects containing bounding box information</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBoundingBoxVisualizations</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BBox2DInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bboxInfoArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Depending on the displayBoundingBoxes flag, either update or disable bounding box UI elements</span></span>
<span id="cb12-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displayBoundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBoundingBoxes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfoArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb12-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Disable bounding boxes, labels, and label backgrounds for all existing UI elements</span></span>
<span id="cb12-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb12-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-17">            boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-18">            labelBackgrounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-19">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-20">            dots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="screentocanvaspoint" class="level4">
<h4 class="anchored" data-anchor-id="screentocanvaspoint"><code>ScreenToCanvasPoint</code></h4>
<p>This method converts a screen point to a local one in the <code>RectTransform</code> space of the given canvas.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Convert a screen point to a local point in the RectTransform space of the given canvas.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"canvas"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The RectTransform object of the canvas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenPoint"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The screen point to be converted</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A Vector2 object representing the local point in the RectTransform space of the canvas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Vector2 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RectTransform canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2 screenPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-9">    RectTransformUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenPointToLocalPointInRectangle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>canvas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">out</span> Vector2 localPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> localPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateboundingboxes" class="level4">
<h4 class="anchored" data-anchor-id="updateboundingboxes"><code>UpdateBoundingBoxes</code></h4>
<p>This method updates bounding box UI elements to match the provided <code>BBox2DInfo</code> array. It creates or removes bounding box UI elements to match the number of detected objects and updates bounding boxes, labels, and label backgrounds. It also disables UI elements if not needed.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update bounding box UI elements to match the provided BBox2DInfo array.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bboxInfoArray"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An array of BBox2DInfo objects containing bounding box information</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBoundingBoxes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BBox2DInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> bboxInfoArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create or remove bounding box UI elements to match the number of detected objects</span></span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bboxInfoArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-10">        RectTransform newBoundingBox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBoxPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> boundingBoxContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-11">        boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newBoundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-12"></span>
<span id="cb14-13">        Image newLabelBackground <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>labelBackgroundPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> labelContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-14">        labelBackgrounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newLabelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-15"></span>
<span id="cb14-16">        TMP_Text newLabel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>labelPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> labelContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-17">        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newLabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">        Image newDot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dotPrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> boundingBoxContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-20">        dots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newDot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-22"></span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update bounding boxes, labels, and label backgrounds for each detected object, or disable UI elements if not needed</span></span>
<span id="cb14-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb14-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bboxInfoArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-28">            BBox2DInfo bboxInfo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bboxInfoArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-29"></span>
<span id="cb14-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get UI elements for the current bounding box, label, and label background</span></span>
<span id="cb14-31">            RectTransform boundingBox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-32">            TMP_Text label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-33">            Image labelBackground <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labelBackgrounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-34">            Image dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-35"></span>
<span id="cb14-36">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBoundingBox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-37">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateLabelAndBackground</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> labelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-38">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateDot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-39"></span>
<span id="cb14-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Enable bounding box, label, and label background UI elements</span></span>
<span id="cb14-41">            boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-42">            labelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-43">            label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-44">            dots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-46">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb14-47">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-48">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Disable UI elements for extra bounding boxes, labels, and label backgrounds</span></span>
<span id="cb14-49">            boundingBoxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-50">            labelBackgrounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-51">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-52">            dots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-53">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updateboundingbox" class="level4">
<h4 class="anchored" data-anchor-id="updateboundingbox"><code>UpdateBoundingBox</code></h4>
<p>This method updates the bounding box UI element with the information from the given <code>BBox2DInfo</code> object. It converts the screen point to a local one in the <code>RectTransform</code> space of the bounding box container and sets the color of the bounding box with the specified transparency.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the bounding box UI element with the information from the given BBox2DInfo object.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boundingBox"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The RectTransform object representing the bounding box UI element</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bboxInfo"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The BBox2DInfo object containing the information for the bounding box</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateBoundingBox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RectTransform boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BBox2DInfo bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the screen point to a local point in the RectTransform space of the bounding box container</span></span>
<span id="cb15-9">    Vector2 localPosition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBoxContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-10">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> localPosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-11">    boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-12"></span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the color of the bounding box with the specified transparency</span></span>
<span id="cb15-14">    Color color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetColorWithTransparency</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-15">    Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> sides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boundingBox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponentsInChildren</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb15-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Image side <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-18">        side<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatelabelandbackground" class="level4">
<h4 class="anchored" data-anchor-id="updatelabelandbackground"><code>UpdateLabelAndBackground</code></h4>
<p>This method updates the label and label background UI elements with the information from the provided <code>BBox2DInfo</code> object. It sets the label text, position, color, and the label‚Äôs background position, size, and color with the specified transparency.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the label and label background UI elements with the information from the given BBox2DInfo object.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The TMP_Text object representing the label UI element</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"labelBackground"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The Image object representing the label background UI element</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bboxInfo"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The BBox2DInfo object containing the information for the label and label background</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateLabelAndBackground</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TMP_Text label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Image labelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BBox2DInfo bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the screen point to a local point in the RectTransform space of the bounding box container</span></span>
<span id="cb16-10">    Vector2 localPosition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBoxContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the label text and position</span></span>
<span id="cb16-13">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{bboxInfo.label}: {(bboxInfo.bbox.prob * 100).ToString("</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>##<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")}%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-14">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>localPosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> localPosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preferredHeight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the label color based on the grayscale value of the bounding box color</span></span>
<span id="cb16-17">    Color color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetColorWithTransparency</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-18">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grayscale</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">black</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">white</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-19"></span>
<span id="cb16-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the label background position and size</span></span>
<span id="cb16-21">    labelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>localPosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> localPosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preferredHeight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-22">    labelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preferredWidth</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preferredHeight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-23"></span>
<span id="cb16-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the label background color with the specified transparency</span></span>
<span id="cb16-25">    labelBackground<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatedot" class="level4">
<h4 class="anchored" data-anchor-id="updatedot"><code>UpdateDot</code></h4>
<p>This method updates the dot UI element based on the provided BBox2DInfo object.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the dot UI element with the information from the given BBox2DInfo object.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dot"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The Image object representing the dot UI element</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bboxInfo"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The BBox2DInfo object containing the information for the bounding box</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateDot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Image dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BBox2DInfo bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the center of the bounding box</span></span>
<span id="cb17-9">    Vector2 center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-10"></span>
<span id="cb17-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the screen point to a local point in the RectTransform space of the bounding box container</span></span>
<span id="cb17-12">    Vector2 localPosition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ScreenToCanvasPoint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>boundingBoxContainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-13"></span>
<span id="cb17-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the dot position</span></span>
<span id="cb17-15">    dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anchoredPosition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> localPosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-16"></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the dot color with the specified transparency</span></span>
<span id="cb17-18">    Color color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetColorWithTransparency</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>bboxInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-19">    dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getcolorwithtransparency" class="level4">
<h4 class="anchored" data-anchor-id="getcolorwithtransparency"><code>GetColorWithTransparency</code></h4>
<p>This method is a utility function that returns a new color based on the input color with the adjusted transparency.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Get a new color based on the input color with the adjusted transparency.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"color"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input color to be modified</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A new color with the specified transparency</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Color <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetColorWithTransparency</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Color color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">a</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bboxTransparency<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the Bounding Box 2D Toolkit package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit/blob/main/Editor/AddCustomDefineSymbol.cs">Editor/AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> CJM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BBox2DToolkit</span></span>
<span id="cb19-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb19-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_BBOX_2D_TOOLKIT"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb19-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb19-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group</span></span>
<span id="cb19-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group</span></span>
<span id="cb19-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-17"></span>
<span id="cb19-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the CustomDefineSymbol is already present in the defines string</span></span>
<span id="cb19-19">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb19-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the CustomDefineSymbol to the defines string, separated by a semicolon</span></span>
<span id="cb19-22">                defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated defines string as the new scripting define symbols for the selected build target group</span></span>
<span id="cb19-24">                PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-25">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log a message in the Unity console to inform the user that the custom define symbol has been added</span></span>
<span id="cb19-26">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity Bounding Box 2D Toolkit package. The package provides an easy-to-use and customizable solution to work with and visualize 2D bounding boxes on a Unity canvas.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-bounding-box-2d-toolkit">unity-bounding-box-2d-toolkit</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-bounding-box-2d-toolkit-walkthrough/index.html</guid>
  <pubDate>Fri, 05 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Barracuda Inference Base Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-barracuda-inference-base-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-barracuda-inference-base">Barracuda Inference Base</a> package provides a foundation for performing inference with the Barracuda inference library. It includes a flexible base class to extend with task-specific packages. <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> is a lightweight cross-platform <a href="https://en.wikipedia.org/wiki/Neural_network">neural network</a> inference library for Unity.</p>
<p>I use the Barracuda inference library in multiple tutorials. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Here are some demo videos from projects that extend this package.</p>
<p><strong>Image Classification</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-image-classification-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-image-classification-demo.mp4">Video</a></video></p>
</figure>
</div>
<p><strong>Object Detection</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-yolox-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-yolox-demo.mp4">Video</a></video></p>
</figure>
</div>
<p><strong>Pose Estimation</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/barracuda-inference-posenet-demo.mp4" class="img-fluid" controls=""><a href="./videos/barracuda-inference-posenet-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts.</p>
<ol type="1">
<li><code>BarracudaModelRunner.cs</code>: This script provides an abstract class for running Barracuda neural network models in Unity.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Barracuda Inference Base package by examining the purpose and functionality of each C# script.</p>
<section id="barracudamodelrunner.cs" class="level3">
<h3 class="anchored" data-anchor-id="barracudamodelrunner.cs"><code>BarracudaModelRunner.cs</code></h3>
<p>This script provides an abstract class for running Barracuda neural network models in Unity. This class serves as a base class for others that perform inference using Barracuda to inherit from.</p>
<p>The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-base/blob/main/Runtime/Scripts/BarracudaModelRunner.cs">BarracudaModelRunner.cs</a></li>
</ul>
<section id="model-assets" class="level4">
<h4 class="anchored" data-anchor-id="model-assets">Model Assets</h4>
<p>These are serialized fields for the neural network model, channel order preference, and the execution backend.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Assets"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The neural network model"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> NNModel model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option to order tensor data channels first (EXPERIMENTAL)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> useNCHW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Execution backend for the model"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span> workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="modelbuilder-and-iworker" class="level4">
<h4 class="anchored" data-anchor-id="modelbuilder-and-iworker"><code>ModelBuilder</code> and <code>IWorker</code></h4>
<p>These are Instances of <code>ModelBuilder</code> and <code>IWorker</code> for creating and executing models.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> ModelBuilder modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> IWorker engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>The <code>Start()</code> method runs when the script is enabled. It loads and prepares the model and initializes the engine.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadandpreparemodel" class="level4">
<h4 class="anchored" data-anchor-id="loadandpreparemodel"><code>LoadAndPrepareModel</code></h4>
<p>This method loads and prepares the model for execution. Child classes can override this method to apply custom modifications to the model.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load and prepare the model for execution.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Override this method to apply custom modifications to the model.</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAndPrepareModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    Model runtimeModel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ModelLoader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Load</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-8">    modelBuilder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ModelBuilder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>runtimeModel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeworker" class="level4">
<h4 class="anchored" data-anchor-id="initializeworker"><code>InitializeWorker</code></h4>
<p>This method initializes the worker for executing the model with the specified backend and channel order.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize the worker for executing the model with the specified backend and channel order.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"model"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The target model representation.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"workerType"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The target compute backend.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"useNCHW"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The channel order for the compute backend (default is true).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">An initialized worker instance.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> IWorker <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeWorker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Model model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Type</span> workerType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> useNCHW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Validate worker type</span></span>
<span id="cb5-11">    workerType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ValidateType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set channel order if required</span></span>
<span id="cb5-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>useNCHW<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-16">        ComputeInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channelsOrder</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ComputeInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ChannelsOrder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NCHW</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create and return the worker instance</span></span>
<span id="cb5-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateWorker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeengine" class="level4">
<h4 class="anchored" data-anchor-id="initializeengine"><code>InitializeEngine</code></h4>
<p>This method initializes the inference engine by creating a worker instance.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initialize the inference engine.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeEngine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">    engine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerFactory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateWorker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>workerType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-7">    engine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeWorker</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>modelBuilder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> workerType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> useNCHW<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="executemodel" class="level4">
<h4 class="anchored" data-anchor-id="executemodel"><code>ExecuteModel</code></h4>
<p>These overloaded methods execute the model with the provided input Tensor(s). Child classes can override them to implement custom input and output processing.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Execute the model with the given input Tensor.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Override this method to implement custom input and output processing.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"input"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input Tensor for the model.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Tensor input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-8">    engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Execute</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Execute the model with the given input Tensor.</span></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Override this method to implement custom input and output processing.</span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"input"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The input Tensor for the model.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb7-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ExecuteModel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>IDictionary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tensor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-18">    engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Execute</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>This method runs when the component is disabled. It cleans up resources by disposing of the engine.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Clean up resources when the component is disabled.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dispose</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the Barracuda Inference Base package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-barracuda-inference-base/blob/main/Editor/AddCustomDefineSymbol.cs">AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> CJM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BarracudaInference</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb9-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_BARRACUDA_INFERENCE"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group</span></span>
<span id="cb9-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group</span></span>
<span id="cb9-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-17"></span>
<span id="cb9-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the CustomDefineSymbol is already present in the defines string</span></span>
<span id="cb9-19">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb9-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-21">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the CustomDefineSymbol to the defines string, separated by a semicolon</span></span>
<span id="cb9-22">                defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated defines string as the new scripting define symbols for the selected build target group</span></span>
<span id="cb9-24">                PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-25">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log a message in the Unity console to inform the user that the custom define symbol has been added</span></span>
<span id="cb9-26">                Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-27">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Barracuda Inference Base package. The package provides a foundation for performing inference with the Barracuda inference library with a flexible base class to extend with task-specific packages.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-barracuda-inference-base">unity-barracuda-inference-base</a></li>
</ul>
<p>You can find the code for the demo projects shown in the videos at the beginning of this post linked below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-image-classification-demo">Barracuda Image Classification Demo</a>: A simple Unity project demonstrating how to perform image classification with the <code>barracuda-inference-image-classification</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-barracuda-inference-base-walkthrough/index.html</guid>
  <pubDate>Fri, 05 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Deep Learning Image Preprocessor Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-deep-learning-image-preprocessor-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-deep-learning-image-preprocessor">Deep Learning Image Preprocessor</a> package provides Shaders and Compute Shaders for various image processing tasks, such as cropping, normalizing, and flipping images in Unity.</p>
<p>Many of my tutorials involve using computer vision models in Unity applications. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content.</p>
<p>In this post, I walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains a C# script and various processing shaders.</p>
<section id="c-script" class="level3">
<h3 class="anchored" data-anchor-id="c-script">C# Script</h3>
<ul>
<li><code>ImageProcessor.cs</code>: This script provides utility functions to process images using compute shaders or materials.</li>
</ul>
</section>
<section id="shaders" class="level3">
<h3 class="anchored" data-anchor-id="shaders">Shaders</h3>
<ol type="1">
<li><code>CropImage.shader</code>: This shader is responsible for cropping images based on provided offset and size values.</li>
<li><code>NormalizeImage.shader</code>: This shader normalizes the color values of an input texture using the provided mean, standard deviation, and scaling values.</li>
<li><code>ProcessingShader.compute</code>: This compute shader offers various image processing functionality, including normalizing input images, cropping images based on the provided offset and size values, and flipping images around the x-axis.</li>
</ol>
</section>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Deep Learning Image Preprocessor package by examining the purpose and functionality of the C# script and shaders.</p>
<section id="imageprocessor.cs" class="level3">
<h3 class="anchored" data-anchor-id="imageprocessor.cs"><code>ImageProcessor.cs</code></h3>
<p>The script defines a public class <code>ImageProcessor</code> that inherits from <code>MonoBehaviour</code>. This class handles the processing of images using shaders. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-deep-learning-image-preprocessor/blob/main/Runtime/Scripts/ImageProcessor.cs">ImageProcessor.cs</a></li>
</ul>
<section id="serialized-fields" class="level4">
<h4 class="anchored" data-anchor-id="serialized-fields">Serialized Fields</h4>
<p>The <code>ImageProcessor</code> class contains a set of serialized fields for the shaders and normalization parameters.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing Shaders"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The compute shader for image processing"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ComputeShader processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The shader for image normalization"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Shader normalizeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The shader for image cropping"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Shader cropShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalization Parameters"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON file with the mean and std values for normalization"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> TextAsset normStatsJson <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="private-fields-and-constants" class="level4">
<h4 class="anchored" data-anchor-id="private-fields-and-constants">Private Fields and Constants</h4>
<p>The script also defines several private fields and constants related to shaders and normalization parameters.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUIDs of the default assets used for shaders and normalization</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> ProcessingComputeShaderGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2c418cec15ae44419d94328d0e8dcea8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> NormalizeShaderGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45d8405a4cc64ecfa477b712e0465c05"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CropShaderGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0685d34a035b4cefa942d94390282c12"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> NormStatsJsonGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9c8f1a57cb884c9b8a4439cae327a2f8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The material for image normalization</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Material normalizeMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The material for image cropping</span></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> Material cropMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NormStats</span>
<span id="cb2-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The mean values for normalization</span></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> 0f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 0f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 0f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The standard deviation values for normalization</span></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> 1f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 1f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 1f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Value used to scale normalized input</span></span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> 1f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Buffer for mean values used in compute shader</span></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ComputeBuffer meanBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Buffer for standard deviation values used in compute shader</span></span>
<span id="cb2-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ComputeBuffer stdBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="reset" class="level4">
<h4 class="anchored" data-anchor-id="reset"><code>Reset</code></h4>
<p>This method sets the default assets from the project using their GUIDs. It uses <code>AssetDatabase</code> to find them and set the default values. This method will only work in the Unity Editor, not in a build.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Reset is called when the user hits the Reset button in the Inspector's context menu</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// or when adding the component the first time. This function is only called in editor mode.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load default assets only in the Unity Editor, not in a build</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb3-9">    processingComputeShader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>ProcessingComputeShaderGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-10">    normalizeShader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Shader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>NormalizeShaderGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-11">    cropShader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Shader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>CropShaderGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-12">    normStatsJson <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TextAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>NormStatsJsonGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb3-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loaddefaultasset" class="level4">
<h4 class="anchored" data-anchor-id="loaddefaultasset"><code>LoadDefaultAsset</code></h4>
<p>This method provides a generic way to load default assets for the specified fields using their GUIDs.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Loads the default asset for the specified type using its GUID.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;typeparam</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"T"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The type of asset to be loaded.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/typeparam&gt;</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"guid"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GUID of the default asset.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The loaded asset of the specified type.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;remarks&gt;</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// This method is only executed in the Unity Editor, not in builds.</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/remarks&gt;</span></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> T LoadDefaultAsset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> where T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Object</span></span>
<span id="cb4-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#if</span> UNITY_EDITOR</span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load the asset from the AssetDatabase using its GUID</span></span>
<span id="cb4-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAssetAtPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>UnityEditor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssetDatabase</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>guid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#else</span></span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>The script initializes the shaders and normalization parameters in the Start() method, which runs when the script initializes.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Called when the script is initialized.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-6">    normalizeMaterial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Material</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>normalizeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-7">    cropMaterial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Material</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cropShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadNormStats</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeProcessingShaders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="loadnormstats" class="level4">
<h4 class="anchored" data-anchor-id="loadnormstats"><code>LoadNormStats</code></h4>
<p>This method loads the normalization statistics from the provided JSON file by deserializing the JSON content and updating the normalization statistics.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Load the normalization stats from the provided JSON file.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadNormStats</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNormStatsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb6-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">    NormStats normStats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeNormStats</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>normStatsJson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateNormalizationStats</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>normStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="isnormstatsjsonnullorempty" class="level4">
<h4 class="anchored" data-anchor-id="isnormstatsjsonnullorempty"><code>IsNormStatsJsonNullOrEmpty</code></h4>
<p>This method checks if the provided JSON file (normStatsJson) is null or empty.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Check if the provided JSON file is null or empty.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">True if the file is null or empty, otherwise false.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNormStatsJsonNullOrEmpty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> normStatsJson <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsNullOrWhiteSpace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>normStatsJson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="deserializenormstats" class="level4">
<h4 class="anchored" data-anchor-id="deserializenormstats"><code>DeserializeNormStats</code></h4>
<p>This method deserializes the provided JSON string into a <code>NormStats</code> object. It catches any exceptions that might occur during the deserialization process and logs an error message, if any.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Deserialize the provided JSON string to a NormStats object.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"json"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The JSON string to deserialize.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A deserialized NormStats object.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> NormStats <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DeserializeNormStats</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span></span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>NormStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Exception ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-14">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to deserialize normalization stats JSON: {ex.Message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatenormalizationstats" class="level4">
<h4 class="anchored" data-anchor-id="updatenormalizationstats"><code>UpdateNormalizationStats</code></h4>
<p>This method updates the mean and standard deviation arrays with the provided <code>NormStats</code> object.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Update the mean and standard deviation with the provided NormStats object.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"normStats"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The NormStats object containing the mean and standard deviation.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateNormalizationStats</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NormStats normStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>normStats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-13">    std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">std</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Disable scaling if no scale value is provided</span></span>
<span id="cb9-15">    scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> 0f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> 1f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> normStats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializeprocessingshaders" class="level4">
<h4 class="anchored" data-anchor-id="initializeprocessingshaders"><code>InitializeProcessingShaders</code></h4>
<p>This method initializes the processing shaders by setting the mean and standard deviation values for normalization and creating compute buffers for those values.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes the processing shaders by setting the mean and standard deviation values.</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeProcessingShaders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-6">    normalizeMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Mean"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb10-7">    normalizeMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Std"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb10-8">    normalizeMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetFloat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Scale"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SystemInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">supportsComputeShaders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-12">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kernelIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindKernel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NormalizeImage"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-13"></span>
<span id="cb10-14">        meanBuffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateComputeBuffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-15">        stdBuffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateComputeBuffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-16"></span>
<span id="cb10-17">        processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetBuffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Mean"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> meanBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-18">        processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetBuffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Std"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stdBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-19">        processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetFloat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Scale"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="createcomputebuffer" class="level4">
<h4 class="anchored" data-anchor-id="createcomputebuffer"><code>CreateComputeBuffer</code></h4>
<p>This method creates a <code>ComputeBuffer</code> and sets the provided data (a float array). It returns the created compute buffer.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Creates a compute buffer and sets the provided data.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"data"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The data to set in the compute buffer.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A compute buffer with the provided data.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> ComputeBuffer <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CreateComputeBuffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-8">    ComputeBuffer buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ComputeBuffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb11-9">    buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetData</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="processimagecomputeshader" class="level4">
<h4 class="anchored" data-anchor-id="processimagecomputeshader"><code>ProcessImageComputeShader</code></h4>
<p>This method prepares an image with a compute shader with the specified function name. It creates a temporary render texture, binds the source and destination textures to the compute shader, dispatches the shader, and blits the processed image back to the original image.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Processes an image using a compute shader with the specified function name.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The image to be processed.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"functionName"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The name of the function in the compute shader to use for processing.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProcessImageComputeShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> functionName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindKernel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>functionName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a temporary render texture</span></span>
<span id="cb12-10">    RenderTexture result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporaryRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bind the source and destination textures to the compute shader</span></span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BindTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dispatche the shader</span></span>
<span id="cb12-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DispatchShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Blit the processed image back to the original image</span></span>
<span id="cb12-17">    Graphics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Blit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-18"></span>
<span id="cb12-19">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="processimageshader" class="level4">
<h4 class="anchored" data-anchor-id="processimageshader"><code>ProcessImageShader</code></h4>
<p>This method processes an image using a material. It creates a temporary render texture, applies the normalization material to the input image, and copies the resulting image back to the original image.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Processes an image using a material.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The image to be processed.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProcessImageShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a temporary render texture</span></span>
<span id="cb13-8">    RenderTexture result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporaryRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-9">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">active</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply the normalization material to the input image</span></span>
<span id="cb13-11">    Graphics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Blit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> normalizeMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Copy the result back to the original image</span></span>
<span id="cb13-13">    Graphics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Blit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-14"></span>
<span id="cb13-15">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="gettemporaryrendertexture" class="level4">
<h4 class="anchored" data-anchor-id="gettemporaryrendertexture"><code>GetTemporaryRenderTexture</code></h4>
<p>This method creates a temporary render texture with identical dimensions to the image. It takes an optional boolean parameter enableRandomWrite to enable or disable random access write into the RenderTexture.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Creates a temporary render texture with the same dimensions as the given image.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The image to match dimensions with.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"enableRandomWrite"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Enable random access write into the RenderTexture.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A temporary render texture.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> RenderTexture <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporaryRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> enableRandomWrite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a temporary render texture</span></span>
<span id="cb14-10">    RenderTexture result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RenderTextureFormat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ARGBHalf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set random write access</span></span>
<span id="cb14-12">    result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enableRandomWrite</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enableRandomWrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-13">    result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Create</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="bindtextures" class="level4">
<h4 class="anchored" data-anchor-id="bindtextures"><code>BindTextures</code></h4>
<p>This method binds the source and destination textures to the compute shader with the provided kernel handle. It sets the <code>_OutputImage</code> and <code>_InputImage</code> properties of the compute shader with the destination and source textures, respectively.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Binds the source and destination textures to the compute shader.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"kernelHandle"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The kernel handle of the compute shader.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"source"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The source texture to be processed.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"destination"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The destination texture for the processed result.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BindTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RenderTexture source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RenderTexture destination<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">    processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_OutputImage"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> destination<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-10">    processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_InputImage"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="dispatchshader" class="level4">
<h4 class="anchored" data-anchor-id="dispatchshader"><code>DispatchShader</code></h4>
<p>This method dispatches the compute shader based on the dimensions of the <code>result</code> texture. It calculates the thread groups in the X and Y dimensions and runs the compute shader using the provided kernel handle.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Dispatches the compute shader based on the dimensions of the result texture.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"kernelHandle"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The kernel handle of the compute shader.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"result"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The result render texture.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DispatchShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RenderTexture result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the thread groups in the X and Y dimensions</span></span>
<span id="cb16-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> threadGroupsX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CeilToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> threadGroupsY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CeilToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Execute the compute shader</span></span>
<span id="cb16-12">    processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dispatch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threadGroupsX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threadGroupsY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="calculateinputdims" class="level4">
<h4 class="anchored" data-anchor-id="calculateinputdims"><code>CalculateInputDims</code></h4>
<p>This method calculates the input dimensions of the processed image based on the original image dimensions, given a target dimension.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Calculates the input dimensions of the processed image based on the original image dimensions.</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageDims"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the original image.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The calculated input dimensions for the processed image.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Vector2Int <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CalculateInputDims</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Vector2Int imageDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> targetDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-8">    targetDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>targetDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> scaleFactor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>targetDim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Mathf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>imageDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> imageDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Vector2Int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RoundToInt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>imageDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scaleFactor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> imageDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scaleFactor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb17-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropimagecomputeshader" class="level4">
<h4 class="anchored" data-anchor-id="cropimagecomputeshader"><code>CropImageComputeShader</code></h4>
<p>This method crops an image using a compute shader. It binds the source and destination textures to the compute shader, sets the offset and size parameters, dispatches the shader, and copies the result to the cropped image.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Crops an image using a compute shader with the given offset and size.</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The original image to be cropped.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"croppedImage"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The cropped output image.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offset for the crop area in the original image.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"size"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The size of the crop area.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb18-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropImageComputeShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RenderTexture croppedImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> kernelHandle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindKernel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CropImage"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-11">    RenderTexture result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporaryRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>croppedImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bind the source and destination textures to the compute shader</span></span>
<span id="cb18-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BindTextures</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the offset and size parameters</span></span>
<span id="cb18-16">    processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetInts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_CropOffset"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb18-17">    processingComputeShader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetInts</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_CropSize"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb18-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Execute the compute shader</span></span>
<span id="cb18-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DispatchShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kernelHandle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Copy the result to the cropped image texture</span></span>
<span id="cb18-21">    Graphics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Blit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> croppedImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-22"></span>
<span id="cb18-23">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropimageshader" class="level4">
<h4 class="anchored" data-anchor-id="cropimageshader"><code>CropImageShader</code></h4>
<p>This method crops an image using a material. It sets the offset and size parameters on the crop material, creates a temporary render texture, applies the crop material to the input image, and blits the result back to the cropped image.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Crops an image using a shader with the given offset and size.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The original image to be cropped.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"croppedImage"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The cropped output image.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The offset for the crop area in the original image (float array with two elements).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"size"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The size of the crop area (float array with two elements).</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropImageShader</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>RenderTexture image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RenderTexture croppedImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the offset and size parameters on the crop material</span></span>
<span id="cb19-12">    cropMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Offset"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb19-13">    cropMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Size"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb19-14"></span>
<span id="cb19-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a temporary render texture</span></span>
<span id="cb19-16">    RenderTexture result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetTemporaryRenderTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>croppedImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-17">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">active</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-18"></span>
<span id="cb19-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply the crop material to the input image</span></span>
<span id="cb19-20">    Graphics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Blit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cropMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Copy the result to the cropped image texture</span></span>
<span id="cb19-22">    Graphics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Blit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> croppedImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-23"></span>
<span id="cb19-24">    RenderTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseTemporary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>This method runs when the script is disabled. If the current platform supports compute shaders, it releases the compute buffers.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Called when the script is disabled.</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb20-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseComputeBuffers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb20-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="releasecomputebuffers" class="level4">
<h4 class="anchored" data-anchor-id="releasecomputebuffers"><code>ReleaseComputeBuffers</code></h4>
<p>This method releases the compute buffers when compute shaders are supported.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Releases the compute buffers if compute shaders are supported.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReleaseComputeBuffers</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb21-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SystemInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">supportsComputeShaders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-8">        meanBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Release</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb21-9">        stdBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Release</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb21-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="cropimage.shader" class="level3">
<h3 class="anchored" data-anchor-id="cropimage.shader"><code>CropImage.shader</code></h3>
<p>This shader crops an input image based on the specified <code>offset</code> and <code>size</code> values. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-deep-learning-image-preprocessor/blob/main/Shaders/CropImage.shader">CropImage.shader</a></li>
</ul>
<section id="define-properties" class="level4">
<h4 class="anchored" data-anchor-id="define-properties">Define Properties</h4>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb22-1">Properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The input texture to crop</span></span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_MainTex</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Texture"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> "white" <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A vector representing the x and y offsets for the cropping area</span></span>
<span id="cb22-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_Offset</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Offset"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A vector representing the width and height of the cropping area</span></span>
<span id="cb22-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_Size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Size"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="subshader-configuration" class="level4">
<h4 class="anchored" data-anchor-id="subshader-configuration">SubShader Configuration</h4>
<p>In the SubShader block, culling and depth are disabled to ensure that the shader will always render regardless of the camera‚Äôs position and orientation.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// No culling or depth</span></span>
<span id="cb23-2">Cull Off ZWrite Off ZTest Always</span></code></pre></div>
</section>
<section id="pass-block" class="level4">
<h4 class="anchored" data-anchor-id="pass-block">Pass Block</h4>
<p>The Pass block contains the vertex and fragment shaders that process the input texture and crops it based on the provided <code>_Offset</code> and <code>_Size</code> values.</p>
<p>The vertex shader receives the input vertex data and passes it through to the fragment shader. It is a simple pass-through shader that does not modify the input data.</p>
<p>The fragment shader is responsible for cropping the input texture based on the provided <code>_Offset</code> and <code>_Size</code> values.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb24-1">Pass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-2">    CGPROGRAM</span>
<span id="cb24-3">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma vertex vert</span></span>
<span id="cb24-4">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma fragment frag</span></span>
<span id="cb24-5"></span>
<span id="cb24-6">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include "UnityCG.cginc"</span></span>
<span id="cb24-7"></span>
<span id="cb24-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Uniform variables for the offset and size of the cropping area</span></span>
<span id="cb24-9">    float2 _Offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-10">    float2 _Size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-11"></span>
<span id="cb24-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Contains the vertex position and texture coordinates</span></span>
<span id="cb24-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> appdata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-14">        float4 vertex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> POSITION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-15">        float2 uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb24-17"></span>
<span id="cb24-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Contains the transformed vertex position and texture coordinates</span></span>
<span id="cb24-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> v2f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-20">        float2 uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-21">        float4 vertex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_POSITION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb24-23"></span>
<span id="cb24-24">    v2f <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vert</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>appdata v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-25">        v2f o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Transform the input vertex position to clip space</span></span>
<span id="cb24-27">        o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vertex</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnityObjectToClipPos</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vertex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Copy the input texture coordinates to the output structure</span></span>
<span id="cb24-29">        o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-30">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-32"></span>
<span id="cb24-33">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sampler2D</span> _MainTex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-34"></span>
<span id="cb24-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Fragment shader function</span></span>
<span id="cb24-36">    fixed4 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">frag</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v2f i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_Target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the input position based on the offset and size</span></span>
<span id="cb24-38">        float2 inputPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> _Size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> _Offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Sample the input image and return the cropped color values</span></span>
<span id="cb24-40">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tex2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>_MainTex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-42">    ENDCG</span>
<span id="cb24-43"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="normalizeimage.shader" class="level3">
<h3 class="anchored" data-anchor-id="normalizeimage.shader"><code>NormalizeImage.shader</code></h3>
<p>This shader normalizes an input image‚Äôs color channels based on the specified mean, standard deviation, and scale values. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-deep-learning-image-preprocessor/blob/main/Shaders/NormalizeImage.shader">NormalizeImage.shader</a></li>
</ul>
<section id="define-properties-1" class="level4">
<h4 class="anchored" data-anchor-id="define-properties-1">Define Properties</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb25-1">Properties</span>
<span id="cb25-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The input image texture</span></span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_MainTex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Texture"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> 2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> "white" <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb25-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A vector representing the mean of the color channels (r, g, b, a).</span></span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_Mean</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Mean"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A vector representing the standard deviation of the color channels (r, g, b, a).</span></span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_Std</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Std"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb25-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A float range to control the scaling of the output color values.</span></span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">_Scale</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>"Scale"<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb25-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="subshader-configuration-1" class="level4">
<h4 class="anchored" data-anchor-id="subshader-configuration-1">SubShader Configuration</h4>
<p>The shader disables culling and depth testing since it‚Äôs for 2D image processing.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// No culling or depth</span></span>
<span id="cb26-2">Cull Off ZWrite Off ZTest Always</span></code></pre></div>
</section>
<section id="pass-block-1" class="level4">
<h4 class="anchored" data-anchor-id="pass-block-1">Pass Block</h4>
<p>The Pass block contains the vertex and fragment shaders that process the input texture and normalizes it based on the provided <code>_Mean</code>, <code>_Std</code>, and <code>_Scale</code> values.</p>
<p>The vertex shader receives the input vertex data and passes it through to the fragment shader. It is a simple pass-through shader that does not modify the input data.</p>
<p>The fragment shader is responsible for cropping the input texture based on the provided <code>_Mean</code>, <code>_Std</code>, and <code>_Scale</code> values.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb27-1">Pass</span>
<span id="cb27-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-3">    CGPROGRAM</span>
<span id="cb27-4">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma vertex vert</span></span>
<span id="cb27-5">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma fragment frag</span></span>
<span id="cb27-6"></span>
<span id="cb27-7">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include "UnityCG.cginc"</span></span>
<span id="cb27-8"></span>
<span id="cb27-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Uniform variables to hold the mean and standard deviation values for each color channel (r, g, b)</span></span>
<span id="cb27-10">    float4 _Mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-11">    float4 _Std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> _Scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Contains the vertex position and texture coordinates</span></span>
<span id="cb27-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> appdata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-16">        float4 vertex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> POSITION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-17">        float2 uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb27-19"></span>
<span id="cb27-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Contains the transformed vertex position and texture coordinates</span></span>
<span id="cb27-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> v2f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-22">        float2 uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> TEXCOORD0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-23">        float4 vertex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_POSITION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb27-25"></span>
<span id="cb27-26">    v2f <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vert</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>appdata v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-27">        v2f o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Transform the input vertex position to clip space</span></span>
<span id="cb27-29">        o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vertex</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UnityObjectToClipPos</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vertex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Copy the input texture coordinates to the output structure</span></span>
<span id="cb27-31">        o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-32">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-34"></span>
<span id="cb27-35">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sampler2D</span> _MainTex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-36"></span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Fragment shader function</span></span>
<span id="cb27-38">    float4 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">frag</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v2f i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_Target</span>
<span id="cb27-39">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb27-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Sample the input image</span></span>
<span id="cb27-41">        float4 col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tex2D</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>_MainTex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb27-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Normalize each color channel (r, g, b) and scale</span></span>
<span id="cb27-43">        col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> _Mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> _Std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> _Scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the normalized color values</span></span>
<span id="cb27-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-46">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb27-47">    ENDCG</span>
<span id="cb27-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="processingshader.compute" class="level3">
<h3 class="anchored" data-anchor-id="processingshader.compute"><code>ProcessingShader.compute</code></h3>
<p>This Compute Shader implements multiple image processing operations. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-deep-learning-image-preprocessor/blob/main/Shaders/ProcessingShader.compute">ProcessingShader.compute</a></li>
</ul>
<section id="resources" class="level4">
<h4 class="anchored" data-anchor-id="resources">Resources</h4>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Input image texture</span></span>
<span id="cb28-2">Texture2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> _InputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output image texture</span></span>
<span id="cb28-5">RWTexture2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> _OutputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Structured buffer to hold the mean values for each color channel (r, g, b)</span></span>
<span id="cb28-8">RWStructuredBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> _Mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Structured buffer to hold the standard deviation values for each color channel (r, g, b)</span></span>
<span id="cb28-11">RWStructuredBuffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> _Std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Float variable that represents the scaling factor to apply to the normalized pixel values</span></span>
<span id="cb28-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> _Scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-15"></span>
<span id="cb28-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The (x, y) coordinates of the top-left corner of the cropping region</span></span>
<span id="cb28-17">int2 _CropOffset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The size (width, height) of the cropping region</span></span>
<span id="cb28-19">int2 _CropSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="normalizeimage" class="level4">
<h4 class="anchored" data-anchor-id="normalizeimage"><code>NormalizeImage</code></h4>
<p>This kernel normalizes the input image by applying a mean and standard deviation to each color channel (red, green, blue). It also scales the normalized pixel values by a given scale factor.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Normalize the input image</span></span>
<span id="cb29-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numthreads</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb29-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NormalizeImage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>uint3 id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb29-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb29-5">    float4 inputPixel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _InputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb29-6">    </span>
<span id="cb29-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create float4 variables for mean and standard deviation</span></span>
<span id="cb29-8">    float4 mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">float4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>_Mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> _Mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> _Mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb29-9">    float4 std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">float4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>_Std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> _Std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> _Std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb29-10"></span>
<span id="cb29-11">    float4 normalizedPixel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputPixel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-12"></span>
<span id="cb29-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply scaling and leave the alpha channel unchanged</span></span>
<span id="cb29-14">    _OutputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">float4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>normalizedPixel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> _Scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> inputPixel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">a</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb29-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cropimage" class="level4">
<h4 class="anchored" data-anchor-id="cropimage"><code>CropImage</code></h4>
<p>This kernel crops the input image by applying a given offset and size vector to produce a smaller image.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Crop the input image</span></span>
<span id="cb30-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numthreads</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb30-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CropImage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>uint3 id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb30-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>_CropSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>_CropSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb30-7">        int2 inputPos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> _CropOffset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-8">        _OutputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _InputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>inputPos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb30-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb30-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="flipxaxis" class="level4">
<h4 class="anchored" data-anchor-id="flipxaxis"><code>FlipXAxis</code></h4>
<p>This kernel flips the input image along the x-axis, effectively mirroring it.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode glsl code-with-copy"><code class="sourceCode glsl"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Flip the input image around the x-axis</span></span>
<span id="cb31-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numthreads</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb31-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FlipXAxis</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>uint3 id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> SV_DispatchThreadID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb31-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-7">    _InputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetDimensions</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-8"></span>
<span id="cb31-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compute the flipped pixel coordinates</span></span>
<span id="cb31-10">    int2 flippedCoords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">int2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-11">    _OutputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _InputImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>flippedCoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb31-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Deep Learning Image Preprocessor package. The package contains utility functions and shaders for preparing image input to perform inference with deep learning models in Unity.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-deep-learning-image-preprocessor">unity-deep-learning-image-preprocessor</a></li>
</ul>
<p>You can explore demo projects that use this package at the links below.</p>
<ul>
<li><a href="https://github.com/cj-mills/barracuda-image-classification-demo">Barracuda Image Classification Demo</a>: A simple Unity project demonstrating how to perform image classification with the <code>barracuda-inference-image-classification</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-deep-learning-image-preprocessor-walkthrough/index.html</guid>
  <pubDate>Thu, 04 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity CV Image Gallery Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-cv-image-gallery-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-cv-image-gallery">Unity CV Image Gallery</a> package provides an interactive image gallery and <code>Scroll View</code> prefab to facilitate the testing of computer vision applications, such as image classification, object detection, and pose estimation in Unity.</p>
<p>Many of my tutorials involve using computer vision models in Unity applications. This package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Check out the demo video below to see this package in action.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/unity-media-display-demo.mp4" class="img-fluid" controls=""><a href="./videos/unity-media-display-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains two C# scripts and a <code>Scroll View</code> prefab. It is designed to be easily integrated into your existing Unity projects and can be customized to suit your needs.</p>
<section id="c-scripts" class="level3">
<h3 class="anchored" data-anchor-id="c-scripts">C# Scripts</h3>
<ol type="1">
<li><code>ImageGallery.cs</code>: This script creates and manages the interactive image gallery. It attaches to a <code>Scroll View -&gt; Viewport -&gt; Content</code> object in a Unity scene.</li>
<li><code>PackageInstaller.cs</code>: An Editor utility script for automatically installing a list of dependency packages defined in a JSON file.</li>
</ol>
</section>
<section id="scroll-view-prefab" class="level3">
<h3 class="anchored" data-anchor-id="scroll-view-prefab">Scroll View Prefab</h3>
<p>The Scroll View prefab helps simplify adding an image gallery to a Unity scene. The prefab contains an <code>ImagePrefab</code> object and already has the <code>ImageGallery.cs</code> script attached to the <code>Scroll View -&gt; Viewport -&gt; Content</code> object. This prefab can be easily added to your Unity project, allowing you to quickly set up an interactive image gallery for testing computer vision applications. You can customize the prefab by modifying the serialized fields in the <code>ImageGallery.cs</code> script.</p>
</section>
<section id="dependencies" class="level3">
<h3 class="anchored" data-anchor-id="dependencies">Dependencies</h3>
<p>The package depends on the Unity Media Display package. This package simplifies creating and managing demo screens for displaying test images, videos, and webcam streams in Unity projects.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-media-display"><strong>GitHub Repository</strong></a></li>
<li><a href="../unity-media-display-walkthrough/"><strong>Code Walkthrough</strong></a></li>
</ul>
</section>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity CV Image Gallery package by examining the purpose and functionality of each C# script.</p>
<section id="imagegallery.cs" class="level3">
<h3 class="anchored" data-anchor-id="imagegallery.cs"><code>ImageGallery.cs</code></h3>
<p>In this section, we will go through the <code>ImageGallery.cs</code> script and explain how each part of the code works to create and manage the interactive image gallery. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-cv-image-gallery/blob/main/Runtime/Scripts/ImageGallery.cs">ImageGallery.cs</a></li>
</ul>
<section id="class-variables" class="level4">
<h4 class="anchored" data-anchor-id="class-variables">Class Variables</h4>
<p>The <code>ImageGallery</code> class contains several serialized fields to configure the gallery.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scene"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The screen GameObject where the selected image will be displayed"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> GameObject screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The camera GameObject used to display the selected image"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> GameObject cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The content panel GameObject where the image gallery is located"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> GameObject contentPanel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The image prefab used to create each image in the gallery"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> GameObject imagePrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of sprites to populate the image gallery."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Sprite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> imageSprites<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" The spacing between images in the gallery."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> 5f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The specified width for each image in the gallery."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> specifiedWidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> 100f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="start" class="level4">
<h4 class="anchored" data-anchor-id="start"><code>Start</code></h4>
<p>Start() runs when the script first executes. It calls several methods to initialize the gallery.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Configures the content panel with a VerticalLayoutGroup component.</span></span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetupContentPanel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Populates the gallery with images using the provided sprites.</span></span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PopulateImageGallery</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Adjusts the content panel height by summing the vertical dimensions of all gallery images and spacing.</span></span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AdjustContentHeight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assigns click events to the images in the gallery to update the screen texture.</span></span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssignButtonClickEvents</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="setupcontentpanel" class="level4">
<h4 class="anchored" data-anchor-id="setupcontentpanel"><code>SetupContentPanel</code></h4>
<p>This method sets up the content panel with a <code>VerticalLayoutGroup</code> component. It configures the component‚Äôs properties, such as <code>spacing</code>, <code>childAlignment</code>, and <code>childControlHeight</code>, to arrange the images in the gallery with proper spacing and alignment.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Set up the content panel with a VerticalLayoutGroup component.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetupContentPanel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">    VerticalLayoutGroup verticalLayoutGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> contentPanel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>VerticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb3-7">    verticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spacing</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spacing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    verticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childAlignment</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TextAnchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpperCenter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">    verticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childControlHeight</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">    verticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childControlWidth</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11">    verticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childForceExpandHeight</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">    verticalLayoutGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childForceExpandWidth</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="populateimagegallery" class="level4">
<h4 class="anchored" data-anchor-id="populateimagegallery"><code>PopulateImageGallery</code></h4>
<p>This method populates the image gallery with the sprites in the <code>imageSprites</code> list.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Populate the image gallery with the sprites provided in imageSprites.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PopulateImageGallery</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Sprite sprite <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> imageSprites<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Instantiates a new GameObject using the imagePrefab</span></span>
<span id="cb4-9">        GameObject newImageObject <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Instantiate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>imagePrefab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> contentPanel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-10">        Image newImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newImageObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb4-11">        newImageObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetActive</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign the curent sprite</span></span>
<span id="cb4-13">        newImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprite</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sprite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Preserves the aspect ratio</span></span>
<span id="cb4-15">        newImage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preserveAspect</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Use  the sprite's name for easier identification</span></span>
<span id="cb4-17">        newImageObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sprite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18"></span>
<span id="cb4-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Adjust the image size based on the specified width</span></span>
<span id="cb4-20">        RectTransform rectTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newImageObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb4-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> aspectRatio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sprite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sprite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-22">        rectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>specifiedWidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> specifiedWidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> aspectRatio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="adjustcontentheight" class="level4">
<h4 class="anchored" data-anchor-id="adjustcontentheight"><code>AdjustContentHeight</code></h4>
<p>This method adjusts the content panel‚Äôs height based on the total vertical size of the images and spacing.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Adjust the content panel height based on the total height of the images and spacing.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AdjustContentHeight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-6">    RectTransform contentPanelRectTransform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> contentPanel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> totalHeight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> 0f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the total height of all the images in the gallery</span></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> contentPanelRectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childCount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb5-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">        RectTransform childRect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> contentPanelRectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetChild</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>RectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb5-13">        totalHeight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> childRect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the spacing between the images to the total height</span></span>
<span id="cb5-17">    totalHeight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>contentPanelRectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">childCount</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Updates the content panel to accommodate the total height</span></span>
<span id="cb5-19">    contentPanelRectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>contentPanelRectTransform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sizeDelta</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> totalHeight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="assignbuttonclickevents" class="level4">
<h4 class="anchored" data-anchor-id="assignbuttonclickevents"><code>AssignButtonClickEvents</code></h4>
<p>This method assigns click events to the images in the gallery to update the screen texture to display the selected image.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Assigns click events to the images in the gallery to update the screen texture when clicked.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AssignButtonClickEvents</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">    Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponentsInChildren</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">foreach</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Image image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add a Button component if the image doesn't already have one</span></span>
<span id="cb6-11">        Button button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Button<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb6-12">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-14">            button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gameObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Button<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span></span>
<span id="cb6-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add a listener to update the screen texture to display the selected image when clicked</span></span>
<span id="cb6-18">        button<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">onClick</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddListener</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> MediaDisplayManager<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb6-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="packageinstaller.cs" class="level3">
<h3 class="anchored" data-anchor-id="packageinstaller.cs"><code>PackageInstaller.cs</code></h3>
<p>In this section, we will go through the <code>PackageInstaller.cs</code> script and explain how each part of the code works to install the required packages. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-cv-image-gallery/blob/main/Editor/PackageInstaller.cs">PackageInstaller.cs</a></li>
</ul>
<section id="serializable-classes" class="level4">
<h4 class="anchored" data-anchor-id="serializable-classes">Serializable Classes</h4>
<p>The script defines two serializable classes to hold package data.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold package data</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageData</span>
<span id="cb7-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageUrl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Serializable class to hold a list of PackageData objects</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>System<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Serializable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PackageList</span>
<span id="cb7-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These classes are for deserializing the JSON file containing the list of packages to install.</p>
</section>
<section id="packageinstaller-class-variables" class="level4">
<h4 class="anchored" data-anchor-id="packageinstaller-class-variables">PackageInstaller Class Variables</h4>
<p>The PackageInstaller class contains several private static fields.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Stores the AddRequest object for the current package to install.</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> AddRequest addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A list of PackageData objects to install.</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The index of the current package to install.</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// GUID of the JSON file containing the list of packages to install</span></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> PackagesJSONGUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f0b282a4fbb4473584f52e3fd0ab3087"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="installdependencies" class="level4">
<h4 class="anchored" data-anchor-id="installdependencies"><code>InstallDependencies</code></h4>
<p>The <code>InstallDependencies()</code> method executes when Unity loads without action from the user. It reads the package JSON file and calls the <code>InstallNextPackage()</code> method to install the packages.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method called on load to install packages from the JSON file</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallDependencies</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the package JSON file</span></span>
<span id="cb9-6">    packagesToInstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packages</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the current package index</span></span>
<span id="cb9-8">    currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start installing the packages</span></span>
<span id="cb9-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb9-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="installnextpackage" class="level4">
<h4 class="anchored" data-anchor-id="installnextpackage"><code>InstallNextPackage</code></h4>
<p>This method installs the next package in the list.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to install the next package in the list</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through package list</span></span>
<span id="cb10-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>currentPackageIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-7">        PackageData packageData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> packagesToInstall<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-8"></span>
<span id="cb10-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb10-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb10-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to install package</span></span>
<span id="cb10-13">            addRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>packageData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageUrl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-14">            EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb10-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb10-19">            currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb10-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Recursively call InstallNextPackage</span></span>
<span id="cb10-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb10-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="packageinstallationprogress" class="level4">
<h4 class="anchored" data-anchor-id="packageinstallationprogress"><code>PackageInstallationProgress</code></h4>
<p>This method monitors the progress of the package installation and logs whether it was successful. It then triggers the installation process for the next package in the list.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to monitor the progress of package installation</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PackageInstallationProgress</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log whether the package installation was successful</span></span>
<span id="cb11-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully installed: {addRequest.Result.packageId}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>addRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Failure</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-13">            UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to install package: {addRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-15"></span>
<span id="cb11-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unregister the method from the EditorApplication.update </span></span>
<span id="cb11-17">        EditorApplication<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> PackageInstallationProgress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the current package index</span></span>
<span id="cb11-19">        currentPackageIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb11-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Install the next package in the list</span></span>
<span id="cb11-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InstallNextPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb11-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ispackageinstalled" class="level4">
<h4 class="anchored" data-anchor-id="ispackageinstalled"><code>IsPackageInstalled</code></h4>
<p>This method verifies whether a package has already been installed or not.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to check if a package is already installed</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsPackageInstalled</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// List the installed packages</span></span>
<span id="cb12-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> listRequest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">List</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IsCompleted</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-7"></span>
<span id="cb12-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Status</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> StatusCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the package is already installed</span></span>
<span id="cb12-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> listRequest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Any</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> package<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> packageName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-15">        UnityEngine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Debug</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogError</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to list packages: {listRequest.Error.message}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="readpackagejson" class="level4">
<h4 class="anchored" data-anchor-id="readpackagejson"><code>ReadPackageJson</code></h4>
<p>This method reads the JSON file containing the list of packages to install and returns a <code>PackageList</code> object.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to read the JSON file and return a PackageList object</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> PackageList <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadPackageJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb13-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the PackagesJSONGUID to an asset path</span></span>
<span id="cb13-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> assetPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GUIDToAssetPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PackagesJSONGUID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the JSON file content as a string</span></span>
<span id="cb13-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> jsonString <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> File<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ReadAllText</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>assetPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Deserialize the JSON string into a PackageList object</span></span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> JsonUtility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FromJson</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PackageList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>jsonString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity CV Image Gallery package. The package helps facilitate testing computer vision applications in Unity projects by providing an interactive image gallery.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-cv-image-gallery">unity-cv-image-gallery</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below, along with links for other demo projects that use the Unity CV Image Gallery package.</p>
<ul>
<li><a href="https://github.com/cj-mills/UnityMediaDisplay_Demo">Unity Media Display Demo</a>: A simple demo project demonstrating how to use <code>the unity-media-display</code> and <code>unity-cv-image-gallery</code> packages in Unity.</li>
<li><a href="https://github.com/cj-mills/barracuda-image-classification-demo">Barracuda Image Classification Demo</a>: A simple Unity project demonstrating how to perform image classification with the <code>barracuda-inference-image-classification</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-cv-image-gallery-walkthrough/index.html</guid>
  <pubDate>Wed, 03 May 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Code Walkthrough: Unity Media Display Package</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/unity-media-display-walkthrough/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Package Overview</li>
<li>Code Explanation</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://github.com/cj-mills/unity-media-display">Unity Media Display</a> package simplifies the creation and management of demo screens for displaying test images, videos, and webcam streams in Unity projects. As many of my tutorials use a demo screen, this package makes that shared functionality more modular and reusable, allowing me to streamline my tutorial content. Check out the demo video below to see this package in action.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="./videos/unity-media-display-demo.mp4" class="img-fluid" controls=""><a href="./videos/unity-media-display-demo.mp4">Video</a></video></p>
</figure>
</div>
<p>In this post, I‚Äôll walk through the package code, providing a solid understanding of its components and their roles.</p>
</section>
<section id="package-overview" class="level2">
<h2 class="anchored" data-anchor-id="package-overview">Package Overview</h2>
<p>The package contains several C# scripts that work together to enable easy management of demo screens.</p>
<ol type="1">
<li><code>BaseScreenManager.cs</code>: This abstract class is the foundation for managing in-scene screen objects. It provides essential functionality and basic structure for derived classes, allowing you to create custom screen managers tailored to your project‚Äôs needs.</li>
<li><code>MediaDisplayManager.cs</code>: This script offers utility methods for setting up and managing a screen object in Unity. It handles initializing and updating screen textures, transformations, and webcam streams.</li>
<li><code>TextureChangeEvent.cs</code>: This script triggers when a material‚Äôs main texture changes, allowing for efficient texture updates and seamless transitions between different media sources.</li>
<li><code>AddCustomDefineSymbol.cs</code>: An Editor script that automatically adds a custom scripting define symbol to the project after the package installs.</li>
<li><code>ShaderIncludePostprocessor.cs</code>: This build postprocessor script includes the shader used by the screen material in the build process and only runs in the Unity Editor.</li>
</ol>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<p>In this section, we will delve deeper into the Unity Media Display package by examining the purpose and functionality of each C# script. We‚Äôll discuss how these scripts work together to enable seamless management of demo screens for displaying test images, videos, and webcam streams.</p>
<section id="basescreenmanager.cs" class="level3">
<h3 class="anchored" data-anchor-id="basescreenmanager.cs"><code>BaseScreenManager.cs</code></h3>
<p>This script provides an abstract class for managing in-scene screen objects, allowing you to create custom screen managers tailored to your project‚Äôs needs. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-media-display/blob/main/Runtime/Scripts/BaseScreenManager.cs">unity-media-display/Runtime/Scripts/BaseScreenManager.cs</a></li>
</ul>
<p>The <code>BaseScreenManager</code> class includes several serialized fields for configuring scene components and settings, webcam settings, and toggle-key settings.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scene components and settings</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scene"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Screen object in the scene"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> GameObject screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Camera object in the scene"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> GameObject cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A test texture to display on the screen"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> Texture testTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A framerate cap to reduce lag"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> maxFrameRate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Webcam settings</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Webcam"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option to use webcam as input"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Requested webcam dimensions"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> Vector2Int webcamDims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1280</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">720</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Requested webcam framerate"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> webcamFrameRate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Toggle key settings</span></span>
<span id="cb1-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Header</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toggle Key"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tooltip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Key to toggle between image and webcam feed"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SerializeField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> KeyCode toggleKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KeyCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Space</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>It also contains protected variables for managing the current texture, webcam devices, and the webcam texture.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> Texture currentTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> WebCamDevice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> webcamDevices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> currentWebcam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Lastly, the script has some constant values for working with webcam devices.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The value to multiply the webcam frame rate by to determine the application's target framerate.</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WebcamFrameRateMultiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The value for the width of an uninitialized webcam device</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> UninitializedWebcamWidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>The script includes several methods:</p>
<section id="onenable" class="level4">
<h4 class="anchored" data-anchor-id="onenable"><code>OnEnable</code></h4>
<p>Subscribes to the <code>TextureChangeEvent</code> for handling changes in the <code>mainTexture</code> of a <code>Material</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Subscribe to the texture change event</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnEnable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-4">    TextureChangeEvent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnMainTextureChanged</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> HandleMainTextureChanged<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initialize" class="level4">
<h4 class="anchored" data-anchor-id="initialize"><code>Initialize</code></h4>
<p>Sets the application‚Äôs target frame rate, configures the webcam devices, and initializes the current webcam if the <code>useWebcam</code> option is enabled.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initializes the application's target frame rate and configures the webcam devices.</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Initialize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Limit the application's target frame rate to reduce lag.</span></span>
<span id="cb5-5">    Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetFrameRate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maxFrameRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the list of available webcam devices.</span></span>
<span id="cb5-7">    webcamDevices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WebCamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">devices</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If no webcam devices are available, disable the useWebcam option.</span></span>
<span id="cb5-9">    useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> webcamDevices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the current webcam device to the first available device, if any.</span></span>
<span id="cb5-11">    currentWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> webcamDevices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatedisplay" class="level4">
<h4 class="anchored" data-anchor-id="updatedisplay"><code>UpdateDisplay</code></h4>
<p>Updates the display with the current texture, sets up the webcam if necessary, and starts a coroutine to update the screen texture asynchronously.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Updates the display with the current texture (either a test texture or the webcam feed).</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateDisplay</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set up the webcam if necessary.</span></span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetupWebcam</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the current texture based on the useWebcam option.</span></span>
<span id="cb6-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateCurrentTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start a coroutine to asynchronously update the screen texture.</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">StartCoroutine</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTextureAsync</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb6-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="setupwebcam" class="level4">
<h4 class="anchored" data-anchor-id="setupwebcam"><code>SetupWebcam</code></h4>
<p>If the <code>useWebcam</code> option is enabled and there are available webcam devices, this method initializes the webcam device and stops it if the option is disabled.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Sets up the webcam if the useWebcam option is enabled.</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetupWebcam</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If there are no webcam devices, return immediately.</span></span>
<span id="cb7-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>webcamDevices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the useWebcam option is enabled, initialize the webcam.</span></span>
<span id="cb7-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>useWebcam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the webcam and check if it started playing.</span></span>
<span id="cb7-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> webcamPlaying <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MediaDisplayManager<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ref</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentWebcam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> webcamDims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> webcamFrameRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the webcam failed to start playing, disable the useWebcam option.</span></span>
<span id="cb7-13">        useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> webcamPlaying <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the useWebcam option is disabled and the webcam texture is playing, stop the webcam.</span></span>
<span id="cb7-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isPlaying</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-18">        webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Stop</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatecurrenttexture" class="level4">
<h4 class="anchored" data-anchor-id="updatecurrenttexture"><code>UpdateCurrentTexture</code></h4>
<p>This method updates the current texture and target frame rate based on the <code>useWebcam</code> option.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Updates the current texture and target frame rate based on the useWebcam option.</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateCurrentTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the current texture to the webcam texture if useWebcam is enabled, otherwise use the test texture.</span></span>
<span id="cb8-5">    currentTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> webcamTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> testTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the target frame rate based on whether the webcam is being used or not.</span></span>
<span id="cb8-7">    Application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetFrameRate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> webcamFrameRate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WebcamFrameRateMultiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> maxFrameRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatescreentextureasync" class="level4">
<h4 class="anchored" data-anchor-id="updatescreentextureasync"><code>UpdateScreenTextureAsync</code></h4>
<p>A coroutine that waits until the webcamTexture is ready (if <code>useWebcam</code> is enabled) and updates the screen texture with the current texture (either the test texture or the webcam feed).</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Coroutine to update the screen texture asynchronously.</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> IEnumerator <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTextureAsync</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Wait until the webcamTexture is ready if useWebcam is enabled.</span></span>
<span id="cb9-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isPlaying</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> UninitializedWebcamWidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the screen texture with the current texture (image or webcam feed).</span></span>
<span id="cb9-11">    MediaDisplayManager<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> useWebcam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="handlemaintexturechanged" class="level4">
<h4 class="anchored" data-anchor-id="handlemaintexturechanged"><code>HandleMainTextureChanged</code></h4>
<p>This method handles the <code>TextureChangeEvent</code>, updating the current texture and stopping the webcam if the new main texture differs from the webcam texture.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Handle the texture change event.</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HandleMainTextureChanged</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Material material<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the current texture.</span></span>
<span id="cb10-5">    currentTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> material<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the new main texture is different from the webcam texture and the webcam is playing, stop the webcam.</span></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> material<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainTexture</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> webcamTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isPlaying</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">        useWebcam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-10">        webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Stop</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="ondisable" class="level4">
<h4 class="anchored" data-anchor-id="ondisable"><code>OnDisable</code></h4>
<p>Lastly, the <code>OnDisable()</code> method unsubscribes from the <code>TextureChangeEvent</code> when the script is disabled.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Unsubscribe from the texture change event when the script is disabled.</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">protected</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnDisable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    TextureChangeEvent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnMainTextureChanged</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> HandleMainTextureChanged<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="mediadisplaymanager.cs" class="level3">
<h3 class="anchored" data-anchor-id="mediadisplaymanager.cs"><code>MediaDisplayManager.cs</code></h3>
<p>The <code>MediaDisplayManager</code> script contains a static utility class that provides various methods to set up and manage media displays in Unity. This script sets screen textures, updates screen transforms, and initializes camera and webcam configurations. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-media-display/blob/main/Runtime/Scripts/MediaDisplayManager.cs">unity-media-display/Runtime/Scripts/MediaDisplayManager.cs</a></li>
</ul>
<section id="setscreentexture" class="level4">
<h4 class="anchored" data-anchor-id="setscreentexture"><code>SetScreenTexture</code></h4>
<p>This method sets the texture for the screen object and raises a texture change event.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Sets the texture for the screen object and raises a texture change event.</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenObject"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GameObject to be used as the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displayTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The Texture to display on the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScreenTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>GameObject screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Texture displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to get the MeshRenderer component from the screen object</span></span>
<span id="cb12-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TryGetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>MeshRenderer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">out</span> MeshRenderer meshRenderer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a new material with the Unlit/Texture shader and set its main texture</span></span>
<span id="cb12-12">        Material screenMaterial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Material</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Shader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Find</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unlit/Texture"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-14">            mainTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> displayTexture</span>
<span id="cb12-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign the material to the mesh renderer</span></span>
<span id="cb12-18">        meshRenderer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">material</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenMaterial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-19"></span>
<span id="cb12-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Raise a texture change event to inform other scripts</span></span>
<span id="cb12-21">        TextureChangeEvent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RaiseMainTextureChangedEvent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>meshRenderer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">material</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatescreentransform" class="level4">
<h4 class="anchored" data-anchor-id="updatescreentransform"><code>UpdateScreenTransform</code></h4>
<p>This method updates the screen object‚Äôs rotation, scale, and position based on the display texture and mirror settings.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the screen object's rotation, scale, and position based on the display texture and mirror settings.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenObject"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GameObject to be used as the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displayTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The Texture displayed on the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mirrorScreen"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Optional parameter to mirror the screen horizontally. Default is false.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>GameObject screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Texture displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the width and height of the display texture</span></span>
<span id="cb13-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-12"></span>
<span id="cb13-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the rotation, scale, and position of the screen object</span></span>
<span id="cb13-14">    screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotation</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Quaternion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Euler</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> mirrorScreen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> 180f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> 0f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-15">    screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">localScale</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> mirrorScreen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>1f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> 1f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-16">    screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">position</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializecamera" class="level4">
<h4 class="anchored" data-anchor-id="initializecamera"><code>InitializeCamera</code></h4>
<p>This method initializes the camera used for displaying the screen.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes the camera used for displaying the screen.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cameraObject"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GameObject with a Camera component to be used for displaying the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenDimensions"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The dimensions of the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeCamera</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>GameObject cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Attempt to get the Camera component from the camera object</span></span>
<span id="cb14-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TryGetComponent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">out</span> Camera camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb14-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the position of the camera object</span></span>
<span id="cb14-12">        Vector3 position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>10f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-13">        cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">position</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-14"></span>
<span id="cb14-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Configure the camera for orthographic mode</span></span>
<span id="cb14-16">        camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">orthographic</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-17"></span>
<span id="cb14-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the aspect ratios of the screen object and the camera's viewport</span></span>
<span id="cb14-19">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> screenAspectRatio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-20">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> cameraAspectRatio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pixelWidth</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pixelHeight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-21"></span>
<span id="cb14-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the camera's orthographic size based on the aspect ratios</span></span>
<span id="cb14-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenAspectRatio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cameraAspectRatio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Wider screen object</span></span>
<span id="cb14-26">            camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">orthographicSize</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aspect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb14-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Taller screen object</span></span>
<span id="cb14-31">            camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">orthographicSize</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="initializewebcam" class="level4">
<h4 class="anchored" data-anchor-id="initializewebcam"><code>InitializeWebcam</code></h4>
<p>This method initializes and plays a webcam stream with the specified settings.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Initializes and plays a webcam stream with the specified settings.</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"webcamTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">A reference to the WebCamTexture instance to be initialized and played.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"deviceName"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The name of the webcam device to be used for streaming.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"webcamDimensions"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The desired resolution of the webcam stream.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"webcamFrameRate"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The desired frame rate of the webcam stream. Default is 60.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;returns&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Returns true if the webcam stream has started playing, false otherwise.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/returns&gt;</span></span>
<span id="cb15-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeWebcam</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ref</span> WebCamTexture webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> deviceName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector2Int webcamDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> webcamFrameRate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If the webcam texture is not null and it is playing, stop it</span></span>
<span id="cb15-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>webcamTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isPlaying</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-14">        webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Stop</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-16"></span>
<span id="cb15-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a new WebCamTexture instance with the specified settings</span></span>
<span id="cb15-18">    webcamTexture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebCamTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>deviceName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> webcamDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> webcamDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> webcamFrameRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-19"></span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Start playing the webcam stream</span></span>
<span id="cb15-21">    webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Play</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-22"></span>
<span id="cb15-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return true if the webcam stream has started playing, false otherwise</span></span>
<span id="cb15-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> webcamTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isPlaying</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="updatescreentexture" class="level4">
<h4 class="anchored" data-anchor-id="updatescreentexture"><code>UpdateScreenTexture</code></h4>
<p>This method updates the texture, transform, and camera object.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Updates the texture, transform, and camera of the screen object.</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"screenObject"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GameObject to be used as the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"displayTexture"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The Texture displayed on the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cameraObject"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The GameObject with a Camera component to be used for displaying the screen.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mirrorScreen"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Optional parameter to mirror the screen horizontally. Default is false.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb16-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>GameObject screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Texture displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> GameObject cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> mirrorScreen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb16-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the texture of the screen object</span></span>
<span id="cb16-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScreenTexture</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-12"></span>
<span id="cb16-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update the transform of the screen object based on the new texture dimensions and mirror settings</span></span>
<span id="cb16-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UpdateScreenTransform</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>screenObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> mirrorScreen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the screen dimensions from the updated screen object</span></span>
<span id="cb16-17">    Vector2Int screenDimensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vector2Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> displayTexture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-18"></span>
<span id="cb16-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the camera for displaying the screen</span></span>
<span id="cb16-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InitializeCamera</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cameraObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> screenDimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="texturechangeevent.cs" class="level3">
<h3 class="anchored" data-anchor-id="texturechangeevent.cs"><code>TextureChangeEvent.cs</code></h3>
<p>The <code>TextureChangeEvent</code> class defines and manages a custom event that triggers when the main texture of a Material object changes. This event allows other scripts to be notified and respond accordingly when the displayed texture updates. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-media-display/blob/main/Runtime/Scripts/TextureChangeEvent.cs">unity-media-display/Runtime/Scripts/TextureChangeEvent.cs</a></li>
</ul>
<ol type="1">
<li><code>OnMainTextureChangedDelegate</code>: This delegate defines the signature for the event handlers that get called when the main texture changes.</li>
<li><code>OnMainTextureChanged</code>: A static event of the <code>OnMainTextureChangedDelegate</code> type. It allows other scripts to subscribe and respond to texture change events.</li>
<li><code>RaiseMainTextureChangedEvent</code>: This static method gets called when the main texture of a Material object changes. The method invokes the <code>OnMainTextureChanged</code> event, calling any subscribed event handlers and passing the updated material as an argument.</li>
</ol>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TextureChangeEvent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> MonoBehaviour</span>
<span id="cb17-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define a delegate with the desired signature</span></span>
<span id="cb17-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delegate</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnMainTextureChangedDelegate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Material material<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-5"></span>
<span id="cb17-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a static event with the delegate type</span></span>
<span id="cb17-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">event</span> OnMainTextureChangedDelegate OnMainTextureChanged<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-8"></span>
<span id="cb17-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Method to call when the mainTexture has been changed</span></span>
<span id="cb17-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RaiseMainTextureChangedEvent</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Material material<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-12">        OnMainTextureChanged<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Invoke</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>material<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
<section id="addcustomdefinesymbol.cs" class="level3">
<h3 class="anchored" data-anchor-id="addcustomdefinesymbol.cs"><code>AddCustomDefineSymbol.cs</code></h3>
<p>This Editor script contains a class that adds a custom define symbol to the project. We can use this custom symbol to prevent code that relies on this package from executing unless the Unity Media Display package is present. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-media-display/blob/main/Editor/AddCustomDefineSymbol.cs">unity-media-display/Editor/AddCustomDefineSymbol.cs</a></li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DependencyDefineSymbolAdder</span>
<span id="cb18-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constant string representing the custom define symbol.</span></span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> CustomDefineSymbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CJM_UNITY_MEDIA_DISPLAY"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-5"></span>
<span id="cb18-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This method is called on Unity editor load to ensure the custom define symbol is added.</span></span>
<span id="cb18-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>InitializeOnLoadMethod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddCustomDefineSymbol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb18-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the currently selected build target group.</span></span>
<span id="cb18-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> buildTargetGroup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditorUserBuildSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedBuildTargetGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve the current scripting define symbols for the selected build target group.</span></span>
<span id="cb18-14">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the custom define symbol is already in the list of define symbols.</span></span>
<span id="cb18-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Contains</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CustomDefineSymbol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb18-18">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Append the custom define symbol to the list of define symbols.</span></span>
<span id="cb18-20">            defines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> $<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";{CustomDefineSymbol}"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-21"></span>
<span id="cb18-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the updated list of define symbols for the selected build target group.</span></span>
<span id="cb18-23">            PlayerSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SetScriptingDefineSymbolsForGroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buildTargetGroup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> defines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-24"></span>
<span id="cb18-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Log the successful addition of the custom define symbol.</span></span>
<span id="cb18-26">            Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added custom define symbol '{CustomDefineSymbol}' to the project."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<hr>
</section>
<section id="shaderincludepostprocessor.cs" class="level3">
<h3 class="anchored" data-anchor-id="shaderincludepostprocessor.cs"><code>ShaderIncludePostprocessor.cs</code></h3>
<p>The <code>ShaderIncludePostprocessor.cs</code> script includes the shader used by the screen material in the build by adding it to the list of <code>Always Included Shaders</code> in the Graphics Settings. This script implements the <code>IPostprocessBuildWithReport</code> interface and runs only in the Unity Editor. The complete code is available on GitHub at the link below.</p>
<ul>
<li><a href="https://github.com/cj-mills/unity-media-display/blob/main/Editor/ShaderIncludePostprocessor.cs">unity-media-display/Runtime/Editor/ShaderIncludePostprocessor.cs</a></li>
</ul>
<p>The <code>ShaderIncludePostprocessor</code> class includes a property to specify the order in which the build postprocessor gets called.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// The order in which this postprocessor is called.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> callbackOrder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">get</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<section id="onpostprocessbuild" class="level4">
<h4 class="anchored" data-anchor-id="onpostprocessbuild"><code>OnPostprocessBuild</code></h4>
<p>This method gets called after the build completes. It calls the <code>AddShaderToAlwaysIncludedShaders</code> method with the <code>"Unlit/Texture"</code> shader name, ensuring the built project includes it.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Called after the build has been completed.</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"report"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The BuildReport object containing information about the build.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OnPostprocessBuild</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BuildReport report<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddShaderToAlwaysIncludedShaders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unlit/Texture"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="addshadertoalwaysincludedshaders" class="level4">
<h4 class="anchored" data-anchor-id="addshadertoalwaysincludedshaders"><code>AddShaderToAlwaysIncludedShaders</code></h4>
<p>This method adds the specified shader to the <code>Always Included Shaders</code> list in the Graphics Settings.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c# code-with-copy"><code class="sourceCode cs"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;summary&gt;</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// Adds the specified shader to the list of always included shaders in GraphicsSettings.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;param</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shaderName"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The name of the shader to add to the always included shaders list.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/param&gt;</span></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AddShaderToAlwaysIncludedShaders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> shaderName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-7">    Shader shader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Shader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Find</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shaderName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-10">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogWarning</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shader '{shaderName}' not found."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-13"></span>
<span id="cb21-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Load the GraphicsSettings asset</span></span>
<span id="cb21-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">var</span> graphicsSettings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AssetDatabase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LoadAssetAtPath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>GraphicsSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ProjectSettings/GraphicsSettings.asset"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>graphicsSettings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-18">        Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LogWarning</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GraphicsSettings.asset not found."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-21"></span>
<span id="cb21-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a serialized object from the GraphicsSettings asset</span></span>
<span id="cb21-23">    SerializedObject serializedGraphicsSettings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SerializedObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>graphicsSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Find the "m_AlwaysIncludedShaders" property in the serialized object</span></span>
<span id="cb21-25">    SerializedProperty alwaysIncludedShadersProp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serializedGraphicsSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FindProperty</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m_AlwaysIncludedShaders"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-26"></span>
<span id="cb21-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate through the shaders in the Always Included Shaders list</span></span>
<span id="cb21-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> alwaysIncludedShadersProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arraySize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb21-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-30">        SerializedProperty shaderProp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alwaysIncludedShadersProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetArrayElementAtIndex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shaderProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">objectReferenceValue</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> shader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-33">            Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shader '{shaderName}' is already in the Always Included Shaders list."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-34">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-37"></span>
<span id="cb21-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the specified shader to the Always Included Shaders list</span></span>
<span id="cb21-39">    alwaysIncludedShadersProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">InsertArrayElementAtIndex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>alwaysIncludedShadersProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arraySize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-40">    SerializedProperty newShaderProp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alwaysIncludedShadersProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GetArrayElementAtIndex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>alwaysIncludedShadersProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arraySize</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-41">    newShaderProp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">objectReferenceValue</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-42">    serializedGraphicsSettings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ApplyModifiedProperties</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb21-43"></span>
<span id="cb21-44">    Debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Log</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>$<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shader '{shaderName}' has been added to the Always Included Shaders list."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This post provided an in-depth walkthrough of the code for the Unity Media Display package. The package helps simplify creating and managing demo screens for displaying test images, video, and webcam streams in Unity projects.</p>
<p>You can continue to explore the package by going to its GitHub repository linked below, where you will also find instructions for installing it using the Unity Package Manager.</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/cj-mills/unity-media-display">unity-media-display</a></li>
</ul>
<p>You can find the code for the demo project shown in the video at the beginning of this post linked below, along with links for other demo projects that use the Unity Media Display package.</p>
<ul>
<li><a href="https://github.com/cj-mills/UnityMediaDisplay_Demo">Unity Media Display Demo</a>: A simple demo project demonstrating how to use <code>the unity-media-display</code> and <code>unity-cv-image-gallery</code> packages in Unity.</li>
<li><a href="https://github.com/cj-mills/barracuda-image-classification-demo">Barracuda Image Classification Demo</a>: A simple Unity project demonstrating how to perform image classification with the <code>barracuda-inference-image-classification</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-posenet-demo">Barracuda Inference PoseNet Demo</a>: A simple Unity project demonstrating how to perform 2D human pose estimation with the <code>barracuda-inference-posenet</code> package.</li>
<li><a href="https://github.com/cj-mills/barracuda-inference-yolox-demo">Barracuda Inference YOLOX Demo</a>: A simple Unity project demonstrating how to perform object detection with the <code>barracuda-inference-yolox</code> package.</li>
</ul>


</section>

 ]]></description>
  <category>unity</category>
  <category>walkthrough</category>
  <guid>christianjmills.com/posts/unity-media-display-walkthrough/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Exploring the Impact of Different Image Augmentations on Hand Gesture Recognition</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Introduction</li>
<li>Environment Setup</li>
<li>Dataset</li>
<li>Methodology</li>
<li>Results</li>
<li>Discussion</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Computer vision models can learn to recognize complex patterns and objects in images. However, they often struggle to generalize to new input. One solution is data augmentation, a technique that expands the size and diversity of a dataset by creating variations of existing images. The model never sees the exact image twice, helping it learn general features versus memorizing specific examples.</p>
<p>In this post, I will explore how different augmentations can impact model performance using a hand gesture dataset. Hand gesture recognition has potential applications in human-computer interaction, robotics, and sign language interpretation. Hand gesture recognition is challenging due to the variability of hand poses, shapes, and lighting conditions, making it a good candidate for image augmentation. The results of these experiments should provide insights into the best practices for training deep learning models to handle diverse input.</p>
<p>You can find links to view the training code and run it on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a> below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kaggle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/fastai-2022p2-notes/blob/main/notebooks/miniai-data-augmentation-experiments.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/fastai-2022p2-notes/blob/main/notebooks/miniai-data-augmentation-experiments.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/fastai-2022p2-notes/blob/main/notebooks/miniai-data-augmentation-experiments-kaggle.ipynb">Kaggle</a></td>
</tr>
</tbody>
</table>
</section>
<section id="environment-setup" class="level2">
<h2 class="anchored" data-anchor-id="environment-setup">Environment Setup</h2>
<p>The experiment code depends on the <a href="https://github.com/fastai/course22p2/tree/master/miniai">miniai</a> library developed for the <a href="https://www.fast.ai/posts/part2-2022.html">Practical Deep Learning 2022 Part 2</a> course. First, we‚Äôll check if we have the miniai package installed. If not, we clone the course repository from GitHub and install the miniai package.</p>
<p><strong>Install dependencies</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %%capture</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try:</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     import miniai</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># except ImportError:</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     !git clone https://github.com/fastai/course22p2.git</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     !pip install -e ./course22p2</span></span></code></pre></div>
<p>Next, we need to install several pip packages.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %%capture</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install torch torchvision torchaudio torcheval</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install numpy pandas pillow wandb</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install cjm_pil_utils cjm_kaggle_utils cjm_pytorch_utils cjm_pandas_utils</span></span></code></pre></div>
<p>After installing the required dependencies, we can import them into our Jupyter notebook.</p>
<p><strong>Import dependencies</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hashlib</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb3-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> copy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb3-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb3-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import pandas module for data manipulation</span></span>
<span id="cb3-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set options for Pandas DataFrame display</span></span>
<span id="cb3-21">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells in the DataFrame</span></span>
<span id="cb3-22">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all rows in the DataFrame</span></span>
<span id="cb3-23">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display all columns in the DataFrame</span></span>
<span id="cb3-24"></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb3-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb3-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms, models</span>
<span id="cb3-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb3-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb3-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb3-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MulticlassAccuracy</span>
<span id="cb3-33"></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import miniai dependencies</span></span>
<span id="cb3-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb3-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders</span>
<span id="cb3-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.conv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> def_device</span>
<span id="cb3-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.activations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Hook, ActivationStats</span>
<span id="cb3-40"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.accel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MixedPrecision, AccelerateCB</span>
<span id="cb3-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.init <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BatchTransformCB, GeneralRelu, init_weights, set_seed, conv</span>
<span id="cb3-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.sgd <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BatchSchedCB</span>
<span id="cb3-43"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> miniai.resnet <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResBlock</span>
<span id="cb3-44"></span>
<span id="cb3-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb3-46"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_kaggle_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> save_kaggle_creds, dl_kaggle</span>
<span id="cb3-47"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files, stack_imgs</span>
<span id="cb3-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pil_to_tensor, tensor_to_pil, tensor_stats_df, get_torch_device, denorm_img_tensor</span>
<span id="cb3-49"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas</span></code></pre></div>
</section>
<section id="dataset" class="level2">
<h2 class="anchored" data-anchor-id="dataset">Dataset</h2>
<p>The dataset contains images from <a href="https://github.com/hukenovs/hagrid">HaGRID</a> (HAnd Gesture Recognition Image Dataset) modified for image classification. It has 125,912 samples for 18 distinct hand gestures and 27,823 images containing no gestures. The dataset includes a wide range of people, environmental settings, illumination, and camera placement. You can access the dataset on <a href="https://www.kaggle.com/">Kaggle</a> at the link below.</p>
<ul>
<li><p><a href="https://www.kaggle.com/datasets/innominate817/hagrid-classification-512p-no-gesture-150k">HaGRID Classification 512p no_gesture 150k</a></p></li>
<li><div>
<details>
<summary>
<strong>Reference Images</strong>
</summary>
<br>
<div style="overflow-x:auto; overflow-y: auto; max-height:500px">

<table>
<thead>
<tr>
<th>
Class
</th>
<th>
Image
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
call
</td>
<td>
<img alt="call" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/call.jpg">
</td>
</tr>
<tr>
<td>
dislike
</td>
<td>
<img alt="dislike" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/dislike.jpg">
</td>
</tr>
<tr>
<td>
fist
</td>
<td>
<img alt=" fist" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/fist.jpg">
</td>
</tr>
<tr>
<td>
four
</td>
<td>
<img alt="four" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/four.jpg">
</td>
</tr>
<tr>
<td>
like
</td>
<td>
<img alt=" like" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/like.jpg">
</td>
</tr>
<tr>
<td>
mute
</td>
<td>
<img alt=" mute" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/mute.jpg">
</td>
</tr>
<tr>
<td>
ok
</td>
<td>
<img alt=" ok" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/ok.jpg">
</td>
</tr>
<tr>
<td>
one
</td>
<td>
<img alt=" one" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/one.jpg">
</td>
</tr>
<tr>
<td>
palm
</td>
<td>
<img alt=" palm" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/palm.jpg">
</td>
</tr>
<tr>
<td>
peace
</td>
<td>
<img alt="peace" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/peace.jpg">
</td>
</tr>
<tr>
<td>
peace_inverted
</td>
<td>
<img alt="peace_inverted" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/peace_inverted.jpg">
</td>
</tr>
<tr>
<td>
rock
</td>
<td>
<img alt="rock" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/rock.jpg">
</td>
</tr>
<tr>
<td>
stop
</td>
<td>
<img alt="stop" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/stop.jpg">
</td>
</tr>
<tr>
<td>
stop_inverted
</td>
<td>
<img alt="stop_inverted" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/stop_inverted.jpg">
</td>
</tr>
<tr>
<td>
three
</td>
<td>
<img alt="three" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/three.jpg">
</td>
</tr>
<tr>
<td>
three2
</td>
<td>
<img alt="three2" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/three2.jpg">
</td>
</tr>
<tr>
<td>
two_up
</td>
<td>
<img alt=" two_up" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/two_up.jpg">
</td>
</tr>
<tr>
<td>
two_up_inverted
</td>
<td>
<img alt="two_up_inverted" src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/hagrid_samples/two_up_inverted.jpg">
</td>
</tr>
</tbody>

</table>
</div>
</details>
</div></li>
</ul>
<p>First, we set our Kaggle credentials by providing our Kaggle username and API token. We save the credentials to a file, which allows us to authenticate and download the dataset from Kaggle.</p>
<p><strong>Set Kaggle username and API token</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb4-2">key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span></code></pre></div>
<p><strong>Save Kaggle credentials to file</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">save_kaggle_creds(username, key, overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<pre class="text"><code>Empty username.</code></pre>
<p>Next, we define the directories to store the archive files and datasets and create the directories if they don‚Äôt already exist.</p>
<p><strong>Set directory paths</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb7-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/980_1TB_2/Datasets/"</span>)</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb7-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dataset Directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb7-8">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb7-10">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Archive Directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Dataset Directory: /mnt/980_1TB_2/Datasets
Archive Directory: /mnt/980_1TB_2/Datasets/../Archive</code></pre>
<p>We use the Kaggle dataset name to construct the save paths for the archive file and the extracted dataset.</p>
<p><strong>Set Kaggle dataset</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb9-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hagrid-classification-512p-no-gesture-150k'</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the Kaggle dataset name by combining the username and dataset name</span></span>
<span id="cb9-5">kaggle_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'innominate817/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb9-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb9-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Archive Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb9-12">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dataset Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Archive Path: /mnt/980_1TB_2/Datasets/../Archive/hagrid-classification-512p-no-gesture-150k.zip
Dataset Path: /mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k</code></pre>
<p>Finally, we download the Kaggle dataset and extract it to the specified directory.</p>
<p><strong>Download Kaggle dataset</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dl_kaggle(kaggle_dataset, archive_path, dataset_path)</span></code></pre></div>
<pre class="text"><code>Dataset already downloaded</code></pre>
<p>The dataset organizes the images for different gesture types into separate subfolders.</p>
<p><strong>Get image classes</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all subfolders within the dataset_path</span></span>
<span id="cb13-2">folders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [folder <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*/'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> folder.is_dir()]</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the folder names</span></span>
<span id="cb13-5">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> folders]</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the list of class names</span></span>
<span id="cb13-8">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>After obtaining the class names for the dataset, we need to get the paths for all the images in the dataset.</p>
<p><strong>Get image paths</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all image file paths from the given folders</span></span>
<span id="cb14-2">img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [get_img_files(folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> folders]</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the list of lists into a single list</span></span>
<span id="cb14-5">img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [path <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> class_paths <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_paths <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_paths]</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of image file paths</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)</span></code></pre></div>
<pre class="text"><code>153735</code></pre>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<p>I tracked the experiment using <a href="https://wandb.ai">Weights &amp; Biases</a> and initialized all training runs with the same random seed to ensure the consistency and reproducibility of the results. I then reran the experiment with a few different seed values. You can view the Weights &amp; Biases projects at the links below.</p>
<ul>
<li><a href="https://wandb.ai/millscj/miniai_data_augmentation_seed-1">miniai_data_augmentation_seed-1</a></li>
<li><a href="https://wandb.ai/millscj/miniai_data_augmentation_seed-42">miniai_data_augmentation_seed-42</a></li>
<li><a href="https://wandb.ai/millscj/miniai_data_augmentation_seed-100">miniai_data_augmentation_seed-100</a></li>
<li><a href="https://wandb.ai/millscj/miniai_data_augmentation_seed-1234">miniai_data_augmentation_seed-1234</a></li>
</ul>
<p>You can view the projects without an account, but you will need one to create new projects.</p>
<p><strong>Log in to Weights &amp; Biases</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wandb</span>
<span id="cb16-2">wandb.login()</span></code></pre></div>
<pre class="text"><code>True</code></pre>
<p><strong>Set random number seed</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed = 1</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed = 42</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed = 100</span></span>
<span id="cb18-4">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb18-5">set_seed(seed)</span></code></pre></div>
<p><strong>Set device and data type</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb19-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb19-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
<section id="image-augmentations" class="level3">
<h3 class="anchored" data-anchor-id="image-augmentations">Image Augmentations</h3>
<p>For this experiment, I tested five different image augmentations. We can visualize each one using a sample image from the dataset.</p>
<p><strong>Display sample image</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select a random image path from the list of image paths</span></span>
<span id="cb21-2">img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(img_paths)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the name of the class of the image, which is the name of the parent folder</span></span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image using the path</span></span>
<span id="cb21-8">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path)</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb21-11">sample_img</span></code></pre></div>
<pre class="text"><code>Class: stop</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_40_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The first augmentation copies a square section from a random location on the image and pastes it in a random spot. I use random patch sizes ranging from 10-20% of the image dimensions to reduce the chance of obscuring the hand gestures.</p>
<section id="random-square-copy-transform" class="level5">
<h5 class="anchored" data-anchor-id="random-square-copy-transform"><strong>Random Square Copy Transform</strong></h5>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_square_copy(img_tensor:torch.Tensor, pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb23-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Copy data from a randomly selected square region to another randomly selected square region of an image tensor.</span></span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    img_tensor (torch.Tensor): The input image tensor.</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pct (float): The percentage of the image tensor's size to be used as the side length of the square regions.</span></span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    torch.Tensor: The modified input image tensor.</span></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-12">    </span>
<span id="cb23-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the tensor</span></span>
<span id="cb23-14">    h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb23-15">    </span>
<span id="cb23-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the size of the square</span></span>
<span id="cb23-17">    szx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb23-18">    szy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-19">    </span>
<span id="cb23-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the first square</span></span>
<span id="cb23-21">    stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb23-22">    sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-23">    </span>
<span id="cb23-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the second square</span></span>
<span id="cb23-25">    stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb23-26">    sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-27">    </span>
<span id="cb23-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the data from the second square to the first square</span></span>
<span id="cb23-29">    img_tensor[..., stx1:stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx, sty1:sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor[..., stx2:stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx, sty2:sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy]</span>
<span id="cb23-30">    </span>
<span id="cb23-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the modified input img_tensor</span></span>
<span id="cb23-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor</span></code></pre></div>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandSquareCopy(nn.Module):</span>
<span id="cb24-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, min_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, max_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb24-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that applies the `rand_square_copy` function to an input tensor multiple times.</span></span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pct (float, optional): The percentage of the tensor's size to be used as the side length of </span></span>
<span id="cb24-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               the square regions.</span></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        min_num (int, optional): The minimum number of times to apply the `rand_square_copy` function.</span></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_num (int, optional): The maximum number of times to apply the `rand_square_copy` function.</span></span>
<span id="cb24-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb24-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb24-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pct</span>
<span id="cb24-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_num</span>
<span id="cb24-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_num</span>
<span id="cb24-16">        </span>
<span id="cb24-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x): </span>
<span id="cb24-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the `rand_square_copy` function to the input tensor multiple times</span></span>
<span id="cb24-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num)):</span>
<span id="cb24-20">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_square_copy(x, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,random.random()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct))</span>
<span id="cb24-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
<p><strong>Test the transform</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">rand_square_copy_tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandSquareCopy(pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, min_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the PIL image to a tensor</span></span>
<span id="cb25-4">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)</span>
<span id="cb25-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the `rand_square_copy_tf` transform to the image tensor</span></span>
<span id="cb25-8">tensor_to_pil(rand_square_copy_tf(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_46_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The second augmentation copies random pixels and pastes them in different indices. I use random amounts ranging from 0.25-1.5% of the pixels.</p>
</section>
<section id="random-pixel-copy-transform" class="level5">
<h5 class="anchored" data-anchor-id="random-pixel-copy-transform"><strong>Random Pixel Copy Transform</strong></h5>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_pixel_copy(img_tensor:torch.Tensor, pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Copy data from a randomly selected set of pixels to another randomly selected set of pixels of a image tensor.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    img_tensor (torch.Tensor): The input image tensor.</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pct (float, optional): The percentage of the total number of pixels to be selected as the source and target sets</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           of pixels.</span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    torch.Tensor: The modified input image tensor.</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb27-13">    </span>
<span id="cb27-14">    src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.dim()</span>
<span id="cb27-15">    </span>
<span id="cb27-16">    img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> img_tensor</span>
<span id="cb27-17">    </span>
<span id="cb27-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the img_tensor</span></span>
<span id="cb27-19">    b, c, h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape</span>
<span id="cb27-20">    </span>
<span id="cb27-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of pixels to be selected</span></span>
<span id="cb27-22">    num_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(img_tensor[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].numel() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pct)</span>
<span id="cb27-23">    </span>
<span id="cb27-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the source pixel indices</span></span>
<span id="cb27-25">    source_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).random_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb27-26">    source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> w</span>
<span id="cb27-27">    source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> w</span>
<span id="cb27-28">    </span>
<span id="cb27-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the target pixel indices</span></span>
<span id="cb27-30">    target_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).random_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb27-31">    target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> w</span>
<span id="cb27-32">    target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> w</span>
<span id="cb27-33">    </span>
<span id="cb27-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the indices of the channels</span></span>
<span id="cb27-35">    c_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(c).repeat(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).t()</span>
<span id="cb27-36">    </span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the pixels</span></span>
<span id="cb27-38">    source_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor[:, c_indices, source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb27-39">    img_tensor[:, c_indices, target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_pixels</span>
<span id="cb27-40">    </span>
<span id="cb27-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> img_tensor</span></code></pre></div>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandPixelCopy(nn.Module):</span>
<span id="cb28-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb28-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that applies the `rand_pixel_copy` function to an input tensor.</span></span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pct (float, optional): The maximum percentage of the tensor's pixels to be copied.</span></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb28-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb28-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pct</span>
<span id="cb28-11">        </span>
<span id="cb28-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb28-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the `rand_pixel_copy` function to the input tensor</span></span>
<span id="cb28-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rand_pixel_copy(x, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0025</span>, random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct))</span></code></pre></div>
<p><strong>Test the transform</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">rand_pixel_copy_tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandPixelCopy(pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.015</span>)</span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the PIL image to a tensor</span></span>
<span id="cb29-4">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)</span>
<span id="cb29-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the `rand_pixel_copy_tf` transform to the image tensor</span></span>
<span id="cb29-8">tensor_to_pil(rand_pixel_copy_tf(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_52_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The third combines the first two approaches by copying random squares and then applying the pixel copy transform on those squares. I use the same patch size range as the first augmentation but copy up to 100% of the pixels.</p>
</section>
<section id="random-square-pixel-copy-transform" class="level5">
<h5 class="anchored" data-anchor-id="random-square-pixel-copy-transform"><strong>Random Square Pixel Copy Transform</strong></h5>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_square_pixel_copy(img_tensor:torch.Tensor, square_pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, pixel_pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Copy data from a randomly selected set of pixels of a randomly selected square region to another randomly</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    selected square region of a tensor.</span></span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    img_tensor (torch.Tensor): The input tensor.</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    square_pct (float): The percentage of the tensor's size to be used as the side length of the square regions.</span></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pixel_pct (float): The percentage of the pixels of the source square region to be copied.</span></span>
<span id="cb31-10"></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    torch.Tensor: The modified input tensor.</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the tensor</span></span>
<span id="cb31-15">    h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb31-16">    </span>
<span id="cb31-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the size of the square</span></span>
<span id="cb31-18">    szx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(square_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb31-19">    szy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(square_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb31-20">    </span>
<span id="cb31-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the first square</span></span>
<span id="cb31-22">    stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> square_pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb31-23">    sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> square_pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb31-24">    </span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the second square</span></span>
<span id="cb31-26">    stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> square_pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb31-27">    sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> square_pct) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb31-28">    </span>
<span id="cb31-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the data from the second square to the first square</span></span>
<span id="cb31-30">    source_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy(img_tensor[..., stx2:stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx, sty2:sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy].clone(), pixel_pct)</span>
<span id="cb31-31">    img_tensor[..., stx1:stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx, sty1:sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_pixels</span>
<span id="cb31-32">    </span>
<span id="cb31-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the modified input tensor</span></span>
<span id="cb31-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor</span></code></pre></div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandSquarePixelCopy(nn.Module):</span>
<span id="cb32-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, square_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, pixel_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, min_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, max_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb32-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that applies the `rand_square_pixel_copy` function to an input tensor.</span></span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        square_pct (float, optional): The percentage of the tensor's size to be used as the side length of the</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                      square regions.</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pixel_pct (float, optional): The maximum percentage of the pixels of the source square region to be copied.</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        min_num (int, optional): The minimum number of times the `rand_square_pixel_copy` function is applied to</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                 the input tensor.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_num (int, optional): The maximum number of times the `rand_square_pixel_copy` function is applied to</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                 the input tensor.</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb32-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.square_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_pct</span>
<span id="cb32-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pixel_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pixel_pct</span>
<span id="cb32-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_num</span>
<span id="cb32-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_num</span>
<span id="cb32-20">        </span>
<span id="cb32-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb32-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the `rand_square_pixel_copy` function to the input tensor</span></span>
<span id="cb32-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num)):</span>
<span id="cb32-24">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_square_pixel_copy(x, </span>
<span id="cb32-25">                                       <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,random.random()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.square_pct), </span>
<span id="cb32-26">                                       <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0025</span>, random.random()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pixel_pct))</span>
<span id="cb32-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
<p><strong>Test the transform</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">rand_square_pixel_copy_tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandSquarePixelCopy(square_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, pixel_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, min_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-2"></span>
<span id="cb33-3">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)</span>
<span id="cb33-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb33-5"></span>
<span id="cb33-6">tensor_to_pil(rand_square_pixel_copy_tf(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_58_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I also tested the <a href="https://pytorch.org/vision/main/auto_examples/plot_transforms.html#trivialaugmentwide">TrivialAugment</a> augmentation from the paper linked below. TrivialAugment applies a single randomly selected transform to each image. I stuck with the default parameters.</p>
<ul>
<li><a href="https://arxiv.org/abs/2103.10158">TrivialAugment: Tuning-free Yet State-of-the-Art Data Augmentation</a></li>
</ul>
</section>
<section id="trivial-augmentation" class="level5">
<h5 class="anchored" data-anchor-id="trivial-augmentation"><strong>Trivial Augmentation</strong></h5>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a TrivialAugmentWide object</span></span>
<span id="cb35-2">trivial_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.TrivialAugmentWide()</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a tensor</span></span>
<span id="cb35-5">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb35-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb35-7"></span>
<span id="cb35-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the TrivialAugmentWide to the tensor</span></span>
<span id="cb35-9">tensor_to_pil(trivial_aug(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_61_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Finally, inspired by the TrivialAugment transform, I created a custom trivial augmentation that randomly applies the random square copy, random rand pixel copy, random square pixel copy, or no transform.</p>
</section>
<section id="custom-trivial-augmentation-transform" class="level5">
<h5 class="anchored" data-anchor-id="custom-trivial-augmentation-transform"><strong>Custom Trivial Augmentation Transform</strong></h5>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CustomTrivAug(nn.Module):</span>
<span id="cb37-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, aug_list):</span>
<span id="cb37-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that applies a random image augmentation.</span></span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb37-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        aug_list (list): List of functions that implement the desired augmentations.</span></span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb37-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb37-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.aug_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aug_list</span>
<span id="cb37-11">        </span>
<span id="cb37-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb37-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> random.choice(aug_list)(x)</span></code></pre></div>
<p><strong>Test the transform</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">aug_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb38-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity transformation (no augmentation applied)</span></span>
<span id="cb38-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x:x,</span>
<span id="cb38-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random square copy transformation</span></span>
<span id="cb38-5">    rand_square_copy_tf,</span>
<span id="cb38-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random pixel copy transformation</span></span>
<span id="cb38-7">    rand_pixel_copy_tf,</span>
<span id="cb38-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random square pixel copy transformation</span></span>
<span id="cb38-9">    rand_square_pixel_copy_tf</span>
<span id="cb38-10">]</span>
<span id="cb38-11"></span>
<span id="cb38-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an instance of the CustomTrivAug module</span></span>
<span id="cb38-13">custom_triv_aug_tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomTrivAug(aug_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_list)</span>
<span id="cb38-14"></span>
<span id="cb38-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert a sample image to a tensor</span></span>
<span id="cb38-16">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(sample_img)</span>
<span id="cb38-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb38-18"></span>
<span id="cb38-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply a random augmentation and convert the tensor back to an image</span></span>
<span id="cb38-20">tensor_to_pil(custom_triv_aug_tf(img_tensor))</span></code></pre></div>
<pre class="text"><code>torch.Size([3, 512, 512])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_66_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="model" class="level3">
<h3 class="anchored" data-anchor-id="model">Model</h3>
<p>I went with the pretrained <a href="https://github.com/huggingface/pytorch-image-models/blob/4b8cfa6c0a355a9b3cb2a77298b240213fb3b921/timm/models/resnet.py#L869">ResNet 18-D</a> model from the <a href="https://huggingface.co/docs/timm/index">timm library</a> for its balance of accuracy and speed.</p>
<p><strong>List available ResNet18 models</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">pd.DataFrame(timm.list_models(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet18*'</span>, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
resnet18
</td>
</tr>
<tr>
<th>
1
</th>
<td>
resnet18d
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Inspect config for ResNet18 model</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the resnet module</span></span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resnet</span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose the resnet model</span></span>
<span id="cb41-5">resnet_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet18d'</span></span>
<span id="cb41-6"></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the default configuration of the chosen model as a Pandas DataFrame</span></span>
<span id="cb41-8">pd.DataFrame.from_dict(resnet.default_cfgs[resnet_model], orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
url
</th>
<td>
https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/resnet18d_ra2-48a79e06.pth
</td>
</tr>
<tr>
<th>
num_classes
</th>
<td>
1000
</td>
</tr>
<tr>
<th>
input_size
</th>
<td>
(3, 224, 224)
</td>
</tr>
<tr>
<th>
pool_size
</th>
<td>
(7, 7)
</td>
</tr>
<tr>
<th>
crop_pct
</th>
<td>
0.875
</td>
</tr>
<tr>
<th>
interpolation
</th>
<td>
bicubic
</td>
</tr>
<tr>
<th>
mean
</th>
<td>
(0.485, 0.456, 0.406)
</td>
</tr>
<tr>
<th>
std
</th>
<td>
(0.229, 0.224, 0.225)
</td>
</tr>
<tr>
<th>
first_conv
</th>
<td>
conv1.0
</td>
</tr>
<tr>
<th>
classifier
</th>
<td>
fc
</td>
</tr>
</tbody>

</table>
</div>
<p>We first get the normalization stats used to pre-train the model. We get the mean and standard deviation values for the red, green, and blue color channels from the <code>default_cfgs</code> dictionary.</p>
<p><strong>Get normalization stats</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">norm_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet.default_cfgs[resnet_model][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>], resnet.default_cfgs[resnet_model][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>]</span>
<span id="cb42-2">norm_stats</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p>Next, we load the pretrained model and set the number of output classes for the model head. We‚Äôll also update the device and data type of the model to the ones specified earlier.</p>
<p><strong>Load ResNet18 model</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the resenet model</span></span>
<span id="cb44-2">resnet18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timm.create_model(resnet_model, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the device, data type, and name</span></span>
<span id="cb44-5">resnet18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet18.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb44-6">resnet18.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb44-7">resnet18.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet_model</span></code></pre></div>
<p><strong>Select model</strong></p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet18</span></code></pre></div>
<p><strong>Get model summary</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the input to the model</span></span>
<span id="cb46-2">test_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a summary of the model as a Pandas DataFrame</span></span>
<span id="cb46-5">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model, [test_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the summary to only contain Conv2d layers and the model</span></span>
<span id="cb46-8">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[(summary_df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (summary_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Conv2d'</span>)]</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the column "Contains Uninitialized Parameters?"</span></span>
<span id="cb46-11">summary_df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px;">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
<th>
Backward FLOPs
</th>
<th>
In size
</th>
<th>
Out size
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
ResNet
</td>
<td>
11.2 M
</td>
<td>
11.2 M
</td>
<td>
44.9 M
</td>
<td>
2.7 G
</td>
<td>
5.3 G
</td>
<td>
[1, 3, 256, 256]
</td>
<td>
[1, 19]
</td>
</tr>
<tr>
<th>
2
</th>
<td>
Conv2d
</td>
<td>
864
</td>
<td>
864
</td>
<td>
3.5 K
</td>
<td>
14.2 M
</td>
<td>
14.2 M
</td>
<td>
[1, 3, 256, 256]
</td>
<td>
[1, 32, 128, 128]
</td>
</tr>
<tr>
<th>
5
</th>
<td>
Conv2d
</td>
<td>
9.2 K
</td>
<td>
9.2 K
</td>
<td>
36.9 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 32, 128, 128]
</td>
<td>
[1, 32, 128, 128]
</td>
</tr>
<tr>
<th>
8
</th>
<td>
Conv2d
</td>
<td>
18.4 K
</td>
<td>
18.4 K
</td>
<td>
73.7 K
</td>
<td>
301 M
</td>
<td>
603 M
</td>
<td>
[1, 32, 128, 128]
</td>
<td>
[1, 64, 128, 128]
</td>
</tr>
<tr>
<th>
14
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
19
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
23
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
28
</th>
<td>
Conv2d
</td>
<td>
36.9 K
</td>
<td>
36.9 K
</td>
<td>
147 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 64, 64, 64]
</td>
</tr>
<tr>
<th>
33
</th>
<td>
Conv2d
</td>
<td>
73.7 K
</td>
<td>
73.7 K
</td>
<td>
294 K
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 64, 64, 64]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
38
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
43
</th>
<td>
Conv2d
</td>
<td>
8.2 K
</td>
<td>
8.2 K
</td>
<td>
32.8 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 64, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
46
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
51
</th>
<td>
Conv2d
</td>
<td>
147 K
</td>
<td>
147 K
</td>
<td>
589 K
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 128, 32, 32]
</td>
</tr>
<tr>
<th>
56
</th>
<td>
Conv2d
</td>
<td>
294 K
</td>
<td>
294 K
</td>
<td>
1.2 M
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 128, 32, 32]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
61
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
66
</th>
<td>
Conv2d
</td>
<td>
32.8 K
</td>
<td>
32.8 K
</td>
<td>
131 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 128, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
69
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
74
</th>
<td>
Conv2d
</td>
<td>
589 K
</td>
<td>
589 K
</td>
<td>
2.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 256, 16, 16]
</td>
</tr>
<tr>
<th>
79
</th>
<td>
Conv2d
</td>
<td>
1.2 M
</td>
<td>
1.2 M
</td>
<td>
4.7 M
</td>
<td>
75.5 M
</td>
<td>
150 M
</td>
<td>
[1, 256, 16, 16]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
84
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
89
</th>
<td>
Conv2d
</td>
<td>
131 K
</td>
<td>
131 K
</td>
<td>
524 K
</td>
<td>
8.4 M
</td>
<td>
16.8 M
</td>
<td>
[1, 256, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
92
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
<tr>
<th>
97
</th>
<td>
Conv2d
</td>
<td>
2.4 M
</td>
<td>
2.4 M
</td>
<td>
9.4 M
</td>
<td>
150 M
</td>
<td>
301 M
</td>
<td>
[1, 512, 8, 8]
</td>
<td>
[1, 512, 8, 8]
</td>
</tr>
</tbody>

</table>
</div>
</section>
<section id="dataset-preparation" class="level3">
<h3 class="anchored" data-anchor-id="dataset-preparation">Dataset Preparation</h3>
<p>I split the dataset randomly into 90% for training and 10% for validation.</p>
<p><strong>Get training and validation sets</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shuffle the image paths</span></span>
<span id="cb47-2">random.shuffle(img_paths)</span>
<span id="cb47-3"></span>
<span id="cb47-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for training</span></span>
<span id="cb47-5">train_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb47-6">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb47-7"></span>
<span id="cb47-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the index at which to split the subset of image paths into training and validation sets</span></span>
<span id="cb47-9">train_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>train_pct)</span>
<span id="cb47-10">val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(train_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>val_pct))</span>
<span id="cb47-11"></span>
<span id="cb47-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the subset of image paths into training and validation sets</span></span>
<span id="cb47-13">train_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_paths[:train_split]</span>
<span id="cb47-14">val_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_paths[train_split:]</span>
<span id="cb47-15"></span>
<span id="cb47-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb47-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_paths), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_paths)</span></code></pre></div>
<pre class="text"><code>(138361, 15374)</code></pre>
<p>The hand gestures in some images are hard to see at low resolutions, so I resized and padded the samples to <code>288x288</code> for training to balance computational efficiency and model performance.</p>
<p><strong>Set training image size</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>)</span></code></pre></div>
<p><strong>Resize Pad Transform</strong></p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ResizePad(nn.Module):</span>
<span id="cb50-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, padding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edge'</span>):</span>
<span id="cb50-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A PyTorch module that resizes an image tensor and adds padding to make it a square tensor.</span></span>
<span id="cb50-5"></span>
<span id="cb50-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb50-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_sz (int, optional): The size of the square tensor.</span></span>
<span id="cb50-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        padding_mode (str, optional): The padding mode used when adding padding to the tensor.</span></span>
<span id="cb50-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb50-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb50-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_sz</span>
<span id="cb50-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> padding_mode</span>
<span id="cb50-13">        </span>
<span id="cb50-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb50-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the width and height of the image tensor</span></span>
<span id="cb50-16">        w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.get_image_size(x)</span>
<span id="cb50-17">        </span>
<span id="cb50-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image tensor so that its minimum dimension is equal to `max_sz`</span></span>
<span id="cb50-19">        size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(w, h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(w, h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz))</span>
<span id="cb50-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.resize(x, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size)</span>
<span id="cb50-21">        </span>
<span id="cb50-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add padding to make the image tensor a square</span></span>
<span id="cb50-23">        w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.get_image_size(x)</span>
<span id="cb50-24">        offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(w, h)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb50-25">        padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, offset] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> w <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [offset, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb50-26">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.pad(x, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>padding, padding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_mode)</span>
<span id="cb50-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.resize(x, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb50-28">        </span>
<span id="cb50-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
<p><strong>Test the transform</strong></p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Source image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb51-2"></span>
<span id="cb51-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the source image</span></span>
<span id="cb51-4">w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.size</span>
<span id="cb51-5">cropped_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_img.crop([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, w, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb51-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cropped image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cropped_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb51-7"></span>
<span id="cb51-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizePad` object</span></span>
<span id="cb51-9">resize_pad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz))</span>
<span id="cb51-10"></span>
<span id="cb51-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the cropped image to a tensor</span></span>
<span id="cb51-12">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(cropped_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb51-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cropped tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb51-14"></span>
<span id="cb51-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize and pad the tensor</span></span>
<span id="cb51-16">resized_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_pad(img_tensor)</span>
<span id="cb51-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Padded tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>resized_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb51-18"></span>
<span id="cb51-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply random pixel copy to the resized and padded tensor</span></span>
<span id="cb51-20">tensor_to_pil(resized_tensor)</span></code></pre></div>
<pre class="text"><code>Source image: (512, 512)
Cropped image: (512, 256)
Cropped tensor: torch.Size([1, 3, 256, 512])
Padded tensor: torch.Size([1, 3, 288, 288])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_93_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The TrivialAugment transform requires PIL Images, so I applied all transforms per item rather than per batch for consistency.</p>
<p><strong>Set image transforms</strong></p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set transforms for training set</span></span>
<span id="cb53-2">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb53-3">    ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)),</span>
<span id="cb53-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     transforms.TrivialAugmentWide(),</span></span>
<span id="cb53-5">    transforms.ToTensor(),</span>
<span id="cb53-6">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb53-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     rand_square_copy_tf,</span></span>
<span id="cb53-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     rand_pixel_copy_tf,</span></span>
<span id="cb53-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     rand_square_pixel_copy_tf</span></span>
<span id="cb53-10">    custom_triv_aug_tf,</span>
<span id="cb53-11">]</span>
<span id="cb53-12"></span>
<span id="cb53-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set transforms for validation set</span></span>
<span id="cb53-14">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb53-15">    ResizePad(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)),</span>
<span id="cb53-16">    transforms.ToTensor(),</span>
<span id="cb53-17">    transforms.Normalize(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats),</span>
<span id="cb53-18">]</span></code></pre></div>
<p>We pass the list of transforms into a custom Dataset class along with the image paths and class names.</p>
<p><strong>Define training dataset class</strong></p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ImageDataset(Dataset):</span>
<span id="cb54-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_paths, classes, tfms):</span>
<span id="cb54-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the arguments as instance variables</span></span>
<span id="cb54-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_paths</span>
<span id="cb54-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes</span>
<span id="cb54-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms</span>
<span id="cb54-7">        </span>
<span id="cb54-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb54-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classes)}</span>
<span id="cb54-10"></span>
<span id="cb54-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb54-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the number of images in the dataset</span></span>
<span id="cb54-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_paths)</span>
<span id="cb54-14"></span>
<span id="cb54-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb54-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the path of the image at the given index</span></span>
<span id="cb54-17">        img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_paths[index]</span>
<span id="cb54-18">        </span>
<span id="cb54-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the label of the image</span></span>
<span id="cb54-20">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.class_to_idx[img_path.parent.name]</span>
<span id="cb54-21">        </span>
<span id="cb54-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image</span></span>
<span id="cb54-23">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb54-24">        </span>
<span id="cb54-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tfms(image), label</span></code></pre></div>
<p><strong>Initialize datasets</strong></p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the training dataset using the composed transformations</span></span>
<span id="cb55-2">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataset(img_paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_paths, </span>
<span id="cb55-3">                             classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names,</span>
<span id="cb55-4">                             tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.Compose(train_tfms))</span>
<span id="cb55-5"></span>
<span id="cb55-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the validation dataset</span></span>
<span id="cb55-7">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataset(img_paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_paths, </span>
<span id="cb55-8">                             classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names,</span>
<span id="cb55-9">                             tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.Compose(valid_tfms))</span>
<span id="cb55-10"></span>
<span id="cb55-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the length of the training and validation datasets</span></span>
<span id="cb55-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)</span></code></pre></div>
<pre class="text"><code>(138361, 15374)</code></pre>
<p><strong>Inspect training set sample</strong></p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">tensor_to_pil(denorm_img_tensor(train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats))</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_103_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Inspect validation set sample</strong></p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">tensor_to_pil(denorm_img_tensor(valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats))</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_105_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Set training batch size</strong></p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span></code></pre></div>
<p><strong>Initialzie dataloaders</strong></p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, </span>
<span id="cb60-2">                              batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, </span>
<span id="cb60-3">                              shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb60-4">                              num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>multiprocessing.cpu_count())</span>
<span id="cb60-5"></span>
<span id="cb60-6">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs)</span>
<span id="cb60-7"></span>
<span id="cb60-8">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_dataloader, valid_dataloader)</span>
<span id="cb60-9"></span>
<span id="cb60-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation dataloaders</span></span>
<span id="cb60-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.valid)</span></code></pre></div>
<pre class="text"><code>(4324, 481)</code></pre>
</section>
<section id="training" class="level3">
<h3 class="anchored" data-anchor-id="training">Training</h3>
<p>We can define a custom callback to integrate W&amp;B with the miniai library. The one below tracks the loss and accuracy values for the training and validation sets.</p>
<p><strong>Define training callbacks</strong></p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> WandBCB(MetricsCB):</span>
<span id="cb62-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A Callback class that integrates with the Weights and Biases (W&amp;B) platform to log training </span></span>
<span id="cb62-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and validation metrics, as well as sample figures during training.</span></span>
<span id="cb62-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb62-6">    order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb62-7">    </span>
<span id="cb62-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, config, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ms, project:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, name:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>metrics):</span>
<span id="cb62-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initialize the WandBCB class.</span></span>
<span id="cb62-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb62-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb62-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            config (dict): Configuration parameters for the W&amp;B run.</span></span>
<span id="cb62-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            ms (list): List of metrics to be logged.</span></span>
<span id="cb62-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            project (str): The name of the W&amp;B project.</span></span>
<span id="cb62-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            name (str, optional): The name of the W&amp;B run. Defaults to None.</span></span>
<span id="cb62-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            metrics (dict, optional): Additional metrics to be logged.</span></span>
<span id="cb62-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb62-19">        fc.store_attr()</span>
<span id="cb62-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb62-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb62-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ms, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>metrics)</span>
<span id="cb62-23">        </span>
<span id="cb62-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb62-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initialize the W&amp;B run.</span></span>
<span id="cb62-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb62-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb62-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            learn (miniai.learner.Learner): The miniai Learner object.</span></span>
<span id="cb62-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb62-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a name for the run is provided, use it, otherwise use the default name</span></span>
<span id="cb62-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name:</span>
<span id="cb62-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wandb.init(project<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.project, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name, config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config)</span>
<span id="cb62-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb62-35">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wandb.init(project<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.project, config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config)</span>
<span id="cb62-36">            </span>
<span id="cb62-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb62-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Finalize the W&amp;B run.</span></span>
<span id="cb62-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb62-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb62-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            learn (miniai.learner.Learner): The miniai Learner object.</span></span>
<span id="cb62-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb62-44">        wandb.finish()</span>
<span id="cb62-45"></span>
<span id="cb62-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, d):</span>
<span id="cb62-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Log the metrics to W&amp;B.</span></span>
<span id="cb62-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb62-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb62-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            d (dict): Dictionary of metrics.</span></span>
<span id="cb62-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb62-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log the metrics with a prefix of "train_" if in training mode, otherwise "val_"</span></span>
<span id="cb62-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train: </span>
<span id="cb62-55">            wandb.log({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(d[m]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_metrics})</span>
<span id="cb62-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb62-57">            wandb.log({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(d[m]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_metrics})</span>
<span id="cb62-58"></span>
<span id="cb62-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb62-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Log the loss after a batch</span></span>
<span id="cb62-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb62-63">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().after_batch(learn)</span>
<span id="cb62-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log the batch loss to W&amp;B</span></span>
<span id="cb62-65">        wandb.log({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>:learn.loss})</span>
<span id="cb62-66">        </span>
<span id="cb62-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb62-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb62-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Update the training mode flag and call the parent class's `after_epoch` method.</span></span>
<span id="cb62-70"></span>
<span id="cb62-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb62-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            learn (miniai.learner.Learner): The miniai Learner object.</span></span>
<span id="cb62-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb62-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the training mode flag</span></span>
<span id="cb62-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.training</span>
<span id="cb62-76">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().after_epoch(learn)</span></code></pre></div>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> OutOfBoundsCB(Callback):</span>
<span id="cb63-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb63-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A callback that exits the training session if the loss is not NaN or infinite.</span></span>
<span id="cb63-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb63-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, msg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss out of bounds"</span>):</span>
<span id="cb63-6">        fc.store_attr()</span>
<span id="cb63-7">        </span>
<span id="cb63-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb63-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb63-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Check if the loss is NaN or infinite.</span></span>
<span id="cb63-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb63-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> learn.loss.detach().isnan() <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> learn.loss.detach().isinf(): </span>
<span id="cb63-13">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.msg)</span>
<span id="cb63-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> CancelFitException()</span></code></pre></div>
<p><strong>Initialize callbacks</strong></p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MetricsCB(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MulticlassAccuracy())</span>
<span id="cb64-2"></span>
<span id="cb64-3">cbs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [MixedPrecision(), </span>
<span id="cb64-4">       OutOfBoundsCB(),</span>
<span id="cb64-5">       DeviceCB(), </span>
<span id="cb64-6">       metrics, </span>
<span id="cb64-7">       ProgressCB(plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb64-8">      ]</span></code></pre></div>
<p><strong>Set optimizer</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">opt_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.AdamW, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span></code></pre></div>
<p><strong>Set learning rate scheduler</strong></p>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb66-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb66-3"></span>
<span id="cb66-4">tmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train)</span>
<span id="cb66-5">sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tmax)</span>
<span id="cb66-6">cbs.append(BatchSchedCB(sched))</span></code></pre></div>
<p><strong>Configure Weights &amp; Biases project</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"miniai_data_augmentation_seed-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb67-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run_name = "baseline"</span></span>
<span id="cb67-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run_name = "rand-square-cp-1"</span></span>
<span id="cb67-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run_name = "rand-pixel-cp-1"</span></span>
<span id="cb67-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run_name = "rand-square-pixel-cp-1"</span></span>
<span id="cb67-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run_name = "trivial-aug-item-1"</span></span>
<span id="cb67-7">run_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"custom-trivial-aug-1"</span></span>
<span id="cb67-8"></span>
<span id="cb67-9">project_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>:lr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epochs'</span>:epochs}</span>
<span id="cb67-10"></span>
<span id="cb67-11">wandbcb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  WandBCB(config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>project_config, </span>
<span id="cb67-12">                   project<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>project_name,</span>
<span id="cb67-13">                   name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run_name,</span>
<span id="cb67-14">                   accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MulticlassAccuracy()</span>
<span id="cb67-15">                  )</span>
<span id="cb67-16">cbs.append(wandbcb)</span></code></pre></div>
<p><strong>Initialize learner</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainLearner(model, dls, torch.nn.functional.cross_entropy, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, cbs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbs, opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>opt_func)</span></code></pre></div>
<p><strong>Train model</strong></p>
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">learn.fit(epochs)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
accuracy
</th>
<th>
loss
</th>
<th>
epoch
</th>
<th>
train
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0.905
</td>
<td>
0.343
</td>
<td>
0
</td>
<td>
train
</td>
</tr>
<tr>
<td>
0.966
</td>
<td>
0.113
</td>
<td>
0
</td>
<td>
eval
</td>
</tr>
<tr>
<td>
0.976
</td>
<td>
0.077
</td>
<td>
1
</td>
<td>
train
</td>
</tr>
<tr>
<td>
0.989
</td>
<td>
0.038
</td>
<td>
1
</td>
<td>
eval
</td>
</tr>
<tr>
<td>
0.994
</td>
<td>
0.021
</td>
<td>
2
</td>
<td>
train
</td>
</tr>
<tr>
<td>
0.994
</td>
<td>
0.021
</td>
<td>
2
</td>
<td>
eval
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Set checkpoint directory</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb70-2">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb70-3">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb70-4"></span>
<span id="cb70-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the checkpoint path</span></span>
<span id="cb70-6">checkpoint_dir</span></code></pre></div>
<pre class="text"><code>Path('miniai_data_augmentation_seed-1234')</code></pre>
<p><strong>Save model checkpoint</strong></p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">torch.save(learn.model.state_dict(), checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span>)</span></code></pre></div>
<p><strong>Test model</strong></p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">infer_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(train_sz)</span>
<span id="cb73-2"></span>
<span id="cb73-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random image from the list of image paths</span></span>
<span id="cb73-4">img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(img_paths)</span>
<span id="cb73-5"></span>
<span id="cb73-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the actual class of the chosen image</span></span>
<span id="cb73-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb73-8"></span>
<span id="cb73-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image and resize it</span></span>
<span id="cb73-10">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path)</span>
<span id="cb73-11">inp_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(sample_img.copy(), infer_sz)</span>
<span id="cb73-12"></span>
<span id="cb73-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a tensor and move it to the device</span></span>
<span id="cb73-14">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pil_to_tensor(inp_img, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb73-15"></span>
<span id="cb73-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb73-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb73-18">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model(img_tensor)</span>
<span id="cb73-19"></span>
<span id="cb73-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the predicted class index and convert it to the class name</span></span>
<span id="cb73-21">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset.classes[torch.argmax(torch.softmax(pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb73-22"></span>
<span id="cb73-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the predicted class</span></span>
<span id="cb73-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Predicted Class: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pred_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb73-25"></span>
<span id="cb73-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb73-27">sample_img</span></code></pre></div>
<pre class="text"><code>Class: rock
Predicted Class: rock</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/output_132_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>All training runs, including the baseline no augmentation run, ended with over 99% accuracy across all random seeds.</p>
<section id="validation-set" class="level3">
<h3 class="anchored" data-anchor-id="validation-set">Validation Set</h3>
<p>The <code>TrivialAugmentWide</code> transform had the highest validation accuracy across three of four random seeds, but the scores were too close to name a definitive winner.</p>
<p><strong>Seed: 1</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/val_accuracy_seed-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Seed: 42</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/val_accuracy_seed-42.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Seed: 100</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/val_accuracy_seed-100.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Seed: 1234</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/val_accuracy_seed-1234.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="test-set" class="level3">
<h3 class="anchored" data-anchor-id="test-set">Test Set</h3>
<p>I also ended each run by testing the models without augmentation on the entire dataset. I used a minimum resolution of 288p, as I did for training but did not enforce square aspect ratios. The results were quite different from the validation sets.</p>
<p><strong>Perform inference on dataset</strong></p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a list to store the file paths of the images that were incorrectly classified</span></span>
<span id="cb75-2">wrong_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb75-3"></span>
<span id="cb75-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through the test image paths</span></span>
<span id="cb75-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(img_paths):</span>
<span id="cb75-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the actual class of the image</span></span>
<span id="cb75-7">    target_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path.parent.name</span>
<span id="cb75-8"></span>
<span id="cb75-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open and resize the image</span></span>
<span id="cb75-10">    sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path)</span>
<span id="cb75-11">    sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(sample_img, infer_sz)</span>
<span id="cb75-12"></span>
<span id="cb75-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a tensor and move it to the device</span></span>
<span id="cb75-14">    img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pil_to_tensor(sample_img, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>norm_stats).to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb75-15"></span>
<span id="cb75-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb75-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb75-18">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model(img_tensor)</span>
<span id="cb75-19"></span>
<span id="cb75-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the predicted class index and convert it to the class name</span></span>
<span id="cb75-21">    pred_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset.classes[torch.argmax(torch.softmax(pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb75-22"></span>
<span id="cb75-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the prediction is incorrect, add the file path to the list of wrong images</span></span>
<span id="cb75-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pred_cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> target_cls: </span>
<span id="cb75-25">        wrong_imgs.append(path)</span>
<span id="cb75-26"></span>
<span id="cb75-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(wrong_imgs)</span></code></pre></div>
<pre class="text"><code>251</code></pre>
<p><strong>Inspect the number of wrong predictions per class</strong></p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataFrame from the list of incorrectly classified images</span></span>
<span id="cb77-2">wrong_imgs_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(wrong_imgs)</span>
<span id="cb77-3"></span>
<span id="cb77-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a column to the DataFrame with the actual class of each image</span></span>
<span id="cb77-5">wrong_imgs_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrong_imgs_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: Path(row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).parent.stem, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb77-6"></span>
<span id="cb77-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataFrame with the class distribution of the incorrectly classified images</span></span>
<span id="cb77-8">class_dist_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrong_imgs_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span>].value_counts().to_frame().rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>:run_name})</span>
<span id="cb77-9"></span>
<span id="cb77-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the index name to "class"</span></span>
<span id="cb77-11">class_dist_df.rename_axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb77-12"></span>
<span id="cb77-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the class distribution DataFrame</span></span>
<span id="cb77-14">class_dist_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
custom-trivial-aug-1
</th>
</tr>
<tr>
<th>
class
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
peace
</th>
<td>
27
</td>
</tr>
<tr>
<th>
one
</th>
<td>
23
</td>
</tr>
<tr>
<th>
three
</th>
<td>
22
</td>
</tr>
<tr>
<th>
no_gesture
</th>
<td>
22
</td>
</tr>
<tr>
<th>
stop
</th>
<td>
19
</td>
</tr>
<tr>
<th>
four
</th>
<td>
17
</td>
</tr>
<tr>
<th>
two_up
</th>
<td>
15
</td>
</tr>
<tr>
<th>
call
</th>
<td>
15
</td>
</tr>
<tr>
<th>
stop_inverted
</th>
<td>
13
</td>
</tr>
<tr>
<th>
like
</th>
<td>
12
</td>
</tr>
<tr>
<th>
rock
</th>
<td>
12
</td>
</tr>
<tr>
<th>
fist
</th>
<td>
10
</td>
</tr>
<tr>
<th>
palm
</th>
<td>
9
</td>
</tr>
<tr>
<th>
ok
</th>
<td>
8
</td>
</tr>
<tr>
<th>
peace_inverted
</th>
<td>
7
</td>
</tr>
<tr>
<th>
two_up_inverted
</th>
<td>
6
</td>
</tr>
<tr>
<th>
mute
</th>
<td>
5
</td>
</tr>
<tr>
<th>
dislike
</th>
<td>
5
</td>
</tr>
<tr>
<th>
three2
</th>
<td>
4
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p><strong>Save DataFrame</strong></p>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">class_dist_df_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"class_dist_df-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.json"</span></span>
<span id="cb78-2">class_dist_df.to_json(class_dist_df_path)</span></code></pre></div>
<p>With this seed, the <code>TrivialAugmentWide</code> model missed the second-most number of predictions during inference, even though it had the highest validation accuracy.</p>
<p><strong>Load and concatenate DataFrames</strong></p>
<div class="sourceCode" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_class_dist_agg_df(folder, ext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'json'</span>):</span>
<span id="cb79-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of paths to `ext` files in the folder</span></span>
<span id="cb79-3">    df_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob(os.path.join(folder, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"*.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ext<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb79-4">    </span>
<span id="cb79-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that reads the class distribution data from each file in df_paths</span></span>
<span id="cb79-6">    class_dist_dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f).rename_axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df_paths)</span>
<span id="cb79-7"></span>
<span id="cb79-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the class distribution data into a single DataFrame</span></span>
<span id="cb79-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.concat(class_dist_dfs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span></code></pre></div>
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the class distribution data into a single DataFrame</span></span>
<span id="cb80-2">class_dist_agg_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_class_dist_agg_df(checkpoint_dir)</span>
<span id="cb80-3"></span>
<span id="cb80-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the sum of the class distribution data for each run</span></span>
<span id="cb80-5">sums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_dist_agg_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb80-6"></span>
<span id="cb80-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a row to the DataFrame with the totals</span></span>
<span id="cb80-8">class_dist_agg_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sums</span>
<span id="cb80-9"></span>
<span id="cb80-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing values with 0 and convert the values to integers</span></span>
<span id="cb80-11">class_dist_agg_df.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
rand-square-pixel-cp-1
</th>
<th>
baseline
</th>
<th>
rand-square-cp-1
</th>
<th>
custom-trivial-aug-1
</th>
<th>
trivial-aug-item-1
</th>
<th>
rand-pixel-cp-1
</th>
</tr>
<tr>
<th>
class
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
call
</th>
<td>
6
</td>
<td>
15
</td>
<td>
9
</td>
<td>
15
</td>
<td>
16
</td>
<td>
13
</td>
</tr>
<tr>
<th>
dislike
</th>
<td>
8
</td>
<td>
5
</td>
<td>
5
</td>
<td>
5
</td>
<td>
6
</td>
<td>
10
</td>
</tr>
<tr>
<th>
fist
</th>
<td>
11
</td>
<td>
8
</td>
<td>
9
</td>
<td>
10
</td>
<td>
13
</td>
<td>
21
</td>
</tr>
<tr>
<th>
four
</th>
<td>
25
</td>
<td>
19
</td>
<td>
15
</td>
<td>
17
</td>
<td>
22
</td>
<td>
31
</td>
</tr>
<tr>
<th>
like
</th>
<td>
18
</td>
<td>
11
</td>
<td>
15
</td>
<td>
12
</td>
<td>
19
</td>
<td>
14
</td>
</tr>
<tr>
<th>
mute
</th>
<td>
5
</td>
<td>
3
</td>
<td>
6
</td>
<td>
5
</td>
<td>
4
</td>
<td>
10
</td>
</tr>
<tr>
<th>
no_gesture
</th>
<td>
18
</td>
<td>
23
</td>
<td>
23
</td>
<td>
22
</td>
<td>
44
</td>
<td>
25
</td>
</tr>
<tr>
<th>
ok
</th>
<td>
5
</td>
<td>
15
</td>
<td>
11
</td>
<td>
8
</td>
<td>
8
</td>
<td>
7
</td>
</tr>
<tr>
<th>
one
</th>
<td>
14
</td>
<td>
22
</td>
<td>
28
</td>
<td>
23
</td>
<td>
21
</td>
<td>
19
</td>
</tr>
<tr>
<th>
palm
</th>
<td>
11
</td>
<td>
10
</td>
<td>
7
</td>
<td>
9
</td>
<td>
23
</td>
<td>
12
</td>
</tr>
<tr>
<th>
peace
</th>
<td>
20
</td>
<td>
17
</td>
<td>
26
</td>
<td>
27
</td>
<td>
24
</td>
<td>
45
</td>
</tr>
<tr>
<th>
peace_inverted
</th>
<td>
1
</td>
<td>
9
</td>
<td>
7
</td>
<td>
7
</td>
<td>
6
</td>
<td>
7
</td>
</tr>
<tr>
<th>
rock
</th>
<td>
8
</td>
<td>
8
</td>
<td>
6
</td>
<td>
12
</td>
<td>
12
</td>
<td>
6
</td>
</tr>
<tr>
<th>
stop
</th>
<td>
14
</td>
<td>
18
</td>
<td>
11
</td>
<td>
19
</td>
<td>
15
</td>
<td>
23
</td>
</tr>
<tr>
<th>
stop_inverted
</th>
<td>
6
</td>
<td>
10
</td>
<td>
10
</td>
<td>
13
</td>
<td>
12
</td>
<td>
21
</td>
</tr>
<tr>
<th>
three
</th>
<td>
20
</td>
<td>
22
</td>
<td>
31
</td>
<td>
22
</td>
<td>
37
</td>
<td>
20
</td>
</tr>
<tr>
<th>
three2
</th>
<td>
5
</td>
<td>
11
</td>
<td>
7
</td>
<td>
4
</td>
<td>
8
</td>
<td>
4
</td>
</tr>
<tr>
<th>
two_up
</th>
<td>
10
</td>
<td>
11
</td>
<td>
12
</td>
<td>
15
</td>
<td>
16
</td>
<td>
18
</td>
</tr>
<tr>
<th>
two_up_inverted
</th>
<td>
8
</td>
<td>
6
</td>
<td>
8
</td>
<td>
6
</td>
<td>
6
</td>
<td>
11
</td>
</tr>
<tr>
<th>
Total
</th>
<td>
213
</td>
<td>
243
</td>
<td>
246
</td>
<td>
251
</td>
<td>
312
</td>
<td>
317
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>Even though the TrivialAugmentWide transform seemed like the winner across the validation sets, it performed the worst overall during inference. The custom trivial augmentation transform performed the best overall, with the random square copy transform a close second.</p>
<p><strong>Compare performance across random seeds</strong></p>
<div class="sourceCode" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get project folders</span></span>
<span id="cb81-2">folder_prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> project_name.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb81-3">project_folders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.startswith(folder_prefix) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> os.path.isdir(f)]</span>
<span id="cb81-4"></span>
<span id="cb81-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class distribution data for each random seed</span></span>
<span id="cb81-6">df_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [get_class_dist_agg_df(f).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).rename(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(f.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> project_folders]</span>
<span id="cb81-7"></span>
<span id="cb81-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the class distribution data across seeds into a single DataFrame</span></span>
<span id="cb81-9">missing_imgs_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(df_list, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).transpose().sort_index()</span>
<span id="cb81-10"></span>
<span id="cb81-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the mean of the class distribution data for each run</span></span>
<span id="cb81-12">mean_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> missing_imgs_df.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).rename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean'</span>)</span>
<span id="cb81-13"></span>
<span id="cb81-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing values with 0, convert the values to integers, and sort the columns</span></span>
<span id="cb81-15">mean_vals_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_vals.to_frame().transpose().fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb81-16"></span>
<span id="cb81-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append mean values to DataFrame</span></span>
<span id="cb81-18">pd.concat([missing_imgs_df, mean_vals_df], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
custom-trivial-aug-1
</th>
<th>
rand-square-cp-1
</th>
<th>
rand-square-pixel-cp-1
</th>
<th>
baseline
</th>
<th>
rand-pixel-cp-1
</th>
<th>
trivial-aug-item-1
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
231
</td>
<td>
215
</td>
<td>
261
</td>
<td>
257
</td>
<td>
272
</td>
<td>
321
</td>
</tr>
<tr>
<th>
42
</th>
<td>
231
</td>
<td>
238
</td>
<td>
290
</td>
<td>
284
</td>
<td>
309
</td>
<td>
312
</td>
</tr>
<tr>
<th>
100
</th>
<td>
229
</td>
<td>
255
</td>
<td>
224
</td>
<td>
238
</td>
<td>
352
</td>
<td>
307
</td>
</tr>
<tr>
<th>
1234
</th>
<td>
251
</td>
<td>
246
</td>
<td>
213
</td>
<td>
243
</td>
<td>
317
</td>
<td>
312
</td>
</tr>
<tr>
<th>
Mean
</th>
<td>
235
</td>
<td>
238
</td>
<td>
247
</td>
<td>
255
</td>
<td>
312
</td>
<td>
313
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Sort runs for each random seed</strong></p>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a lambda function to sort the column names based on their values in each row and return a new DataFrame</span></span>
<span id="cb82-2">sort_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: pd.DataFrame({row.name: row.sort_values().index.tolist()}).transpose()</span>
<span id="cb82-3"></span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the lambda function to each row in the DataFrame and concatenate the results into a new DataFrame</span></span>
<span id="cb82-5">sorted_cols_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(missing_imgs_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(sort_cols, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist())</span>
<span id="cb82-6"></span>
<span id="cb82-7">sorted_cols_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
rand-square-cp-1
</td>
<td>
custom-trivial-aug-1
</td>
<td>
baseline
</td>
<td>
rand-square-pixel-cp-1
</td>
<td>
rand-pixel-cp-1
</td>
<td>
trivial-aug-item-1
</td>
</tr>
<tr>
<th>
42
</th>
<td>
custom-trivial-aug-1
</td>
<td>
rand-square-cp-1
</td>
<td>
baseline
</td>
<td>
rand-square-pixel-cp-1
</td>
<td>
rand-pixel-cp-1
</td>
<td>
trivial-aug-item-1
</td>
</tr>
<tr>
<th>
100
</th>
<td>
rand-square-pixel-cp-1
</td>
<td>
custom-trivial-aug-1
</td>
<td>
baseline
</td>
<td>
rand-square-cp-1
</td>
<td>
trivial-aug-item-1
</td>
<td>
rand-pixel-cp-1
</td>
</tr>
<tr>
<th>
1234
</th>
<td>
rand-square-pixel-cp-1
</td>
<td>
baseline
</td>
<td>
rand-square-cp-1
</td>
<td>
custom-trivial-aug-1
</td>
<td>
trivial-aug-item-1
</td>
<td>
rand-pixel-cp-1
</td>
</tr>
</tbody>

</table>
</div>
</section>
</section>
<section id="discussion" class="level2">
<h2 class="anchored" data-anchor-id="discussion">Discussion</h2>
<p>The random square copy augmentation performed consistently well throughout my initial testing and final set of experiments. I thought this one might not work well with the hand gesture dataset as it could copy or cover parts of a hand. I assumed that would be an issue if the result were too close to another gesture class.</p>
<p>The random pixel copy transform did much worse than I expected on the validation sets and during inference. I thought it would be one of the better-performing augmentations since it was unlikely to obscure a hand. I am curious if some of the training images were already so noisy that adding more was too much.</p>
<p>Given how poorly the pixel copy transform performed relative to the others, I was surprised my custom trivial augmentation transform did the best on average.</p>
<p>Something I found interesting is that the trivial augmentation models initially performed far better during inference than the others. However, it lost that lead as I cleaned up the dataset. I wonder if the more extreme augmentations included with that transform help with a dirty dataset? With the cleaned-up dataset, I believe some of the included transforms altered the images too much.</p>
<p>Looking to the future, recent improvements in fine-grained control for generative models like ControlNet for Stable Diffusion may make synthetic datasets more comparable to real-world images. I plan to explore this approach in future experiments to see if it can improve the performance of deep learning models trained on visual data.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>My findings suggest that different datasets may require different augmentation strategies, and it‚Äôs important to test multiple augmentations to find the best one for a particular dataset. In addition, factors such as the complexity and quality of the dataset and the type of deep learning model may influence the performance of image augmentations.</p>
<p>However, the square-copy transform delivered the best bang for the buck in these experiments. It is nearly tied with the custom trivial augmentation for overall performance and is simple to implement.</p>
<p>Of course, experiments with a known dataset are no substitute for real-world testing. Therefore, I encourage you to try the in-browser demos I‚Äôve provided to test the models trained with different augmentations using your webcam.</p>
<section id="live-demos" class="level5">
<h5 class="anchored" data-anchor-id="live-demos"><strong>Live Demos</strong></h5>
<table class="table">
<thead>
<tr class="header">
<th>Data Augmentation</th>
<th>Demo</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Baseline (no augmentation)</td>
<td><a href="https://cj-mills.github.io/miniai-resnet18d-baseline-demo/">https://cj-mills.github.io/miniai-resnet18d-baseline-demo/</a></td>
</tr>
<tr class="even">
<td>Random Square Copy</td>
<td><a href="https://cj-mills.github.io/miniai-resnet18d-rand-square-cp-demo/">https://cj-mills.github.io/miniai-resnet18d-rand-square-cp-demo/</a></td>
</tr>
<tr class="odd">
<td>Random Pixel Copy</td>
<td><a href="https://cj-mills.github.io/miniai-resnet18d-rand-pixel-cp-demo/">https://cj-mills.github.io/miniai-resnet18d-rand-pixel-cp-demo/</a></td>
</tr>
<tr class="even">
<td>Random Square Pixel Copy</td>
<td><a href="https://cj-mills.github.io/miniai-resnet18d-rand-square-pixel-cp-demo/">https://cj-mills.github.io/miniai-resnet18d-rand-square-pixel-cp-demo/</a></td>
</tr>
<tr class="odd">
<td>TrivialAugmentWide</td>
<td><a href="https://cj-mills.github.io/miniai-resnet18d-trivial-aug-demo/">https://cj-mills.github.io/miniai-resnet18d-trivial-aug-demo/</a></td>
</tr>
<tr class="even">
<td>Custom Trivial Augment</td>
<td><a href="https://cj-mills.github.io/miniai-resnet18d-custom-trivial-aug-demo/">https://cj-mills.github.io/miniai-resnet18d-custom-trivial-aug-demo/</a></td>
</tr>
</tbody>
</table>
<p>The models run locally in your browser using the <a href="https://docs.unity3d.com/Packages/com.unity.barracuda@3.0/manual/index.html">Barracuda</a> inference library for <a href="https://unity.com/">Unity</a>. I selected the best-performing runs for each image augmentation to give them their best shot. Let me know which one performs best for you in the comments below.</p>


</section>
</section>

 ]]></description>
  <category>miniai</category>
  <guid>christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/miniai-data-augmentation-experiments/part-1/images/img-aug-visualization-preview.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Training a Mask R-CNN Model on a Custom Dataset With IceVision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>Setup Conda Environment</li>
<li>Import Dependencies</li>
<li>Download the Dataset</li>
<li>Inspect the Dataset</li>
<li>Create Dataset Parser</li>
<li>Define DataLoader Objects</li>
<li>Finetune the Model</li>
<li>Save Model Checkpoint</li>
<li>Perform Inference with Checkpoint</li>
<li>Inspect Raw Model Output</li>
<li>Export Model to ONNX</li>
<li>Verify ONNX Inference</li>
<li>Define Post-processing Steps</li>
<li>Summary</li>
</ul>
<section id="tutorial-links" class="level2">
<h2 class="anchored" data-anchor-id="tutorial-links">Tutorial Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: Train a <a href="https://arxiv.org/abs/1703.06870">Mask R-CNN</a> model on a custom dataset using the <a href="https://airctic.com/0.11.0/">IceVision</a> library and perform inference with <a href="https://onnxruntime.ai/">ONNX Runtime</a>.</li>
<li><a href="https://github.com/cj-mills/icevision-mask-rcnn-tutorial">GitHub Repository</a></li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This tutorial shows how to train a <a href="https://arxiv.org/abs/1703.06870">Mask R-CNN</a> model on a custom dataset using the <a href="https://airctic.com/0.11.0/">IceVision</a> library. It also demonstrates how to export the trained model to the <a href="https://onnx.ai/">ONNX</a> format and perform inference using <a href="https://onnxruntime.ai/">ONNX Runtime</a>.</p>
<p>We will use a pre-existing dataset of annotated student ID card images for training. I plan to show how to create a custom dataset from scratch in a future post, including how to annotate the images and prepare them for training.</p>
<ul>
<li><strong>Dataset Source:</strong> <a href="https://github.com/MbassiJaphet/pytorch-for-information-extraction">pytorch-for-information-extraction</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/student-id-sample-annotation.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p>You can find links to view the training code and run it on <a href="https://colab.research.google.com/?utm_source=scs-index">Google Colab</a> and <a href="https://www.kaggle.com/docs/notebooks">Kaggle</a> below.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Colab</th>
<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kaggle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/icevision-mask-rcnn-tutorial/blob/main/notebooks/Icevision_Mask_RCNN_Student_ID.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/icevision-mask-rcnn-tutorial/blob/main/notebooks/Icevision_Mask_RCNN_Student_ID_Colab.ipynb">Open In Colab</a></td>
<td><a href="https://kaggle.com/kernels/welcome?src=https://github.com/cj-mills/icevision-mask-rcnn-tutorial/blob/main/notebooks/Icevision_Mask_RCNN_Student_ID_Kaggle.ipynb">Kaggle</a></td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Update <code>May 17, 2023</code>:</strong> Google Colab and Kaggle Notebooks now use an updated Python version that conflicts with this tutorial‚Äôs package versions. Please create a local conda environment to run the tutorial code.</p>
</blockquote>
</section>
<section id="setup-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="setup-conda-environment">Setup Conda Environment</h2>
<p>I recommend using a dedicated <a href="https://docs.python.org/3/tutorial/venv.html">virtual environment</a> when working with the IceVision library, as it has specific dependency requirements that can conflict with other libraries or versions. The easiest way to create a virtual environment for IceVision is using <a href="https://docs.conda.io/en/latest/">Conda</a>. Below are the steps to create a Conda environment and activate it. Be sure to follow these steps in the provided order to ensure the environment works for IceVision.</p>
<blockquote class="blockquote">
<p><strong>Important:</strong> IceVision currently only supports Linux/macOS. Try using <a href="https://docs.microsoft.com/en-us/windows/wsl/install">WSL</a> (Windows Subsystem for Linux) if training locally on Windows.</p>
</blockquote>
<p><strong>Install CUDA Toolkit</strong></p>
<p>If you plan to run the training code on your local machine, you might need to install the CUDA Toolkit. CUDA requires an Nvidia GPU, and version 11.1.0 of the toolkit is available at the link below. Google Colab and Kaggle Notebooks already have CUDA installed.</p>
<ul>
<li><a href="https://developer.nvidia.com/cuda-11.1.0-download-archive">CUDA Toolkit 11.1.0</a></li>
<li><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a></li>
</ul>
<p><strong>Conda environment setup steps</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a new conda environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> icevision python==3.8</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate icevision</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install PyTorch and torchvision</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch==1.10.0+cu111 torchvision==0.11.1+cu111 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://download.pytorch.org/whl/torch_stable.html</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install mmcv-full</span></span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install mmcv-full==1.3.17 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html</span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install mmdet</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install mmdet==2.17.0</span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install icevision</span></span>
<span id="cb1-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install icevision==0.11.0</span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install icedata</span></span>
<span id="cb1-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install icedata==0.5.1</span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install setuptools</span></span>
<span id="cb1-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install setuptools==59.5.0</span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install jupyter</span></span>
<span id="cb1-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyter</span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install onnxruntime</span></span>
<span id="cb1-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install onnxruntime</span></code></pre></div>
<p>The <a href="https://pypi.org/project/icevision/"><code>icevision</code></a> package provides the necessary functionality for data curation, data transforms, and training loops that we will use to train the model. Additionally, the <a href="https://airctic.github.io/icedata/"><code>icedata</code></a> package provides the functionality we need to create a custom parser for reading the dataset.</p>
<p><strong>Colab and Kaggle Setup Requirements</strong></p>
<p>When running the training code on Google Colab and Kaggle Notebooks, it is necessary to uninstall specific packages to avoid conflicts with IceVision and its dependencies. The platform-specific setup steps are at the top of the notebooks linked above. Follow these instructions before running the code to ensure it runs smoothly on these platforms.</p>
</section>
<section id="import-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="import-dependencies">Import Dependencies</h2>
<p>We will start by importing the IceVision library and configuring Pandas. When you import the IceVision library for the first time, it will automatically download some additional resources that it needs to function correctly.</p>
<p><strong>Import IceVision library</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import all the necessary modules from the icevision package</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> icevision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<p><strong>Import and configure Pandas</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the max column width to None</span></span>
<span id="cb3-5">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the max number of rows and columns to None</span></span>
<span id="cb3-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-9">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</section>
<section id="download-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-the-dataset">Download the Dataset</h2>
<p>The sample dataset we will use for training is available on GitHub, so all you need to do is clone the repository to access it.</p>
<p><strong>Clone dataset repository</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clone the dataset repository from GitHub</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git clone https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>MbassiJaphet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pytorch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>information<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>extraction.git</span></code></pre></div>
</section>
<section id="inspect-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="inspect-the-dataset">Inspect the Dataset</h2>
<p>After the dataset finishes downloading, you can inspect its contents by navigating to the <code>code/datasets/detection/student-id/</code> subfolder, where you will find the image and annotation files. In this step, we will get the file paths for the images and annotations and inspect one of the training images. That will give us a better understanding of the dataset and its structure.</p>
<p><strong>Define path to dataset</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the path to the dataset directory</span></span>
<span id="cb5-2">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./pytorch-for-information-extraction/code/datasets/detection/student-id'</span>)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the dataset name</span></span>
<span id="cb5-4">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_dir.name</span></code></pre></div>
<p>Each image in the dataset has a corresponding JSON file that contains its annotation data.</p>
<p><strong>Inspect dataset contents</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of the files in the dataset directory and display them using a DataFrame</span></span>
<span id="cb6-2">pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(data_dir.ls())).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.jpg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10002.jpg
</td>
</tr>
<tr>
<th>
3
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10002.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10003.jpg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get image file paths</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file paths for all the images in the dataset</span></span>
<span id="cb7-2">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(data_dir)</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count the number of files</span></span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(files)</span></code></pre></div>
<pre class="text"><code>150</code></pre>
<p><strong>Inspect one of the training images</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the PIL package</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PIL</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the first image in the dataset</span></span>
<span id="cb9-5">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb9-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb9-11">img</span></code></pre></div>
<pre class="text"><code>    Image Dims: (480, 640)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_16_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>To make it easier to work with the dataset, we will create a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image efficiently.</p>
<p><strong>Create a dictionary that maps image names to file paths</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps image names to file paths</span></span>
<span id="cb11-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> files}</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first item in the dictionary as a DataFrame</span></span>
<span id="cb11-5">pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.items())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).transpose()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
<th>
1
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
10001
</td>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.jpg
</td>
</tr>
</tbody>

</table>
</div>
<p><strong>Get list of annotation file paths</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the os and glob modules</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of the annotation file paths in the dataset directory</span></span>
<span id="cb13-2">annotation_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob(os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.json"</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the list of annotation file paths as a DataFrame</span></span>
<span id="cb13-5">pd.DataFrame(annotation_paths).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10001.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10002.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10003.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10004.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
pytorch-for-information-extraction/code/datasets/detection/student-id/10005.json
</td>
</tr>
</tbody>

</table>
</div>
<p>After getting the list of annotation file paths, we will create an annotation DataFrame that contains all of the annotation data for the dataset. This DataFrame will allow us to manipulate and query the annotations more easily.</p>
<p><strong>Create annotation dataframe</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the JSON files using Pandas and concatenate the resulting dataframes</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into a single dataframe</span></span>
<span id="cb14-3">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_paths)</span>
<span id="cb14-4">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb14-7">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-8">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that have corresponding image files</span></span>
<span id="cb14-11">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the first few rows of the dataframe</span></span>
<span id="cb14-14">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
lineColor
</th>
<th>
fillColor
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
10001
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[19.190476190476204, 244.76190476190476], [23.0, 233.33333333333331], [385.8571428571428, 132.38095238095238], [400.1428571428571, 135.23809523809524], [468.71428571428567, 353.3333333333333], [466.80952380952374, 362.85714285714283], [97.28571428571428, 478.0952380952381], [81.09523809523807, 474.2857142857143]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10001.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10002
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[21.095238095238102, 183.33333333333334], [231.41269841269843, 88.09523809523809], [450.46031746031747, 347.6190476190476], [475.06349206349205, 376.1904761904762], [478.2380952380952, 388.8888888888889], [301.25396825396825, 532.5396825396825], [271.0952380952381, 556.3492063492064], [255.22222222222223, 541.2698412698413], [242.52380952380952, 534.9206349206349], [25.85714285714286, 199.20634920634922]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10002.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10003
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[138.23809523809524, 71.42857142857143], [407.7619047619047, 31.428571428571427], [418.2380952380952, 39.047619047619044], [422.04761904761904, 539.047619047619], [407.7619047619047, 552.3809523809524], [112.52380952380952, 519.047619047619], [98.23809523809524, 505.71428571428567]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10003.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10004
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[119.20529801324503, 218.54304635761588], [440.3973509933775, 184.7682119205298], [445.0331125827814, 190.72847682119206], [391.3907284768212, 366.2251655629139], [384.7682119205298, 372.18543046357615], [250.33112582781456, 401.3245033112583], [82.11920529801324, 446.3576158940397], [76.82119205298014, 441.72185430463577], [49.66887417218544, 239.73509933774835], [107.28476821192052, 228.47682119205297]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10004.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
<tr>
<th>
10005
</th>
<td>
3.21.1
</td>
<td>
{}
</td>
<td>
[{‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[41.18840579710144, 218.8405797101449], [41.18840579710144, 209.42028985507244], [52.78260869565216, 201.44927536231882], [224.52173913043475, 142.75362318840578], [359.30434782608694, 89.85507246376811], [367.99999999999994, 92.02898550724638], [462.2028985507246, 275.3623188405797], [369.4492753623188, 348.5507246376811], [199.88405797101444, 472.463768115942], [191.91304347826082, 471.01449275362313]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}]
</td>
<td>
[0, 255, 0, 128]
</td>
<td>
[255, 0, 0, 128]
</td>
<td>
10005.jpg
</td>
<td>
</td>
<td>
640
</td>
<td>
480
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>We can retrieve the annotation data for a specific image file using its name.</p>
<p><strong>Inspect annotation data for sample image</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the file ID for the image we want to inspect</span></span>
<span id="cb15-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>].name.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the file ID</span></span>
<span id="cb15-5">file_id</span></code></pre></div>
<pre class="text"><code>'10057'</code></pre>
<p>The <code>shapes</code> entry contains the point coordinates to draw the image masks. We will also use this information to construct the associated bounding boxes. This particular entry has point coordinates for two image masks.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotation data for the specified image file</span></span>
<span id="cb17-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
10057
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
3.21.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[4.703296703296701, 186.8131868131868], [172.28571428571428, 91.20879120879121], [177.23076923076923, 89.56043956043956], [183.82417582417582, 92.85714285714285], [260.19780219780216, 161.53846153846152], [248.65934065934067, 173.07692307692307], [99.75824175824175, 273.6263736263736], [88.2197802197802, 280.7692307692308], [83.27472527472527, 280.7692307692308], [35.472527472527474, 225.82417582417582]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}, {‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[245.36263736263737, 134.06593406593407], [346.46153846153845, 100.0], [352.5054945054945, 101.64835164835165], [465.1428571428571, 248.9010989010989], [461.8461538461538, 252.1978021978022], [356.35164835164835, 300.5494505494505], [350.3076923076923, 297.8021978021978]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}, {‚Äòlabel‚Äô: ‚Äòstudent_id‚Äô, ‚Äòline_color‚Äô: None, ‚Äòfill_color‚Äô: None, ‚Äòpoints‚Äô: [[33.27472527472527, 489.010989010989], [159.64835164835165, 281.3186813186813], [166.7912087912088, 271.97802197802196], [172.28571428571428, 270.3296703296703], [297.010989010989, 330.2197802197802], [300.3076923076923, 335.16483516483515], [299.2087912087912, 340.65934065934067], [223.38461538461536, 506.5934065934066], [192.6153846153846, 571.4285714285714], [184.9230769230769, 574.1758241758241], [172.28571428571428, 569.2307692307692], [47.56043956043956, 501.0989010989011], [36.021978021978015, 496.15384615384613]], ‚Äòshape_type‚Äô: ‚Äòpolygon‚Äô, ‚Äòflags‚Äô: {}}]
</td>
</tr>
<tr>
<th>
lineColor
</th>
<td>
[0, 255, 0, 128]
</td>
</tr>
<tr>
<th>
fillColor
</th>
<td>
[255, 0, 0, 128]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
10057.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
640
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
480
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>We need a font file to annotate the images with class labels. We can download one from <a href="https://fonts.google.com/">Google Fonts</a>.</p>
<p><strong>Download font file</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the font file name</span></span>
<span id="cb18-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the font file doesn't exist, download it</span></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(font_file): </span>
<span id="cb18-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>fonts.gstatic.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>roboto<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v30<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>$font_file</span></code></pre></div>
<p><strong>Annotate sample image</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ImageDraw class from the PIL package</span></span>
<span id="cb19-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ImageDraw</span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image file</span></span>
<span id="cb20-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the dimensions of the image</span></span>
<span id="cb20-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.size</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the image to annotate</span></span>
<span id="cb20-8">annotated_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.copy()</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a blank image to store the mask</span></span>
<span id="cb20-11">mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, img.size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a drawing object for the annotated image</span></span>
<span id="cb20-14">draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the font size for the object labels</span></span>
<span id="cb20-17">fnt_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb20-18"></span>
<span id="cb20-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotation data for the specified image</span></span>
<span id="cb20-20">annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id]</span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through annotations for sample image</span></span>
<span id="cb20-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>])):</span>
<span id="cb20-24">    </span>
<span id="cb20-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract mask polygon coords</span></span>
<span id="cb20-26">    points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>][i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>])</span>
<span id="cb20-27">    </span>
<span id="cb20-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract bounding box coords</span></span>
<span id="cb20-29">    x_min, y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-30">    x_max, y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-31">    </span>
<span id="cb20-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw bounding box on sample image</span></span>
<span id="cb20-33">    shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x_min, y_min, x_max, y_max)</span>
<span id="cb20-34">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb20-35"></span>
<span id="cb20-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw segmentation mask on sample image</span></span>
<span id="cb20-37">    xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points]</span>
<span id="cb20-38">    ImageDraw.Draw(annotated_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGBA'</span>).polygon(xy, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>), outline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb20-39">    </span>
<span id="cb20-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw segmentation mask on blank image</span></span>
<span id="cb20-41">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(xy, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb20-42">    </span>
<span id="cb20-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw object label on sample image</span></span>
<span id="cb20-44">    fnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.ImageFont.truetype(font_file, fnt_size)</span>
<span id="cb20-45">    label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>][i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span>
<span id="cb20-46">    draw.multiline_text((x_min, y_min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fnt_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb20-47"></span>
<span id="cb20-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the annotated image</span></span>
<span id="cb20-49"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(annotated_img.size)</span>
<span id="cb20-50"></span>
<span id="cb20-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the annotated image</span></span>
<span id="cb20-52">annotated_img</span></code></pre></div>
<pre class="text"><code>(480, 640)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_30_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Display segmentation mask</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">mask_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_32_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We need to provide IceVision with a class map that maps index values to unique class names.</p>
<p><strong>Create a class map</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'shapes' column to 'shapes'</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb23-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the first few rows of the resulting dataframe</span></span>
<span id="cb23-6">shapes_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
label
</th>
<th>
line_color
</th>
<th>
fill_color
</th>
<th>
points
</th>
<th>
shape_type
</th>
<th>
flags
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
10001
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[19.190476190476204, 244.76190476190476], [23.0, 233.33333333333331], [385.8571428571428, 132.38095238095238], [400.1428571428571, 135.23809523809524], [468.71428571428567, 353.3333333333333], [466.80952380952374, 362.85714285714283], [97.28571428571428, 478.0952380952381], [81.09523809523807, 474.2857142857143]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10002
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[21.095238095238102, 183.33333333333334], [231.41269841269843, 88.09523809523809], [450.46031746031747, 347.6190476190476], [475.06349206349205, 376.1904761904762], [478.2380952380952, 388.8888888888889], [301.25396825396825, 532.5396825396825], [271.0952380952381, 556.3492063492064], [255.22222222222223, 541.2698412698413], [242.52380952380952, 534.9206349206349], [25.85714285714286, 199.20634920634922]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10003
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[138.23809523809524, 71.42857142857143], [407.7619047619047, 31.428571428571427], [418.2380952380952, 39.047619047619044], [422.04761904761904, 539.047619047619], [407.7619047619047, 552.3809523809524], [112.52380952380952, 519.047619047619], [98.23809523809524, 505.71428571428567]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10004
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[119.20529801324503, 218.54304635761588], [440.3973509933775, 184.7682119205298], [445.0331125827814, 190.72847682119206], [391.3907284768212, 366.2251655629139], [384.7682119205298, 372.18543046357615], [250.33112582781456, 401.3245033112583], [82.11920529801324, 446.3576158940397], [76.82119205298014, 441.72185430463577], [49.66887417218544, 239.73509933774835], [107.28476821192052, 228.47682119205297]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
<tr>
<th>
10005
</th>
<td>
student_id
</td>
<td>
None
</td>
<td>
None
</td>
<td>
[[41.18840579710144, 218.8405797101449], [41.18840579710144, 209.42028985507244], [52.78260869565216, 201.44927536231882], [224.52173913043475, 142.75362318840578], [359.30434782608694, 89.85507246376811], [367.99999999999994, 92.02898550724638], [462.2028985507246, 275.3623188405797], [369.4492753623188, 348.5507246376811], [199.88405797101444, 472.463768115942], [191.91304347826082, 471.01449275362313]]
</td>
<td>
polygon
</td>
<td>
{}
</td>
</tr>
</tbody>

</table>
</div>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list of unique labels from the 'label' column of the shapes_df dataframe</span></span>
<span id="cb24-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the list of labels</span></span>
<span id="cb24-4">labels</span></code></pre></div>
<pre class="text"><code>['student_id']</code></pre>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a ClassMap object with the list of labels</span></span>
<span id="cb26-2">class_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassMap(labels)</span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the ClassMap object</span></span>
<span id="cb26-4">class_map</span></code></pre></div>
<pre class="text"><code>&lt;ClassMap: {'background': 0, 'student_id': 1}&gt;</code></pre>
</section>
<section id="create-dataset-parser" class="level2">
<h2 class="anchored" data-anchor-id="create-dataset-parser">Create Dataset Parser</h2>
<p>To create a custom dataset parser for instance segmentation, we can use the template for an instance segmentation record and the template for an instance segmentation parser.</p>
<p><strong>View template for an instance segmentation record</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an InstanceSegmentationRecord object</span></span>
<span id="cb28-2">template_record <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InstanceSegmentationRecord()</span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the InstanceSegmentationRecord object</span></span>
<span id="cb28-4">template_record</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Image size None
    - Filepath: None
    - Img: None
    - Record ID: None
detection: 
    - Class Map: None
    - Labels: []
    - BBoxes: []
    - masks: []
    - mask_array: None</code></pre>
<p><strong>View template for an instance segmentation parser</strong></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a template record for an instance segmentation dataset using the InstanceSegmentationRecord object</span></span>
<span id="cb30-2">Parser.generate_template(template_record)</span></code></pre></div>
<pre class="text"><code>class MyParser(Parser):
    def __init__(self, template_record):
        super().__init__(template_record=template_record)
    def __iter__(self) -&gt; Any:
    def __len__(self) -&gt; int:
    def record_id(self, o: Any) -&gt; Hashable:
    def parse_fields(self, o: Any, record: BaseRecord, is_new: bool):
        record.set_img_size(&lt;ImgSize&gt;)
        record.set_filepath(&lt;Union[str, Path]&gt;)
        record.detection.set_class_map(&lt;ClassMap&gt;)
        record.detection.add_labels(&lt;Sequence[Hashable]&gt;)
        record.detection.add_bboxes(&lt;Sequence[BBox]&gt;)
        record.detection.add_masks(&lt;Sequence[Mask]&gt;)</code></pre>
<p><strong>Define custom parser class</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> StudentIDParser(Parser):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a StudentIDParser object</span></span>
<span id="cb32-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, template_record, annotations_df, img_dict, class_map):</span>
<span id="cb32-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the __init__ method of the parent class</span></span>
<span id="cb32-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(template_record<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>template_record)</span>
<span id="cb32-6">        </span>
<span id="cb32-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the instance variables to the values of the corresponding arguments</span></span>
<span id="cb32-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb32-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotations_df</span>
<span id="cb32-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.class_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_map</span>
<span id="cb32-11"></span>
<span id="cb32-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return an iterator over the rows of the DataFrame</span></span>
<span id="cb32-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb32-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df.itertuples(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> o</span>
<span id="cb32-15"></span>
<span id="cb32-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the number of rows in the DataFrame</span></span>
<span id="cb32-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb32-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df)</span>
<span id="cb32-19"></span>
<span id="cb32-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the index of the current row of the DataFrame</span></span>
<span id="cb32-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> record_id(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, o: Any) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Hashable:</span>
<span id="cb32-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> o.Index</span>
<span id="cb32-23"></span>
<span id="cb32-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image width and height</span></span>
<span id="cb32-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_width_height(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, o) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Tuple[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]:</span>
<span id="cb32-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._size[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb32-27"></span>
<span id="cb32-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the data from the DataFrame and populate the record object</span></span>
<span id="cb32-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse_fields(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, o, record, is_new):</span>
<span id="cb32-30">        </span>
<span id="cb32-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file path of the image from the img_dict dictionary</span></span>
<span id="cb32-32">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_dict[o.Index]</span>
<span id="cb32-33">        </span>
<span id="cb32-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image and get its width and height</span></span>
<span id="cb32-35">        width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>).size</span>
<span id="cb32-36">        </span>
<span id="cb32-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the image size and file path of the record object</span></span>
<span id="cb32-38">        record.set_img_size([width, height])</span>
<span id="cb32-39">        record.set_filepath(Path(filepath))</span>
<span id="cb32-40">        </span>
<span id="cb32-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the class map of the record object's detection attribute</span></span>
<span id="cb32-42">        record.detection.set_class_map(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.class_map)</span>
<span id="cb32-43">                </span>
<span id="cb32-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize empty lists for labels, bounding boxes, and masks</span></span>
<span id="cb32-45">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-46">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-47">        mask_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-48">        </span>
<span id="cb32-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over the shapes in the current row of the DataFrame</span></span>
<span id="cb32-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(o.shapes)):</span>
<span id="cb32-51">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the points of the shape</span></span>
<span id="cb32-52">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(o.shapes[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>])</span>
<span id="cb32-53"></span>
<span id="cb32-54">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the minimum and maximum x- and y-coordinates of the points</span></span>
<span id="cb32-55">            x_min, y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb32-56">            x_max, y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb32-57">            </span>
<span id="cb32-58">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the label to the labels list</span></span>
<span id="cb32-59">            labels.append(o.shapes[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>])</span>
<span id="cb32-60">            </span>
<span id="cb32-61">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a bounding box object from the coordinates and add it to the bbox_list</span></span>
<span id="cb32-62">            bbox_list.append(BBox.from_xyxy(x_min, y_min, x_max, y_max))</span>
<span id="cb32-63">            </span>
<span id="cb32-64">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mask image and draw the shape on it</span></span>
<span id="cb32-65">            mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, (width, height), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb32-66">            xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points]</span>
<span id="cb32-67">            ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(xy, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb32-68">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the mask image to a numpy array and add it to the mask_list</span></span>
<span id="cb32-69">            mask_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(mask_img).clip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-70">            mask_list.append(MaskArray(mask_array))</span>
<span id="cb32-71">        </span>
<span id="cb32-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the labels, bounding boxes, and masks to the record object</span></span>
<span id="cb32-73">        record.detection.add_labels(labels)</span>
<span id="cb32-74">        record.detection.add_bboxes(bbox_list)</span>
<span id="cb32-75">        record.detection.add_masks(mask_list)</span></code></pre></div>
<p>We can then create a parser object using the custom parser class.</p>
<p><strong>Create a custom parser object</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a StudentIDParser object</span></span>
<span id="cb33-2">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StudentIDParser(template_record, annotation_df, img_dict, class_map)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the length of the parser object, which is the number of rows in the DataFrame</span></span>
<span id="cb33-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(parser)</span></code></pre></div>
<pre class="text"><code>150</code></pre>
<p>We use the parser object to parse annotations and create records.</p>
<p><strong>Parse annotations to create records</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomSplitter object</span></span>
<span id="cb35-2">data_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomSplitter([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>])</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the RandomSplitter to split the data into training and validation sets</span></span>
<span id="cb35-5">train_records, valid_records <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse(data_splitter)</span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train_records, valid_records = parser.parse(data_splitter, cache_filepath=f'{dataset_name}-cache.pkl')</span></span></code></pre></div>
<p>Let‚Äôs save the class labels to use later during inference.</p>
<p><strong>Export class labels</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the json module</span></span>
<span id="cb36-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary containing the class labels</span></span>
<span id="cb36-5">class_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classes"</span>: parser.class_map.get_classes()}</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a file name for the class labels file</span></span>
<span id="cb36-8">class_labels_file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-classes.json"</span></span>
<span id="cb36-9"></span>
<span id="cb36-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the class labels file for writing and write the class labels to it</span></span>
<span id="cb36-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> write_file:</span>
<span id="cb36-12">    json.dump(class_labels, write_file)</span>
<span id="cb36-13">    </span>
<span id="cb36-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the class labels and file name</span></span>
<span id="cb36-15">class_labels, class_labels_file_name</span></code></pre></div>
<pre class="text"><code>({'classes': ['background', 'student_id']}, 'student-id-classes.json')</code></pre>
<p>Finally, we can inspect the training records to ensure the parser works correctly.</p>
<p><strong>Inspect training records</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first element of the train_records object</span></span>
<span id="cb38-2">train_records[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<pre class="text"><code>BaseRecord

common: 
    - Image size [640, 480]
    - Filepath: pytorch-for-information-extraction/code/datasets/detection/student-id/10115.jpg
    - Img: None
    - Record ID: 10115
detection: 
    - Class Map: &lt;ClassMap: {'background': 0, 'student_id': 1}&gt;
    - Labels: [1, 1]
    - BBoxes: [&lt;BBox (xmin:281.57142857142856, ymin:1.428571428571428, xmax:504.42857142857133, ymax:326.4285714285714)&gt;, &lt;BBox (xmin:185.1428571428571, ymin:124.28571428571428, xmax:382.99999999999994, ymax:448.57142857142856)&gt;]
    - masks: [&lt;icevision.core.mask.MaskArray object at 0x7f521f95df10&gt;, &lt;icevision.core.mask.MaskArray object at 0x7f521f95da90&gt;]
    - mask_array: None</code></pre>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the first sample of the train_records object</span></span>
<span id="cb40-2">show_record(train_records[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), display_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> )</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_51_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the second to fourth samples of the train_records list</span></span>
<span id="cb41-2">show_records(train_records[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,display_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_52_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="define-dataloader-objects" class="level2">
<h2 class="anchored" data-anchor-id="define-dataloader-objects">Define DataLoader Objects</h2>
<p>To define DataLoader objects for our task, we must first set the desired input resolution for the model.</p>
<p><strong>Define input resolution</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the image size to 512</span></span>
<span id="cb42-2">image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the presize to 1024</span></span>
<span id="cb42-5">presize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span></code></pre></div>
<p>Next, we create a list of transformations to apply to the input images, such as resizing, padding, and normalization. IceVision also applies augmentations, such as horizontal flipping, to improve model performance.</p>
<p><strong>Define Transforms</strong></p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the data transforms for the training and validation sets</span></span>
<span id="cb43-2">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tfms.A.aug_tfms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_size, presize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>presize), tfms.A.Normalize()])</span>
<span id="cb43-3">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tfms.A.resize_and_pad(image_size), tfms.A.Normalize()])</span></code></pre></div>
<p>We then get the mean and standard deviation of the dataset used to train the original model to normalize the input images.</p>
<p><strong>Get normalization stats</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the mean of the Normalize() transformation</span></span>
<span id="cb44-2">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms.A.Normalize().mean</span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the standard deviation of the Normalize() transformation</span></span>
<span id="cb44-5">std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms.A.Normalize().std</span>
<span id="cb44-6"></span>
<span id="cb44-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the mean and standard deviation</span></span>
<span id="cb44-8">mean, std</span></code></pre></div>
<pre class="text"><code>((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))</code></pre>
<p>Next, we create dataset objects for the training and validation datasets using the defined transforms and normalization stats.</p>
<p><strong>Define Datasets</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Dataset object for the training set</span></span>
<span id="cb46-2">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset(train_records, train_tfms)</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Dataset object for the validation set</span></span>
<span id="cb46-5">valid_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset(valid_records, valid_tfms)</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the Dataset objects</span></span>
<span id="cb46-8">train_ds, valid_ds</span></code></pre></div>
<pre class="text"><code>(&lt;Dataset with 120 items&gt;, &lt;Dataset with 30 items&gt;)</code></pre>
<p>We can apply the image augmentations to a sample training image to demonstrate the effects of data augmentation.</p>
<p><strong>Apply augmentations to a training sample</strong></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get three samples from the training set</span></span>
<span id="cb48-2">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [train_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the samples</span></span>
<span id="cb48-5">show_samples(samples, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_62_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Once the datasets are defined, we can specify Mask R-CNN as the model type for training and inference.</p>
<p><strong>Define model type</strong></p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model type to Mask R-CNN</span></span>
<span id="cb49-2">model_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.torchvision.mask_rcnn</span></code></pre></div>
<p><strong>Define backbone</strong></p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a ResNet50-FPN backbone for the model</span></span>
<span id="cb50-2">backbone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.backbones.resnet50_fpn()</span></code></pre></div>
<p><strong>Define batch size</strong></p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the batch size</span></span>
<span id="cb51-2">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Adjust the batch size based on the available GPU memory.</p>
</blockquote>
<p>Finally, we create DataLoader objects for the training and validation datasets using the defined batch size. We use these objects to load batches of data for training and evaluation.</p>
<p><strong>Define DataLoaders</strong></p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataLoader for the training set</span></span>
<span id="cb52-2">train_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.train_dl(train_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataLoader for the validation set</span></span>
<span id="cb52-5">valid_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.valid_dl(valid_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> Be careful when increasing the number of workers. There is a bug that significantly increases system memory usage with more workers.</p>
</blockquote>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first mini-batch from the validation set</span></span>
<span id="cb53-2">valid_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(valid_dl)</span></code></pre></div>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack the data from the first mini-batch of the validation set</span></span>
<span id="cb54-2">(valid_images, valid_labels), valid_records <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_batch</span></code></pre></div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show a mini-batch of data from the validation set</span></span>
<span id="cb55-2">model_type.show_batch(first(valid_dl), ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_74_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="finetune-the-model" class="level2">
<h2 class="anchored" data-anchor-id="finetune-the-model">Finetune the Model</h2>
<p>To finetune the Mask-RCNN model, we must first instantiate the model and define metrics to track during training.</p>
<p><strong>Instantiate the model</strong></p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Mask R-CNN model</span></span>
<span id="cb56-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.model(backbone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>backbone, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parser.class_map.num_classes)</span></code></pre></div>
<p><strong>Define metrics</strong></p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a list of metrics to evaluate the model</span></span>
<span id="cb57-2">metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [COCOMetric(metric_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>COCOMetricType.mask)]</span></code></pre></div>
<p>We can then create a Learner object to find the learning rate and handle the training loop.</p>
<p><strong>Define Learner object</strong></p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a fastai learner object to train and evaluate the Mask R-CNN model</span></span>
<span id="cb58-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.fastai.learner(dls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[train_dl, valid_dl], model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>metrics)</span></code></pre></div>
<p><strong>Find learning rate</strong></p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the learning rate finder to find a good learning rate for the Mask R-CNN model</span></span>
<span id="cb59-2">suggested_lrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.lr_find()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_82_3.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p><strong>Define learning rate</strong></p>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the optimal learning rate identified by the learning rate finder</span></span>
<span id="cb60-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> suggested_lrs.valley<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb60-3">lr</span></code></pre></div>
<pre class="text"><code>    0.00039547700725961477</code></pre>
<p><strong>Define number of epochs</strong></p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of epochs to train the Mask R-CNN model</span></span>
<span id="cb62-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span></code></pre></div>
<p>After defining the training parameters, we can finetune the model by training it on the training dataset and evaluating it on the validation dataset.</p>
<p><strong>Finetune model</strong></p>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the Mask R-CNN model</span></span>
<span id="cb63-2">learn.fine_tune(epochs, lr, freeze_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
1.526101
</td>
<td>
1.136230
</td>
<td>
0.000000
</td>
<td>
00:05
</td>
</tr>
</tbody>

</table>
</div>
<div style="overflow-x:auto; max-height:500px">

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
COCOMetric
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
1.113099
</td>
<td>
0.948657
</td>
<td>
0.000000
</td>
<td>
00:10
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.879729
</td>
<td>
0.561887
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.661906
</td>
<td>
0.404916
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
3
</td>
<td>
0.528782
</td>
<td>
0.345191
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
4
</td>
<td>
0.464688
</td>
<td>
0.352018
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
5
</td>
<td>
0.418978
</td>
<td>
0.320372
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
6
</td>
<td>
0.376626
</td>
<td>
0.295002
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
7
</td>
<td>
0.340059
</td>
<td>
0.309611
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
8
</td>
<td>
0.316866
</td>
<td>
0.267806
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
9
</td>
<td>
0.295634
</td>
<td>
0.275406
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
10
</td>
<td>
0.282974
</td>
<td>
0.263774
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
11
</td>
<td>
0.275979
</td>
<td>
0.254877
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
12
</td>
<td>
0.266656
</td>
<td>
0.237095
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
13
</td>
<td>
0.260437
</td>
<td>
0.239515
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
14
</td>
<td>
0.245464
</td>
<td>
0.222481
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
15
</td>
<td>
0.237604
</td>
<td>
0.221115
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
16
</td>
<td>
0.233022
</td>
<td>
0.245855
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
17
</td>
<td>
0.224769
</td>
<td>
0.277205
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
18
</td>
<td>
0.214686
</td>
<td>
0.242116
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
19
</td>
<td>
0.207307
</td>
<td>
0.229408
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
20
</td>
<td>
0.202318
</td>
<td>
0.217142
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
21
</td>
<td>
0.190885
</td>
<td>
0.209915
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
22
</td>
<td>
0.190565
</td>
<td>
0.202563
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
23
</td>
<td>
0.189903
</td>
<td>
0.199876
</td>
<td>
0.000000
</td>
<td>
00:09
</td>
</tr>
<tr>
<td>
24
</td>
<td>
0.186624
</td>
<td>
0.213171
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
25
</td>
<td>
0.178527
</td>
<td>
0.207296
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
26
</td>
<td>
0.179156
</td>
<td>
0.246541
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
27
</td>
<td>
0.174455
</td>
<td>
0.186960
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
28
</td>
<td>
0.162381
</td>
<td>
0.183744
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
29
</td>
<td>
0.157665
</td>
<td>
0.181943
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
30
</td>
<td>
0.152987
</td>
<td>
0.181777
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
31
</td>
<td>
0.149362
</td>
<td>
0.163883
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
32
</td>
<td>
0.143986
</td>
<td>
0.185762
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
33
</td>
<td>
0.147537
</td>
<td>
0.170019
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
34
</td>
<td>
0.139731
</td>
<td>
0.165259
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
35
</td>
<td>
0.136252
</td>
<td>
0.166419
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
36
</td>
<td>
0.134750
</td>
<td>
0.165301
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
37
</td>
<td>
0.131968
</td>
<td>
0.157560
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
38
</td>
<td>
0.129044
</td>
<td>
0.162093
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
39
</td>
<td>
0.121755
</td>
<td>
0.159642
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
40
</td>
<td>
0.118404
</td>
<td>
0.154801
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
41
</td>
<td>
0.118744
</td>
<td>
0.157296
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
42
</td>
<td>
0.113328
</td>
<td>
0.156315
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
43
</td>
<td>
0.114840
</td>
<td>
0.153378
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
44
</td>
<td>
0.113884
</td>
<td>
0.146661
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
45
</td>
<td>
0.112758
</td>
<td>
0.162629
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
46
</td>
<td>
0.110688
</td>
<td>
0.157740
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
47
</td>
<td>
0.107804
</td>
<td>
0.156558
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
48
</td>
<td>
0.104166
</td>
<td>
0.155466
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
49
</td>
<td>
0.102735
</td>
<td>
0.159387
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
50
</td>
<td>
0.100563
</td>
<td>
0.157396
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
51
</td>
<td>
0.101158
</td>
<td>
0.151178
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
52
</td>
<td>
0.100735
</td>
<td>
0.148203
</td>
<td>
0.000000
</td>
<td>
00:08
</td>
</tr>
<tr>
<td>
53
</td>
<td>
0.098154
</td>
<td>
0.165008
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
54
</td>
<td>
0.098391
</td>
<td>
0.163613
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
55
</td>
<td>
0.100913
</td>
<td>
0.161389
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
56
</td>
<td>
0.098609
</td>
<td>
0.155590
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
57
</td>
<td>
0.098285
</td>
<td>
0.154783
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
58
</td>
<td>
0.097906
</td>
<td>
0.156959
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
<tr>
<td>
59
</td>
<td>
0.097475
</td>
<td>
0.160197
</td>
<td>
0.000000
</td>
<td>
00:07
</td>
</tr>
</tbody>

</table>
</div>
<hr>
<p>Finally, we can display the results of the finetuned model on the validation set.</p>
<p><strong>Show results on validation set</strong></p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the results of the predictions on the validation set</span></span>
<span id="cb64-2">model_type.show_results(model, valid_ds, detection_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_90_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="save-model-checkpoint" class="level2">
<h2 class="anchored" data-anchor-id="save-model-checkpoint">Save Model Checkpoint</h2>
<p>We can save the trained PyTorch model and use it to finetune the model further or perform inference using IceVision in the future.</p>
<p><strong>Define model checkpoint file path</strong></p>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a path to save the trained model</span></span>
<span id="cb65-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb65-3">checkpoint_path</span></code></pre></div>
<pre class="text"><code>'student-id-MaskRCNN.pth'</code></pre>
<p><strong>Save model checkpoint</strong></p>
<div class="sourceCode" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the trained model to the specified path</span></span>
<span id="cb67-2">torch.save(model.state_dict(), checkpoint_path)</span></code></pre></div>
</section>
<section id="perform-inference-with-checkpoint" class="level2">
<h2 class="anchored" data-anchor-id="perform-inference-with-checkpoint">Perform Inference with Checkpoint</h2>
<p>We must first load the class labels and the model checkpoint to use the saved model for inference.</p>
<p><strong>Load class labels</strong></p>
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the class labels file</span></span>
<span id="cb68-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(class_labels_file_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> read_file:</span>
<span id="cb68-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the class labels from the file</span></span>
<span id="cb68-4">    classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(read_file.read())</span>
<span id="cb68-5"></span>
<span id="cb68-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the list of class labels</span></span>
<span id="cb68-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classes'</span>])</span></code></pre></div>
<pre class="text"><code>['background', 'student_id']</code></pre>
<p><strong>Load model checkpoint</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model from the checkpoint file</span></span>
<span id="cb70-2">checkpoint_and_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.model_from_checkpoint(</span>
<span id="cb70-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Path to the checkpoint file</span></span>
<span id="cb70-4">    checkpoint_path, </span>
<span id="cb70-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Name of the model class</span></span>
<span id="cb70-6">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'torchvision.mask_rcnn'</span>, </span>
<span id="cb70-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Name of the backbone to use for the model</span></span>
<span id="cb70-8">    backbone_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet50_fpn'</span>,</span>
<span id="cb70-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image size for the model</span></span>
<span id="cb70-10">    img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, </span>
<span id="cb70-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of class labels for the model</span></span>
<span id="cb70-12">    classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>classes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classes'</span>],</span>
<span id="cb70-13">)</span></code></pre></div>
<p><strong>Verify class map</strong></p>
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the class map for the model</span></span>
<span id="cb71-2">checkpoint_and_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_map"</span>]</span></code></pre></div>
<pre class="text"><code>    &lt;ClassMap: {'background': 0, 'student_id': 1}&gt;</code></pre>
<p><strong>Get model and device</strong></p>
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the trained model from the dictionary</span></span>
<span id="cb73-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_and_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>]</span>
<span id="cb73-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the inference device from the dictionary</span></span>
<span id="cb73-4">device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(model.parameters()).device</span>
<span id="cb73-5">device</span></code></pre></div>
<pre class="text"><code>device(type='cpu')</code></pre>
<p>Then, we define the inference preprocessing steps and select a test image.</p>
<p><strong>Define inference preprocessing steps</strong></p>
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the image size from the checkpoint dictionary</span></span>
<span id="cb75-2">img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_and_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img_size"</span>]</span>
<span id="cb75-3"></span>
<span id="cb75-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the validation transforms: resize and pad to match img_size, normalize</span></span>
<span id="cb75-5">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms.A.Adapter([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tfms.A.resize_and_pad(img_size), tfms.A.Normalize()])</span></code></pre></div>
<p><strong>Select a test image</strong></p>
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the 10th file in the files list</span></span>
<span id="cb76-2">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> open_img(files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>])</span>
<span id="cb76-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the test image</span></span>
<span id="cb76-4">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_106_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>We create an inference DataLoader and use it to perform inference.</p>
<p><strong>Define inference dataloader</strong></p>
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the inference transforms: normalize</span></span>
<span id="cb77-2">infer_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfms.A.Adapter([tfms.A.Normalize()])</span>
<span id="cb77-3"></span>
<span id="cb77-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an inference dataset from the test image</span></span>
<span id="cb77-5">infer_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_images([test_img], infer_tfms)</span>
<span id="cb77-6"></span>
<span id="cb77-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data loader for the inference dataset</span></span>
<span id="cb77-8">infer_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.infer_dl(infer_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<p><strong>Perform inference</strong></p>
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions on the test image using the model</span></span>
<span id="cb78-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_type.predict_from_dl(model, infer_dl, keep_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<p>Once the inference is complete, we can inspect the source image information and the model prediction.</p>
<p><strong>Inspect source image</strong></p>
<div class="sourceCode" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access the ground truth information for the first prediction</span></span>
<span id="cb79-2">preds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].ground_truth</span></code></pre></div>
<pre class="text"><code>    BaseRecord
    
    common: 
        - Record ID: 0
        - Img: 480x640x3 &lt;np.ndarray&gt; Image
        - Image size ImgSize(width=480, height=640)
    detection: 
        - Class Map: None</code></pre>
<p><strong>Inspect model prediction</strong></p>
<div class="sourceCode" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access the predicted information for the first prediction</span></span>
<span id="cb81-2">preds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].pred</span></code></pre></div>
<pre class="text"><code>    BaseRecord
    
    common: 
        - Record ID: 0
        - Img: 480x640x3 &lt;np.ndarray&gt; Image
        - Image size ImgSize(width=480, height=640)
    detection: 
        - Scores: [0.9997528 0.9996158]
        - BBoxes: [&lt;BBox (xmin:34.445037841796875, ymin:300.6217041015625, xmax:468.1103210449219, ymax:625.0744018554688)&gt;, &lt;BBox (xmin:13.5184326171875, ymin:21.899276733398438, xmax:405.33990478515625, ymax:296.6339111328125)&gt;]
        - masks: []
        - mask_array: &lt;icevision.core.mask.MaskArray object at 0x7f5115cc7280&gt;
        - Class Map: None
        - Labels: [1, 1]</code></pre>
<p>Finally, we annotate the image with the model prediction.</p>
<p><strong>Annotate image with model prediction</strong></p>
<div class="sourceCode" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the predictions for the test image</span></span>
<span id="cb83-2">show_preds(preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preds)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_116_0.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-raw-model-output" class="level2">
<h2 class="anchored" data-anchor-id="inspect-raw-model-output">Inspect Raw Model Output</h2>
<p>Next, we‚Äôll inspect the raw model output to determine the required post-processing steps when using ONNX Runtime. We first define a method to convert a PIL Image to a normalized Pytorch Tensor.</p>
<p><strong>Define method to convert a PIL Image to a Pytorch Tensor</strong></p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> img_to_tensor(img:PIL.Image, mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>], std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>]):</span>
<span id="cb84-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb84-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Converts a PIL image to a PyTorch tensor.</span></span>
<span id="cb84-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb84-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb84-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img: The input PIL image.</span></span>
<span id="cb84-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        mean: The mean values for normalization.</span></span>
<span id="cb84-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        std: The standard deviation values for normalization.</span></span>
<span id="cb84-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb84-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb84-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The normalized tensor.</span></span>
<span id="cb84-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb84-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert image to tensor</span></span>
<span id="cb84-14">    img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor(np.array(img)).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb84-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale pixels values from [0,255] to [0,1]</span></span>
<span id="cb84-16">    scaled_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().div_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb84-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare normalization tensors</span></span>
<span id="cb84-18">    mean_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(mean).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb84-19">    std_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(std).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb84-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize tensor    </span></span>
<span id="cb84-21">    normalized_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (scaled_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean_tensor) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std_tensor</span>
<span id="cb84-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch tensor</span></span>
<span id="cb84-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> normalized_tensor.unsqueeze(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p><strong>Convert image to a normalized tensor</strong></p>
<div class="sourceCode" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the test image to a tensor</span></span>
<span id="cb85-2">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_to_tensor(test_img)</span>
<span id="cb85-3"></span>
<span id="cb85-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the shape of the tensor</span></span>
<span id="cb85-5">input_tensor.shape</span></code></pre></div>
<pre class="text"><code>torch.Size([1, 3, 640, 480])</code></pre>
<p>Then, we‚Äôll inspect the raw model output and benchmark PyTorch CPU inference to compare with ONNX Runtime.</p>
<p><strong>Inspect raw model output</strong></p>
<div class="sourceCode" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions on the test image using the model</span></span>
<span id="cb87-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb87-3">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_tensor)</span>
<span id="cb87-4"></span>
<span id="cb87-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display the predictions</span></span>
<span id="cb87-6">preds</span></code></pre></div>
<pre class="text"><code>    [{'boxes': tensor([[ 34.4450, 300.6217, 468.1104, 625.0743],
              [ 13.5184,  21.8993, 405.3399, 296.6339]]),
      'labels': tensor([1, 1]),
      'scores': tensor([0.9998, 0.9996]),
      'masks': tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.],
                ...,
                [0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.],
                [0., 0., 0.,  ..., 0., 0., 0.]]],


‚Äã      
‚Äã              [[[0., 0., 0.,  ..., 0., 0., 0.],
‚Äã                [0., 0., 0.,  ..., 0., 0., 0.],
‚Äã                [0., 0., 0.,  ..., 0., 0., 0.],
‚Äã                ...,
‚Äã                [0., 0., 0.,  ..., 0., 0., 0.],
‚Äã                [0., 0., 0.,  ..., 0., 0., 0.],
‚Äã                [0., 0., 0.,  ..., 0., 0., 0.]]]])}]</code></pre>
<p>The model output stores predictions for bounding boxes, labels, confidence scores, and image masks in separate tensors.</p>
<p><strong>Benckmark PyTorch CPU inference</strong></p>
<div class="sourceCode" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb89-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measure the time it takes to make predictions on the input tensor</span></span>
<span id="cb89-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): model(input_tensor)</span></code></pre></div>
<pre class="text"><code>432 ms ¬± 845 ¬µs per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</code></pre>
</section>
<section id="export-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="export-model-to-onnx">Export Model to ONNX</h2>
<p>To export the trained model to ONNX, we first need to define an ONNX file name. Then, we can use PyTorch‚Äôs built-in conversion method to export the trained model to ONNX. We can use the exported model with other applications or frameworks that support ONNX models.</p>
<p><strong>Define ONNX file name</strong></p>
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a filename for the ONNX model</span></span>
<span id="cb91-2">onnx_file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb91-3"></span>
<span id="cb91-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the filename</span></span>
<span id="cb91-5">onnx_file_name</span></code></pre></div>
<pre class="text"><code>'student-id-MaskRCNN.onnx'</code></pre>
<p><strong>Export trained model to ONNX</strong></p>
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb93-2">torch.onnx.export(model,</span>
<span id="cb93-3">                  input_tensor,</span>
<span id="cb93-4">                  onnx_file_name,</span>
<span id="cb93-5">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb93-6">                  opset_version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb93-7">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb93-8">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb93-9">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>],</span>
<span id="cb93-10">                  dynamic_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>}}</span>
<span id="cb93-11">                 )</span></code></pre></div>
</section>
<section id="verify-onnx-inference" class="level2">
<h2 class="anchored" data-anchor-id="verify-onnx-inference">Verify ONNX Inference</h2>
<p>To verify ONNX inference, we first need to import ONNX Runtime.</p>
<p><strong>Import ONNX Runtime</strong></p>
<div class="sourceCode" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the onnxruntime library</span></span>
<span id="cb94-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort</span></code></pre></div>
<p>Then, we can get the available ONNX Runtime <a href="https://onnxruntime.ai/docs/execution-providers/">execution providers</a> and select one to use. We did not install any additional execution providers, so only the default CPU provider is available.</p>
<p><strong>Get available ONNX Runtime execution providers</strong></p>
<div class="sourceCode" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of available providers for onnxruntime</span></span>
<span id="cb95-2">available_providers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.get_available_providers()</span>
<span id="cb95-3"></span>
<span id="cb95-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the available providers</span></span>
<span id="cb95-5">available_providers</span></code></pre></div>
<pre class="text"><code>['CPUExecutionProvider']</code></pre>
<p><strong>Select execution provider</strong></p>
<div class="sourceCode" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the first available provider for onnxruntime</span></span>
<span id="cb97-2">providers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [available_providers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb97-3"></span>
<span id="cb97-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the selected provider</span></span>
<span id="cb97-5">providers</span></code></pre></div>
<pre class="text"><code>['CPUExecutionProvider']</code></pre>
<p>We initialize an inference session with the selected execution provider and perform inference using the ONNX model.</p>
<p><strong>Initialize inference session with selected execution provider</strong></p>
<div class="sourceCode" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an inference session for the ONNX model</span></span>
<span id="cb99-2">ort_sess <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_name, providers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>providers)</span></code></pre></div>
<p><strong>Perform inference using ONNX model</strong></p>
<div class="sourceCode" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions on the input tensor using the ONNX model</span></span>
<span id="cb100-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort_sess.run(output_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, input_feed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>:input_tensor.numpy()})</span>
<span id="cb100-3"></span>
<span id="cb100-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the predictions</span></span>
<span id="cb100-5">outputs</span></code></pre></div>
<pre class="text"><code>    [array([[ 34.445053, 300.62167 , 468.11035 , 625.07434 ],
            [ 13.518433,  21.899261, 405.33997 , 296.6339  ]], dtype=float32),
     array([1, 1], dtype=int64),
     array([0.9997528, 0.9996158], dtype=float32),
     array([[[[0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              ...,
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.]]],


‚Äã     
‚Äã            [[[0., 0., 0., ..., 0., 0., 0.],
‚Äã              [0., 0., 0., ..., 0., 0., 0.],
‚Äã              [0., 0., 0., ..., 0., 0., 0.],
‚Äã              ...,
‚Äã              [0., 0., 0., ..., 0., 0., 0.],
‚Äã              [0., 0., 0., ..., 0., 0., 0.],
‚Äã              [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32)]</code></pre>
<p>Finally, we benchmark the ONNX Runtime CPU inference speed to measure its performance.</p>
<p><strong>Benchmark ONNX Runtime CPU inference speed</strong></p>
<div class="sourceCode" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb102-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measure the time it takes to make predictions on the input tensor</span></span>
<span id="cb102-3">ort_sess.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: input_tensor.numpy()})</span></code></pre></div>
<pre class="text"><code>320 ms ¬± 1.25 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</code></pre>
</section>
<section id="define-post-processing-steps" class="level2">
<h2 class="anchored" data-anchor-id="define-post-processing-steps">Define Post-processing Steps</h2>
<p>The Mask R-CNN model includes the object detection post-processing steps internally. However, there are a few extra steps to annotate the input image with the model predictions.</p>
<p>The predicted image masks have values in the range [0,1], representing shades of gray from black to white. To use them to annotate the input image, we need to binarize the masks by applying a threshold value to convert them to either 0 or 1.</p>
<p>We can convert the binarized masks to RGBA images, which allows us to paste them on top of the input image to show the predicted object locations and segmentations. That provides a visual representation of the model‚Äôs predictions.</p>
<p><strong>Define annotation values</strong></p>
<div class="sourceCode" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the mask threshold</span></span>
<span id="cb104-2">mask_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb104-3"></span>
<span id="cb104-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the mask color</span></span>
<span id="cb104-5">mask_rgba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]</span></code></pre></div>
<p><strong>Annotate sample image</strong></p>
<div class="sourceCode" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the test image</span></span>
<span id="cb105-2">annotated_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_img.copy()</span>
<span id="cb105-3"></span>
<span id="cb105-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to RGBA format</span></span>
<span id="cb105-5">annotated_img.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGBA'</span>)</span>
<span id="cb105-6"></span>
<span id="cb105-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a drawing context for the image</span></span>
<span id="cb105-8">draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_img)</span>
<span id="cb105-9"></span>
<span id="cb105-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the font size for the labels</span></span>
<span id="cb105-11">fnt_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb105-12"></span>
<span id="cb105-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through annotations for sample image</span></span>
<span id="cb105-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])):</span>
<span id="cb105-15">    </span>
<span id="cb105-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract mask array</span></span>
<span id="cb105-17">    mask_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb105-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Binarize mask values</span></span>
<span id="cb105-19">    mask_array[mask_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mask_threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb105-20">    mask_array[mask_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> mask_threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb105-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale mask values</span></span>
<span id="cb105-22">    mask_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb105-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask from 1-channel to 4-channel</span></span>
<span id="cb105-24">    mask_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(mask_array[:, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb105-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update mask color</span></span>
<span id="cb105-26">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb105-27">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb105-28">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb105-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update mask transparency</span></span>
<span id="cb105-30">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb105-31">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb105-32">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_rgba[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb105-33">    mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][mask_array[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb105-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask array to PIL image</span></span>
<span id="cb105-35">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.fromarray(mask_array.astype(np.uint8)).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGBA'</span>)</span>
<span id="cb105-36">    </span>
<span id="cb105-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw segmentation mask on sample image</span></span>
<span id="cb105-38">    annotated_img.paste(mask_img, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask_img)</span>
<span id="cb105-39">    </span>
<span id="cb105-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw bounding box on sample image</span></span>
<span id="cb105-41">    shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i])</span>
<span id="cb105-42">    draw.rectangle(shape, outline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb105-43">    </span>
<span id="cb105-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw object label on sample image</span></span>
<span id="cb105-45">    fnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.ImageFont.truetype(font_file, fnt_size)</span>
<span id="cb105-46">    label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_map.get_classes()[outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i]]</span>
<span id="cb105-47">    draw.multiline_text((shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fnt_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fnt, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb105-48">    </span>
<span id="cb105-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the size of the annotated image</span></span>
<span id="cb105-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(annotated_img.size)</span>
<span id="cb105-51"></span>
<span id="cb105-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb105-53">annotated_img</span></code></pre></div>
<pre class="text"><code>(480, 640)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/output_144_1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This tutorial demonstrated how to train a Mask R-CNN model on a custom dataset using the IceVision library. We showed how to create a custom dataset parser, train the model, and evaluate its performance. Additionally, we explained how to export the trained model to the ONNX format and perform inference using ONNX Runtime. You can follow the steps outlined in this tutorial to train a Mask R-CNN model on your custom dataset and use it for multiple applications.</p>
<p><strong>Project Resources:</strong> <a href="https://github.com/cj-mills/icevision-mask-rcnn-tutorial">GitHub Repository</a></p>


</section>

 ]]></description>
  <category>icevision</category>
  <category>mask-rcnn</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/index.html</guid>
  <pubDate>Fri, 02 Dec 2022 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/posts/icevision-mask-rcnn-tutorial/part-1/images/student-id-sample-annotation.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Testing Intel‚Äôs Arc A770 GPU for Deep Learning Pt. 1</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/arc-a770-testing/part-1/index.html</link>
  <description><![CDATA[ 



<ul>
<li>Overview</li>
<li>OpenVINO Inference</li>
<li>ONNX-DirectML Inference</li>
<li>PyTorch-DirectML Training</li>
</ul>
<section id="series-links" class="level2">
<h2 class="anchored" data-anchor-id="series-links">Series Links</h2>
<ul>
<li><a href="../part-1/">Part 1</a>: I tested inference performance with OpenVINO and DirectML on the A770 and attempted to train models using PyTorch-DirectML.</li>
<li><a href="../part-2/">Part 2</a>: I trained image classification models with Intel‚Äôs PyTorch extension on the Arc A770 GPU.</li>
<li><a href="../part-3/">Part 3</a>: I trained style transfer models and ran Stable Diffusion 2.1 using ü§ó Diffusers with Intel‚Äôs PyTorch extension on the Arc A770.</li>
<li><a href="../../intel-pytorch-extension-tutorial/native-ubuntu/">Getting Started with Intel‚Äôs PyTorch Extension for Arc GPUs on Ubuntu</a>: This tutorial provides a step-by-step guide to setting up Intel‚Äôs PyTorch extension on Ubuntu to train models with Arc GPUs</li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Last week, I received an Arc A770 GPU from Intel as part of their Graphics Innovator program. I am primarily interested in the card for its deep-learning performance, so I tested it with some of my tutorial projects and attempted to train some models using the <a href="https://pypi.org/project/pytorch-directml/">pytorch-directml</a> package.</p>
<p><strong>Desktop Specs:</strong></p>
<table class="table">
<thead>
<tr class="header">
<th>OS</th>
<th>CPU</th>
<th>Memory</th>
<th>GPU Driver</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Windows 10 Pro 21H2</td>
<td>i7-11700K</td>
<td>32 GB DDR4 3000MHz</td>
<td><a href="https://www.intel.com/content/www/us/en/download/726609/intel-arc-graphics-windows-dch-driver.html">31.0.101.3490</a></td>
</tr>
</tbody>
</table>
<p><strong>Library Versions:</strong></p>
<table class="table">
<thead>
<tr class="header">
<th>OpenVINO</th>
<th>ONNX-DirectML</th>
<th>pytorch-directml</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">2022.1 and 2022.2</a></td>
<td><a href="https://www.nuget.org/packages/Microsoft.ML.OnnxRuntime.DirectML/1.12.1">1.12.1</a></td>
<td><a href="https://pypi.org/project/pytorch-directml/">1.8.0a0.dev220506</a></td>
</tr>
</tbody>
</table>
</section>
<section id="openvino-inference" class="level2">
<h2 class="anchored" data-anchor-id="openvino-inference">OpenVINO Inference</h2>
<p>I first tested the card‚Äôs performance in the Unity project from my <a href="../../icevision-openvino-unity-tutorial/part-1/">End-to-End Object Detection for Unity With IceVision and OpenVINO</a> tutorial. The project uses OpenVINO 2022.1, and I noticed an odd sensitivity to input resolution when using FP16 precision.</p>
<p>I use a default resolution of 398x224 (for a 16:9 aspect ratio), which translates to a 384x224 (divisible by 32) input resolution for the YOLOX tiny model. At this resolution, the model detects the same hand gestures with the Arc card as the CPU. However, the confidence scores are much lower, and the bounding box dimensions are slightly different (but still usable).</p>
<section id="cpu-fp16" class="level5">
<h5 class="anchored" data-anchor-id="cpu-fp16"><strong>CPU (FP16)</strong></h5>
<ul>
<li><strong>Objects Detected:</strong> Call 78.54%, No Gesture 83.2%</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/cpu_unity-openvino-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="a770-fp16" class="level5">
<h5 class="anchored" data-anchor-id="a770-fp16"><strong>A770 (FP16)</strong></h5>
<ul>
<li><strong>Objects Detected:</strong> Call 23.25%, No Gesture 40.86%</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-openvino-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Moving to a higher resolution brought inconsistent improvements in accuracy and occasional crashes. The below sample is with an input resolution of <code>896x512</code> at FP16 precision.</p>
<p><strong>Objects Detected:</strong> Call 78.06%</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-openvino-yolox_896x512.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I later updated OpenVINO to the recent 2022.2 release, which resolved this issue.</p>
<p><strong>Objects Detected:</strong> Call 78.55%, No Gesture 83.23%</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-openvino-2022-2-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="onnx-directml-inference" class="level2">
<h2 class="anchored" data-anchor-id="onnx-directml-inference">ONNX-DirectML Inference</h2>
<p>I used the project from my <a href="../../onnx-directml-unity-tutorial/part-1/">Object Detection for Unity With ONNX Runtime and DirectML</a> tutorial to compare the inference speeds between the A770 and my Titan RTX. This project uses the same YOLOX tiny model and input resolution as the OpenVINO one but in FP32 precision.</p>
<p>The Titan RTX, essentially a 2080 Ti, hit around 145fps, while the A770 hovered around 120fps.</p>
<section id="a770" class="level5">
<h5 class="anchored" data-anchor-id="a770"><strong>A770</strong></h5>
<p><strong>Objects Detected:</strong> Call 78.64%, No Gesture 83.35%</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_unity-onnx-directml-yolox_384x224.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="pytorch-directml-training" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-directml-training">PyTorch-DirectML Training</h2>
<p>As far as I know, the only way to train models at the time of writing on an Arc card is with the <a href="https://pypi.org/project/pytorch-directml/">pytorch-directml</a> package (or <a href="https://pypi.org/project/tensorflow-directml/">tensorflow-directml</a> package).</p>
<p>To test this, I set up a conda environment in <a href="https://learn.microsoft.com/en-us/windows/wsl/about">WSL</a> with the pytorch-directml package and downloaded the <a href="https://github.com/microsoft/DirectML/tree/master/PyTorch">sample repo</a> provided by Microsoft. The pytorch-directml package requires python 3.8, and the sample repo uses torchvision 0.9.0.</p>
<p>I successfully trained a ResNet50 model on <a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10</a> with the sample training script. GPU memory usage was volatile when using a batch size higher than 4. The ResNet50 training script used less than 3.6 GB of GPU memory at a batch size of 4.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/arc-a770-testing/part-1/images/arc_a770_pytorch-dml-resnet50-resource-usage-bs-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>However, it spikes to using all 16 GB at a batch size of 8 and crashes the script. I was able to train at a batch size of 6, but barely.</p>
<p>I then attempted to train the style transfer model included with the <a href="https://github.com/pytorch/examples">pytorch examples repo</a> and hit the wall of unimplemented operators. Here is the <a href="https://github.com/microsoft/DirectML/wiki/PyTorch-DirectML-Operator-Roadmap">PyTorch DirectML Operator Roadmap</a>. Some of the missing operators are on the current roadmap, but not all of them.</p>
<p>The tensorflow-directml package recently received its first update since May, so hopefully, the PyTorch version will receive an update soon. I have no idea when the main PyTorch and TensorFlow libraries will gain support for Intel GPUs, but hopefully, that is not too far off either.</p>


</section>

 ]]></description>
  <category>directml</category>
  <category>openvino</category>
  <category>pytorch</category>
  <category>unity</category>
  <category>arc-gpu</category>
  <guid>christianjmills.com/posts/arc-a770-testing/part-1/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
